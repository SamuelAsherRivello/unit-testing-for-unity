WEBVTT

00:00.050 --> 00:02.900
Vamos falar sobre as duplas de teste aqui.

00:02.910 --> 00:03.970
Vou dar uma visão geral.

00:03.980 --> 00:07.940
Vamos começar falando sobre alguns tipos de testes unitários.

00:07.940 --> 00:12.020
Esta é uma forma muito ampla e abstrata de analisar seus testes unitários.

00:12.230 --> 00:13.460
Vou lê-lo aqui.

00:13.580 --> 00:21.260
Um teste de unidade pode ser considerado solitário, onde o sistema sob teste não tem dependências,

00:21.290 --> 00:26.990
ou sociável, em que o sistema em teste de fato tem dependências.

00:27.140 --> 00:34.220
Algo solitário é um pouco mais puro, se você se lembrar da lição sobre funções puras, enquanto algo

00:34.220 --> 00:36.200
é sociável é mais impuro.

00:36.230 --> 00:37.220
Vamos dar uma olhada nisso.

00:37.220 --> 00:44.150
Neste diagrama aqui, imagine que temos algum código de produção e queremos colocar alguns testes unitários solitários

00:44.150 --> 00:47.780
neles agora porque o solitário não tem dependências.

00:47.810 --> 00:55.150
Observe que nosso primeiro teste vai diretamente para uma e somente uma classe dentro do código de produção.

00:55.160 --> 01:01.970
E temos outro teste solitário que testa algo apenas em outra classe específica.

01:01.970 --> 01:06.080
Essa seria mais uma abordagem solitária, mais uma abordagem pura.

01:06.080 --> 01:10.280
Agora vamos comparar isso com um teste de unidade sociável que vemos abaixo.

01:10.310 --> 01:16.760
Um teste sociável pode testar um sistema que, por si só, depende de 1 ou 2 outros sistemas.

01:16.760 --> 01:22.670
Portanto, aqui estamos testando algo de nível um pouco mais alto, mas reconhecendo que isso será dependente

01:22.670 --> 01:24.770
de alguns outros sistemas.

01:24.770 --> 01:26.560
Portanto, ele tem algumas dependências.

01:26.570 --> 01:30.010
Agora só vou dar um pouco de $0.02 aqui.

01:30.030 --> 01:31.520
É um pouco de opinião.

01:31.730 --> 01:36.620
Se você fizer testes sociáveis, pode acabar tendo menos testes.

01:36.620 --> 01:42.800
Mas esses testes estão testando conceitos de nível mais alto com mais suposições e dependências.

01:43.250 --> 01:49.550
Ao passo que, se fizermos testes unitários solitários, você pode ter um volume maior de testes porque está testando

01:49.550 --> 01:51.500
mais sistemas individuais.

01:52.080 --> 01:58.650
Provavelmente, se você estiver buscando ter mais testes solitários também, acabará fazendo mais refatorações,

01:58.650 --> 02:02.250
porque provavelmente o nosso código de produção é baseado por padrão.

02:02.250 --> 02:08.280
Como desenvolvedores de unidades, penso em mais dependências, mais operações entre sistemas.

02:08.280 --> 02:15.060
Portanto, se você começar a passar de testes sociáveis, que provavelmente são mais fáceis de fazer em sua base de código existente

02:15.060 --> 02:20.520
e quiser passar para os testes solitários, você poderá refatorar os seus sistemas para que eles

02:20.520 --> 02:22.070
operem de forma mais independente.

02:22.080 --> 02:24.530
Agora vamos falar sobre o que são duplas de teste.

02:24.540 --> 02:29.610
Portanto, um dublê de teste é um objeto que pode substituir qualquer objeto real.

02:29.640 --> 02:35.610
Isso pode ajudar a aumentar a pureza dos testes unitários, tornando-os mais solitários.

02:35.610 --> 02:42.330
Como nossa imagem sugere, um teste duplo é algo como um gêmeo de uma classe de produção existente.

02:42.330 --> 02:44.610
E qual é a semelhança entre esses dois gêmeos?

02:44.610 --> 02:48.540
Bem, isso depende muito do tipo de teste duplo que estamos implementando.

02:48.660 --> 02:50.130
Há toda uma gama.

02:50.130 --> 02:51.510
Agora vou percorrer esta tabela.

02:51.510 --> 02:53.910
Aqui estão alguns dos tipos de duplas de teste.

02:53.910 --> 03:00.330
De modo geral, no topo dessa lista está um objeto mais burro que faz menos coisas, e no

03:00.330 --> 03:03.780
na parte inferior está um objeto mais completo que faz mais coisas.

03:03.930 --> 03:10.440
Dependendo do teste em questão, você pode descobrir que um desses, qualquer um dos

03:10.440 --> 03:12.180
é a melhor solução.

03:12.210 --> 03:17.610
O objetivo não é necessariamente tentar sempre o mock ou o fake.

03:17.640 --> 03:22.050
Cada um deles tem uma função aqui e, dependendo do que você estiver fazendo, poderá encontrar algum valor.

03:22.410 --> 03:29.220
Portanto, um dummy está passando um valor nulo ou um objeto burro que faz pouco ou nada.

03:29.220 --> 03:33.570
E isso é usado para compilação, mas nunca é de fato chamado.

03:33.570 --> 03:38.250
Então, imagine que você tem uma classe que precisa ter alguma coisa no construtor e então você quer chamar

03:38.250 --> 03:40.950
um método dessa classe para o teste.

03:40.980 --> 03:46.020
Desde que o método que você está chamando não dependa realmente do que você passou no construtor,

03:46.050 --> 03:52.740
não há problema em passar um valor nulo ou qualquer que seja o mínimo necessário para a compilação.

03:52.740 --> 03:59.130
Você poderia pensar nisso como se estivesse colocando apenas o suficiente para fazer a compilação e depois testando as partes

03:59.130 --> 04:00.230
que ainda funcionam.

04:00.240 --> 04:03.930
Este tem o menor poder ou influência sobre o teste.

04:03.960 --> 04:05.670
De fato, não tem nenhum.

04:05.670 --> 04:07.560
Em seguida, há a ideia de "stubbing".

04:07.560 --> 04:13.410
Em geral, na vida, a ideia de "stubbing" é colocar algo temporário que sirva apenas para o propósito.

04:13.410 --> 04:15.180
É daí que vem o termo stub.

04:15.180 --> 04:19.260
Portanto, aqui estamos fornecendo dados falsos para o sistema em teste.

04:19.290 --> 04:22.290
Isso é para compilação como o dummy.

04:22.290 --> 04:26.550
Mas também está relacionado ao que você está realmente chamando e testando.

04:26.850 --> 04:32.550
Mas a ideia, mais uma vez, é colocar a quantidade mínima e conseguir obter os resultados que você deseja.

04:32.580 --> 04:37.050
E voltando aos conceitos de testes solitários.

04:37.050 --> 04:44.400
Se o seu sistema tiver uma dependência de um segundo sistema e você quiser testá-lo, você pode inserir um sistema fictício

04:44.400 --> 04:46.590
ou um stub para esse segundo sistema.

04:46.590 --> 04:53.760
Dessa forma, o seu sistema primário ainda espera e recebe o que precisa, mas você não está necessariamente colocando

04:53.760 --> 04:57.540
o código de produção codificado para essa segunda dependência.

04:57.540 --> 04:59.550
E veremos isso nos exemplos de codificação.

04:59.790 --> 05:01.670
O próximo é um espião.

05:01.710 --> 05:06.420
Portanto, um espião registra como o sistema em teste está sendo usado.

05:06.450 --> 05:12.840
Portanto, aqui você está testando se um determinado método é chamado em retorno de algo, algo com um pouco mais de

05:12.840 --> 05:14.730
poder e influência sobre o teste.

05:14.730 --> 05:17.550
Continuando, aqui estão os valores de zombaria.

05:17.550 --> 05:22.560
Portanto, aqui você está definindo o sistema em teste e o que ele retorna.

05:22.560 --> 05:24.300
Portanto, isso tem uma potência maior.

05:24.300 --> 05:28.950
E isso está definindo não apenas se um método retorna, mas o que ele retorna.

05:28.950 --> 05:37.980
E, por fim, o baking é quando você adiciona uma implementação completa de não produção e tem controle total para fazer

05:37.980 --> 05:39.180
o que quer que você precise.

05:39.210 --> 05:45.630
Assim, você pode ver aqui, resumidamente, que tem uma seleção de menu do tipo de menor potência, mais rápido, mais barato

05:45.630 --> 05:50.700
opções na parte superior e mais potentes, mais poderosas no final.

05:50.700 --> 05:55.620
Aqui está um trecho de código de uma seção anterior desta mesma lição.

05:55.620 --> 06:03.570
E estamos vendo que estamos passando quando criamos essa instância do meu sistema também, estamos criando

06:03.570 --> 06:06.540
o construtor e estamos passando um valor multiplicador.

06:06.840 --> 06:12.150
Então, quando chamamos o valor de conversão, imagine que estamos fazendo um teste de unidade no valor de conversão.

06:12.180 --> 06:18.990
Temos essa entrada indireta porque o valor de conversão depende não apenas do argumento do valor que

06:18.990 --> 06:21.900
estamos passando, mas de outra coisa.

06:21.900 --> 06:26.220
E consideraríamos isso como não puro ou impuro.

06:26.220 --> 06:28.860
E isso não é necessariamente um problema.

06:28.860 --> 06:33.270
Mas reconhecemos que isso não é tão determinístico quanto poderia ser.

06:33.270 --> 06:37.470
Também há uma dependência do valor do multiplicador.

06:38.320 --> 06:41.170
Agora, você certamente poderia fazer o teste unitário como está.

06:41.200 --> 06:44.680
E quando examinarmos o código, veremos que podemos fazer exatamente isso.

06:44.710 --> 06:47.650
Poderíamos operar um teste padrão bem em cima disso.

06:47.650 --> 06:50.590
Mas vamos considerar o tipo de refatoração que poderíamos fazer aqui.

06:50.590 --> 06:54.940
Então, aqui está uma nova classe destinada a melhorar o que acabamos de ver.

06:55.270 --> 07:03.280
Agora, aqui estou de fato passando algo para o construtor, mas, em vez disso, estou passando não apenas

07:03.280 --> 07:07.120
um valor, mas uma interface que contém esse valor.

07:07.150 --> 07:10.030
Agora, este é um exemplo muito simples.

07:10.060 --> 07:16.900
Não necessariamente resolve todos os desafios, mas neste pequeno passo de bebê, conforme vamos aprendendo mais,

07:16.900 --> 07:20.530
aprenderemos por que uma interface é mais útil aqui.

07:21.460 --> 07:26.790
Mais uma vez, aqui em baixo, no valor de conversão, vamos utilizar a classe de conversão.

07:26.800 --> 07:33.340
Estamos transferindo parte da responsabilidade de forma a introduzir um pouco mais de indireção

07:33.340 --> 07:35.950
funcionalidade, um pouco mais de dependência.

07:35.950 --> 07:40.780
Mas veremos novamente que, por se tratar de uma interface, poderemos brincar com algo

07:40.780 --> 07:43.780
aqui usando uma das bibliotecas disponíveis para nós.

07:43.780 --> 07:45.850
Então, vamos ver como isso pode nos ajudar.

07:45.850 --> 07:53.860
Então, aqui no verde, vamos usar uma biblioteca que nos ajudará a criar algumas das duplas de teste

07:54.220 --> 07:55.450
neste caso.

07:55.450 --> 07:58.110
Bem, que tipo de teste duplo estamos criando.

07:58.120 --> 08:02.620
Bem, a linguagem da biblioteca substituta final que estamos usando.

08:02.620 --> 08:07.180
E essa dependência do substituto final está incluída no projeto de exemplo para você.

08:07.180 --> 08:09.550
E vamos dar uma olhada no código de exemplo.

08:10.240 --> 08:19.120
O que o substituto final pode fazer por nós é substituir o ponto por e podemos criar um novo teste duplo com base em

08:19.120 --> 08:20.350
o conversor I.

08:20.530 --> 08:27.130
Então, aqui em verde, no mundo do teste, sem afetar nenhum código de produção, podemos

08:27.130 --> 08:32.580
definir exatamente o que o teste duplo do conversor deve fazer para nós.

08:32.590 --> 08:39.670
Assim, porque aqui mesmo, em verde, podemos controlar e simular completamente o comportamento que desejamos.

08:39.700 --> 08:44.230
Estamos reduzindo as dependências do código de produção.

08:44.530 --> 08:49.540
Estamos movendo a dependência aqui para o código somente de teste.

08:49.540 --> 08:50.950
E isso é muito útil.

08:50.950 --> 08:56.470
Quanto mais você adotar esses tipos de conceitos, mais o seu código de produção será flexível o suficiente.

08:56.470 --> 08:59.230
Nesse caso, flexível o suficiente significa interfaces.

08:59.230 --> 09:01.120
Mas há outras maneiras de vender isso.

09:01.450 --> 09:09.910
Ter flexibilidade suficiente para que nossos testes possam simular um stub falso simulado, mais do que precisamos,

09:09.910 --> 09:10.840
melhor.

09:11.170 --> 09:13.540
Então, o que fazemos é passar o conversor.

09:13.540 --> 09:19.750
Assim, comparando com o exemplo anterior, não estamos passando o valor do multiplicador de 20.

09:19.780 --> 09:28.420
Estamos transmitindo um teste duplo simulado com stubbed que podemos controlar mais intimamente aqui.

09:28.600 --> 09:33.910
Então, agora que sabemos que na segunda linha aqui está escrito converter converter converter valor.

09:33.940 --> 09:35.940
Há uma linguagem específica.

09:35.940 --> 09:41.530
Parece um pouco estranho se você não estiver familiarizado com ela, mas eu incluo links para a documentação sobre isso.

09:41.560 --> 09:50.470
O que estamos dizendo é que se chamarmos o convert value e passarmos qualquer argumento do tipo int, que é o que

09:50.470 --> 09:56.080
ele precisa, ele sempre retornará o valor vezes o multiplicador.

09:56.380 --> 09:57.670
Efetivamente.

09:57.700 --> 10:00.790
Somos como uma fiação quente no resultado.

10:00.790 --> 10:07.030
Esperamos a implementação que esperamos sem ter de criar nossas próprias classes de teste.

10:07.060 --> 10:11.530
Classes fictícias, classes falsas, acho que é a melhor palavra.

10:12.070 --> 10:17.230
E aqui embaixo, em azul, chamamos o mesmo sistema antigo de valor de conversão de ponto.

10:17.410 --> 10:25.630
Agora, olhando para isso entre o verde e o azul, podemos ver o suficiente para fazer a suposição

10:25.630 --> 10:31.510
que o nosso resultado será igual a 30 porque toda a implementação está bem aqui.

10:31.600 --> 10:37.840
Portanto, o azul está realmente testando uma quantidade mínima de funcionalidade.

10:38.230 --> 10:42.610
Pode-se até argumentar que ele não está testando nenhuma funcionalidade no próprio sistema.

10:42.790 --> 10:47.920
Mas, novamente, estamos brincando com isso e com um exemplo propositalmente simples que mostra uma simulação.

10:48.190 --> 10:55.090
Se o valor convertido estivesse fazendo um pouco mais, poderíamos influenciar parte, mas não toda a

10:55.090 --> 10:57.970
sua implementação usando o que é mostrado em verde aqui.

10:57.970 --> 11:04.060
Mas lembre-se de que aqui estamos brincando com a ideia de transitar entre o puro e o impuro, e entre

11:04.060 --> 11:09.730
testes solitários e sociáveis, e o benefício de poder examinar essas bibliotecas que nos ajudam a

11:09.730 --> 11:17.560
a fazer testes duplos é que podemos fazer mais em nossos testes unitários sem necessariamente ter de refatorar

11:17.560 --> 11:18.850
nosso código de produção.

11:18.850 --> 11:25.870
Mas acho que, à medida que você usa o desenvolvimento orientado a testes e também os testes unitários em geral, testar o código existente

11:25.870 --> 11:31.690
e estiver aberto para refatorar seu código de produção se e quando for necessário.

11:31.720 --> 11:39.340
Essas são ótimas ferramentas que você pode usar ao longo dessa jornada, então você pode ver que, ao reduzir a complexidade

11:39.340 --> 11:43.960
e as dependências em seu código de produção, obtemos um código mais testável por unidade.

11:43.960 --> 11:50.320
Mas mesmo que você não tenha feito isso, temos algumas bibliotecas aqui que podem nos ajudar a fazer melhores tipos de teste

11:50.320 --> 11:50.860
duplicação.

11:50.860 --> 11:52.420
Isso nos dá mais algumas opções.
