WEBVTT

00:00.320 --> 00:03.950
Olá e bem-vindo ao teste de unidade para Unity Workshops.

00:03.950 --> 00:06.800
E aqui vamos dar uma olhada no carregamento de cenas.

00:06.800 --> 00:12.860
Tradicionalmente, quando pensamos em testes unitários, pensamos em testar a menor unidade de código com o

00:12.860 --> 00:15.530
menos linhas e menos dependências.

00:15.530 --> 00:21.530
Portanto, no extremo oposto desse espectro de simplicidade, temos a complexidade.

00:21.530 --> 00:27.710
E um dos objetos fundamentais importantes dentro da unidade é a própria cena.

00:28.220 --> 00:35.150
Tudo o que você vê como jogador em uma experiência de jogo está dentro de uma cena.

00:35.150 --> 00:39.950
Portanto, podemos testar a unidade de scripts individuais ou elementos dentro de uma cena.

00:39.950 --> 00:44.210
Ou, como vamos mostrar aqui, podemos testar a cena inteira.

00:44.210 --> 00:45.710
Por que poderíamos fazer isso?

00:45.710 --> 00:48.110
Em primeiro lugar, é um bom teste de fumaça.

00:48.140 --> 00:53.630
Uma maneira simples de ver se a cena foi carregada e se foi carregada sem exceções.

00:53.630 --> 00:54.980
Só isso já vale a pena.

00:54.980 --> 00:56.690
Vamos pensar nas coisas que podemos fazer.

00:56.720 --> 01:00.770
Poderíamos fazer suposições sobre a estrutura da cena e quais objetos estão dentro dela.

01:00.770 --> 01:04.340
Podemos fazer suposições sobre os comportamentos das coisas nessa cena.

01:04.340 --> 01:11.210
E um fluxo de trabalho que eu acho muito legal é que você pode deixar esses testes para trás e deixar que os não-programadores

01:11.210 --> 01:15.590
da sua equipe executem os testes antes e depois de fazer o trabalho deles.

01:15.590 --> 01:21.590
Talvez um designer de níveis possa trabalhar com mais confiança, sabendo que os novos níveis adicionados não

01:21.590 --> 01:25.490
quebrar nenhuma cena existente ou revisões de níveis existentes.

01:25.490 --> 01:31.450
Também não quebre nenhuma das cenas e a sua equipe de arte pode ter certeza de que, se for substituir alguma

01:31.460 --> 01:37.400
ativos ou adicionar novos ativos, do ponto de vista do programador, nada foi quebrado.

01:37.400 --> 01:39.200
Então, como seria esse fluxo de trabalho?

01:39.200 --> 01:45.680
Bem, vou mostrar aqui um exemplo de como criar um teste de modo de reprodução e carregar uma cena inteira em

01:45.680 --> 01:49.070
esse teste de modo de reprodução e fazer algumas suposições sobre ele usando asserções.

01:49.070 --> 01:56.030
Por exemplo, você poderia carregar uma cena e, na cena de introdução, verificar se o menu está sendo exibido corretamente.

01:56.030 --> 01:57.620
Estamos em uma cena de jogo.

01:57.650 --> 02:03.080
Certifique-se de que o elemento de fundo, o herói e todos os inimigos tenham sido instanciados no momento adequado.

02:03.080 --> 02:03.470
momento adequado.

02:03.470 --> 02:08.900
Agora, como estamos abrindo a porta para a grande complexidade possível em uma determinada cena, pode ser que

02:08.900 --> 02:15.380
parecer muito grande que você queira testar tudo em uma cena, mas, novamente, acho que até mesmo uma pessoa muito

02:15.380 --> 02:22.490
teste conservador que apenas carrega a cena e garante que um ou dois elementos-chave estejam lá, sem exceções.

02:22.490 --> 02:27.400
O Thrown é uma fruta fantástica e fácil de pendurar que agregará valor à sua equipe.

02:27.410 --> 02:28.580
Vamos dar uma olhada no interior.

02:28.580 --> 02:29.240
Unidade.

02:29.510 --> 02:31.910
Aqui estamos dentro do projeto de amostra do núcleo.

02:31.940 --> 02:33.440
Agora na janela do executor de teste.

02:33.440 --> 02:35.450
Aqui temos muitas categorias diferentes.

02:35.450 --> 02:42.140
Tenho o carregamento de cena selecionado e você pode ver que temos alguns testes de editor e tempo de execução.

02:42.140 --> 02:48.380
Porque as cenas e as coisas que estou escolhendo para testar aqui estão relacionadas com o comportamento típico do tempo de execução

02:48.380 --> 02:50.240
da unidade Monobehaviours.

02:50.240 --> 02:54.470
Por exemplo, vou me concentrar apenas no teste de tempo de execução, o teste do modo de reprodução.

02:54.470 --> 02:56.470
Então, vou desativar o teste do modo de edição.

02:56.480 --> 02:58.220
Vamos dar uma olhada no que temos aqui.

02:58.220 --> 03:04.970
Então, o que vamos fazer é, toda vez que executarmos esse teste específico, verificar se

03:04.970 --> 03:12.500
a cena de introdução tem um herói dentro dela que simula o personagem principal do jogo, que a cena de introdução

03:12.500 --> 03:15.020
carrega sem nenhuma exceção lançada.

03:15.260 --> 03:17.720
E depois repetiremos isso para a cena do jogo.

03:17.930 --> 03:23.480
Você poderia imaginar que teria um teste que poderia testar todas as suas cenas de forma sistemática.

03:23.480 --> 03:30.950
O que eu escolhi fazer aqui foi estruturar um teste para cada uma das funcionalidades que queremos, um

03:30.950 --> 03:36.770
para o herói, um para as exceções, e fazer isso para cada uma das cenas, tudo em um único teste

03:36.770 --> 03:37.310
estrutura.

03:37.310 --> 03:40.610
Mas você pode decidir como aumentar a escala, dependendo do que você e a sua equipe quiserem fazer.

03:40.640 --> 03:41.840
Deixe-me executar esses testes.

03:41.840 --> 03:42.920
Tudo passa aqui.

03:42.920 --> 03:44.690
Você pode ver que temos algum tráfego de console.

03:44.690 --> 03:45.920
Vamos dar uma olhada no código-fonte.

03:45.920 --> 03:50.990
Portanto, neste teste, estou dizendo que a introdução da cena um, que é o nome de uma das cenas no

03:50.990 --> 03:57.710
vamos assumir que o herói não é nulo quando a cena é carregada, ao contrário de alguns dos nossos menores

03:57.710 --> 04:01.280
testes unitários, carregando a cena e fazendo isso bem e de forma agradável.

04:01.280 --> 04:02.540
Temos um bom fluxo de trabalho aqui.

04:02.540 --> 04:06.140
Isso envolve alguma configuração, então vamos falar sobre o que é a configuração.

04:06.140 --> 04:09.380
A primeira coisa que farei é ouvir o gerenciador de cena para ver.

04:09.380 --> 04:14.840
Ei, a cena que eu quero carregar já foi carregada, então eu vou carregar a cena aqui.

04:14.840 --> 04:21.830
Criei uma variável estática para os nomes das cenas, para que seja mais fácil para mim isolar e

04:21.830 --> 04:23.360
atualizá-los se for necessário.

04:23.390 --> 04:26.090
Em seguida, vou me sentar aqui e esperar enquanto a cena é carregada.

04:26.090 --> 04:31.580
Isso garante que eu não assuma ou afirme nada sobre isso até que a cena seja carregada.

04:31.580 --> 04:33.020
Isso acontece muito rapidamente.

04:33.020 --> 04:37.640
Então, aqui eu poderei fazer qualquer introspecção na cena.

04:37.670 --> 04:43.700
Uma coisa muito poderosa que posso fazer é examinar toda a cena depois de carregada e procurar por qualquer

04:43.700 --> 04:45.320
existência de um determinado script.

04:45.320 --> 04:52.730
Se eu tivesse um prefab chamado hero ou um script de herói individual nessa cena, isso retornaria um valor.

04:52.730 --> 04:57.020
Eu também poderia obter uma lista de todos os heróis ou de todos os inimigos.

04:57.020 --> 04:59.840
Se eu tiver vários, posso iterar sobre eles e...

04:59.940 --> 05:01.670
E realizar qualquer teste que eu quiser.

05:01.680 --> 05:03.960
Estou fazendo um teste propositalmente enxuto aqui.

05:03.990 --> 05:06.780
Tudo o que faço é me certificar de que o herói não é nulo.

05:06.810 --> 05:14.100
Se, por exemplo, um artista ou um designer de níveis acidentalmente excluiu o herói em uma determinada cena, isso

05:14.100 --> 05:14.730
falharia.

05:14.730 --> 05:17.680
E foi um bom teste apenas para garantir que os elementos estão lá.

05:17.700 --> 05:23.550
Você pode imaginar que um sistema dentro da unidade pode ser bastante complexo e suas cenas podem ser bastante complexas

05:23.550 --> 05:24.000
também.

05:24.030 --> 05:26.820
Você pode ter centenas ou até milhares de objetos.

05:26.820 --> 05:33.060
Talvez você não queira necessariamente fazer uma asserção para cada um deles, mas dependendo de como você

05:33.060 --> 05:38.460
organizar sua cena, talvez seja possível verificar algumas coisas simples como o plano de fundo, a interface do usuário,

05:38.490 --> 05:45.360
o herói e uma lista de inimigos, que é um teste fácil de executar, bastando adicionar algumas linhas aqui e

05:45.360 --> 05:50.340
então você terá mais confiança de que, à medida que você e sua equipe trabalharem no código e fizerem commits na sua versão

05:50.340 --> 05:53.790
que ninguém está quebrando algo acidentalmente.

05:53.790 --> 06:00.630
Lembre-se, o que você está fazendo agora é reproduzir a cena ou todas as cenas e fazer

06:00.630 --> 06:05.780
se você não detecta visualmente que algo está faltando ou quebrado aqui.

06:05.790 --> 06:07.930
Ser automatizado é muito, muito mais suave.

06:07.950 --> 06:09.290
Vamos dar uma olhada nos outros testes.

06:09.300 --> 06:16.080
Temos um teste aqui que carrega a cena e, em seguida, verifica se ele não lança nenhuma exceção.

06:17.110 --> 06:20.960
Em seguida, repetimos os mesmos dois testes para todas as outras cenas.

06:20.980 --> 06:25.630
Agora, vamos dar uma olhada na parte superior da cena de teste e ver algumas das configurações adicionais que são

06:25.660 --> 06:26.230
necessárias.

06:26.260 --> 06:32.410
Uma coisa é que, como estamos carregando cenas com código, elas precisam existir nas configurações de compilação da unidade.

06:32.410 --> 06:35.530
Isso é verdade tanto na produção quanto nos testes.

06:35.560 --> 06:41.110
Agora, você e sua equipe podem simplesmente garantir que ele seja sempre atualizado e fazer isso manualmente dentro do

06:41.110 --> 06:41.950
unity editor.

06:41.950 --> 06:44.950
Vamos dar uma olhada em como faríamos isso agora aqui dentro do unity.

06:44.980 --> 06:46.840
Você vai para File Build Settings.

06:46.840 --> 06:50.020
E aqui em cima está a lista de todas as cenas que você precisa.

06:50.050 --> 06:53.710
Agora, se você esquecer de adicionar uma delas, o teste falhará.

06:53.710 --> 06:59.380
Portanto, em vez de exigir que nos lembremos desse passo específico, o que não tem problema se a sua equipe quiser fazer

06:59.380 --> 07:04.030
isso, estou automatizando isso e adicionando dinamicamente as cenas que queremos adicionar.

07:04.060 --> 07:10.990
Portanto, a maneira de fazer isso é usar algumas interfaces existentes que o unity disponibiliza aqui para quando

07:10.990 --> 07:13.930
a compilação está sendo configurada e quando a compilação está sendo limpa.

07:13.960 --> 07:18.550
Esses são diferentes de alguns dos atributos que vimos em testes anteriores, mas não vou entrar no assunto

07:18.550 --> 07:19.720
a complexidade aqui.

07:19.720 --> 07:25.960
Mas saiba que na configuração, o que estou fazendo é adicionar nossas duas cenas de teste às configurações de compilação.

07:26.290 --> 07:32.020
E aqui embaixo, na limpeza, estou revertendo ou removendo as duas que foram adicionadas.

07:32.230 --> 07:35.890
Há muitas maneiras diferentes de organizar isso, mas você pode dar uma olhada no código-fonte

07:35.890 --> 07:37.520
e ver se há algo mais que você queira fazer lá.

07:37.540 --> 07:44.800
Aqui no teste, estou assumindo que posso chamar o load scene em qualquer uma das cenas testáveis

07:44.800 --> 07:46.150
e estamos prontos para ir.

07:46.150 --> 07:47.110
Então é isso.

07:47.140 --> 07:52.660
É muito fácil de configurar e, se você construir a partir do que é dado aqui no projeto de exemplo, você terá

07:52.660 --> 07:57.750
terá sucesso rápido ao testar suas cenas para a produção do jogo.

07:57.760 --> 07:58.660
Obrigado.
