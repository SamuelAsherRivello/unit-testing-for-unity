WEBVTT

00:00.080 --> 00:00.300
Hi.

00:00.320 --> 00:06.050
Isso cobre muitos dos diferentes tópicos que eu queria ter no workshop até agora, mas ainda há

00:06.050 --> 00:08.570
muito espaço para mais tópicos no futuro.

00:08.570 --> 00:10.940
O que vimos nos workshops abordados até agora.

00:10.940 --> 00:17.930
Este é o exemplo mais simples de aprendizado do test runner, vendo como podemos fazer testes no modo playmode, testes no modo edit,

00:17.960 --> 00:23.420
aprendendo um pouco sobre as diferenças entre o modo de reprodução e o modo de edição, e por que você gostaria de testar

00:23.420 --> 00:25.930
em um ou outro, ou em ambos.

00:25.940 --> 00:32.060
Depois, vimos também algumas das opções que temos quando temos uma funcionalidade assíncrona ou quando estamos

00:32.060 --> 00:34.040
dependentes de outros sistemas.

00:34.040 --> 00:38.540
O que poderíamos fazer para reduzir essa dependência para o bem do teste?

00:38.570 --> 00:43.760
Ao longo do caminho, estamos aprendendo algumas coisas diferentes sobre injeção de dependência e separação

00:43.760 --> 00:45.230
as preocupações de nosso código.

00:45.260 --> 00:51.290
De qualquer forma, esses princípios são úteis no código de produção e estamos começando a ver algumas das maneiras

00:51.290 --> 00:58.400
que, quando preparamos o código para ser mais testável, também estamos criando um código bem projetado

00:58.400 --> 00:59.660
para produção.

00:59.660 --> 01:06.290
Portanto, a injeção de dependência permite flexibilidade que pode ser usada em tempo de execução, reduzindo a complexidade

01:06.290 --> 01:12.920
de seus sistemas, passando variedades flexíveis de dependências diferentes quando necessário.

01:12.950 --> 01:20.540
Também vimos que, ao separar um grande monocomportamento monolítico em apenas o que precisamos do monocomportamento

01:20.540 --> 01:27.200
e movendo o outro código para uma classe mais leve e não monocomportamental, obtemos novamente alguma flexibilidade

01:27.200 --> 01:32.150
que é útil na produção e também nos ajuda aqui no mundo dos testes.

01:32.150 --> 01:38.780
Acho que, no geral, alguns dos desafios que estamos vendo são o que acontece quando você tem várias dependências

01:38.780 --> 01:43.250
ou muitos sistemas chamados a partir de um método específico.

01:43.610 --> 01:49.250
Isso pode ser um sinal de que o método está inchado e fazendo coisas demais, ou pode ser um sinal de que ele está

01:49.250 --> 01:51.680
um método enxuto e com design adequado.

01:51.680 --> 01:57.350
Mas precisamos ter algumas reflexões e considerações adicionais quando formos testar essa funcionalidade.

01:57.350 --> 01:59.600
Espero que isso tenha sido útil para você.

01:59.600 --> 02:06.680
Espero abordar ainda mais tópicos nesta série e eles serão adicionados novamente ao longo do tempo

02:06.680 --> 02:07.190
tempo.

02:07.190 --> 02:08.300
Então, mais uma vez, obrigado.
