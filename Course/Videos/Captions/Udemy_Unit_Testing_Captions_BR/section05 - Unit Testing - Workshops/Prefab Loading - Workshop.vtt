WEBVTT

00:00.290 --> 00:04.310
Olá e bem-vindo à série de workshops sobre testes unitários para Unity.

00:04.460 --> 00:06.770
Aqui vamos dar uma olhada nos pré-fabricados.

00:06.800 --> 00:10.940
Até este momento do curso, não testamos os prefabs.

00:10.970 --> 00:16.460
Nos momentos em que eu quis testar alguns monocomportamentos, eu os criei do zero usando o código

00:16.460 --> 00:18.080
como mostrado nos vídeos anteriores.

00:18.080 --> 00:24.440
Mas, claro, um bloco de construção fundamental no desenvolvimento de jogos em Unity é o prefab.

00:24.680 --> 00:32.300
Os prefabs permitem que você reúna vários recursos e funcionalidades, coloque-os em seu projeto e

00:32.300 --> 00:38.020
reutilizá-los facilmente arrastando-os para a cena para que você os salve na cena e eles fiquem lá,

00:38.030 --> 00:40.690
ou criando-os dinamicamente com código.

00:40.700 --> 00:43.040
Agora, por que gostaríamos de testar esses pré-fabricados?

00:43.040 --> 00:48.800
Bem, de uma forma bem leve, imagine que o seu jogo usa um prefab de personagem em um prefab de inimigo, talvez

00:48.800 --> 00:49.900
múltiplos de cada um.

00:49.910 --> 00:58.280
Você pode ter um teste de unidade que cria apenas o jogador e valida que ele não lança nenhuma exceção,

00:58.400 --> 01:04.970
apenas isso já lhe dá um pouco mais de confiança de que o ativo funciona bem ao longo do tempo.

01:04.970 --> 01:10.670
E como você está colaborando com diferentes talentos que não são programadores, incluindo designers de níveis e artistas,

01:10.700 --> 01:14.030
você sabe que esses pré-fabricados não foram quebrados acidentalmente.

01:14.030 --> 01:17.870
Você pode fazer algumas suposições sobre a estrutura usando um teste.

01:17.870 --> 01:22.760
Você pode fazer suposições sobre os campos serializados e verificar se eles estão preenchidos corretamente, e você

01:22.760 --> 01:25.400
pode fazer suposições sobre o comportamento, é claro, também.

01:25.400 --> 01:31.160
No exemplo anterior de personagem, que não usava prefabs, eu tinha um script de personagem e

01:31.160 --> 01:36.770
verificava para ter certeza de que ele poderia se mover adequadamente pelo mundo quando eu chamasse a funcionalidade move by ou move to.

01:36.770 --> 01:43.730
Ao criar prefabs complexos com dependências, você poderá chamar a funcionalidade nesses prefabs

01:43.730 --> 01:44.300
também.

01:44.300 --> 01:47.990
Agora, os testes podem abranger uma pequena unidade de código.

01:48.140 --> 01:54.680
No mundo ideal, você tem poucas linhas e talvez nenhuma dependência até um sistema mais complexo,

01:54.680 --> 01:59.810
que, se você souber o que está fazendo ao realizar os testes unitários, poderá ter um sistema fielmente

01:59.810 --> 02:06.200
teste que também é executado em algumas dependências e lhe dá alguma garantia de que esses sistemas

02:06.200 --> 02:07.490
estão funcionando bem juntos.

02:07.520 --> 02:14.120
Um pré-fabricado é, de fato, provavelmente o mais complexo no final desse espectro, e você estará testando

02:14.120 --> 02:14.270
isso.

02:14.270 --> 02:21.560
O pré-fabricado pode fazer uso de seus próprios componentes personalizados, bem como de componentes da unidade, como o rigidbody.

02:21.560 --> 02:26.750
Portanto, esteja ciente de que, ao configurar esses testes, você não está testando um sistema muito grande.

02:26.750 --> 02:34.160
Se, por exemplo, o seu personagem herói estiver usando corpo rígido e um componente de voo personalizado, você pode querer

02:34.160 --> 02:38.060
testar o componente de voo personalizado separadamente em seu próprio teste de unidade.

02:38.060 --> 02:42.980
Lembre-se de que sempre há vantagens em poder dividir e ter menos dependências em sua unidade

02:42.980 --> 02:43.460
testes.

02:43.460 --> 02:49.550
Mas, dito isso, podemos de fato criar um teste que seja executado em um pré-fabricado inteiro, incluindo suas dependências

02:49.550 --> 02:50.240
se acharmos adequado.

02:50.240 --> 02:52.370
Vamos dar uma olhada em um exemplo disso no código.

02:52.940 --> 02:54.640
Aqui estamos dentro da unidade.

02:54.650 --> 02:59.720
Se eu olhar a janela do executor de teste aqui na categoria, já a configurei como pré-fabricada.

02:59.720 --> 03:05.510
E aqui embaixo, nesta pasta, podemos ver que há um exemplo de pré-fabricado.

03:05.510 --> 03:10.520
Vamos abrir a cena e dar uma olhada na cena que está sendo executada.

03:10.520 --> 03:10.850
ela.

03:13.540 --> 03:18.130
Então, quando eu executo essa cena, uma bola cai com a física e desliza pelo chão.

03:18.160 --> 03:21.420
Não é esse comportamento específico que nos interessa.

03:21.430 --> 03:27.760
Eu só queria colocar um inimigo pré-fabricado na cena e ver que ele existe no código de produção aqui.

03:27.760 --> 03:34.750
Simular isso seria o menu maior do jogo, as configurações, a cena, o que quer que seja, e ter alguns

03:34.750 --> 03:39.730
dependência de um ou mais comportamentos mono em um pré-fabricado.

03:39.940 --> 03:43.340
Então, com isso configurado, vamos dar uma olhada em como testar isso.

03:43.360 --> 03:49.480
Agora, nesta cena, tenho um teste de editor e também um teste de tempo de execução.

03:49.480 --> 03:55.450
Mas como isso está testando mais o comportamento da unidade e vimos que os comportamentos mono, por exemplo, são

03:55.450 --> 03:57.400
algo que você deseja testar apenas em tempo de execução.

03:57.400 --> 03:59.470
Vamos nos concentrar apenas no teste do modo de reprodução aqui.

03:59.470 --> 04:00.820
Então, vou desmarcar esse teste.

04:01.600 --> 04:06.820
E aqui eu tenho algumas coisas diferentes que podemos fazer quando este teste de modo de jogo é executado, eu verifico que o inimigo

04:06.820 --> 04:08.380
não é nulo.

04:08.410 --> 04:10.420
Essa é a quantidade de script de comportamento.

04:10.450 --> 04:16.330
Em seguida, testo se o objeto do jogo no qual ele está sentado não é nulo e, em geral, presumimos que se

04:16.330 --> 04:18.460
o inimigo existe, o objeto do jogo também existe.

04:18.460 --> 04:20.740
Mas este é apenas um teste adicional para isso.

04:20.740 --> 04:23.410
E, finalmente, podemos verificar se o corpo rígido não é nulo.

04:23.410 --> 04:27.670
Então, aqui estamos verificando principalmente a estrutura do que temos aqui.

04:27.670 --> 04:33.940
Mas você também pode verificar os campos serializados, os valores públicos inicializados, algumas das funcionalidades de comportamento

04:33.940 --> 04:35.230
chamando métodos nele.

04:35.230 --> 04:36.430
Você pode fazer isso por conta própria.

04:36.430 --> 04:41.350
Expanda o que você vê aqui e adicione sua própria funcionalidade de teste no topo do novo código de produção.

04:41.380 --> 04:44.200
Comece a trabalhar com isso e veja o que acontece com você.

04:44.230 --> 04:46.120
Vamos dar uma olhada no código-fonte aqui.

04:46.270 --> 04:47.620
Aqui está o teste do modo de reprodução.

04:47.620 --> 04:52.090
Vou dar uma olhada nesses três testes e depois falarei sobre a configuração que é necessária especificamente para

04:52.090 --> 04:52.900
pré-fabricados.

04:52.900 --> 04:55.270
Aqui temos um teste muito simples.

04:55.300 --> 04:58.960
Temos o paradigma de organizar, agir e afirmar que estamos acostumados a ver.

04:58.960 --> 05:03.070
Observe que o arrange e o act estão suspeitosamente ausentes aqui.

05:03.070 --> 05:06.820
E tudo o que estou fazendo é verificar se o inimigo não é nulo.

05:06.820 --> 05:10.210
No próximo teste, o objeto de jogo inimigo não é nulo.

05:10.210 --> 05:13.240
E, finalmente, o corpo rígido do inimigo não é nulo.

05:13.270 --> 05:14.620
No caso do corpo rígido.

05:14.620 --> 05:20.830
Esse é um campo público que eu criei e está serializado, e presumo que o pré-fabricado esteja configurado corretamente

05:20.830 --> 05:25.150
já teria esse campo serializado declarado e preenchido.

05:25.150 --> 05:26.560
Portanto, tudo passa.

05:26.560 --> 05:27.760
Então tudo está indo bem.

05:27.760 --> 05:29.800
Agora, como vamos colocar o pré-fabricado aqui?

05:29.800 --> 05:31.900
Observe que estamos usando o teste do modo play.

05:31.900 --> 05:37.840
Como vimos, um teste de modo de reprodução é executado em sua própria cena vazia criada dinamicamente.

05:37.840 --> 05:41.680
Portanto, tudo o que quisermos fazer nela terá de ser configurado manualmente por nós mesmos.

05:41.680 --> 05:46.000
Portanto, vamos aproveitar as vantagens do dispositivo de texto e algumas das coisas que podemos fazer com o teste

05:46.000 --> 05:46.300
fixture.

05:46.300 --> 05:53.230
Portanto, uma das coisas que podemos fazer aqui é definir uma referência para o tempo de atraso que permite

05:53.230 --> 05:57.340
o pré-fabricado a ser instanciado, o caminho para o próprio pré-fabricado inimigo.

05:57.340 --> 05:59.710
Observe que o caminho começa com assets.

05:59.710 --> 06:01.300
Isso será importante em um segundo.

06:01.300 --> 06:03.520
E então eu tenho uma referência ao inimigo privado.

06:03.550 --> 06:09.010
Agora, além do atributo de teste que usamos bastante, há um atributo de configuração que

06:09.010 --> 06:11.860
será executado uma vez antes de cada método de teste.

06:11.860 --> 06:19.570
Portanto, aqui o que queremos fazer antes de cada método de teste é simplesmente carregar esse recurso no caminho que utilizamos.

06:20.380 --> 06:26.560
Obtemos uma referência para o inimigo que está no objeto de jogo quando o instanciamos e, em seguida, esperamos um

06:26.590 --> 06:31.450
três segundos ou alguma quantidade arbitrária de tempo, na verdade percebemos que ele não precisa de três segundos.

06:31.450 --> 06:33.250
Provavelmente precisa de um quadro.

06:33.250 --> 06:35.590
Portanto, você pode fazer experiências com o que fizer lá.

06:35.890 --> 06:38.800
Eu apenas espero até, acho, meio segundo aqui.

06:38.830 --> 06:44.260
A razão pela qual precisamos disso é que eu vi que quando você instancia o game object dot, você precisa

06:44.260 --> 06:50.080
esperar um quadro inteiro para que o awake seja chamado e o start seja chamado naquele objeto de jogo.

06:50.080 --> 06:55.420
Portanto, dependendo do que você estiver fazendo no despertar e no iniciar do seu monocomportamento, talvez seja necessário

06:55.420 --> 06:56.800
esperar um pouco mais.

06:56.800 --> 07:03.550
Eu diria que esperar 2 ou 3 quadros em todas as situações seria suficiente.

07:03.550 --> 07:08.230
Mas aqui estou fazendo apenas meio segundo e você pode brincar com isso e ver se atende às suas necessidades.

07:08.230 --> 07:10.300
Depois, aqui embaixo, uso o atributo Teradyne.

07:10.300 --> 07:13.840
Isso é chamado uma vez após cada um dos métodos de teste.

07:13.840 --> 07:15.970
Então, na configuração, criamos o pré-fabricado.

07:16.000 --> 07:17.200
Em seguida, o teste é executado.

07:17.200 --> 07:19.630
E na desmontagem, o que eu faço é limpá-lo.

07:19.630 --> 07:26.470
Agora, como alternativa, você também pode fazer a configuração e a desmontagem equivalentes em cada

07:26.470 --> 07:27.400
teste único.

07:27.400 --> 07:29.050
Se você quisesse fazer isso, poderia.

07:29.080 --> 07:33.190
Mas estou aproveitando a possibilidade de reutilizar alguns métodos existentes aqui.

07:33.190 --> 07:36.520
Portanto, só declaro a configuração uma vez e a desmontagem uma vez.

07:36.520 --> 07:40.270
E sei que, de forma confiável, eles serão chamados antes e depois de cada método de teste.

07:40.270 --> 07:41.320
Então é isso.

07:41.320 --> 07:45.190
Vamos dar uma olhada no script inimigo em si para ver como ele está configurado.

07:45.190 --> 07:47.590
Portanto, o inimigo é um monocomportamento muito simples.

07:47.590 --> 07:52.390
Na verdade, não preciso fazer nada para torná-lo testável, mas apenas para ter algo interessante aqui para

07:52.390 --> 07:53.290
ser capaz de testar.

07:53.290 --> 07:57.940
Tenho um campo serializado de rigidbody e tenho um teste que assume que ele está preenchido.

07:57.940 --> 08:01.960
Agora, observando o código, você pode ver que não há nada que realmente o preencha.

08:01.960 --> 08:08.320
Mas se olharmos na unidade e clicarmos no pré-fabricado, veremos que o pré-fabricado é o que faz essa associação.

08:08.320 --> 08:09.400
Então, vamos verificar isso agora.

08:09.400 --> 08:11.740
Então, aqui na unidade, vamos descer.

08:11.740 --> 08:13.570
Vamos dar uma olhada no inimigo pré-fabricado.

08:13.570 --> 08:17.860
E podemos ver aqui à direita que o prefab tem um script de inimigo.

08:17.860 --> 08:20.380
E ele já tem o corpo rígido declarado.

08:20.410 --> 08:23.110
Se de alguma forma eu me esquecer disso.

08:23.110 --> 08:29.140
Ou talvez alguém da sua equipe quebre esse aspecto do prefab, então vamos executar esses testes novamente.

08:32.310 --> 08:35.310
E podemos ver que o corpo rígido é nulo falhou.

08:35.310 --> 08:41.680
Portanto, esse é um exemplo muito simples de um sistema que você tem que funciona e depois quebra.

08:41.700 --> 08:47.370
Agora, se você é um desenvolvedor de jogos em unidade e já trabalhou em equipes antes, tenho certeza de que já teve a experiência

08:47.370 --> 08:51.810
de que você ou alguém com quem você trabalha quebrou acidentalmente um pré-fabricado.

08:51.840 --> 08:53.320
É um fluxo de trabalho muito comum.

08:53.340 --> 08:56.460
Talvez você não veja nenhum erro no unity editor.

08:56.460 --> 09:01.200
Você pode até conseguir jogar o jogo e, em determinadas circunstâncias, não ver o efeito de

09:01.230 --> 09:06.990
até o momento final, quando aquele corpo rígido específico está sendo usado ou a funcionalidade que é

09:06.990 --> 09:08.130
que está faltando está sendo chamada.

09:08.130 --> 09:13.110
Portanto, essa é uma maneira maravilhosa de fazer com que todos na sua equipe sigam o seguinte fluxo de trabalho.

09:13.200 --> 09:19.650
Ei, toda vez que você for fazer um pull do git e fizer algumas alterações no nível dos ativos, no design, etc,

09:19.680 --> 09:26.940
certifique-se de abrir a janela do executor de testes e simplesmente aperte run selected ou run all e execute todos eles.

09:26.970 --> 09:28.620
Você verá que tudo passou bem.

09:28.620 --> 09:34.800
Então, antes de submeter seu trabalho novamente, faça-o de novo e, se e quando você perceber que alguém o submeteu

09:34.800 --> 09:40.710
algo que passou nos testes, mas quebrou alguma coisa, você deve adicionar um novo teste unitário que talvez teste

09:40.710 --> 09:47.760
para o script de voo dos inimigos existente ou qualquer que seja a parte ofensiva, e então você agora tem um legado

09:47.760 --> 09:52.320
de um pouco mais de testes para garantir que essa instância específica não ocorra novamente.

09:52.320 --> 09:56.760
Você não precisa necessariamente testar todas as coisas do pré-fabricado logo de início.

09:56.760 --> 10:01.470
Observe os fluxos de trabalho da sua equipe e identifique algumas coisas que poderiam ser testadas

10:01.470 --> 10:03.120
ser consertadas mais facilmente.

10:03.120 --> 10:04.950
Em seguida, adicione alguns testes leves para isso.

10:04.980 --> 10:10.950
É muito fácil, uma vez que você tenha esse teste aqui para um determinado prefab, executá-lo em vários prefabs,

10:10.950 --> 10:16.650
Em teoria, você poderia ter um script de teste que testasse um grande número de prefabs diferentes, fazendo

10:16.650 --> 10:22.200
o pequeno detalhe de garantir que nenhuma referência nula esteja acontecendo, nenhuma exceção seja lançada.

10:22.440 --> 10:26.340
Os objetos do jogo existem, o prefab pode ser encontrado.

10:26.340 --> 10:28.920
Você poderia fazer tudo isso em um só, se quisesse.

10:28.950 --> 10:34.530
O que estou mostrando aqui é um script específico para um determinado prefab, e você pode decidir como

10:34.530 --> 10:35.400
escalar isso.

10:35.670 --> 10:36.870
Isso é tudo para isso.

10:36.870 --> 10:40.410
Fale sobre o uso de pré-fabricados e testes unitários juntos.

10:40.410 --> 10:41.190
Obrigado.
