WEBVTT

00:00.050 --> 00:03.650
Olá e bem-vindo a este workshop de testes unitários do Unity.

00:03.650 --> 00:07.190
Vamos dar uma olhada no meu carregador de dados Basic como exemplo.

00:07.190 --> 00:07.820
Vamos nos aprofundar.

00:07.820 --> 00:10.670
Então, nesta demonstração, vou abrir o unity.

00:10.670 --> 00:16.040
Abra o nosso projeto de amostra principal e dê uma olhada na cena do meu carregador de dados básico.

00:16.040 --> 00:21.890
Agora, a razão pela qual eu escolhi fazer algum tipo de carregamento de dados é apenas para falar sobre, bem, o que

00:21.890 --> 00:30.290
Se os nossos testes unitários, que esperamos que sejam muito confiáveis, isolados e executados rapidamente para o bem da nossa

00:30.290 --> 00:32.390
metodologias de teste próprias?

00:32.390 --> 00:38.150
E se eles dependerem de outros sistemas, como saberemos se somos capazes de testar apenas uma parte?

00:38.180 --> 00:46.130
Em geral, o teste de unidade está testando uma única unidade, que você poderia pensar como um método de uma classe.

00:46.130 --> 00:52.130
Mas muitas vezes o nosso código é composto por várias classes que dependem umas das outras e isso pode ser um desafio para decidir

00:52.130 --> 00:55.460
como separá-las e testá-las isoladamente.

00:55.460 --> 01:01.640
Além disso, você pode ter um sistema que depende de algo assíncrono, como renderização de gráficos, renderização

01:01.640 --> 01:05.150
áudio ou, nesse caso, chamar um servidor de back-end.

01:05.150 --> 01:12.770
Então, criei um exemplo muito simples aqui que carrega dados que você passa em uma URL, ele apenas chama alguma página da web

01:12.770 --> 01:15.020
e recebe de volta o texto dessa página da Web.

01:15.050 --> 01:21.800
Portanto, este é o exemplo mais simples, mas você pode imaginar que se trata de qualquer lógica de servidor chamando para enviar

01:21.800 --> 01:26.930
uma pontuação alta do seu jogo, chamando para carregar os dados do jogador, algo relacionado ao multijogador.

01:26.930 --> 01:31.690
Talvez todos eles possam depender de algum tráfego de rede assíncrono.

01:31.700 --> 01:32.720
Vamos dar uma olhada.

01:32.810 --> 01:34.640
Então, aqui estamos na amostra.

01:34.640 --> 01:36.650
Temos meu carregador de dados básico.

01:36.650 --> 01:37.310
Carregue-o.

01:37.310 --> 01:38.330
Vamos apertar o play.

01:41.030 --> 01:42.380
Nesta demonstração em particular.

01:42.410 --> 01:46.940
Não há coisas muito interessantes nesta demonstração em particular.

01:46.970 --> 01:49.340
Não há nada muito interessante acontecendo na jogabilidade.

01:49.610 --> 01:53.330
Vamos para o console aqui e veremos que esta cena não tem interface de usuário.

01:53.360 --> 01:59.660
Veja o console da unidade, que mostra apenas a duração do que é retornado do servidor.

01:59.660 --> 02:03.590
Qualquer coisa diferente de zero significa que foi carregada uma página.

02:03.590 --> 02:05.030
Portanto, muito leve.

02:05.030 --> 02:06.080
Teste simples.

02:06.080 --> 02:09.550
Eu não tenho verificação de erros ou esse tipo de coisa incorporada.

02:09.560 --> 02:14.030
Ele apenas assume o sucesso por causa da simplicidade desta demonstração.

02:14.060 --> 02:18.170
Se você estiver fazendo um código de produção e chamando servidores, é melhor adicionar muito mais funcionalidades

02:18.170 --> 02:18.800
a ele.

02:18.800 --> 02:23.160
Portanto, essa é a experiência em tempo de execução, que é bastante simples e não muito interessante.

02:23.180 --> 02:28.940
Agora, se olharmos para o executor do teste aqui, podemos definir a nossa categoria para ser o meu carregador de dados básico.

02:28.940 --> 02:32.720
Assim, ele nos mostra apenas os testes relacionados a esse código específico.

02:32.720 --> 02:34.520
Em seguida, acessamos o modo de edição.

02:34.520 --> 02:38.600
Aqui, novamente, temos o modo play, mas você pode explorá-lo por conta própria.

02:38.600 --> 02:42.620
Para esta demonstração em particular, acho que o modo de edição é mais interessante.

02:42.620 --> 02:45.050
Portanto, vou clicar em executar tudo.

02:46.660 --> 02:48.740
E podemos ver que tivemos sucesso.

02:48.760 --> 02:54.910
Isto diz que o resultado do load async contém doctype quando é carregado.

02:54.910 --> 02:56.890
Então vamos dar uma olhada em um pouco disso.

02:57.010 --> 02:59.200
Vamos abrir o nosso código-fonte.

03:00.590 --> 03:02.210
E aqui está o teste.

03:02.300 --> 03:08.000
Ele mostra que primeiro criamos uma instância do nosso carregador de dados básico.

03:08.300 --> 03:12.050
Depois ouvimos quando ele é carregado.

03:13.000 --> 03:16.260
Verificaremos os dados carregados de volta do servidor.

03:16.270 --> 03:21.190
Novamente, isso é apenas uma chamada a uma página da Web e qualquer que seja o código-fonte da página da Web, ele retorna como um

03:21.190 --> 03:22.420
grande gota de texto.

03:22.420 --> 03:24.760
Portanto, vai se parecer com alguma coisa HTML.

03:24.760 --> 03:30.310
E quando olhei para ele enquanto o estava criando, notei que dizia doctype como parte dele.

03:30.310 --> 03:35.920
Portanto, o Doctype não é algo muito significativo, certamente não no mundo da unidade, mas pensei que

03:35.920 --> 03:40.030
que era um pequeno teste que me diz se eu recebi algo de volta de uma página da web?

03:40.030 --> 03:43.460
Você pode imaginar um teste para qualquer outra substring que faça sentido para você.

03:43.480 --> 03:50.410
Finalmente, faço a ação aqui que estamos testando e carrego a chamada assíncrona

03:50.410 --> 03:51.700
e passo a URL.

03:51.730 --> 03:58.600
Agora observe que a URL é a URL da página do GitHub, mas isso não é tão importante se não houver nada exclusivo

03:58.600 --> 03:58.960
ali.

03:58.960 --> 04:06.010
Se você quiser fazer um teste como o do google.com, ele simplesmente chamará o google.com e obterá a fonte

04:06.010 --> 04:07.210
código de volta a partir disso.

04:07.210 --> 04:12.610
Eu não quero realmente me concentrar no que estou fazendo aqui no código de produção, porque é um código reconhecidamente

04:12.610 --> 04:13.720
exemplo simples.

04:13.720 --> 04:19.030
Eu só queria que fosse uma forma de fazer algo assíncrono acontecer dentro da unidade.

04:20.210 --> 04:22.880
Então, vamos dar uma olhada no código-fonte para que possamos entender.

04:23.880 --> 04:24.330
Aqui.

04:24.330 --> 04:24.930
O que estamos fazendo.

04:24.930 --> 04:29.130
Quando eu chamo o load, eu apenas digo, ei, certifique-se de que a URL não está vazia.

04:29.520 --> 04:34.710
Em seguida, uso a solicitação web do Unity, que é uma funcionalidade integrada.

04:34.710 --> 04:41.880
Chamo a solicitação de envio e defino o resultado como sendo o texto do manipulador de download.

04:41.910 --> 04:44.220
Esta é uma forma super econômica e fácil.

04:44.220 --> 04:47.400
Recomendado pela unity para chamar dados simples on-line.

04:47.430 --> 04:48.930
Muito simples e direto.

04:48.960 --> 04:53.250
Isso levanta uma questão: o que realmente estamos testando aqui?

04:53.640 --> 04:59.940
Tenho uma classe personalizada chamada meu carregador de dados, mas dentro dela estou dependendo muito de alguma unidade existente

04:59.970 --> 05:02.550
funcionalidade do unity web request.

05:02.580 --> 05:06.420
Em seguida, estou chamando alguma página da web, neste caso o GitHub.

05:06.420 --> 05:08.040
E isso está envolvido.

05:08.040 --> 05:13.170
Se o GitHub estivesse de alguma forma fora do ar durante o dia, este teste falharia.

05:13.200 --> 05:14.490
Isso é apropriado?

05:14.490 --> 05:21.390
Se o meu teste unitário for realmente para testar minha própria metodologia, minha própria funcionalidade, não devo considerar

05:21.390 --> 05:22.440
um teste que falhou.

05:22.440 --> 05:25.230
Se alguma dependência não relacionada falhar.

05:25.230 --> 05:27.000
Mas aqui é esse o caso.

05:27.000 --> 05:29.030
Eu falharia se o GitHub estivesse fora do ar.

05:29.040 --> 05:34.830
Além disso, aqui dentro estou usando o Unity web request, que é uma funcionalidade construída pelo unity.

05:34.860 --> 05:41.280
Esperamos que funcione 100% do tempo em todas as situações, mas é possível que o meu código funcione e

05:41.280 --> 05:42.600
seu código não funcione.

05:42.600 --> 05:44.910
Portanto, há uma área cinzenta aqui.

05:44.910 --> 05:50.070
Quando você pensa em projetar suas classes e depois projetar os testes nessas classes, como você

05:50.070 --> 05:52.350
sabe no que você deve se concentrar de fato?

05:52.350 --> 05:54.780
Testes, de modo geral.

05:54.780 --> 05:59.940
E há livros e livros escritos sobre esse assunto de como abordar a arte dos testes unitários.

05:59.940 --> 06:05.730
Mas, de modo geral, você quer reduzir as dependências e simplificar o número

06:05.730 --> 06:07.920
de linhas de código que você está testando.

06:07.920 --> 06:14.880
Portanto, menos código é melhor porque é mais simples e focado e você sabe exatamente, isoladamente, qual

06:14.880 --> 06:16.410
código que está sendo testado.

06:16.410 --> 06:22.710
Portanto, este não é um exemplo perfeito, mas, para nós, é uma ótima maneira de começar e falar sobre assíncrono

06:22.710 --> 06:23.340
código em execução.

06:23.340 --> 06:25.440
Então, por enquanto, vamos encerrar este exemplo.
