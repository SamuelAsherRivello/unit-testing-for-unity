WEBVTT

00:00.260 --> 00:03.380
Olá e bem-vindo ao Unit Testing for unity.

00:03.410 --> 00:07.340
Neste workshop, vamos examinar a classe de personagem em uma versão avançada.

00:07.340 --> 00:09.290
Vamos dar uma olhada nesta demonstração em ação.

00:09.290 --> 00:11.330
Aqui vamos abrir a nossa unidade.

00:11.360 --> 00:13.310
Vamos abrir o nosso projeto de amostra.

00:13.310 --> 00:18.830
E vamos dar uma olhada em uma cena interna para a situação avançada do personagem aqui que eu quero

00:18.830 --> 00:21.620
falar um pouco sobre separação de código.

00:21.650 --> 00:26.420
Anteriormente, em um dos workshops, falei sobre as diferentes dependências que você teria.

00:26.420 --> 00:28.670
Por exemplo, se você estiver chamando um servidor de back-end.

00:28.670 --> 00:35.840
Nessa situação, utilizamos uma biblioteca substituta para simular e não precisar de chamar o back end.

00:35.870 --> 00:42.230
É uma discussão semelhante aqui, onde estamos analisando quais são as dependências envolvidas com um determinado

00:42.230 --> 00:48.950
cenário de teste específico e como podemos estar cientes dessas diferentes dependências e o que queremos fazer a respeito?

00:48.950 --> 00:49.190
isso?

00:49.220 --> 00:51.740
Aqui não vamos usar a biblioteca substituta.

00:51.740 --> 00:56.270
Vamos pensar em separar o nosso monocomportamento de outro código e dar uma olhada.

00:56.480 --> 00:58.250
Então, aqui estamos dentro da unidade.

00:58.580 --> 00:59.750
Temos uma classe de produção.

00:59.750 --> 01:00.560
Vamos dar uma olhada nela.

01:00.560 --> 01:01.160
Em execução.

01:04.840 --> 01:07.810
Aqui embaixo, vemos que podemos nos mover com as teclas de seta.

01:07.810 --> 01:11.350
Assim como no exemplo básico, a experiência do usuário final é a mesma.

01:11.350 --> 01:16.630
E esse é um exemplo interessante, pois algumas das alterações que fazemos no código

01:16.630 --> 01:21.550
qualidade do código e testabilidade dos nossos sistemas não afetam necessariamente o usuário final.

01:21.580 --> 01:22.680
Isso é positivo.

01:22.690 --> 01:25.570
Então, vamos dar uma olhada no código de produção aqui.

01:25.570 --> 01:27.640
Vamos abrir o exemplo avançado do personagem.

01:27.640 --> 01:29.200
Aqui está um exemplo completo.

01:29.200 --> 01:35.140
O que estamos fazendo dentro da esteira desta classe de exemplo é criar uma primitiva para o cubo.

01:35.140 --> 01:37.600
Damos a ele um nome para fins de organização.

01:37.690 --> 01:45.310
Então, em vez de uma linha aqui onde apenas adicionamos um componente que tem toda a nossa funcionalidade, fazemos

01:45.340 --> 01:46.480
duas etapas.

01:46.720 --> 01:52.000
Isso me lembra um pouco a injeção de dependência que vimos no exemplo do My Data loader.

01:52.000 --> 01:55.300
Mas este é um caso de uso diferente com dependências diferentes.

01:55.300 --> 02:00.250
Portanto, em vez de apenas uma linha de adição de componente, fazemos a adição de componente.

02:00.250 --> 02:05.590
E então criamos nossa própria classe avançada de caráter não monocomportamental.

02:05.590 --> 02:07.840
E passamos o Monobehaviour.

02:07.840 --> 02:12.700
Então, estamos passando a dependência que o avanço do personagem vai usar.

02:12.730 --> 02:19.240
Agora, o avanço de caractere não é um monocomportamento e, portanto, temos mais flexibilidade com relação a como queremos

02:19.240 --> 02:19.810
testá-lo.

02:19.840 --> 02:23.110
Poderíamos testá-lo no modo de edição, por exemplo, com mais facilidade.

02:23.260 --> 02:28.330
Novamente, sempre que estiver usando Monobehaviours, isso é mais apropriado para testes no modo play.

02:28.360 --> 02:31.270
Não é uma regra rígida, mas essa é uma maneira de pensar sobre isso.

02:31.270 --> 02:37.960
Portanto, aqui, ao separar o nosso monocomportamento do nosso não monocomportamento, temos mais algumas opções.

02:37.990 --> 02:43.360
Agora ainda estamos aqui em um ambiente de modo play play porque este é o código de produção.

02:43.360 --> 02:46.270
Vamos entrar e ver como o nosso código-fonte foi alterado.

02:46.270 --> 02:48.340
Então, aqui estamos no caractere avançado.

02:48.370 --> 02:50.530
Você verá que ele parece bastante familiar.

02:50.530 --> 02:56.400
A maior parte do código aqui será igual ao do exemplo básico anterior, com algumas exceções.

02:56.410 --> 03:02.980
Uma delas é que o caractere avançado vai receber uma referência em seu construtor para o Monobehaviour.

03:03.010 --> 03:08.200
Isso ocorre porque ele precisa saber algumas coisas sobre o Monobehaviour, particularmente sobre sua transformação

03:08.200 --> 03:09.040
posição.

03:09.130 --> 03:15.700
Há também uma situação em que precisamos usar a segunda linha e informar ao Monobehaviour uma referência

03:15.700 --> 03:18.130
de volta para nós como o caractere avançado.

03:18.160 --> 03:24.790
Isso é apenas para que o Monobehaviour, sempre que chamar a atualização, possa nos dizer para fazer o movimento adequado.

03:24.820 --> 03:30.280
Há outras maneiras de organizar isso, mas, para simplificar, estamos passando o monobehaviour

03:30.280 --> 03:31.660
e tratando-o desta forma.

03:31.990 --> 03:34.480
Vamos ver que outras alterações vemos na base de código.

03:35.800 --> 03:38.140
O tipo de movimento é o mesmo que o básico.

03:38.170 --> 03:40.360
A movimentação por entrada é a mesma.

03:41.260 --> 03:45.610
Aqui embaixo, o movimento por código de tecla é muito semelhante, se não idêntico.

03:46.480 --> 03:52.930
E aqui embaixo, em "mover para" e "mover por", você pode notar que estamos obtendo e definindo a posição

03:52.930 --> 03:55.630
na transformação do Monobehaviour.

03:55.630 --> 04:02.590
Então, mais uma vez, temos aqui uma classe não monobehaviour fazendo o que pode fazer sem qualquer dependência de

04:02.590 --> 04:08.130
Monobehaviour e apenas nos pontos mais necessários ela se dirige ao Monobehaviour.

04:08.140 --> 04:14.140
Essa separação começa a nos ajudar a pensar em como poderíamos testar apenas o monocomportamento se pudéssemos,

04:14.170 --> 04:17.140
como poderíamos testar apenas o não monocomportamento se pudéssemos?

04:17.170 --> 04:22.570
Agora, este não é um exemplo perfeito porque é uma espécie de passo intermediário à medida que estamos aprendendo sobre

04:22.570 --> 04:24.370
como podemos separá-los adequadamente.

04:24.370 --> 04:25.900
Mas acho que é um bom aprendizado.

04:25.900 --> 04:29.800
Então, dê uma olhada no código-fonte aqui para o caractere avançado.

04:29.800 --> 04:33.880
Compare-o com o código Basic em seu próprio tempo e veja as diferenças.

04:34.030 --> 04:36.910
Então vamos dar uma olhada no exemplo que fizemos.

04:36.910 --> 04:37.240
Novamente.

04:37.270 --> 04:38.830
Aqui está o exemplo que vimos.

04:38.830 --> 04:40.000
Portanto, são estas duas linhas.

04:40.000 --> 04:41.200
Essa é realmente a chave.

04:41.230 --> 04:47.290
Vamos adicionar um componente do Monobehaviour avançado do personagem ao nosso objeto de jogo.

04:47.290 --> 04:49.580
E depois vamos criar um novo personagem avançado.

04:49.580 --> 04:50.740
Esse é um passo separado.

04:50.740 --> 04:54.310
Portanto, você poderia imaginar que poderíamos testar essas duas coisas isoladamente.

04:54.310 --> 04:56.650
Agora eles são bastante dependentes um do outro.

04:56.680 --> 04:58.390
Há maneiras de massagear isso.

04:58.390 --> 05:01.300
Para que um não dependa diretamente do outro.

05:01.300 --> 05:07.660
Ou poderíamos fazer algo como fizemos no exemplo do carregador de dados e usar uma biblioteca substituta para que

05:07.660 --> 05:10.080
em vez disso, estamos simulando a dependência.

05:10.090 --> 05:15.730
Mas, novamente, para simplificar o aprendizado de como separar um monocomportamento, acho que fizemos

05:15.730 --> 05:16.510
o caso aqui.

05:16.510 --> 05:21.430
Você pode executar esses testes com o modo de edição e o modo de reprodução no seu tempo livre e dar uma olhada nisso.

05:21.640 --> 05:27.760
Mas, para mim, acho que já terminamos de falar sobre as diferenças na separação entre monocomportamento e não monocomportamento.

05:27.790 --> 05:28.450
Obrigado.
