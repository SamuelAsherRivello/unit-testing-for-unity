WEBVTT

00:00.050 --> 00:02.240
Olá e bem-vindo ao Unit Testing for unity.

00:02.270 --> 00:05.270
Este é o nosso workshop que fala sobre a física dos personagens.

00:05.300 --> 00:11.750
Em workshops anteriores, passamos lentamente de um exemplo de personagem muito simples, movendo-se com a seta

00:11.750 --> 00:17.600
para o exemplo avançado que separa as preocupações monocomportamentais e não monocomportamentais.

00:17.600 --> 00:22.580
E aqui neste exemplo vamos falar sobre bem, e se dependermos de mais um sistema de unidade

00:22.580 --> 00:23.540
como a física.

00:23.540 --> 00:29.360
E também quando estamos usando a física neste exemplo específico, nosso movimento se torna mais confuso.

00:29.360 --> 00:33.500
Isso significa que eu não clico à esquerda e ele imediatamente clica em uma posição.

00:33.500 --> 00:35.570
Ele se move lentamente ao longo do tempo.

00:35.570 --> 00:39.740
Como poderíamos testar o valor que está mudando lentamente com o tempo?

00:39.740 --> 00:42.860
Portanto, falaremos sobre algumas dessas coisas aqui no código-fonte.

00:42.860 --> 00:47.930
Para dar uma olhada nessa demonstração, vamos abrir o nosso unity editor e o projeto de amostra.

00:47.930 --> 00:50.660
A cena aqui será a cena da física do personagem.

00:50.660 --> 00:54.330
E uma das coisas que vamos analisar é como testar esses valores difusos.

00:54.350 --> 01:01.280
Para mim, os valores difusos são valores que não estão necessariamente mudando instantaneamente de

01:01.280 --> 01:02.270
A para B.

01:02.270 --> 01:09.500
Eles são animados lentamente ao longo do tempo, como a posição de um objeto ou uma pontuação que aumenta gradualmente.

01:09.560 --> 01:14.720
Todas essas são áreas em que você gostaria de poder testar algo ao longo do tempo, e temos uma abordagem fácil

01:14.720 --> 01:15.860
aqui para fazer isso.

01:15.860 --> 01:20.360
Não é a única maneira de resolver o problema, mas acho que nos ajuda a aprender ao longo do caminho.

01:20.360 --> 01:21.410
Então vamos dar uma olhada.

01:21.410 --> 01:23.060
Então, aqui estamos no projeto unity.

01:23.060 --> 01:25.580
Temos o exemplo de física de personagem aberto.

01:25.580 --> 01:27.140
Vamos prosseguir e executar a cena.

01:33.260 --> 01:36.170
Agora, posso me mover usando as teclas de seta.

01:40.030 --> 01:45.610
E em exemplos anteriores aqui no workshop, vimos que ele clica sobre cada clique que fiz à esquerda

01:45.610 --> 01:51.040
a posição do clique mudava instantaneamente, mas aqui há um movimento mais suave.

01:51.670 --> 01:56.890
Ainda posso usar todas as teclas de seta para direcionar o tráfego diferente para onde ele deve ir, mas a ideia

01:56.890 --> 02:00.670
de ele se mover lentamente ao longo do tempo é realmente a nova situação agora.

02:00.670 --> 02:06.430
Há muitas maneiras de fazer isso no unity, mas optei por usar o sistema de física apenas para falar

02:06.430 --> 02:11.530
um pouco sobre o que acontece se tivermos mais alguns sistemas de unidade envolvidos.

02:11.530 --> 02:13.570
Lembra-se do que estamos fazendo?

02:13.600 --> 02:20.770
E a ideia aqui é que, em um mundo ideal, os testes de unidade testem o menor número de linhas de

02:20.770 --> 02:24.400
dependência, o menor número de linhas de código de uma só vez.

02:24.400 --> 02:28.240
Mas muitas vezes o nosso código de produção não é tão simplista.

02:28.240 --> 02:30.160
Estamos dependendo de coisas diferentes.

02:30.160 --> 02:35.620
Assim, com o carregador My Data e com os exemplos de caracteres anteriores, vimos algumas das maneiras de

02:35.650 --> 02:37.750
lidar com essas diferentes dependências.

02:37.780 --> 02:40.900
Este é mais um exemplo um pouco mais complexo que os demais.

02:40.930 --> 02:42.880
Vamos dar uma olhada no código de produção aqui.

02:42.880 --> 02:45.760
Vamos dar uma olhada no exemplo da física do personagem.

02:47.240 --> 02:48.440
Vamos abrir isso?

02:49.860 --> 02:53.160
E aqui temos a criação de um personagem primitivo.

02:53.970 --> 03:02.490
Aqui criamos o objeto de jogo primeiro com o cubo na aparência da primitiva e depois adicionamos

03:02.490 --> 03:06.120
o componente do monocomportamento de física do personagem.

03:06.120 --> 03:09.690
E então temos uma classe de física de personagem separada que levamos para lá.

03:09.690 --> 03:15.360
Portanto, já estamos nos separando de uma classe monolítica de monocomportamento em duas.

03:15.360 --> 03:21.000
Portanto, essa é uma boa maneira de simplificar o nosso código e fazer um único propósito em cada um deles.

03:21.000 --> 03:28.260
Vimos no exemplo anterior que a maior parte da funcionalidade do Monobehaviour de que precisávamos era apenas a atualização.

03:28.260 --> 03:30.330
Essa é a única coisa de que realmente precisamos cuidar.

03:30.330 --> 03:35.760
Portanto, ao transferir todas as coisas que não são de atualização para a segunda classe, agora temos algo que é mais fácil de

03:35.760 --> 03:36.360
testar.

03:39.080 --> 03:42.210
Então, neste exemplo simples, nos movemos para uma determinada posição.

03:42.230 --> 03:46.340
Agora vamos executar os testes e depois dar uma olhada no código de produção.

03:46.370 --> 03:49.130
Então, aqui vamos dar uma olhada na execução do selecionado.

03:51.190 --> 03:52.480
Está tudo funcionando aqui.

03:52.500 --> 03:53.500
Tudo passa.

03:53.520 --> 03:55.290
Agora é só o teste do modo de jogo.

03:55.290 --> 03:59.760
Mas também temos testes de modo de edição se você quiser se aprofundar e dar uma olhada novamente, porque estamos

03:59.760 --> 04:01.600
lidando com coisas de monocomportamento.

04:01.620 --> 04:03.990
Parece mais apropriado usar um modo de reprodução.

04:03.990 --> 04:05.610
Então, essa é a abordagem que eu fiz aqui.

04:05.610 --> 04:09.090
Mas cabe a você e ao seu projeto decidir quais sistemas deseja testar.

04:09.120 --> 04:10.860
Modo de edição e quais você deseja testar.

04:10.890 --> 04:11.430
Modo de reprodução.

04:18.220 --> 04:23.620
Agora que já vimos esses testes, vamos dar uma olhada rápida no código-fonte da classe.

04:23.620 --> 04:25.300
E depois vamos dar uma olhada em alguns dos testes no topo.

04:25.330 --> 04:25.510
Muito bem.

04:25.510 --> 04:27.380
Então, aqui estamos na física dos caracteres.

04:27.400 --> 04:31.520
Veremos que ela é bem parecida com a do personagem avançado que vimos anteriormente.

04:31.540 --> 04:35.470
Novamente, separamos a classe Monobehaviour e a classe não monobehaviour.

04:35.470 --> 04:39.250
Portanto, aqui está a classe não monocomportamental que está fazendo a maior parte do trabalho.

04:39.280 --> 04:45.460
Observe que aqui, dentro do seu construtor, ele pega uma referência para o Monobehaviour e a armazena e depois

04:45.460 --> 04:50.320
também passa para o Monobehaviour uma referência a esta classe aqui.

04:50.320 --> 04:54.550
Isso é para que ele possa chamar o move by toda vez que fizer uma atualização.

04:54.580 --> 04:56.620
Agora, há diferentes maneiras de organizar isso.

04:56.620 --> 05:00.460
Você poderia até mesmo remover a dependência hardcoded que temos entre nós aqui.

05:00.460 --> 05:04.000
Mas, por uma questão de simplicidade neste exemplo, isso é muito apropriado.

05:04.360 --> 05:05.410
Descendo o código.

05:05.410 --> 05:08.470
Novamente, é como o avançado na maior parte.

05:08.500 --> 05:11.290
Vou querer chamar a atenção para onde a física está sendo usada.

05:11.290 --> 05:19.540
Portanto, aqui no movimento, em vez de apenas se mover pela posição codificada em uma instância de atualização Taneous,

05:19.570 --> 05:22.960
vamos usar a posição de movimentação aqui.

05:22.960 --> 05:28.510
E, em seguida, em Adicionar força, que é um novo método que eu criei e que vai se mover com base na física

05:28.510 --> 05:29.200
forças.

05:29.200 --> 05:33.250
Imagine que se trata de um bloco e que estamos dando um empurrão de um lado.

05:33.250 --> 05:39.010
E então, com base no atrito, na massa e na gravidade, você sabe que há algum tipo de consequência que tende a

05:39.010 --> 05:41.890
a ser uma reação mais confusa aqui usando a força de adição.

05:41.890 --> 05:48.220
E estamos nos movendo por add force aqui em cima, no topo do mesmo arquivo de classe, vemos o monocomportamento de física

05:48.220 --> 05:49.240
é declarado.

05:49.240 --> 05:55.210
É bastante familiar, pois o mesmo caractere avançado que vimos no último workshop é bastante semelhante,

05:55.210 --> 05:58.000
mas temos um corpo rígido aqui que estamos armazenando.

05:58.000 --> 06:04.630
E quando essa classe é ativada, fazemos a conexão do corpo rígido e definimos a física

06:04.630 --> 06:05.320
valores.

06:05.320 --> 06:12.070
Portanto, se pensarmos em apenas recapitular, em vez de ter um comportamento único que faça toda a física

06:12.070 --> 06:16.840
e o movimento juntos, nós separamos o monocomportamento do não monocomportamento.

06:16.870 --> 06:23.130
Então, dentro do Monobehaviour, fazemos o loop de atualização e também cuidamos de algumas coisas de física.

06:23.140 --> 06:29.200
Em seguida, a partir do outro, o não monobehaviour, podemos nos mover como quisermos e receber a entrada do personagem,

06:29.200 --> 06:31.110
portanto, receber entrada de teclado e coisas do gênero.

06:31.120 --> 06:35.560
Portanto, essa é uma separação muito boa e nos permite fazer o que precisamos.

06:36.740 --> 06:40.430
Deixe-me pensar em voz alta se há algo mais que eu queira mencionar sobre isso.

06:40.970 --> 06:43.070
Hum, sim.

06:43.070 --> 06:45.230
Então, eu falei sobre a ideia aqui.

06:45.230 --> 06:53.030
Se você quiser reduzir a dependência de código rígido que temos, cada classe dependendo uma da outra

06:53.030 --> 06:58.910
e obter mais da flexibilidade que vimos no exemplo do carregador My Data, você certamente poderia declarar

06:58.910 --> 07:03.320
interfaces e abordá-las dessa forma, mas não precisamos fazer isso aqui.

07:03.320 --> 07:06.020
Vamos voltar e executar o exemplo mais uma vez.

07:06.020 --> 07:10.340
Então, aqui na unidade, estamos rodando e temos as teclas de seta se movendo.

07:10.370 --> 07:15.770
Nos últimos vídeos, vimos exemplos de redução da complexidade.

07:15.770 --> 07:20.480
Portanto, a redução de diferentes dependências proporciona alguma flexibilidade para separar nosso código.

07:20.480 --> 07:26.120
Então, para este exemplo aqui, usando entrada e física e monobehaviours ou coisas do gênero, eu

07:26.120 --> 07:27.250
acho que já terminamos por aqui.

07:27.260 --> 07:27.980
Obrigado.
