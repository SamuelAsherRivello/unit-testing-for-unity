WEBVTT

00:00.260 --> 00:02.360
Olá e bem-vindo ao Unit Testing for unity.

00:02.390 --> 00:06.020
Vamos dar uma olhada no meu carregador de dados na versão avançada aqui.

00:06.020 --> 00:12.170
Para ver esta demonstração em ação, vamos abrir o unity Download e usar o projeto de amostra Source para

00:12.170 --> 00:12.920
este curso.

00:12.920 --> 00:15.020
E vamos dar uma olhada em uma cena-chave aqui.

00:15.020 --> 00:17.210
Esse é o carregador My Data avançado.

00:17.210 --> 00:23.210
Alguns dos conceitos sobre os quais falarei aqui incluem injeção de dependência como vemos e substituto final.

00:23.210 --> 00:29.150
Aqui estamos dentro da unidade, tenho este cenário para o carregador My Data avançado pronto e pronto para ser usado aqui.

00:29.150 --> 00:34.070
Então vamos em frente e executar essa cena para muitas dessas cenas no workshop.

00:34.070 --> 00:38.840
A execução da cena de produção não é a coisa mais interessante, mas eu sempre o encorajo a fazê-la

00:38.840 --> 00:39.890
como ponto de partida.

00:39.890 --> 00:46.310
Aqui vemos o registro simples do console que diz que o comprimento dos dados carregados é este.

00:46.340 --> 00:50.120
Esse valor não é muito importante, mas você pode se aprofundar na classe de exemplo se quiser dar uma olhada

00:50.120 --> 00:50.480
nela.

00:50.480 --> 00:52.160
Vamos executar o teste para ela.

00:54.550 --> 00:58.090
Então, aqui em cima, tenho a minha categoria definida para o meu carregador de dados avançado.

00:58.090 --> 01:02.320
Portanto, só estamos vendo o teste relacionado a isso e apenas no modo de edição.

01:02.350 --> 01:06.490
Há também um teste no modo de reprodução que você pode dar uma olhada quando quiser, mas acho que o modo de edição

01:06.490 --> 01:07.630
é mais interessante aqui.

01:07.630 --> 01:09.490
Então, eu vou fazer tudo.

01:15.130 --> 01:19.450
E aqui vemos que temos dois testes e ambos passam com uma verificação verde, o que é ótimo.

01:19.480 --> 01:24.510
Vamos dar uma olhada tanto no load async quanto no mock load async e ver como eles funcionam.

01:24.520 --> 01:26.260
Então, aqui estamos no código de exemplo.

01:26.260 --> 01:31.060
Se você acompanhou o último vídeo, e espero que tenha acompanhado, vimos o método que estamos procurando

01:31.060 --> 01:38.920
aqui, que usa uma chamada real para um servidor da Web, carrega os dados de volta e verifica o valor deles.

01:38.920 --> 01:42.370
Isso se parece muito com o que seria o caso de uso de produção?

01:42.370 --> 01:44.830
Mas já falamos sobre alguns dos problemas.

01:44.860 --> 01:49.030
Estou testando o meu código ou estou testando o Unity Web Service por baixo dele?

01:49.180 --> 01:50.140
Estou testando isso?

01:50.140 --> 01:53.140
Ou estou testando o back-end do github.com?

01:53.140 --> 02:00.010
E se for um servidor estável, você quer concentrar seus testes em seu próprio código personalizado e ter pelo menos

02:00.010 --> 02:01.810
e o menor número possível de dependências.

02:01.810 --> 02:03.990
Portanto, há alguns problemas com isso.

02:04.000 --> 02:09.910
A primeira coisa que fiz ao abordar o assunto foi pensar na injeção de dependência.

02:09.910 --> 02:16.510
Digamos que, na produção, eu queira ter uma forma de chamar isso e que isso seja implementado, que

02:16.510 --> 02:18.340
está usando o serviço web Unity.

02:18.370 --> 02:22.690
Então, para testar, talvez eu queira ter uma segunda maneira de abordá-lo.

02:22.720 --> 02:29.800
Agora, você pode ter um sinalizador em sua base de código que diga algo como "is debug equals true" ou "is production".

02:29.800 --> 02:30.700
é igual a falso?

02:30.700 --> 02:35.260
E em seu código de produção, faça certas coisas no modo de teste e outras não.

02:35.290 --> 02:39.850
Vejo muito disso acontecer nas bases de código, mas geralmente não é uma boa prática.

02:39.850 --> 02:45.790
Você está poluindo o seu código de produção com coisas que são apenas para testes, por isso não é tão apropriado.

02:45.820 --> 02:47.200
Esta é uma solução melhor.

02:47.200 --> 02:49.810
Vamos dar uma olhada no que fazemos bem.

02:49.810 --> 02:55.600
No exemplo básico anterior, eu não tinha um conceito de serviço de rede, nem o passei

02:55.600 --> 02:56.110
aqui.

02:56.140 --> 02:59.440
Nós simplesmente o criamos e ele sempre funcionou de uma forma.

02:59.440 --> 03:03.670
Mas a injeção de dependência aqui é decidida por mim.

03:03.670 --> 03:07.080
Aqui está uma forma personalizada de como isso poderia funcionar.

03:07.090 --> 03:11.290
Aqui está uma parte da lógica que eu poderia trocar de algumas maneiras diferentes.

03:11.290 --> 03:13.930
Eu a declaro aqui em uma linha e depois a passo.

03:13.930 --> 03:17.440
Assim, você poderia imaginar ter vários serviços de rede diferentes.

03:17.440 --> 03:22.000
Eu poderia ter um que fosse apenas para testes, um que fosse apenas para produção, um que apenas escrevesse para

03:22.000 --> 03:26.560
um disco local, um que seja apropriado para um servidor backend específico.

03:26.560 --> 03:27.370
ET cetera.

03:27.400 --> 03:30.070
Isso também tem casos de uso em produção.

03:30.070 --> 03:31.980
Essa ideia de injeção de dependência.

03:31.990 --> 03:34.270
Agora, por que chamamos isso de injeção de dependência.

03:34.270 --> 03:43.960
É porque, em vez de meu carregador de dados avançado fazer sempre uma coisa, eu passo alguma informação que decide

03:43.960 --> 03:45.490
como ele vai operar.

03:45.490 --> 03:52.000
Portanto, em vez de a própria classe saber tudo, estou passando uma dependência, neste caso, para

03:52.000 --> 03:54.160
o serviço Unity Web Request Network.

03:54.160 --> 04:00.340
Então, vamos dar uma olhada em como isso está estruturado e depois veremos por que é útil para nós ao fazermos isso

04:00.340 --> 04:01.180
nossos testes.

04:01.300 --> 04:05.050
Aqui está o código-fonte completo do My Data loader advanced.

04:05.080 --> 04:07.330
Agora, quero me concentrar em duas coisas aqui.

04:07.330 --> 04:11.420
Uma é que em seu construtor eu passo essa dependência.

04:11.440 --> 04:18.970
Agora a injeção de dependência e como criar classes flexíveis a partir desse conceito de injeção de dependência

04:18.970 --> 04:21.580
estão realmente fora do escopo desta aula.

04:21.610 --> 04:24.130
É uma coisa muito boa para você dar uma olhada.

04:24.130 --> 04:30.640
Você poderia procurar no Google algo como D I para unity ou injeção de dependência para unity, ou mesmo dependência

04:30.640 --> 04:35.320
em programação orientada a objetos e ver mais alguns desses conceitos gerais.

04:35.320 --> 04:41.040
Mas supondo que você tenha alguma familiaridade, especialmente devido à minha explicação que acabei de dar,

04:41.050 --> 04:42.340
vamos seguir em frente.

04:42.370 --> 04:49.720
Agora que estou passando isso como uma dependência aqui e armazenando-o, então sempre que eu chamar a nossa funcionalidade principal

04:49.750 --> 04:56.470
de carregar assíncrono, o que eu faço é dizer, ok, quando eu estiver pronto para carregar assíncrono, apenas diga ao meu serviço de rede

04:56.470 --> 04:57.630
para carregar o async.

04:57.640 --> 05:04.930
Agora você pode imaginar se eu tiver passado um serviço de rede que faz um load async para um servidor de back-end

05:04.930 --> 05:06.700
de uma tecnologia específica.

05:06.730 --> 05:08.320
Esta linha aqui faria isso.

05:08.550 --> 05:14.800
Que se eu passasse outra coisa que fizesse uma gravação no disco ou leitura do disco como um tipo diferente

05:14.800 --> 05:17.890
de serviço de rede, esta é a linha aqui que realmente mudaria.

05:17.890 --> 05:24.010
Assim, não preciso ter 2 ou 3 versões diferentes do meu carregador de dados avançado aqui.

05:24.010 --> 05:29.040
Em vez disso, eu passo uma implementação personalizada que lida com esse detalhe específico de uma forma única.

05:29.050 --> 05:33.030
É uma maneira muito poderosa de tornar o seu código mais flexível.

05:33.040 --> 05:41.290
Agora que já falamos sobre passar uma dependência e como ela pode envolver a funcionalidade

05:41.290 --> 05:44.560
aqui, vamos dar uma olhada no que é a fonte para essa dependência em particular.

05:44.560 --> 05:49.150
Portanto, aqui em cima, no mesmo arquivo de classe, tenho algumas coisas para falar.

05:49.150 --> 05:51.490
Primeiro, criei uma interface.

05:51.610 --> 05:59.140
Esta interface aqui do serviço de rede I declara que qualquer pessoa que queira ser considerada viável

05:59.140 --> 06:04.900
dependência a ser passada aqui tem que ter algum método ou métodos disponíveis.

06:04.900 --> 06:09.820
E, neste caso, ele só precisa ter o load async e receber uma string URL.

06:09.850 --> 06:10.620
É isso aí.

06:10.630 --> 06:14.530
Agora, se você não estiver muito familiarizado com as interfaces.

06:14.820 --> 06:16.440
Por favor, dê uma olhada nas interfaces.

06:16.440 --> 06:22.200
Você pode dar uma olhada em algo como interfaces versus classes em C-sharp ou em unity, e verá muitas

06:22.200 --> 06:23.040
de exemplos.

06:23.040 --> 06:29.850
Mas uma distinção importante aqui é que a interface define o que é a API pública, mas não define

06:29.850 --> 06:31.920
se preocupa em fazer a implementação.

06:31.980 --> 06:35.430
A implementação é declarada aqui em uma classe pública.

06:35.460 --> 06:37.590
Agora as classes com as quais você provavelmente está mais familiarizado.

06:37.920 --> 06:42.480
E o que fazemos aqui é implementar um sabor particular disso.

06:42.480 --> 06:48.240
O serviço de rede nessa variante específica deve parecer muito familiar para você do vídeo anterior.

06:48.270 --> 06:50.640
Esta é exatamente a mesma implementação.

06:50.910 --> 06:58.020
Estamos apenas usando a solicitação web unity e depois fazendo a metodologia de envio de solicitação web.

06:58.020 --> 07:03.420
Agora que examinamos o código-fonte que está voltando, podemos ver que estamos apenas criando

07:03.420 --> 07:06.150
uma classe personalizada que lida com um pouco da funcionalidade.

07:06.150 --> 07:08.430
E passamos essa classe personalizada para lá.

07:08.430 --> 07:12.920
Mas agora temos uma classe avançada do my data loader que é muito mais flexível.

07:12.930 --> 07:17.600
Agora, por que, especificamente no mundo dos testes, a injeção de dependência é relevante?

07:17.610 --> 07:23.280
Bem, temos um utilitário maravilhoso que podemos usar dentro do unity para nossos testes unitários.

07:23.280 --> 07:28.710
Essa é uma biblioteca chamada N substitute e foi incluída aqui no projeto de exemplo.

07:28.710 --> 07:31.890
Vamos dar uma olhada em outro método de teste logo abaixo do outro.

07:31.890 --> 07:35.790
E este vai usar o que é chamado de simulação de uma classe.

07:35.790 --> 07:41.190
Portanto, aqui temos uma criação muito semelhante do carregador My Data avançado.

07:41.190 --> 07:46.980
E, em vez de passar a versão da solicitação web da unidade, vamos fazer algo que parece bastante

07:47.010 --> 07:47.760
estranho aqui.

07:47.760 --> 07:50.820
Vamos utilizar a biblioteca substituta.

07:50.820 --> 07:58.170
E o que vamos fazer aqui é dizer "hey on the fly" nestas duas linhas, vá criar

07:58.170 --> 08:02.910
uma classe que possa lidar com a funcionalidade que eu preciso.

08:02.910 --> 08:09.900
Mas como se trata de uma classe simulada, ela não precisa necessariamente chamar o servidor.

08:09.900 --> 08:15.330
Em vez disso, o que ela fará é, em momentos importantes, retornar um valor previsível para nós.

08:15.330 --> 08:24.570
Lembre-se de que o nosso fluxo aqui é que o teste diz ao carregador de dados para carregar uma URL dentro dos dados

08:24.570 --> 08:28.650
O carregador de dados diz ao serviço de rede para carregar uma URL.

08:28.680 --> 08:35.340
Esse último passo, o resultado final, leva meio segundo, vai e carrega do servidor e retorna

08:35.370 --> 08:36.780
uma string de volta.

08:36.780 --> 08:41.670
Portanto, tudo o que eu realmente preciso em uma situação de simulação é: ok, nem mesmo chame um servidor.

08:41.670 --> 08:45.240
Apenas quando eu chamar isso, você me dará uma string de volta.

08:45.240 --> 08:54.630
Portanto, estou dizendo aqui com essa linguagem que quero que sempre que eu chamar o load async e passar qualquer string

08:54.630 --> 08:59.370
para a URL, então retorne a palavra mocked data.

08:59.640 --> 09:05.970
Então, aqui embaixo, eu poderia me certificar de que estou obtendo o resultado esperado que desejo, em vez de verificar

09:05.970 --> 09:09.930
que tem doctype no retorno, como fiz anteriormente.

09:09.930 --> 09:13.650
Posso verificar os dados de simulação aqui.

09:13.650 --> 09:22.290
Portanto, o que estamos vendo aqui é um exemplo muito simples, que pode não parecer útil, mas imagine em um exemplo de

09:22.290 --> 09:29.460
exemplo mais complexo em que não estivéssemos apenas carregando dados, mas sim carregando-os, lendo, escrevendo, transformando

09:29.460 --> 09:32.730
os dados, fazendo bastante coisa, talvez uns 5 ou 6 métodos diferentes.

09:32.760 --> 09:39.060
Todos eles poderiam estar apontando para sistemas totalmente diferentes, mas quando realmente queremos testar apenas o

09:39.060 --> 09:48.210
carregador de dados, então queremos passar habilidades simuladas para que esses outros sistemas sejam apenas temporariamente

09:48.210 --> 09:52.130
ignorados para que possamos nos concentrar apenas no que temos em mãos aqui.

09:52.140 --> 09:54.360
Agora vamos dar uma olhada no que aconteceria.

09:54.360 --> 09:56.850
Então eu chamo o load async.

09:56.850 --> 10:03.960
O que vai acontecer é que esse sistema interno vai retornar o valor previsto.

10:03.960 --> 10:08.130
E o carregador de dados será chamado de carregado.

10:08.130 --> 10:14.070
E seu valor de resultado será o valor que esperamos que seja.

10:14.070 --> 10:18.210
Então, vamos executar isso dentro do unity editor.

10:18.210 --> 10:19.680
Então, vamos clicar em run all aqui.

10:22.010 --> 10:23.380
E funciona muito rapidamente.

10:23.390 --> 10:29.180
Vamos comparar se eu apenas executar o load async, que na verdade está chamando um servidor.

10:33.100 --> 10:34.120
Foi rápido.

10:34.150 --> 10:38.620
Então, se eu chamar o mock load async que não está chamando nenhum servidor.

10:42.510 --> 10:47.720
Talvez não seja evidente no vídeo, mas é muito mais rápido chamar o MOC.

10:47.730 --> 10:53.060
E isso faz sentido porque não estamos realmente chamando um servidor e esperando por um resultado.

10:53.070 --> 10:56.550
Portanto, isso não é apenas para nos poupar alguns segundos.

10:56.580 --> 11:00.180
É novamente para nos concentrarmos ao projetar nossos testes.

11:00.210 --> 11:02.670
O que de fato queremos testar?

11:02.670 --> 11:04.830
E então queremos isolá-lo.

11:04.830 --> 11:09.060
Portanto, não estamos realmente testando uma classe do Unity Web Services.

11:09.090 --> 11:11.580
Não estamos testando um back end do GitHub.

11:11.610 --> 11:15.390
O teste de vários sistemas juntos é chamado de teste de integração.

11:15.390 --> 11:17.460
Esse é um tipo de teste apropriado.

11:17.460 --> 11:21.570
Mas ele está fora do que estamos falando aqui, que é o teste de unidade.

11:21.570 --> 11:26.340
Mais uma vez, estamos reduzindo ao mínimo de dependências possível, poucas linhas de código.

11:26.340 --> 11:27.360
Você poderia pensar sobre isso.

11:27.360 --> 11:35.790
Então é isso, vimos como usar a biblioteca substituta e como também podemos fazer uma simulação para

11:35.790 --> 11:37.620
uma chamada para o servidor back-end.

11:37.620 --> 11:38.460
Portanto, obrigado.
