WEBVTT

00:00.080 --> 00:03.050
Olá e bem-vindo ao teste de unidade para unity.

00:03.080 --> 00:04.310
Estamos no workshop aqui.

00:04.310 --> 00:08.450
E neste vamos dar uma olhada no personagem em uma forma básica.

00:08.450 --> 00:10.700
Vamos dar uma olhada em alguns diferentes.

00:10.730 --> 00:13.400
Começaremos com o básico e passaremos para algo mais avançado.

00:13.400 --> 00:15.080
Vamos dar uma olhada nesta demonstração em ação.

00:15.080 --> 00:16.520
Dentro do unity editor.

00:16.520 --> 00:19.430
Vamos abrir o unity, abrir o nosso projeto de amostra.

00:19.430 --> 00:23.360
E depois vamos reproduzir uma ou mais cenas relacionadas com o tópico aqui.

00:23.360 --> 00:29.270
A cena será o personagem básico, e eu falarei sobre o Monobehaviour como algo

00:29.270 --> 00:34.760
que pode ou não ser testado, bem como o modo de reprodução versus o modo de edição, algo que já mencionei

00:34.760 --> 00:36.020
anteriormente no curso.

00:36.050 --> 00:37.640
Vamos trazê-lo de volta aqui e falar sobre ele.

00:37.640 --> 00:39.980
Aqui estamos no projeto, olhando para o caractere básico.

00:39.980 --> 00:41.390
Vamos prosseguir e executar a cena.

00:46.760 --> 00:53.600
Assim, embora a maioria dos workshops que fizemos já tenha tido uma cena bastante entediante em que absolutamente nada

00:53.630 --> 00:56.420
de interesse está acontecendo aqui, nós temos um pouco mais.

00:56.450 --> 01:02.080
Quando apertamos o play, vemos um cubo branco que é criado no centro da tela.

01:02.090 --> 01:04.640
Posso usar minhas teclas de seta e me movimentar.

01:04.640 --> 01:11.540
Portanto, embora o exemplo aqui seja reconhecidamente muito simples, o objetivo é falar sobre alguns dos aspectos mais complexos

01:11.540 --> 01:14.200
aspectos mais complexos dos testes dentro da unidade.

01:14.210 --> 01:19.340
Nas cenas anteriores, não estávamos preocupados com a renderização de gráficos ou com a recepção de entradas.

01:19.580 --> 01:26.450
No último workshop, falamos sobre a diferença entre testar várias dependências diferentes

01:26.450 --> 01:27.200
juntas.

01:27.200 --> 01:32.390
Por exemplo, um método que dentro chama um segundo método que dentro chama o terceiro.

01:32.420 --> 01:34.100
Essas são dependências.

01:34.130 --> 01:40.400
Aqui estamos falando de um aspecto semelhante, exceto que toda vez que quero mover meu personagem, primeiro

01:40.400 --> 01:47.360
peço para ouvir o sistema de entrada do Unity, depois uso o movimento de transformação Monobehaviour do Unity.

01:47.360 --> 01:47.770
Certo.

01:47.780 --> 01:52.460
Portanto, estamos usando várias dependências diferentes ou classes diferentes.

01:54.970 --> 01:58.240
Aqui posso usar as teclas de seta para me movimentar.

01:59.360 --> 02:00.800
E é basicamente isso.

02:02.750 --> 02:05.690
Mas a ideia é que estamos fazendo um pouco mais do que antes.

02:05.780 --> 02:08.250
Vamos falar sobre as implicações de testar isso.

02:08.270 --> 02:14.780
Portanto, aqui em cima no executor do teste, tenho a categoria definida para o nosso caractere básico, o que é ótimo.

02:14.810 --> 02:20.420
Em seguida, posso alternar para ver os testes do modo de reprodução e os testes do modo de edição.

02:20.450 --> 02:26.720
Podemos ver que temos alguns de ambos, mas como há um monocomportamento envolvido, eu vou

02:26.720 --> 02:28.190
me concentrar mais no modo play.

02:28.220 --> 02:34.820
Agora, em cada um dos workshops, incluí pelo menos um teste de modo de edição e pelo menos um de modo de reprodução

02:34.850 --> 02:37.020
para a cena em questão.

02:37.040 --> 02:42.620
Fiz isso novamente aqui, mas dependendo do que estiver testando, você deve pensar se isso é

02:42.620 --> 02:47.060
mais apropriado para o modo de edição ou mais apropriado para o modo de reprodução?

02:47.090 --> 02:52.130
Há uma arte e uma ciência em como abordar isso e como projetar seu código para ser mais

02:52.130 --> 02:52.760
testável.

02:52.790 --> 02:59.600
Mas uma maneira geral de ver isso, que é relevante aqui, é que se você estiver usando a funcionalidade Monobehaviour,

02:59.600 --> 03:02.270
isso soa mais como um teste de modo de jogo.

03:02.300 --> 03:08.540
Quanto mais bibliotecas de unidade, particularmente em tempo de execução, você estiver usando em sua produção, você deve pensar

03:08.540 --> 03:10.460
sobre esses testes em modo play.

03:10.490 --> 03:13.970
Não é uma regra rígida, mas é uma boa maneira de começar a pensar nisso.

03:14.240 --> 03:16.110
Então, vamos executar nossos testes aqui.

03:16.130 --> 03:18.890
Eu tenho o modo play e vou executar todos.

03:22.470 --> 03:22.800
Certo.

03:22.830 --> 03:25.650
Demorou alguns segundos para executar, mas já temos todos eles.

03:25.680 --> 03:31.650
O que realmente acontece quando você está executando um teste de modo de reprodução é que ele cria uma nova cena vazia e

03:31.650 --> 03:35.430
executa apenas um teste dentro dela e a destrói.

03:35.430 --> 03:42.630
E cria uma cena totalmente nova, garantindo que temos o espaço mundial fornecido por uma cena.

03:42.630 --> 03:49.590
Mas o frescor de uma nova cena que não tem nenhuma dependência ou informação obsoleta que possa influenciar

03:49.590 --> 03:50.220
o teste.

03:50.220 --> 03:51.820
Então, gostamos de como isso está configurado.

03:51.840 --> 03:58.620
Agora, as coisas que estou fazendo são mover, mover por código de chave e mover para um lugar específico.

03:58.620 --> 04:01.260
Então, vamos dar uma olhada nesse movimento para testar.

04:03.240 --> 04:05.580
Na verdade, vamos dar uma olhada no código de produção primeiro.

04:05.580 --> 04:08.550
Então, se eu for aqui e der uma olhada no exemplo básico.

04:10.370 --> 04:12.140
Este é o código de produção.

04:12.140 --> 04:14.330
Vamos dar uma olhada nisso antes de passar para os testes.

04:14.330 --> 04:17.570
Aqui, tudo o que faço é criar uma primitiva.

04:17.600 --> 04:22.610
Você poderia imaginar também carregar um pré-fabricado aqui se quisesse fazer isso.

04:22.610 --> 04:27.620
Mas eu queria nos levar lentamente a todas as complexidades do tempo de execução e da unidade.

04:27.620 --> 04:29.750
Portanto, não estou usando um pré-fabricado aqui.

04:29.750 --> 04:33.740
Eu apenas crio um novo cubo do zero com uma linha de código.

04:33.740 --> 04:40.430
Eu lhe dou um nome apenas para fins de organização e, em seguida, adiciono o componente do monobehaviour

04:40.430 --> 04:42.230
que eu quero de fato testar.

04:42.230 --> 04:48.350
Uma das coisas que estou fazendo é movê-lo para o ponto 000 e depois mostrar que

04:48.350 --> 04:49.910
valor na tela.

04:49.910 --> 04:52.490
Então, vamos dar uma olhada no código fonte aqui.

04:55.160 --> 04:56.540
Aqui está o caractere básico.

04:56.570 --> 04:58.370
Isso estende o Monobehaviour.

04:58.400 --> 05:06.330
Agora, se você está familiarizado com o unity, provavelmente usa Monobehaviours o tempo todo como uma boa prática recomendada.

05:06.350 --> 05:09.200
Você quer começar a pensar de forma consciente.

05:09.200 --> 05:14.260
Quando é apropriado usar um monocomportamento e quando posso usar algo diferente?

05:14.270 --> 05:20.180
Como desenvolvedores iniciantes, criamos tudo como um filho do monobehaviour, mas com o tempo e a experiência

05:20.180 --> 05:23.510
você percebe que há prós e contras em usar monocomportamentos.

05:23.510 --> 05:28.220
Um dos contras é que, historicamente, era mais difícil fazer testes ao longo do caminho.

05:28.220 --> 05:30.170
A Unity forneceu esses testes de modo de jogo.

05:30.170 --> 05:34.550
Então, agora podemos certamente testar o Playmode e podemos testar os Monobehaviours.

05:34.550 --> 05:37.230
Isso é ótimo, mas ainda há algumas desvantagens.

05:37.250 --> 05:41.930
Novamente, o Monobehaviour dependerá de mais sistemas de unidade sob o capô.

05:41.930 --> 05:47.300
E quando estivermos tentando testar o nosso código personalizado, talvez não tenhamos certeza de onde está o problema.

05:47.330 --> 05:49.320
É o nosso código ou é o código da Unity?

05:49.340 --> 05:51.710
Então, novamente, há algumas dependências aqui.

05:51.740 --> 05:55.880
Tudo isso está bem, mas é algo em que você deve pensar quando estiver projetando suas classes e como

05:55.880 --> 05:57.290
você estiver projetando seus testes.

05:57.710 --> 06:00.680
Portanto, temos uma velocidade de movimento.

06:00.710 --> 06:02.060
Temos um tipo de movimento.

06:02.060 --> 06:04.970
Esta é apenas a direção da tecla de seta que estou pressionando.

06:04.970 --> 06:07.280
Em seguida, usamos a atualização do Unity.

06:07.310 --> 06:10.160
Agora, deixe-me checar novamente aqui.

06:12.330 --> 06:12.810
De fato.

06:12.810 --> 06:18.540
O loop de atualização aqui é a única funcionalidade importante do monocomportamento que estou usando.

06:18.570 --> 06:22.740
O restante desse código não precisa necessariamente estar em um monocomportamento.

06:22.770 --> 06:27.170
Também estou usando o sistema de entrada do Unity, portanto, essa é uma segunda dependência.

06:27.180 --> 06:30.370
Então, vamos ver o que eu faço a cada quadro de atualização.

06:30.390 --> 06:32.940
Eu chamo esse método aqui de move by input.

06:32.970 --> 06:37.920
Eu verifico se o usuário está pressionando uma tecla ou teclas específicas no teclado.

06:37.920 --> 06:41.970
E então eu chamo o movimento pelo código da tecla aqui embaixo.

06:43.280 --> 06:49.820
Tudo o que fazemos é dizer que, se estivermos nos movendo para a esquerda, então vamos nos mover em um vetor para a direção esquerda.

06:49.820 --> 06:53.420
Se estivermos nos movendo para a direita, etc., para cima e para baixo.

06:53.420 --> 06:58.460
Isso permite que você se mova em todas as quatro direções usando as quatro teclas de seta.

06:58.460 --> 07:00.020
Portanto, o código é bastante simples.

07:00.020 --> 07:04.040
E se você já criou seu próprio personagem personalizado antes, deve estar familiarizado com a configuração de algo como

07:04.040 --> 07:04.610
isso.

07:07.590 --> 07:09.480
Aqui embaixo, temos dois métodos.

07:09.480 --> 07:14.850
Um que nos permite mover para um ponto específico e outro que nos permite mover por uma unidade.

07:14.850 --> 07:17.700
Então, digamos que eu queira ir para a direita em uma unidade.

07:17.700 --> 07:22.110
Eu poderia passar uma unidade por uma unidade por uma unidade por uma unidade.

07:22.110 --> 07:27.350
Se eu quiser me deslocar diretamente para um ponto específico no espaço, esse seria o movimento para.

07:27.360 --> 07:33.390
Portanto, esses não são necessariamente os únicos métodos de que você precisaria em uma classe de personagem personalizada, mas há

07:33.390 --> 07:34.710
alguns bastante comuns.

07:34.710 --> 07:41.460
Portanto, terminaremos esta lição com isso como uma forma básica e adequada de testar alguma funcionalidade.

07:41.460 --> 07:46.920
Se quiser dar uma olhada no modo de edição ou nos outros testes que estão aqui no modo de reprodução, vá em frente

07:46.920 --> 07:47.820
e faça isso.

07:47.850 --> 07:49.440
Vou passar para o próximo vídeo.

07:49.440 --> 07:50.190
Obrigado.
