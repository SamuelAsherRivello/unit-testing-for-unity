WEBVTT

00:00.110 --> 00:00.980
Olá e seja bem-vindo.

00:00.980 --> 00:07.040
Neste workshop, vamos dar uma olhada no sistema My Math, entrando no que é um sistema bastante

00:07.070 --> 00:11.300
exemplo bastante simples, apenas para nos familiarizarmos com os fundamentos dos testes unitários.

00:11.300 --> 00:14.720
Portanto, nesta demonstração, você pode usar o projeto Core Sample para acompanhá-lo.

00:14.720 --> 00:19.520
Vamos abrir o unity editor, abrir o projeto Core Sample e depois

00:19.520 --> 00:21.140
abrir e reproduzir algumas cenas aqui.

00:21.140 --> 00:26.360
Vamos analisar o sistema My Math, bem como o teste por trás dele, e vamos fazer uma recapitulação

00:26.390 --> 00:31.970
dos testes unitários, apenas falando sobre os conceitos básicos que eu vir ali e pensar em mencionar.

00:31.970 --> 00:38.450
E também falaremos sobre valores parametrizados, que é uma forma intermediária de abordar

00:38.450 --> 00:38.960
testes.

00:38.960 --> 00:42.620
E é uma boa habilidade adicional para se ter ao abordar os testes unitários.

00:42.620 --> 00:43.640
Vamos nos aprofundar.

00:43.850 --> 00:48.410
Aqui estou dentro do editor de unidade e abri o meu exemplo de sistema matemático.

00:48.410 --> 00:51.050
Vamos apenas dar uma olhada na cena em si.

00:51.080 --> 00:54.710
Às vezes, nesses workshops, a cena é mais emocionante.

00:54.710 --> 00:56.300
Esta não é tão emocionante.

00:56.300 --> 01:01.730
Vamos continuar e apertar o play aqui na janela inferior, vemos um texto simples que está ajudando

01:01.730 --> 01:07.040
a entender que estamos na demonstração de teste de unidade, e vamos apenas reproduzir a cena e visualizar o console.

01:07.040 --> 01:08.510
Então, vamos dar uma olhada no console.

01:08.600 --> 01:11.210
O console diz que esta cena não tem UI.

01:11.630 --> 01:14.510
Veja o console do unity aqui, estamos no console.

01:14.510 --> 01:15.140
Realmente.

01:15.140 --> 01:19.880
Ele só vai nos mostrar um valor que foi cuspido após uma operação bem-sucedida.

01:19.880 --> 01:25.370
Portanto, em um código de produção real, essa seria uma cena muito mais interessante.

01:25.370 --> 01:30.590
Talvez haja de fato o menu do jogo ou o jogo acontecendo aqui.

01:30.860 --> 01:35.810
Esta é uma cena bastante enxuta onde não há muito para ver, mas você pode imaginar que isso poderia

01:35.810 --> 01:36.200
ser.

01:36.770 --> 01:41.960
Não é particularmente importante que haja uma cena de tempo de execução para fins de teste.

01:41.960 --> 01:47.600
Só quero falar com frequência sobre o equilíbrio entre o seu código de produção fazendo a sua produção

01:47.600 --> 01:48.200
coisa.

01:48.200 --> 01:51.560
E aqui está o código de teste fazendo o seu trabalho de teste.

01:51.560 --> 01:57.380
Então, no código de produção, sempre experimentamos isso apertando play em uma cena de unidade como esta.

01:57.380 --> 02:00.860
E para fazer nossos testes unitários, fazemos algo diferente.

02:00.860 --> 02:04.040
O que fazemos aqui é olhar para a janela do executor de testes.

02:04.580 --> 02:08.420
Exploramos a categoria apropriada para o que queremos examinar aqui.

02:08.420 --> 02:10.550
Estamos apenas examinando o meu sistema de matemática.

02:11.630 --> 02:14.090
E depois clicamos em let's see.

02:14.090 --> 02:15.350
Vamos apenas fazer a tarefa do modo de edição.

02:15.470 --> 02:19.850
Vamos fazer run all aqui e todos os testes serão executados dessa forma.

02:19.880 --> 02:22.120
Agora, na verdade, a cena não foi executada.

02:22.130 --> 02:28.490
Está apenas rodando meio que lateralmente em seu próprio universo, executando esses testes dentro de um

02:28.490 --> 02:29.360
modo de edição.

02:29.360 --> 02:32.860
Portanto, testes em modo de edição, falando um pouco sobre a diferença.

02:32.870 --> 02:38.090
Os testes do modo de edição são executados no modo de edição, que na unidade tem dois modos primários.

02:38.090 --> 02:43.700
Basicamente, desde o momento em que você aperta o botão play até o momento em que você aperta o botão play, ou seja

02:43.700 --> 02:44.360
modo de reprodução.

02:44.390 --> 02:47.990
Geralmente é onde o usuário experimenta o jogo da unidade.

02:48.680 --> 02:53.240
Sempre que não estivermos nesse modo, estaremos no modo de edição, sentado bem aqui, no modo de edição.

02:53.270 --> 02:59.330
Esses testes são executados no modo de edição porque não precisam necessariamente de toda a complexidade de um tempo de execução

02:59.330 --> 02:59.870
cena.

02:59.870 --> 03:05.180
Isso nos ajuda a ter uma pequena área isolada mais simples onde esses códigos são executados.

03:05.180 --> 03:10.850
Agora, às vezes você precisa das conveniências dos monocomportamentos e da funcionalidade de tempo de execução.

03:10.850 --> 03:14.750
É aí que o modo de reprodução entra em ação.

03:14.750 --> 03:17.330
E aqui temos alguns testes de modo de reprodução também.

03:17.330 --> 03:22.550
Assim, cada vez que clico em uma dessas caixas de seleção, você pode ver que ele nos mostra algumas listas ligeiramente diferentes

03:22.580 --> 03:23.810
do que temos disponível.

03:23.810 --> 03:26.240
Portanto, aqui no modo de jogo, vou clicar em "Run All".

03:27.020 --> 03:34.670
E aqui está criando uma cena totalmente nova, executando uma cena em tempo de execução que é apenas para demonstração

03:34.670 --> 03:36.380
com qualquer código de teste que eu tenha.

03:36.380 --> 03:39.920
E depois volta à cena original em que estávamos.

03:39.920 --> 03:44.180
Se não tivéssemos a cena salva, ele nos avisaria e diria, ei, você está prestes a executar um modo de reprodução

03:44.210 --> 03:44.660
teste.

03:44.690 --> 03:46.430
Vamos sair temporariamente de sua cena.

03:46.460 --> 03:48.110
Deseja salvar sua cena primeiro?

03:48.110 --> 03:50.570
Geralmente, essa é uma boa ideia, portanto, fique atento a isso.

03:50.600 --> 03:52.370
Agora vamos dar uma olhada no código-fonte.

03:52.400 --> 03:56.060
Vamos primeiro dar uma olhada no código de produção em tempo de execução.

03:56.060 --> 03:58.850
Então, vamos abrir o exemplo do sistema My Math.

03:58.880 --> 04:05.810
Cada um desses workshops tem, em geral, um objeto de jogo com um script de exemplo que inicia

04:05.810 --> 04:06.620
tudo isso.

04:06.620 --> 04:12.560
Então, quando olhamos para isso, aqui estamos no editor de código e podemos ver o sistema completo do my math

04:12.560 --> 04:13.250
exemplo.

04:13.250 --> 04:18.740
Este é um monocomportamento porque eu quero ter as conveniências do código em um objeto do jogo.

04:18.740 --> 04:20.230
E depois dentro do awake.

04:20.240 --> 04:23.450
Aqui vou simular algum código de produção.

04:23.450 --> 04:29.210
Agora ele é bem enxuto, não tem muita coisa e parece o mesmo que o teste que estamos fazendo

04:29.210 --> 04:34.850
porque eu crio a classe do zero e chamo um método nela, e então mostro

04:34.850 --> 04:35.600
os resultados.

04:35.600 --> 04:41.390
Mas é importante saber que em um exemplo de produção, em um projeto de jogo real, esse equivalente seria

04:41.390 --> 04:46.640
seria muitas classes e todas as cenas e todos os prefabs e toda a complexidade que você geralmente teria

04:46.640 --> 04:47.600
em seu projeto.

04:47.600 --> 04:50.300
Mas aqui estou mantendo-o propositalmente muito enxuto.

04:50.300 --> 04:51.980
Portanto, observe o que fazemos aqui.

04:51.980 --> 04:53.960
Criamos o sistema my math.

04:53.990 --> 04:58.820
Pegamos um par de ints e os preenchemos com os valores cinco e dez.

04:58.820 --> 05:01.010
E então chamamos o sistema my Math.

05:01.010 --> 05:03.620
E passamos os valores cinco e dez juntos.

05:03.620 --> 05:05.570
E aqui mostramos o resultado.

05:05.570 --> 05:07.100
Então vamos em frente e fazer isso.

05:07.100 --> 05:08.540
Então, aqui eu aperto o play.

05:12.600 --> 05:16.600
E aqui embaixo, na janela do console, vemos que o resultado é 15.

05:16.620 --> 05:22.290
Gosto da simplicidade desse exemplo de codificação, pois ele nos faz começar a pensar em um mundo

05:22.290 --> 05:27.570
onde os testes unitários nunca existiram, como eu poderia ter certeza de que esse código é funcional?

05:27.600 --> 05:34.620
Bem, talvez esse código do meu sistema matemático seja usado em muitos, muitos lugares do seu jogo e você simplesmente

05:34.620 --> 05:40.020
sempre que quiser ver e validar que esse sistema está funcionando bem, basta jogar o jogo e

05:40.020 --> 05:44.160
seu jogo pode durar alguns minutos ou várias horas.

05:44.160 --> 05:50.220
E esse sistema específico que está sendo testado pode ser usado em muitos lugares diferentes, dependendo

05:50.220 --> 05:53.400
de diferentes comportamentos, entradas e situações do usuário.

05:53.400 --> 05:55.740
Talvez a hora do dia seja importante.

05:55.740 --> 06:01.020
Portanto, é difícil saber se estou realmente testando em isolamento bruto?

06:01.020 --> 06:09.570
Portanto, um primeiro passo que eu poderia dar se quisesse fazer alguma validação é copiar isso aqui e colar

06:09.570 --> 06:10.440
aqui.

06:12.790 --> 06:15.290
E chamar isso aqui e testar.

06:15.310 --> 06:16.840
Bem, e se fossem seis?

06:16.840 --> 06:18.700
E se for 11?

06:20.790 --> 06:22.410
A para, B para.

06:27.060 --> 06:33.060
Portanto, agora estou testando não um teste unitário, mas estou apenas validando dois exemplos diferentes aqui.

06:33.060 --> 06:35.820
Então, estou fazendo este primeiro e o segundo.

06:35.850 --> 06:42.840
Isso é chamado de teste de usuário ou teste de modo de jogo ou teste de integração em que estou executando

06:42.840 --> 06:43.980
código de produção.

06:43.980 --> 06:50.760
E estou apenas experimentando como usuário, esperando que eu acidentalmente peça para ele fazer um monte de coisas diferentes

06:50.790 --> 06:53.690
operações diferentes e ver se nenhuma delas falha.

06:53.700 --> 06:57.870
Mas você pode imaginar que o que estou fazendo aqui é adicionar coisas que eu realmente não quero para o final

06:57.870 --> 06:59.190
experiência do usuário.

06:59.190 --> 07:05.700
Estou apenas tentando me dar um pouco mais de confiança no meu próprio código chamando alguma funcionalidade

07:05.700 --> 07:06.960
vezes extras.

07:06.990 --> 07:13.590
Você também pode definir um booleano em algum lugar do seu projeto que diga que o modo de depuração é verdadeiro e então

07:13.590 --> 07:15.330
em todo o seu código de produção.

07:15.330 --> 07:18.810
Se essa for a situação, você fará um pouco mais de testes.

07:18.810 --> 07:20.220
Isso não é ruim.

07:20.220 --> 07:25.200
Em determinadas situações, isso pode definitivamente ajudá-lo, mas vejamos como a situação está melhor

07:25.200 --> 07:25.770
pode ser.

07:25.770 --> 07:29.010
Se, em vez de fazer isso, eu executar testes unitários.

07:29.010 --> 07:31.860
Então, é aqui que o código desse projeto se encontra.

07:31.860 --> 07:36.060
Neste projeto, temos o sistema My Math, o exemplo do sistema My Math, que já vimos.

07:36.750 --> 07:42.630
A estrutura desse sistema e a forma como ele funciona em conjunto foram abordadas anteriormente no curso.

07:42.630 --> 07:47.430
Mas temos um teste de editor e um teste de tempo de execução sobre os quais falaremos.

07:47.430 --> 07:54.030
Novamente, qualquer teste de editor executará um modo de edição e, em geral, é ideal para coisas que não

07:54.030 --> 07:57.360
usam classes específicas de unidade como Monobehaviour.

07:57.390 --> 08:02.520
O Monobehaviour foi projetado apenas para ser executado em sua forma mais completa no modo de jogo.

08:02.520 --> 08:04.470
Portanto, aqui não é muito apropriado.

08:04.470 --> 08:04.950
Então.

08:04.950 --> 08:07.860
Mas para testes simples como o que temos aqui, ele é ótimo.

08:07.890 --> 08:12.630
A área de tempo de execução aqui, onde temos o teste do modo de reprodução, seria um ótimo lugar.

08:12.630 --> 08:18.180
E em cada um desses workshops eu faço um de cada para que você possa ver as diferenças.

08:18.180 --> 08:23.040
Mas é importante pensar que, em determinadas situações, dependendo do que você está testando, provavelmente

08:23.040 --> 08:27.060
um teste de unidade em modo de edição é mais apropriado nessa situação.

08:27.060 --> 08:31.680
Esse é definitivamente o caso mais tarde, quando estivermos falando sobre mover com a entrada e fazer algo com

08:31.680 --> 08:37.800
física, talvez o teste do modo de jogo seja necessário, porque a entrada e a física são realmente projetadas

08:37.800 --> 08:39.270
como experiências de modo de jogo.

08:39.270 --> 08:41.700
Portanto, é importante saber essa distinção.

08:41.700 --> 08:43.080
E eu vou falar sobre isso aqui e ali.

08:43.320 --> 08:45.840
Então, vamos dar uma olhada no teste do meu sistema de matemática.

08:49.240 --> 08:52.210
E ver como ele está organizado.

08:53.800 --> 08:59.050
Aqui, observe que o teste do sistema My Math tem algumas diferenças.

09:04.440 --> 09:06.270
Tem alguns métodos diferentes sob ele.

09:06.420 --> 09:10.560
Cada um dos nomes que vemos aqui são os nomes dos métodos de teste.

09:10.560 --> 09:12.180
Então, vamos começar com o primeiro.

09:12.570 --> 09:18.030
A convenção que eu gosto de usar é seguida aqui, e vamos abordá-la no código que eu geralmente coloco

09:18.030 --> 09:23.520
primeiro, qual método estamos testando, o que estamos esperando e, em seguida, qual é a situação.

09:23.520 --> 09:26.490
Então, aqui diz que o método add é o que estamos testando.

09:26.490 --> 09:31.140
Esperamos que o resultado seja 15 quando passarmos cinco e dez.

09:31.380 --> 09:36.840
Um bom atalho aqui é que, ao executar qualquer teste, você pode clicar duas vezes nele para executá-lo novamente.

09:37.890 --> 09:39.600
E depois posso clicar com o botão direito do mouse.

09:41.550 --> 09:42.420
Desculpe, eu estava no modo de reprodução.

09:42.960 --> 09:44.910
Clique duas vezes e ele volta a funcionar.

09:44.940 --> 09:45.390
Ótimo.

09:45.390 --> 09:46.290
Ainda verde.

09:46.290 --> 09:49.650
E posso clicar com o botão direito do mouse e escolher código-fonte aberto.

09:50.810 --> 09:54.860
Essa é uma maneira fácil de ir direto para a classe certa e para o método certo.

09:54.890 --> 09:57.380
Aqui está novamente o nome do método que vimos.

09:57.410 --> 10:00.920
Novamente, o resultado da adição é 15 quando cinco e dez.

10:00.950 --> 10:07.130
A razão pela qual isso é importante é que se você tiver muitas classes de teste com muitos métodos de teste,

10:07.130 --> 10:14.660
e eu espero que você tenha em seu projeto, a fim de saber qual no executor de teste é qual no código

10:14.660 --> 10:17.670
Aqui, é bom ter essa nomenclatura consistente.

10:17.690 --> 10:22.960
Então, o que fazemos aqui é a metodologia de organizar, agir e afirmar.

10:22.970 --> 10:23.780
No arranjo.

10:23.780 --> 10:28.370
O que vamos fazer primeiro é criar uma nova instância do que queremos testar.

10:28.370 --> 10:32.490
Dessa forma, sabemos que ela não ficou parada, não tem dados antigos dentro dela.

10:32.510 --> 10:33.850
É sempre uma boa prática.

10:33.860 --> 10:35.540
Então, vamos agir de acordo com isso.

10:35.540 --> 10:39.200
Qual é o único método que você pode usar se conseguir se safar?

10:39.200 --> 10:41.750
Talvez dois métodos que realmente façam o teste.

10:41.750 --> 10:43.220
Mas um método é o ideal.

10:43.250 --> 10:45.740
Aqui estamos somando cinco e dez.

10:45.740 --> 10:49.720
E então, no assert, vamos usar essa linguagem de assert.

10:49.730 --> 10:56.720
A classe assert tem uma certa estrutura na qual você diz que eu afirmo que algo é algo.

10:56.720 --> 11:01.730
E você pode consultar a documentação sobre isso para ver uma variedade de maneiras de formatar isso.

11:01.730 --> 11:07.840
Mas muitas vezes eu uso is equal to ou is true ou is false.

11:07.850 --> 11:10.730
Portanto, esses são os que você verá com frequência aqui.

11:11.060 --> 11:15.980
Então, quando eu executo isso, porque o código é executado corretamente, ele adiciona cinco e dez para formar 15.

11:16.010 --> 11:16.760
É isso aí.

11:16.790 --> 11:18.070
Somos capazes de fazer isso.

11:18.080 --> 11:21.710
Agora lembre-se do exemplo que eu estava dando no código de produção.

11:21.710 --> 11:30.710
E se você quisesse testar cinco e dez e depois testar seis e 11 e depois testar sete e 12 ou qualquer outra coisa?

11:30.710 --> 11:31.760
combinações?

11:31.760 --> 11:38.570
Quanto mais você se aperfeiçoar nos testes, perceberá quantos testes realmente precisa para oferecer uma cobertura adequada.

11:38.600 --> 11:44.240
Há muita arte e ciência em torno de qual é o número mínimo de testes que você pode fornecer que

11:44.240 --> 11:47.800
maximizar seu impacto e a cobertura de código que você tem.

11:47.810 --> 11:53.090
Portanto, uma das coisas sobre as quais eu gostaria de falar como parte desse workshop específico é o que chamamos de

11:53.090 --> 11:54.890
testes parametrizados.

11:54.890 --> 12:01.520
Portanto, em vez de simplesmente copiar este, colá-lo abaixo e ajustar os valores para somar seis

12:01.520 --> 12:08.840
e 11 ou 0 e dez negativos, podemos pedir ao unity para executar exatamente o mesmo teste, mas passando alguns valores diferentes

12:08.840 --> 12:09.590
valores diferentes.

12:09.590 --> 12:11.810
Há muitas opções diferentes aqui.

12:11.810 --> 12:13.400
Estou mostrando apenas uma delas.

12:13.400 --> 12:15.890
Mas vamos dar uma olhada aqui embaixo.

12:16.790 --> 12:23.150
Dizemos, e juntos, que assumimos que o resultado está correto quando esses valores.

12:23.150 --> 12:28.670
Portanto, os nomes dos métodos são um pouco mais vagos porque são parametrizados, não sei necessariamente.

12:28.700 --> 12:31.490
Isso vai testar cinco e dez é 15.

12:31.520 --> 12:37.340
Observe que aqui, em vez do que eu fiz antes, que foi declarar cinco e dez.

12:37.370 --> 12:42.950
No corpo do método, eu uso essa linguagem específica, eu uso algo chamado value source.

12:42.950 --> 12:44.300
E então eu o passo.

12:44.300 --> 12:50.180
O que o unity faz é preencher este primeiro passa valores aqui.

12:50.180 --> 12:51.800
Então, digamos que são cinco.

12:51.830 --> 12:54.380
Em seguida, ele pega outra fonte de valores aqui.

12:54.410 --> 13:01.070
Digamos que um é dez e ele assume que são cinco mais dez somados.

13:01.070 --> 13:06.020
Assim, toda vez que for executado, ele fará o equivalente ao último teste que vimos.

13:06.020 --> 13:12.110
Mas, em vez de ser codificado para apenas um conjunto de valores, ele vai misturar e mostrar uma variedade

13:12.110 --> 13:12.620
deles.

13:12.620 --> 13:15.520
Novamente, há várias maneiras diferentes de formatar isso.

13:15.520 --> 13:19.730
Portanto, dê uma olhada na documentação dos testes parametrizados na unidade.

13:19.730 --> 13:21.980
Mas vamos dar uma olhada no meu caso específico aqui.

13:22.010 --> 13:24.410
Esses valores de fontes de valores A e b.

13:24.410 --> 13:27.860
Eles apenas se referem a um par de arrays que tenho aqui.

13:27.860 --> 13:34.040
E o que ele vai fazer é simplesmente passar por eles e testar um e um, dois negativos e

13:34.040 --> 13:36.620
negativo dois, negativo três e negativo três e passá-los para dentro.

13:36.650 --> 13:43.130
Você pode organizá-los da maneira que quiser e testar diferentes cenários, talvez fazendo sete, 11

13:43.130 --> 13:43.730
e 12.

13:43.760 --> 13:45.260
Você pode testar o que quiser.

13:45.290 --> 13:48.080
Agora você não precisa testar quantidades infinitas.

13:48.080 --> 13:50.510
É aqui que a arte e a ciência aparecem.

13:50.510 --> 13:57.020
Talvez você queira testar alguns valores negativos, zero em alguns cenários e alguns valores positivos.

13:57.050 --> 14:01.880
Talvez o que você esteja fazendo não seja baseado em matemática e você queira pensar nisso de outra forma, mas o que você está fazendo é

14:01.880 --> 14:04.460
procurando o que chamamos de casos extremos.

14:04.460 --> 14:10.310
Assim, por exemplo, se você estiver usando um método de divisão e quiser testá-lo matematicamente, há

14:10.310 --> 14:12.800
um desafio sobre a divisão por zero.

14:12.800 --> 14:17.030
Portanto, você deve verificar se está passando o zero e lidar com isso de forma elegante.

14:17.030 --> 14:22.100
Você realmente precisa conhecer o domínio específico em que se encontra o seu código de produção para saber como

14:22.100 --> 14:22.790
testá-lo.

14:22.790 --> 14:27.080
Mas aqui estão alguns positivos e negativos e coisas do gênero.

14:28.230 --> 14:31.010
Então, vamos dar uma olhada em como isso fica no unity editor.

14:31.020 --> 14:32.730
Observe o que ele faz aqui.

14:32.730 --> 14:38.040
Na verdade, ele executa 49 testes com base em todas as combinações que temos aqui.

14:38.040 --> 14:41.930
Assim, ele mostra quando os valores estão e depois passa para dentro.

14:41.940 --> 14:43.490
Isso é muito bom.

14:43.500 --> 14:50.490
Agora, ao olhar para esse resultado, você pode perceber que será importante para mim testar 100

14:50.490 --> 14:51.860
e -100.

14:51.870 --> 14:52.410
Ótimo.

14:52.410 --> 14:58.950
Em seguida, basta voltar e adicionar esses valores de amostra se quiser fazer outras coisas em vez de apenas um valor fixo

14:58.950 --> 14:59.700
lista codificada.

14:59.700 --> 15:03.600
Se você quiser selecionar valores aleatórios, há muitas outras opções disponíveis.

15:03.600 --> 15:06.240
Novamente, faça uma pesquisa sobre testes parametrizados.

15:06.420 --> 15:10.950
Você também pode se aprofundar no teste do modo de jogo, se quiser, mas como esse será mais interessante

15:10.950 --> 15:15.060
em outros exemplos, vamos seguir em frente e concluir este dos workshops.

15:15.060 --> 15:15.900
Obrigado.
