WEBVTT

00:03.320 --> 00:08.780
Vamos recapitular alguns dos benefícios que vimos até agora apenas nesta parte teórica sobre testes unitários.

00:08.780 --> 00:11.940
Portanto, os benefícios incluem adicionar confiança ao seu código.

00:11.960 --> 00:12.830
O que isso significa?

00:12.830 --> 00:19.070
Significa que, à medida que a sua equipe pensa sobre essa base de código, eles têm uma sensação mais feliz de que aquele 101º

00:19.070 --> 00:21.080
recurso não vai quebrar as coisas.

00:21.110 --> 00:26.060
Quando há falta de confiança, você fica um pouco tímido para adicionar recursos, especialmente em determinadas áreas

00:26.060 --> 00:32.300
da base de código onde você sabe que as coisas são mantidas juntas de forma bastante frouxa e uma nova linha de código poderia

00:32.330 --> 00:33.320
quebrar alguma coisa.

00:33.320 --> 00:36.080
Também permite refatorações mais ousadas.

00:36.080 --> 00:41.270
Agora, por exemplo, se você for refatorar um sistema específico no seu jogo e tiver

00:41.270 --> 00:46.040
nenhum teste, o processo seria jogar o jogo e fazer com que sua equipe o jogue.

00:46.070 --> 00:49.880
Fazer todo o trabalho de refatoração e depois jogar o jogo novamente.

00:49.910 --> 00:53.690
O problema com esse teste manual é que ele consome mais tempo.

00:53.690 --> 00:59.960
É mais desafiador ter certeza de que o teste antes e depois da refatoração é o mesmo, e o teste

00:59.960 --> 01:02.450
as mesmas áreas também.

01:02.990 --> 01:10.340
Portanto, ao ter alguns testes unitários que cobrem esses sistemas antes da refatoração, você pode executar os testes,

01:10.370 --> 01:14.960
ver se tudo foi aprovado, se a automação que você fez lá funciona bem.

01:14.960 --> 01:18.350
Em seguida, execute exatamente esses mesmos testes após a refatoração.

01:18.380 --> 01:21.650
Você pode descobrir que alguns dos testes falharam.

01:21.650 --> 01:23.390
Você pode fazer algumas alterações.

01:23.390 --> 01:24.380
O teste foi aprovado.

01:24.380 --> 01:30.860
Você pode até adicionar novos testes porque a refatoração precisa deles e, então, seu código agora está em uma situação ainda mais

01:30.860 --> 01:34.130
melhor, com mais confiança no código após a refatoração.

01:34.310 --> 01:36.170
Isso também economiza tempo.

01:36.170 --> 01:41.480
Quando estiver começando com os testes unitários, vai parecer que isso é um extra, talvez até.

01:41.480 --> 01:45.950
Parece um pouco desnecessário em certos sistemas, mas vamos nos estender sobre isso.

01:45.950 --> 01:51.650
Vamos trabalhar nessa área e ver como e quando você quer adicionar seus testes unitários.

01:51.680 --> 01:56.810
Cada desenvolvedor encontrará seu próprio estilo e, como equipe, você deve se reunir e estabelecer alguns

01:56.810 --> 01:59.000
boas práticas recomendadas que todos vocês possam seguir.

01:59.980 --> 02:04.720
Como resultado, você terá mais confiança e robustez em sua base de código, como já mencionei,

02:04.720 --> 02:10.450
e o efeito em sua base de código não é apenas o mesmo código antigo com testes.

02:10.480 --> 02:15.040
É que a própria natureza dos testes influenciará a forma como você projeta o seu código.

02:15.070 --> 02:22.360
Para criar um código testável, as coisas precisam funcionar em unidades menores ou classes menores com menos código nelas,

02:22.360 --> 02:27.550
e isso nos incentiva a ter um único propósito para cada classe e método, o que é uma boa prática de design.

02:27.550 --> 02:30.010
Veremos isso na seção de design de software.

02:30.010 --> 02:34.630
Também incentiva soluções mais simples, especialmente quando falamos de desenvolvimento orientado por testes.

02:34.660 --> 02:41.290
Agora, ter esse teste automatizado, o que significa testes unitários como parte de sua base de código que são automaticamente

02:41.290 --> 02:47.760
chamados e repetidos periodicamente, isso é o que realmente lhe trará o melhor benefício aqui.

02:47.770 --> 02:54.100
Agora, algumas equipes usarão o teste de unidade dentro da unidade, que será o foco da nossa conversa

02:54.100 --> 02:54.550
aqui.

02:54.550 --> 03:02.230
Você também pode usar essa habilidade e fazer com que o seu repositório git ou outro sistema de controle de versão execute automaticamente

03:02.230 --> 03:09.280
esses testes em momentos importantes, talvez diariamente ou à noite, ou cada vez que sua equipe fizer um commit para um determinado

03:09.280 --> 03:11.260
branch, ele executará o teste novamente.

03:11.260 --> 03:17.110
Portanto, há maneiras elegantes de aumentar a frequência com que isso é chamado, e somente

03:17.110 --> 03:20.020
mesclar seu código se todos os testes forem aprovados.
