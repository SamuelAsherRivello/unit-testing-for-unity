WEBVTT

00:02.920 --> 00:07.120
Então, vamos dar um passo atrás e dar uma olhada rápida em um exemplo fundamental aqui.

00:07.120 --> 00:09.100
Portanto, este não é um teste unitário.

00:09.100 --> 00:16.270
E isto representa uma classe unitária, algo que eu consideraria código de produção, ou seja, não código de teste.

00:16.270 --> 00:19.990
E isto seria, talvez, um jogo de matemática.

00:19.990 --> 00:23.890
É uma classe muito simples do meu sistema de matemática que faz duas coisas.

00:23.890 --> 00:26.140
Pode adicionar e pode subtrair.

00:26.140 --> 00:27.820
Portanto, temos o método add.

00:27.820 --> 00:31.300
Observe que estou passando um inteiro int a e b.

00:31.300 --> 00:33.970
Adiciono-os e devolvo esse valor.

00:33.970 --> 00:40.540
Agora, se isso fosse usado no seu jogo e você quisesse ter certeza de que estava funcionando fielmente, você simplesmente

00:40.540 --> 00:48.640
jogaria o jogo e esperaria que uma implementação bem-sucedida da operação de adição aparecesse na tela,

00:48.640 --> 00:50.500
resultados fáceis de avaliar.

00:50.500 --> 00:52.210
Mas nem sempre é esse o caso.

00:52.210 --> 00:59.470
Talvez isso esteja adicionando A, B e C por acidente, e você pode não perceber que talvez o seu sistema de pontuação

00:59.470 --> 01:05.470
esteja aumentando de 1 para 2 e para 4, fazendo uma matemática ruim, e você simplesmente não percebe isso.

01:05.500 --> 01:11.920
O bom de adicionar um teste de unidade é que você pode testar mais situações do que as que pode encontrar

01:11.920 --> 01:15.370
como jogador do jogo, e fazer isso de forma mais sistemática.

01:15.370 --> 01:18.400
Vamos dar uma olhada rápida no nosso primeiro teste de unidade.

01:18.400 --> 01:21.850
E será um teste unitário em cima deste sistema aqui.

01:22.870 --> 01:25.540
Portanto, esta é uma classe separada.

01:25.540 --> 01:31.060
E ao colocar a base de código aqui, estamos vendo em um determinado ponto do seu projeto.

01:31.060 --> 01:36.600
E ao marcar o método como a seta mostra com teste, a unidade o tratará de forma um pouco diferente.

01:36.610 --> 01:42.880
Isso não precisa ser chamado em nenhum lugar do seu código de produção, mas veja como é fácil dentro dele

01:42.880 --> 01:43.570
no corpo.

01:43.570 --> 01:49.960
Aqui vemos que estamos usando a metodologia arrange, act e assert, e vamos nos aprofundar nessa metodologia

01:49.960 --> 01:50.380
aqui.

01:50.380 --> 01:53.950
É uma abordagem opcional que apenas o ajuda a organizar seus pensamentos.

01:53.950 --> 01:56.380
Então, primeiro criamos uma instância da classe.

01:56.380 --> 01:59.020
Em seguida, chamamos um método nessa classe.

01:59.020 --> 02:04.990
E então afirmamos ou assumimos que esse será o resultado esperado.

02:05.020 --> 02:12.010
Agora, esse teste passará se a afirmação estiver correta e falhará se a afirmação estiver incorreta.

02:12.040 --> 02:18.820
Agora, pode parecer bobagem passar cinco e dez e verificar se ele faz 15, porque, novamente, a nossa implementação

02:18.820 --> 02:20.110
é muito simples.

02:20.110 --> 02:26.080
Mas essas são as idéias fundamentais que, quando as aplicarmos a classes ainda maiores, serão

02:26.080 --> 02:26.800
importante.

02:26.920 --> 02:28.900
Essa é a visão geral do nosso curso.

02:28.900 --> 02:31.240
Vamos pensar no que aprendemos aqui.

02:31.240 --> 02:35.980
Falamos um pouco sobre como e por que os testes unitários são importantes para um projeto.

02:35.980 --> 02:39.640
Dei uma pequena dica sobre por que ele é bastante raro no desenvolvimento de jogos.

02:39.670 --> 02:45.490
Um dos motivos é que nós, como desenvolvedores de jogos, adoramos adicionar novos recursos, e isso parece um pouco

02:45.490 --> 02:48.070
mais como se estivesse nos deixando mais lentos.

02:48.070 --> 02:53.500
Mas quando analisamos essa regra de 80 sobre 20, vimos que, sabe, ficamos bastante surpresos que, na verdade

02:53.500 --> 02:59.800
a maior parte de nossa vida como desenvolvedores de jogos é gasta em consertar e manter os recursos existentes, e não em adicionar

02:59.800 --> 03:00.490
novos.

03:00.490 --> 03:07.420
Portanto, reconhecer isso e ver que os testes unitários nos ajudarão a criar esses novos recursos, bem como

03:07.420 --> 03:13.630
nos dará muito mais confiança no código em relação aos 80% da manutenção que estamos gastando em nosso projeto.

03:13.630 --> 03:19.210
Isso lhe trará benefícios facilmente como desenvolvedor de jogos, e é uma habilidade maravilhosa de se aprender.

03:19.210 --> 03:20.500
Então, vamos começar.
