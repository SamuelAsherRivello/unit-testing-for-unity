WEBVTT

00:00.020 --> 00:01.220
Desenvolvimento orientado a testes.

00:01.220 --> 00:04.790
Aqui está um exemplo de uma classe de teste com um método de teste.

00:04.790 --> 00:08.330
Já no curso, vimos como executar um teste existente.

00:08.360 --> 00:11.080
Vimos como criar novos testes a partir do zero.

00:11.090 --> 00:17.450
O desenvolvimento orientado a testes, ou TDD, é a prática de adicionar testes antes de adicionar o código de produção.

00:17.450 --> 00:21.180
Para alguns, especialmente os novatos em testes, isso pode parecer estranho.

00:21.200 --> 00:26.300
Aprenderemos mais sobre a técnica e observaremos que você pode misturar o desenvolvimento orientado por testes com o tradicional

00:26.330 --> 00:29.360
como quiser em seus próprios fluxos de trabalho.

00:29.390 --> 00:36.500
O TDD cria testes que especificam e validam o que o código fará depois de criado.

00:36.950 --> 00:38.120
Aqui está o fluxo de trabalho.

00:38.150 --> 00:39.560
Você cria um novo teste.

00:39.590 --> 00:44.120
Você adiciona a implementação suficiente dentro dele para que o código seja compilado.

00:44.120 --> 00:50.180
Uma vez que adicionamos apenas código de produção suficiente para que este código compile, talvez até mesmo ter um

00:50.210 --> 00:51.260
implementação vazia.

00:51.260 --> 00:53.900
Executamos o teste e ele falha.

00:54.260 --> 01:00.290
Isso é esperado e, na verdade, é um bom lugar para começar vendo primeiro um teste que falhou.

01:00.290 --> 01:05.960
Se tivermos mais confiança de que o teste, uma vez aprovado, realmente significa alguma coisa, você pode refatorar

01:05.960 --> 01:09.310
seu código de produção até que o código seja aprovado e, em seguida, siga em frente.

01:09.330 --> 01:15.860
O TDD não é simplesmente a ordem de testar primeiro e escrever o código de produção depois.

01:15.860 --> 01:19.060
É também uma forma de pensar sobre seus projetos.

01:19.070 --> 01:24.080
Algumas dessas coisas você realmente precisa praticar para sentir os resultados.

01:24.080 --> 01:30.980
Mas o que descobri com mais experiência em TDD é que você pensa sobre o seu novo código de forma diferente, você está

01:30.980 --> 01:37.370
mais focado no seu desenvolvimento, você cria mais código atômico que faz apenas uma coisa.

01:37.370 --> 01:42.020
E quando seu código de teste é aprovado, ele é aprovado de forma mais significativa.

01:42.050 --> 01:46.280
Outra forma de ver esse fluxo é escrever um teste com falha.

01:46.280 --> 01:51.530
Você faz com que o teste seja aprovado e, em seguida, refatora o código para atender a quaisquer outros objetivos.

01:51.530 --> 01:54.710
Você tem otimização, padrões de codificação.

01:54.710 --> 01:55.490
ET cetera.

01:55.940 --> 01:57.060
E então você repete.

01:57.080 --> 01:58.490
Vamos ver isso em ação.

01:58.490 --> 02:01.210
Vamos abrir um projeto unity que já tem um teste.

02:01.220 --> 02:08.690
Usaremos o TDD para adicionar um novo teste, criar um código de produção suficiente para que ele seja compilado, ver uma falha

02:08.690 --> 02:12.050
e, em seguida, refatorar até obtermos um resultado positivo.

02:12.820 --> 02:16.090
Aqui estamos em um projeto unity razoavelmente vazio.

02:16.090 --> 02:22.450
Eu me certifiquei de que a estrutura de teste já foi adicionada no gerenciador de pacotes, conforme mostrado anteriormente, e

02:22.450 --> 02:25.390
Copiei um teste para começarmos.

02:25.420 --> 02:28.250
Vamos dar uma olhada nesse teste aqui no modo de edição.

02:28.270 --> 02:33.660
Tenho um teste que fornece cobertura no método add de uma classe matemática simples.

02:33.670 --> 02:35.720
Vamos executar o teste em que ele passa.

02:35.740 --> 02:37.120
Vamos dar uma olhada no código.

02:37.120 --> 02:41.300
E aqui vemos o teste com o qual estamos familiarizados desde o início da apresentação.

02:41.320 --> 02:45.160
Agora vamos realizar um desenvolvimento orientado por testes, conforme discutido aqui.

02:45.190 --> 02:51.280
A ideia é que, se quisermos expandir a funcionalidade do sistema de matemática, temos algumas abordagens.

02:51.310 --> 02:57.010
Podemos criar esse código de produção sem nenhum teste e depois.

02:57.930 --> 03:01.260
E depois, talvez adicionemos testes, ou talvez não.

03:02.310 --> 03:08.400
No entanto, com o desenvolvimento orientado por testes, vamos testar primeiro, antes de adicionarmos qualquer produção

03:08.400 --> 03:08.970
de produção.

03:09.730 --> 03:10.930
Vamos ver como isso funciona.

03:10.930 --> 03:12.340
Vou imaginar que estou criando.

03:12.910 --> 03:16.600
Vamos imaginar que o sistema matemático precisa de um método de subtração.

03:17.830 --> 03:22.150
Agora, esse método de subtração ainda não existe, como veremos quando examinarmos o código-fonte.

03:22.950 --> 03:24.780
Mas vamos fazer um teste para ele de qualquer forma.

03:25.650 --> 03:28.980
Vou começar adicionando o atributo de teste.

03:29.190 --> 03:33.030
Nomearei o método com o que está sendo testado.

03:33.060 --> 03:39.990
Qual é o resultado esperado e em que situação espero que, para subtrair, o resultado seja cinco.

03:40.020 --> 03:45.000
Se eu passar dez e cinco, dez menos cinco é cinco.

03:45.030 --> 03:48.870
Para preparar o teste, eu instancio uma nova cópia do meu sistema de matemática.

03:49.080 --> 03:52.120
Obtenho o resultado chamando o método subtract.

03:52.140 --> 03:56.730
O texto vermelho aqui indica que o meu editor de código sabe que não há método subtract.

03:56.730 --> 04:01.200
E, finalmente, esperamos que nosso método retorne um valor de cinco.

04:01.230 --> 04:04.980
Como eu copiei e colei isso do exemplo anterior, ele diz 15.

04:05.010 --> 04:06.060
Vou mudar isso agora.

04:06.090 --> 04:08.070
Agora ele está verificando a suposição correta.

04:08.670 --> 04:13.050
Agora sabemos que isso não vai compilar, mas vamos salvar e voltar para a unidade.

04:13.080 --> 04:19.530
Vamos observar duas coisas: a janela do console está mostrando corretamente que há um erro de compilação e

04:19.530 --> 04:24.150
segundo, observe que na janela do executor do teste ainda não vemos o nosso novo método.

04:24.180 --> 04:26.520
Essas são coisas boas a serem observadas no TDD.

04:26.550 --> 04:30.810
O próximo passo é criar código suficiente para compilar.

04:30.840 --> 04:34.570
É muito importante que não terminemos a implementação nesta etapa.

04:34.590 --> 04:36.780
Aqui está o código-fonte do nosso sistema matemático.

04:36.780 --> 04:41.920
Esta é a implementação mais simples que posso fazer para que o código seja compilado.

04:41.940 --> 04:45.610
Observe que eu não terminei a implementação adequada.

04:45.630 --> 04:52.480
Agora, neste exemplo, parece trivial porque sabemos que tudo o que precisamos fazer é subtrair a e b.

04:52.500 --> 04:58.320
Contudo, normalmente no desenvolvimento orientado por testes, a implementação de um determinado método seria mais complexa

04:58.320 --> 04:59.400
e levaria mais tempo.

04:59.430 --> 05:03.390
De qualquer forma, sempre paramos aqui quando temos o suficiente para compilar.

05:04.090 --> 05:05.250
Vamos dar uma olhada no teste.

05:05.260 --> 05:07.840
Nosso editor de código não é mais exibido corretamente.

05:07.840 --> 05:09.010
Subtrair e vermelho.

05:09.460 --> 05:11.260
Vamos salvar e verificar a unidade.

05:11.290 --> 05:13.600
Agora não vemos nenhum erro no console.

05:13.630 --> 05:14.170
Ótimo.

05:14.170 --> 05:15.400
Tudo está sendo compilado.

05:15.400 --> 05:19.210
E agora a janela do nosso executor de teste mostra corretamente o novo método de teste.

05:19.210 --> 05:20.290
Vamos executar todos os testes.

05:20.290 --> 05:26.320
Você pode considerar o teste de falha porque um ou mais métodos de teste falham.

05:26.320 --> 05:32.290
Quando observamos quando selecionamos o método que falhou, vemos uma pequena entrada e um pouco de saída

05:32.320 --> 05:34.120
texto que mostra por que ele falhou.

05:34.240 --> 05:38.410
Ele está esperando cinco, mas em vez disso está retornando zero.

05:38.410 --> 05:40.420
Agora, por que passamos por esse processo?

05:40.420 --> 05:46.600
Pode parecer trivial, mas é uma distinção importante o fato de criarmos um teste que acreditamos que testa o correto

05:46.600 --> 05:49.120
funcionalidade adequada e, primeiro, vemos ele falhar.

05:49.120 --> 05:55.420
Isso nos dá uma boa base para saber quando uma implementação adequada dá uma aprovação com confiança.

05:55.420 --> 05:57.040
Vamos adicionar a implementação adequada.

05:57.040 --> 06:02.050
Aqui assumimos que o primeiro parâmetro que entra seria maior do que o segundo e simplesmente retornamos

06:02.050 --> 06:04.080
e simplesmente retornamos a menos b.

06:04.090 --> 06:05.560
Vamos salvar e executar o teste.

06:07.440 --> 06:12.480
Agora o teste funciona bem e concluímos nosso primeiro exemplo de desenvolvimento orientado por testes.

06:12.480 --> 06:13.410
É isso aí.

06:13.800 --> 06:20.580
Sei, por experiência própria, que precisei de tempo e prática com os testes para realmente sentir a

06:20.580 --> 06:21.390
benefícios.

06:21.420 --> 06:29.820
Tivemos uma breve visão geral dos testes unitários, da criação de testes unitários e do desenvolvimento orientado por testes,

06:30.420 --> 06:35.070
espero que você esteja começando a ver alguns dos benefícios que podem funcionar bem para você.

06:35.100 --> 06:39.360
Combinando o que você aprendeu aqui sobre testes com a arquitetura MVC.

06:39.390 --> 06:47.340
Você tem as ferramentas para criar projetos que são mais modulares, escaláveis, otimizados, robustos e confiáveis.

06:47.370 --> 06:52.440
A combinação de testes e boa arquitetura é realmente poderosa.

06:52.470 --> 06:53.430
Obrigado.
