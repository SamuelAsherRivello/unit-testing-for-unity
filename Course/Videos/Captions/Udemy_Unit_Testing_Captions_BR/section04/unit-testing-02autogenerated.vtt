WEBVTT

00:00.050 --> 00:03.640
Configuração da janela do executor de teste e das classes de teste.

00:03.650 --> 00:07.250
O código-fonte da estrutura de teste está disponível no gerenciador de pacotes.

00:07.250 --> 00:10.800
Você pode adicionar o pacote que busca a estrutura de teste.

00:10.820 --> 00:15.530
Importe a estrutura de teste e, opcionalmente, importe as ferramentas de cobertura de código.

00:15.530 --> 00:21.110
A estrutura de teste do unity inclui todas as bibliotecas necessárias para testar seu código C-sharp agora como um indivíduo

00:21.110 --> 00:21.770
ou uma equipe.

00:21.770 --> 00:26.540
Se você é novato em testes, não precisa testar todo o seu código de uma só vez.

00:26.540 --> 00:32.450
Você pode começar a testar lentamente, com o tempo, quanto mais do seu código for coberto por testes, melhor

00:32.450 --> 00:34.020
você terá mais confiança.

00:34.040 --> 00:36.320
Algumas maneiras de integrá-lo à sua equipe.

00:36.320 --> 00:37.640
Isso é bom e fácil.

00:37.820 --> 00:44.540
Adicionar testes apenas para novos recursos ou adicionar testes aos sistemas principais antes de uma grande refatoração.

00:44.540 --> 00:48.650
E uma ótima maneira de começar é testar apenas durante a correção de bugs.

00:48.650 --> 00:55.010
Se um usuário relata um bug, você primeiro replica a existência do bug com um teste de falha.

00:55.040 --> 00:57.790
Em seguida, você corrige o código e o teste passa.

00:57.800 --> 01:03.260
Você pode deixar esse teste como um legado, para ter certeza de que esse bug não retornará no futuro.

01:03.290 --> 01:08.840
O conceito de cobertura de código refere-se a quanto de sua base de código está coberta por testes.

01:08.930 --> 01:16.250
Se você tiver uma classe e três métodos em todo o seu projeto, e todos os três tiverem testes,

01:16.250 --> 01:18.290
então você tem 100% de cobertura.

01:18.290 --> 01:23.480
De modo geral, quanto maior a cobertura, melhor você pode abrir a janela de cobertura de código,

01:23.480 --> 01:30.440
executar os testes e obter resultados robustos que mostram não apenas a porcentagem por classe e sistema,

01:30.440 --> 01:36.830
mas dentro de cada classe, você obtém uma leitura linha por linha de quais métodos têm cobertura e quais não têm.

01:37.130 --> 01:38.300
É muito útil.

01:38.300 --> 01:43.670
Você pode acompanhar quanto do seu código está sendo testado, localizar quaisquer vulnerabilidades que você tenha durante o teste.

01:43.670 --> 01:48.710
processo de teste e também monitorar o aumento da cobertura ao longo do tempo.

01:48.710 --> 01:52.390
Com essas bibliotecas instaladas, você pode criar seu primeiro teste.

01:52.400 --> 01:58.730
Abra a janela do Test Runner, crie uma pasta de teste em seus ativos, crie sua primeira classe e seu

01:58.730 --> 02:03.890
primeiro método nessa classe, nesse momento, esses testes aparecerão na janela do Test Runner onde

02:03.890 --> 02:06.350
você pode clicar em run e vê-los em execução.

02:06.350 --> 02:09.080
Aqui está um exemplo de uma classe de teste com um método de teste.

02:09.110 --> 02:11.780
Observe que ele se parece com um C sharp bem normal.

02:11.780 --> 02:16.850
O atributo de teste mostrado entre colchetes é o molho secreto.

02:16.850 --> 02:22.220
Aqui, o sistema procura por qualquer método marcado com esse atributo para considerá-lo um teste.

02:22.220 --> 02:26.600
Como mencionei, o teste é uma forma de arte e há muitas maneiras diferentes de abordá-lo.

02:26.630 --> 02:35.210
Um dispositivo interessante que uso é dividir cada método em três seções: organizar, agir e afirmar.

02:35.240 --> 02:39.800
Em arrange, você faz uma ou mais linhas que são necessárias para configurar o teste.

02:39.800 --> 02:45.650
Na parte act, você executa o que quer que seja especificamente relacionado ao teste e, em seguida

02:45.650 --> 02:46.400
faz a afirmação.

02:46.430 --> 02:49.430
Assertar significa assumir que algo é verdadeiro.

02:49.430 --> 02:52.280
Portanto, a estrutura de teste vem na biblioteca assert.

02:52.280 --> 02:56.450
Imagine que temos um sistema matemático personalizado que permite somar dois números.

02:56.450 --> 03:01.430
Poderíamos afirmar que a soma de cinco mais dez é igual a 15.

03:01.430 --> 03:03.860
E consideraríamos isso um teste bem-sucedido.

03:03.890 --> 03:06.110
Nós o executaríamos e veríamos que ele foi aprovado.

03:06.110 --> 03:07.520
Vamos ver isso em ação.

03:07.520 --> 03:10.520
Vou abrir um projeto unity que já tem um teste pronto.

03:10.550 --> 03:13.940
Vamos dar uma olhada em como ele funciona e executar o teste.

03:14.880 --> 03:17.520
Aqui estamos em um projeto unity vazio.

03:17.520 --> 03:20.290
Vou começar configurando a estrutura de teste.

03:20.340 --> 03:22.260
Então, vou abrir o gerenciador de pacotes.

03:26.800 --> 03:30.830
O gerenciador de pacotes mostra quais pacotes já estão instalados.

03:30.850 --> 03:36.610
É possível que o projeto com o qual você começou já tenha a estrutura de teste adicionada.

03:37.190 --> 03:39.960
Mas se não tiver, veja como você mesmo pode adicioná-lo.

03:39.980 --> 03:44.720
Procure no Registro Unity por test framework e instale a versão mais recente.

03:44.750 --> 03:51.650
Em seguida, para recursos adicionais opcionais, procure no registro do Unity por code coverage e instale.

03:51.980 --> 03:54.320
A cobertura de código tem algumas amostras opcionais.

03:54.320 --> 03:55.790
Não vou instalá-los aqui.

03:56.590 --> 04:02.020
Agora, analisando os pacotes que temos no projeto, vemos a estrutura de teste e, opcionalmente, o if

04:02.020 --> 04:04.020
você optar por instalá-lo, a cobertura de codificação.

04:04.030 --> 04:07.210
Agora esse projeto é totalmente compatível com os testes unitários.

04:08.940 --> 04:11.520
Para começar, vamos abrir a janela do executor de testes.

04:11.970 --> 04:14.220
A janela do executor de teste tem duas guias.

04:14.250 --> 04:16.230
Modo de edição e modo de reprodução.

04:16.440 --> 04:21.810
Como não temos nenhum teste adicionado, a janela é muito útil e oferece algumas opções de criação clicáveis

04:21.810 --> 04:24.270
para criar testes para nós em uma demonstração posterior.

04:24.300 --> 04:26.670
Vou mostrar como criar testes a partir do zero.

04:26.880 --> 04:30.180
Por enquanto, vou apenas colar um que já preparei.

04:31.010 --> 04:37.790
O teste mostrado aqui foi colado do projeto de amostra do mini Max do curso para nos ajudar a nos concentrar.

04:37.790 --> 04:40.310
Removi tudo, exceto o teste que queremos examinar.

04:40.310 --> 04:45.050
Vamos explorar a janela do test Runner, começando pelo modo de edição aqui na guia Edit Mode.

04:45.050 --> 04:49.520
Por padrão, todos os testes do projeto estão listados aqui na guia Edit Mode (Modo de Edição).

04:49.520 --> 04:55.700
Por padrão, todos os testes disponíveis em qualquer lugar na pasta assets e na pasta packages são mostrados.

04:55.700 --> 04:59.690
Você pode filtrar por categoria para ver apenas alguns dos testes.

04:59.690 --> 05:04.760
Não temos muitos testes aqui, mas apenas para fins de demonstração, escolherei a categoria para nossas amostras.

05:04.760 --> 05:08.600
Agora a janela mostra uma hierarquia de todos os testes organizados por namespace.

05:08.600 --> 05:15.380
Quando eu expando todos os níveis inferiores, vejo a classe de teste e, em seguida, um método de teste abaixo.

05:15.380 --> 05:18.500
Podemos executar todos os testes e ver que eles foram aprovados.

05:18.500 --> 05:22.010
Podemos selecionar um teste individual e executar o teste selecionado.

05:22.010 --> 05:24.140
Se o teste foi aprovado ou reprovado.

05:24.140 --> 05:27.470
Temos uma maneira fácil de acessar o código-fonte com um menu de clique direito.

05:30.070 --> 05:31.810
Aqui está o código de teste completo.

05:32.230 --> 05:34.990
Este é o mesmo que vimos anteriormente na apresentação.

05:34.990 --> 05:36.280
Vamos ver os destaques.

05:36.280 --> 05:40.900
Temos um atributo opcional de categoria que ajuda a organizar nossos testes.

05:41.110 --> 05:43.000
O dropdown que mostrei.

05:43.240 --> 05:43.960
Filtros.

05:43.960 --> 05:47.860
Com base neste valor, você pode ter muitas classes de teste que estão na mesma categoria.

05:47.890 --> 05:50.830
Você pode ter muitas classes de teste que estão na mesma categoria.

05:50.830 --> 05:52.330
Em seguida, temos o atributo de teste.

05:52.330 --> 05:57.100
É isso que informa à estrutura de teste que esse método é de fato um método de teste.

05:57.820 --> 06:00.590
Sem isso, ele não aparecerá na janela do executor de teste.

06:00.610 --> 06:05.770
Em seguida, usamos o paradigma familiar, mas opcional, de organizar, agir e afirmar.

06:05.800 --> 06:10.060
Essa é apenas uma forma que eu uso como convenção para organizar minha lógica de teste.

06:10.060 --> 06:14.710
Além disso, quando nomeio meus testes, opto por nomeá-los com base no que está sendo testado.

06:14.740 --> 06:17.560
Qual é a expectativa e qual é a situação?

06:17.560 --> 06:23.890
Então, aqui estou testando o método add para saber se o resultado será 15 quando eu passar cinco e dez como operandos.

06:23.920 --> 06:25.780
Vamos passar para o modo play.

06:25.810 --> 06:30.970
A guia do modo de reprodução é muito semelhante e parece que está mostrando exatamente o mesmo teste, mas é

06:30.970 --> 06:31.280
e não.

06:31.300 --> 06:32.230
Vou abrir a fonte.

06:32.230 --> 06:34.240
Aqui está o código fonte para um teste de modo de jogo.

06:34.240 --> 06:35.470
Então, qual é a diferença?

06:35.500 --> 06:40.240
A principal diferença é onde ele está localizado na janela do projeto.

06:40.270 --> 06:41.500
Vou mostrar isso daqui a pouco.

06:41.500 --> 06:47.470
Uma diferença opcional que escolhi é que para os meus testes no modo play, eu acrescento a classe com o modo play

06:47.500 --> 06:51.530
test, enquanto que no modo editor eu apenas acrescento test.

06:51.550 --> 06:52.870
Isso me ajuda a organizar.

06:52.900 --> 06:56.560
Agora, para fins de demonstração, estou testando exatamente o mesmo comportamento.

06:56.560 --> 06:58.870
Uma vez no modo de edição e outra no modo de reprodução.

06:58.870 --> 07:01.150
Isso provavelmente não é necessário para você.

07:01.180 --> 07:08.170
Em vez disso, você testa por padrão no modo de edição e só usa o teste no modo de reprodução quando precisa capturar a reprodução

07:08.170 --> 07:13.480
como o Start Awake ou a funcionalidade do objeto de jogo.

07:13.510 --> 07:14.860
Detecção de colisão.

07:14.860 --> 07:16.840
Outras coisas que só acontecem em tempo de execução.

07:16.840 --> 07:21.040
Conforme discutido no curso, eu uso a mesma convenção de nomenclatura de métodos que vimos anteriormente.

07:21.040 --> 07:22.060
Vamos observar dois.

07:22.150 --> 07:23.920
Vamos observar duas diferenças importantes.

07:23.920 --> 07:29.230
Aqui usamos um atributo de teste de unidade, não um atributo de teste como vimos anteriormente.

07:29.230 --> 07:34.300
E, além de organizar, agir e afirmar, há um paradigma opcional de espera.

07:34.300 --> 07:41.050
Isso é usado aqui apenas para demonstrar o fato de que, enquanto os testes do modo de edição são executados de forma síncrona, a reprodução

07:41.050 --> 07:44.590
podem ser executados de forma assíncrona.

07:44.590 --> 07:49.750
Portanto, se você tiver algum código que exija testes assíncronos, o modo play é uma ótima opção.

07:49.750 --> 07:52.470
Vamos dar uma olhada na janela do projeto para ver a organização.

07:52.480 --> 07:57.940
Observe que o teste do modo de edição está em uma pasta do editor e observe que o teste do modo de reprodução está em um tempo de execução

07:57.940 --> 07:58.330
pasta.

07:58.330 --> 08:03.490
Essa diferença, juntamente com as diferenças nos arquivos de definição de montagem.

08:03.520 --> 08:09.760
Adjacente a esses testes está o modo como o sistema sabe que um é um teste de editor e o outro é um teste de modo de reprodução.

08:09.790 --> 08:11.220
Vou executar o teste do modo de reprodução.

08:11.230 --> 08:13.300
Finalmente, executarei o teste do modo de reprodução.

08:13.330 --> 08:16.870
A janela do executor de teste se comporta da mesma forma, com uma exceção.

08:16.900 --> 08:18.730
Porque esses são testes de modo de reprodução.

08:18.730 --> 08:25.570
O Unity criará uma cena anônima, executará o teste isoladamente e, em seguida, destruirá a cena.

08:25.570 --> 08:29.620
Embora tudo isso aconteça muito rapidamente, você notará que está acontecendo aqui como eu.

08:29.620 --> 08:35.890
Além disso, quando eu pressiono run all em vez de executar todos os testes em um milissegundo, por exemplo, como a edição

08:35.890 --> 08:39.490
pode fazer aqui, ele leva vários milissegundos para ser executado.

08:39.490 --> 08:46.090
Aqui temos a chance de ver um teste em execução, ver a janela do executor de teste e ver o básico.

08:46.120 --> 08:48.970
A seguir, vamos dar uma olhada em como criar nossos próprios testes.
