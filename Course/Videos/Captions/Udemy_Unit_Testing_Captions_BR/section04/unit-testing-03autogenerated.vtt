WEBVTT

00:00.020 --> 00:03.440
Criando testes unitários, classe de teste e métodos de teste.

00:03.440 --> 00:07.100
Aqui está o código para uma classe de teste contendo um método de teste.

00:07.100 --> 00:12.370
Dentro dele, seguimos o paradigma opcional de organizar, agir e afirmar.

00:12.380 --> 00:14.870
Essa é a convenção que utilizo para todos os meus testes.

00:14.870 --> 00:18.980
Então, vimos como é um teste e como executar um teste existente.

00:19.010 --> 00:20.620
Agora vamos criar o nosso próprio teste.

00:20.630 --> 00:22.550
Vamos abrir um projeto vazio.

00:22.580 --> 00:29.690
Abra a janela do test Runner, crie uma pasta de teste, uma classe de teste e um método dentro desse teste.

00:29.720 --> 00:31.610
Em seguida, executaremos o teste e veremos o resultado.

00:31.610 --> 00:33.920
Aqui estamos em um projeto bastante vazio.

00:33.920 --> 00:37.310
Já tenho a estrutura de teste unity adicionada.

00:37.310 --> 00:39.470
Vamos abrir a janela do executor de testes.

00:39.470 --> 00:46.370
Como o projeto não tem testes de modo de edição nem testes de modo de reprodução, cada uma dessas guias oferece algumas opções

00:46.370 --> 00:47.540
aqui para começarmos.

00:47.540 --> 00:53.480
Primeiro, vamos criar uma pasta de montagem de teste de modo de edição clicando no botão que cria uma nova pasta

00:53.480 --> 00:59.930
em nossa janela de projeto, incluindo uma configuração de montagem para testar montagens de unidade e a definição de montagem

00:59.930 --> 01:07.220
O arquivo de definição de montagem está fora do escopo deste curso, mas, em resumo, ele sinaliza ao unity que as coisas dentro desse arquivo

01:07.220 --> 01:11.630
determinada pasta deve ser compilada, deve ser compilada de uma forma única.

01:11.630 --> 01:16.310
Portanto, agora que temos essa pasta de montagem de teste configurada, podemos criar nossa primeira classe de teste.

01:16.310 --> 01:21.290
Cada um desses passos pode ser feito manualmente sem usar a janela, mas continuarei clicando no botão

01:21.290 --> 01:26.390
próximo botão aqui para criar um script de teste na pasta atual na janela do projeto, que cria

01:26.420 --> 01:29.460
uma nova classe de teste e nos dá dois métodos de teste.

01:29.480 --> 01:32.350
Observe que na janela do executor de teste tudo aparece.

01:32.360 --> 01:33.770
Vou executar todos esses testes.

01:33.770 --> 01:35.040
Todos os testes passam.

01:35.060 --> 01:37.160
Vamos dar uma olhada no código que foi gerado.

01:37.160 --> 01:41.990
Neste ponto, você pode renomear a classe e esses métodos como achar melhor.

01:41.990 --> 01:45.530
E, é claro, copiar e colar para adicionar mais métodos.

01:45.530 --> 01:50.840
Não há limite para o número de métodos de teste que você pode ter em uma classe de teste, mas geralmente você usa

01:50.840 --> 01:57.890
a classe para organizar determinados tópicos, talvez uma classe de teste para cada classe de produção e, em seguida, uma classe de teste para cada classe de produção.

01:57.890 --> 02:00.440
método de teste para cada método.

02:00.440 --> 02:03.290
Na produção, você quer testar algo como isso.

02:03.290 --> 02:07.010
Esses comentários são gerados automaticamente pelo unity e são bastante úteis.

02:07.520 --> 02:10.310
Vou analisar os destaques aqui usando o teste.

02:10.640 --> 02:15.740
O uso do atributo test nos prepara para um teste de modo de edição normal.

02:15.740 --> 02:22.100
O uso do atributo unity test nos permite executar um teste em vários quadros.

02:22.100 --> 02:26.630
Agora, mencionei anteriormente que o uso do unity test é mais adequado para o modo de reprodução.

02:26.660 --> 02:31.160
Você tem muito mais opções quanto ao tipo de funcionalidade assíncrona que pode fazer ali.

02:31.160 --> 02:38.060
É de fato possível aqui, e como o comentário sugere, você pode usar yield return null para pular um quadro.

02:38.060 --> 02:42.920
Por exemplo, fazer a configuração, depois esperar um quadro e fazer o teste.

02:42.920 --> 02:43.910
Algo parecido com isso.

02:43.910 --> 02:46.220
Por exemplo, fazer o código de configuração.

02:46.220 --> 02:47.660
Esperando um quadro.

02:48.220 --> 02:52.240
E depois fazer a asserção, algo do gênero aqui, de volta à unidade.

02:52.240 --> 02:54.580
Vou passar para o.

02:55.200 --> 02:57.720
Modo Play e seguir os mesmos passos.

02:57.720 --> 03:03.870
Primeiro, criaremos uma pasta de montagem de teste do modo Play e, em seguida, criarei um script de teste.

03:03.870 --> 03:04.710
Nessa pasta.

03:04.710 --> 03:09.840
Podemos ver no executor de teste que temos uma classe de teste que contém dois métodos de teste.

03:10.350 --> 03:13.250
Vou executar todos e veremos que tudo passa.

03:13.260 --> 03:15.230
Vamos dar uma olhada no código gerado.

03:15.240 --> 03:21.870
O código gerado aqui é, na verdade, idêntico tanto no modo de reprodução quanto no modo de edição.

03:21.900 --> 03:24.120
Eles lhe dão pontos de partida muito semelhantes.

03:24.120 --> 03:25.050
É isso aí.

03:26.390 --> 03:31.910
Estamos começando a ver que com a janela do executor de teste e apenas um pouco de C-sharp adicionado, nós

03:31.910 --> 03:35.110
podemos fazer mais coisas com nossos projetos de unidade do que fazíamos antes.

03:35.120 --> 03:40.490
Se você é novo em testes unitários, já está familiarizado com o uso do unity para criar código em tempo de execução.

03:40.490 --> 03:42.740
Mas testar o código é algo diferente.

03:43.300 --> 03:46.660
Ele nunca é experimentado diretamente pelos seus usuários finais.

03:47.110 --> 03:52.200
Esse código só é executado no modo de teste e nem sequer é empacotado em sua compilação final.

03:52.210 --> 03:58.790
Começamos a olhar para os testes agora como uma pequena janela para momentos no tempo em um aplicativo maior.

03:58.810 --> 04:02.930
Testes com foco restrito para garantir a obtenção de resultados consistentes.

04:02.950 --> 04:08.200
Até agora, falamos principalmente sobre a adição de novos testes ao código existente.

04:08.230 --> 04:13.300
A seguir, veremos como adicionar testes enquanto estivermos desenvolvendo o código com o desenvolvimento orientado a testes.

04:13.330 --> 04:14.110
Obrigado.
