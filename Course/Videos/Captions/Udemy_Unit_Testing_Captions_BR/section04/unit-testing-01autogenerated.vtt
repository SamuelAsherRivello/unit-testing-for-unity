WEBVTT

00:00.110 --> 00:01.340
O teste de unidade.

00:01.340 --> 00:02.190
Visão geral.

00:02.210 --> 00:04.100
Primeiro, um pouco de contexto.

00:04.130 --> 00:11.690
À medida que seus projetos crescem com mais scripts, mais métodos e mais complexidade, pode ser difícil garantir que

00:11.690 --> 00:14.510
que o novo código não quebra nenhum código antigo.

00:14.540 --> 00:19.920
Os testes automatizados podem ajudar a garantir que o seu código esteja funcionando conforme o esperado.

00:19.940 --> 00:25.940
Os testes automatizados nos ajudam a descobrir como e onde os erros ocorrem no início do processo.

00:25.940 --> 00:31.010
Em vez da opção muito mais cara de esperar que os usuários finais relatem esses bugs.

00:31.010 --> 00:36.210
Portanto, você pode usar arquiteturas MVC sem testes e pode usar testes sem...

00:36.230 --> 00:37.550
arquitetura MVC.

00:37.550 --> 00:40.990
Então, por que é importante falar sobre esses tópicos juntos?

00:41.000 --> 00:45.380
Porque a combinação dessas duas tecnologias é incrivelmente poderosa.

00:45.410 --> 00:51.800
A utilização de uma arquitetura como a MVC ajuda a garantir que o seu código seja mais desacoplado, que cada classe

00:51.800 --> 00:55.000
tenha um único propósito e que as soluções sejam mais simples.

00:55.010 --> 00:57.950
Todos estes são traços para um código mais testável também.

00:57.980 --> 01:04.610
A inclusão de testes em seu projeto aumentará a robustez e a confiança, além de incentivar soluções simples,

01:04.610 --> 01:08.930
especialmente quando habilitado com o desenvolvimento orientado a testes, que discutiremos.

01:08.960 --> 01:12.530
Adicionar testes unitários ao seu projeto e fluxo de trabalho economizará tempo.

01:12.530 --> 01:15.440
Economiza planejamento, desenvolvimento e manutenção.

01:15.470 --> 01:21.170
Ele acrescenta mais confiança ao seu código e, com essa confiança, você pode ter muito mais ousadia em

01:21.170 --> 01:22.370
seus Refatores.

01:22.370 --> 01:28.910
Pense na possibilidade de executar todos os seus testes antes de uma grande refatoração e, depois, economizar tempo e dar

01:28.910 --> 01:31.430
mais confiança de que o refatoramento funcionou bem.

01:31.460 --> 01:33.620
O teste é tanto uma arte quanto uma ciência.

01:33.620 --> 01:38.360
Com mais pesquisa e mais prática, cada desenvolvedor pode desenvolver sua própria arte.

01:38.360 --> 01:42.980
Além disso, testes de baixo nível que testam coisas em nível de unidade.

01:43.370 --> 01:49.040
Métodos individuais, digamos, e as práticas e a evolução de seu software que virão de

01:49.070 --> 01:55.970
que incentiva a discussão em nível mais alto também sobre as escolhas arquitetônicas, dependências ou

01:55.970 --> 02:00.710
falta delas em todo o seu código e como esses sistemas são acoplados ou desacoplados.

02:00.740 --> 02:06.850
Tudo isso faz parte de uma conversa mais ampla que convida a trazer uma boa organização para o seu software.

02:06.860 --> 02:13.430
Nosso primeiro objetivo, especialmente se formos novatos em testes, é garantir que um método específico tenha o resultado desejado.

02:13.430 --> 02:14.170
resultados desejados.

02:14.180 --> 02:20.960
Uma vez feito isso, você pode testá-lo com condições inesperadas e casos de canto que podem convidar à discussão

02:20.960 --> 02:24.230
e análise sobre a estrutura da própria classe.

02:24.260 --> 02:28.070
Em seguida, você pode analisar a finalidade do sistema em que essa classe se encontra.

02:28.070 --> 02:35.330
E, como mencionei, esse tipo de análise nos dá uma oportunidade e um formato para analisar a grande

02:35.330 --> 02:37.160
solução em grande escala que temos diante de nós.

02:37.160 --> 02:42.260
No software, há muitos tipos diferentes de testes e, quer você saiba ou não, você já está

02:42.260 --> 02:43.100
fazendo testes.

02:43.130 --> 02:46.820
Alguns dos tipos mais comuns de testes são o teste de fumaça.

02:46.850 --> 02:49.910
Esse é um teste bastante casual: será que funciona?

02:49.910 --> 02:50.630
Para mim?

02:50.630 --> 02:55.280
E, para muitos de nós, esse pode ser o único tipo de teste de projeto que estamos fazendo.

02:55.900 --> 03:02.920
Toda vez que você faz um novo código, você executa o aplicativo como um usuário ou joga o jogo como um jogador e

03:02.920 --> 03:08.210
vê se esse caminho específico pelo aplicativo ou jogo funciona da maneira que eu espero?

03:08.230 --> 03:14.110
Depois, há o teste de usuário, em que periodicamente, talvez após uma compilação semanal, você convida alguns usuários

03:14.110 --> 03:16.210
ou jogadores para experimentar o jogo.

03:16.240 --> 03:21.760
Aqui você está procurando não apenas se há bugs, mas se ele atende às expectativas do usuário?

03:21.760 --> 03:22.970
É divertido jogar?

03:22.990 --> 03:23.710
Coisas desse tipo.

03:23.710 --> 03:30.220
E com um teste de unidade, você está analisando uma seção muito pequena da experiência, talvez apenas uma única

03:30.220 --> 03:37.000
chamada de método ou uma pequena série de chamadas à medida que os sistemas trabalham juntos e você pergunta se funciona como

03:37.000 --> 03:37.960
como foi planejado para funcionar?

03:37.990 --> 03:43.180
Como mencionei, já estamos fazendo testes de fumaça como uma forma fundamental de abordar os projetos.

03:43.180 --> 03:45.280
Então, vamos imaginar um exemplo simples aqui.

03:45.280 --> 03:50.170
Se tivéssemos um aplicativo do tipo "clique no botão" que tem um botão e, quando você clica nele, você ganha.

03:50.200 --> 03:52.630
Poderíamos adicionar algum código a isso.

03:52.630 --> 03:54.910
Compile e execute a experiência.

03:54.940 --> 03:59.500
Clique no botão um e veja se ele mostra o texto de vitória de você ganhou.

03:59.530 --> 04:05.110
Isso seria um teste de fumaça, e você poderia passar isso para o usuário e ver se funciona para ele.

04:05.260 --> 04:11.340
Em ambos os casos, esse é um teste bastante caro para ser executado e é um uso muito restrito do código

04:11.350 --> 04:11.710
aqui.

04:11.710 --> 04:17.470
Nesse exemplo simples, pode parecer que conseguimos capturar todos os casos de uso, mas imagine um jogo maior

04:17.470 --> 04:19.900
com loops principais e meta loops.

04:20.050 --> 04:24.370
Não se pode contar com o desenvolvedor ou com o usuário e com o teste do usuário.

04:24.400 --> 04:30.070
Testar todos os botões, todas as funcionalidades, todas as entradas e todos os resultados potenciais.

04:30.070 --> 04:36.430
Quando feito corretamente, o teste de unidade pode capturar mais caminhos através do código mais rapidamente, e você

04:36.430 --> 04:39.730
pode executar esse conjunto de testes automaticamente com mais frequência.

04:39.730 --> 04:45.790
Com o passar do tempo, você está criando uma lista de testes permanentes que estão prontos para serem executados, de modo que você sabe que os novos

04:45.790 --> 04:47.930
código não quebra nenhuma funcionalidade antiga.

04:47.950 --> 04:54.340
Algumas equipes operam de acordo com os princípios de desenvolvimento ágil, o que inclui uma parte do seu calendário chamada

04:54.340 --> 04:55.030
um sprint.

04:55.030 --> 05:01.540
Por exemplo, a cada duas semanas, a equipe se compromete a adicionar alguns novos recursos a cada hora, dia e semana,

05:01.540 --> 05:02.420
ou sprint.

05:02.440 --> 05:07.510
A equipe pode executar os testes automatizados novamente, o que é uma ótima oportunidade para detectar erros.

05:07.510 --> 05:09.790
Então, como estamos executando esses testes exatamente?

05:09.790 --> 05:13.600
Bem, o unity tem suporte para testes dentro do unity editor.

05:13.630 --> 05:19.510
Há uma janela dedicada que você pode abrir e executar manualmente esses testes sempre que quiser.

05:19.540 --> 05:21.100
Esse é um ótimo lugar para começar.

05:21.130 --> 05:25.750
É claro que automatizar isso também é possível e recomendado para projetos maiores.

05:25.750 --> 05:31.690
Há maneiras de associar isso ao seu controle de versão, de modo que toda vez que você fizer um commit ou um commit para um

05:31.690 --> 05:34.360
determinado ramo, ele possa executar esses testes novamente.

05:34.600 --> 05:39.020
O próprio Unity oferece alguns serviços, incluindo o Unity Cloud build.

05:39.040 --> 05:45.040
Isso imita a execução desses testes e a construção do seu jogo, mas em um servidor que faz isso automaticamente

05:45.040 --> 05:47.800
uma vez por dia ou em qualquer frequência que faça sentido.

05:47.800 --> 05:53.620
Agora, no desenvolvimento geral do unity, estamos familiarizados com dois modos diferentes dentro da experiência do unity.

05:53.770 --> 05:56.770
Antes de apertarmos o botão play, estamos no modo de edição.

05:56.770 --> 05:58.210
Quando clicamos no play.

05:58.210 --> 06:01.420
Até que a cena pare, estamos no modo de reprodução.

06:01.480 --> 06:05.650
Com o teste de unidade, você pode testar em qualquer um desses dois modos.

06:05.650 --> 06:07.870
Então, há várias maneiras diferentes de abordar isso.

06:08.260 --> 06:13.480
Algumas das ideias de teste que você teria aqui seriam chamar um método e ver se ele lhe dá o

06:13.480 --> 06:14.580
resultado esperado.

06:14.590 --> 06:20.470
Digamos que temos uma classe de sistema matemático com um método de adição e você simplesmente passa os parâmetros conhecidos e

06:20.470 --> 06:22.150
ver se ele corresponde ao resultado conhecido.

06:22.150 --> 06:27.070
Você também pode ter testes que façam perguntas específicas sobre a funcionalidade do editor.

06:27.100 --> 06:33.100
A janela do editor apareceu no tamanho adequado ou os nossos objetos de jogo, ou a câmera no tamanho adequado?

06:33.100 --> 06:35.350
antes de a cena começar?

06:35.350 --> 06:40.900
Fazer testes no modo de edição quando possível é um ótimo ponto de partida, portanto, faça isso por padrão.

06:40.900 --> 06:46.930
O teste no modo de reprodução é incrivelmente útil, mas vem com a complexidade adicional do código de tempo de execução.

06:47.540 --> 06:47.990
Aqui.

06:47.990 --> 06:53.330
Você está testando não apenas como um determinado método retorna um resultado, mas está testando isso dentro de um conjunto maior

06:53.330 --> 06:57.020
ciclo de vida dos objetos do jogo e outros conceitos da unidade.

06:57.070 --> 07:03.200
E se estiver aqui, você pode testar o código que depende de despertar, iniciar, atualizar, etc., coisas que somente

07:03.200 --> 07:04.400
executam em tempo de execução.

07:04.400 --> 07:11.210
Algumas ideias de teste aqui são para ver se um prefab, uma vez instanciado, executa seu método start corretamente

07:11.210 --> 07:12.620
sem nenhuma exceção.

07:12.620 --> 07:14.780
Você pode testar o código ao longo do tempo.

07:15.460 --> 07:19.150
Esse loop é executado corretamente após alguns segundos?

07:19.180 --> 07:21.820
Você pode verificar as interações físicas em tempo de execução.

07:21.820 --> 07:28.720
Quantos quiques uma bola terá em seu jogo 3D antes que ele pare de testar o fator de quicar?

07:28.750 --> 07:30.310
Um pouco mais de contexto aqui.

07:30.310 --> 07:36.830
Historicamente, o unity não oferecia testes integrados no editor usando a janela do test runner.

07:36.850 --> 07:37.330
Veremos.

07:37.360 --> 07:43.570
Nos muitos anos desde o lançamento da unidade, essa funcionalidade foi adicionada lentamente e expandida como

07:43.570 --> 07:45.100
da última versão do unity.

07:45.130 --> 07:50.500
Temos tudo o que precisamos para executar os tipos de testes que desejamos da maneira que desejamos.

07:50.500 --> 07:55.900
Nunca houve um momento melhor para adicionar testes unitários ao seu fluxo de trabalho e, juntos, veremos como

07:55.900 --> 07:56.770
fazer isso.

07:57.160 --> 07:57.970
Obrigado.
