WEBVTT

00:00.380 --> 00:02.620
Funções puras e visão geral.

00:02.630 --> 00:06.290
Então, o que é uma função pura, também conhecida como método puro.

00:06.290 --> 00:10.250
E por que ela é relevante aqui para o processo de teste de unidade?

00:10.280 --> 00:18.320
Uma função pura pode ser considerada como aquela que tem menos efeitos e dependências em outros sistemas não relacionados.

00:18.440 --> 00:24.020
Por não relacionados, quero dizer não diretamente relacionados ao código no corpo da própria função.

00:24.440 --> 00:31.580
Uma forma de vermos isso aqui, enquanto leio a tela, é que os valores de retorno são idênticos para funções idênticas

00:31.580 --> 00:37.850
ou seja, se você passar um valor como um dos argumentos, sempre obterá o valor

00:37.850 --> 00:41.650
mesmo resultado e, em segundo lugar, que não tem efeitos colaterais.

00:41.660 --> 00:50.030
Os efeitos colaterais são saídas indiretas ou outros sistemas que são afetados durante a execução de um determinado

00:50.030 --> 00:50.770
método.

00:50.780 --> 00:57.800
Portanto, quanto mais pura for uma função, mais isolada e independente ela será executada.

00:57.800 --> 01:03.200
Portanto, no código de amostra incluído para o projeto de amostra, você verá algo semelhante a isso na seção

01:03.230 --> 01:04.490
Base de código C-sharp.

01:04.850 --> 01:07.640
Aqui eu coloquei algumas cores para que possamos dar uma olhada.

01:07.640 --> 01:15.650
Então, imagine que temos uma classe personalizada aqui chamada My System e um método dentro dela é chamado

01:15.650 --> 01:16.910
Converter valor.

01:16.940 --> 01:23.810
Observe que há dois argumentos que eu passo e esses dois valores, e somente esses dois valores são

01:23.810 --> 01:26.630
as entradas diretas que afetam a operação.

01:26.660 --> 01:34.670
Não há um terceiro sistema público estático privado estático não relacionado que vemos ali no azul.

01:34.670 --> 01:36.140
É muito simples.

01:36.140 --> 01:38.960
Agora você poderia ter muito mais linhas de código aqui.

01:38.960 --> 01:41.840
Não é apenas o fato de ser breve que o torna puro.

01:41.840 --> 01:48.860
É o fato de vermos que o resultado depende dos argumentos e somente desses argumentos.

01:48.860 --> 01:56.930
Portanto, é altamente puro quando falamos sobre as saídas ou os efeitos colaterais aqui, podemos ver que nenhum outro

01:56.930 --> 01:58.610
valores são definidos aqui.

01:58.880 --> 02:02.840
Se definirmos quaisquer valores temporários, não há problema em uma função pura.

02:02.840 --> 02:09.620
Mas se estivermos definindo valores dentro do blue aqui em sistemas não relacionados ou em variáveis estáticas

02:09.620 --> 02:15.620
que têm uma vida útil além desse método, essas seriam as coisas que o tornariam menos puro.

02:15.620 --> 02:20.840
Agora vamos ver mais alguns slides aqui, obter um pouco de teoria e também entrar em

02:20.840 --> 02:21.440
o código.

02:21.440 --> 02:27.470
Assim, à medida que eu for introduzindo e reforçando esses conceitos, todos nós aprenderemos um pouco mais sobre a apreciação

02:27.470 --> 02:29.330
do que significa ser uma função pura.

02:29.330 --> 02:33.140
Portanto, aqui vemos uma explicação ainda mais detalhada.

02:33.140 --> 02:34.310
Vou lê-la em voz alta.

02:34.400 --> 02:41.450
Uma função pura é geralmente mais fácil de depurar, manter e testar a unidade devido aos seguintes fatores

02:41.450 --> 02:41.930
um.

02:41.930 --> 02:43.670
Não tem efeitos colaterais.

02:43.670 --> 02:49.010
Isso significa que o comportamento é previsível e consistente apenas com base nessa entrada.

02:49.010 --> 02:52.640
Assim como vimos no exemplo, ele é determinístico.

02:52.640 --> 02:57.140
Isso significa que, dada uma determinada entrada, sempre produzimos o mesmo resultado.

02:57.170 --> 03:00.250
Significa que não há outros valores que não estejam relacionados.

03:00.260 --> 03:02.060
Não há aleatoriedade.

03:02.060 --> 03:07.400
Se passarmos os valores três e dez, sempre obteremos o valor 30.

03:07.430 --> 03:13.610
No exemplo anterior, uma função pura também é executada isoladamente, portanto não há necessidade de configurar e

03:13.610 --> 03:15.620
gerenciar dependências externas.

03:15.620 --> 03:19.790
Poderiam ser muitos exemplos diferentes, mas alguns aqui são bancos de dados.

03:19.790 --> 03:27.080
Recursos de rede do sistema de arquivos, outras classes que são criadas e usadas pelo sistema também.

03:27.080 --> 03:32.600
E outro motivo pelo qual é tão fácil depurar e manter os testes unitários é o fato de ser mais simples

03:32.600 --> 03:33.530
testes unitários.

03:33.530 --> 03:37.610
Você pode fornecer as entradas e afirmar as saídas específicas.

03:37.610 --> 03:42.560
Há menos boilerplate de criação de coisas em torno do próprio teste.

03:42.560 --> 03:45.080
E, por fim, é modular e reutilizável.

03:45.080 --> 03:51.950
Portanto, o código que é uma função pura e baseado em funções puras tende a ser mais autônomo e portátil,

03:51.950 --> 03:56.170
e facilita a reutilização da mesma funcionalidade em contextos diferentes.

03:56.180 --> 04:01.910
Agora, à medida que avançamos e falamos sobre funções puras, assim como o tema do curso como um todo,

04:01.910 --> 04:08.690
Eu diria que quando seu código é mais facilmente testável, isso é bom para o processo de teste, mas mais

04:08.690 --> 04:12.890
em grande parte, isso indica que o código é simplesmente melhor projetado.

04:12.890 --> 04:20.450
Portanto, mesmo que não testássemos o nosso código, se o nosso código não tiver efeitos colaterais, for mais determinístico, for

04:20.450 --> 04:28.010
mais isolado, modular e reutilizável, isso é benéfico para o próprio código de produção.

04:28.010 --> 04:36.110
Portanto, vemos um fluxo e refluxo entre os benefícios de algo ser testável por unidade, bem como os benefícios

04:36.110 --> 04:37.370
de ser um código de produção.

04:37.370 --> 04:41.120
Então, se é isso que é uma função pura, o que é uma função não pura?

04:41.120 --> 04:44.410
Bem, é simplesmente uma função que não é tão pura.

04:44.420 --> 04:49.190
Também não é 100% pura, 100% não pura.

04:49.190 --> 04:53.780
Quando estamos falando de uma determinada função, podemos avaliar seu nível de pureza.

04:53.780 --> 04:55.520
Isso pode estar em algum lugar no meio.

04:55.520 --> 04:59.660
Alguns dos principais critérios de uma função não pura é que ela tenha.

04:59.820 --> 05:03.450
Entradas indiretas, o que significa que há algum tipo de estado compartilhado.

05:03.570 --> 05:10.740
Talvez passemos um valor e ele opere com esse valor, além de usar algumas outras dependências que são impuras

05:10.740 --> 05:13.140
e também com saídas indiretas.

05:13.170 --> 05:14.700
Lembre-se de nosso exemplo simples.

05:14.700 --> 05:16.200
Veremos outro exemplo em breve.

05:16.200 --> 05:18.940
Ele simplesmente multiplica dois números e retorna o resultado.

05:18.960 --> 05:26.460
Não estava definindo nenhum valor de sistema não relacionado que ficasse estagnado como uma espécie de

05:26.460 --> 05:26.820
estado compartilhado.

05:27.030 --> 05:33.930
Mas aqui, no caso de uma função não pura, ela pode ter uma ou ambas as idéias de entradas indiretas

05:33.960 --> 05:35.040
saídas indiretas.

05:35.040 --> 05:36.690
Aqui está um exemplo muito simples.

05:36.690 --> 05:38.430
Isso também está no projeto de amostra.

05:38.430 --> 05:41.670
E este é um exemplo de um sistema que não é puro.

05:41.760 --> 05:43.800
Portanto, é um pouco diferente.

05:43.830 --> 05:47.460
Estamos fazendo a mesma operação de multiplicação aqui.

05:47.460 --> 05:50.490
Mas observe aqui o método de conversão de valor.

05:50.490 --> 05:53.910
Ele não recebe todos os argumentos de que precisa.

05:53.910 --> 05:59.180
Ele recebe um valor e o multiplica por algum valor existente no sistema.

05:59.190 --> 06:03.000
Portanto, esse é um exemplo de entrada indireta.

06:03.030 --> 06:09.210
O multiplicador existe antes de o método converter valor ser chamado.

06:09.210 --> 06:13.890
Portanto, essa é a parte de entrada indireta de uma função impura.

06:13.920 --> 06:18.840
Agora, a outra parte sobre a qual falamos é ter alguma saída indireta aqui.

06:18.840 --> 06:20.760
Não estamos vendo um exemplo disso.

06:20.790 --> 06:24.270
Não há nenhum estado que tenha sido alterado e que persista.

06:24.300 --> 06:26.310
Apenas retornamos um valor simples.

06:26.310 --> 06:29.100
E retornar um valor não conta contra ele.

06:29.100 --> 06:32.640
Portanto, temos entrada indireta, mas não temos saída indireta.

06:32.640 --> 06:35.880
Mas ainda assim, ter um desses aqui o torna impuro.

06:35.880 --> 06:38.610
Então, o que fazemos com essas funções não puras?

06:38.610 --> 06:44.250
Já dissemos que as funções puras são mais fáceis de testar e têm muitos benefícios em seu código de produção

06:44.250 --> 06:45.360
de produção também.

06:45.360 --> 06:50.330
Bem, se não tivermos uma função pura, o que podemos fazer a respeito disso?

06:50.340 --> 06:56.010
Bem, algumas das coisas que poderíamos fazer, certamente poderíamos deixá-la de lado, deixando-a impura.

06:56.010 --> 06:57.720
E muitas vezes vamos fazer isso.

06:57.720 --> 07:03.570
Mas, às vezes, quando estamos fazendo o teste unitário de algo, podemos ser incentivados a

07:03.570 --> 07:07.800
a refatorar um pouco para ajudar o sistema a se tornar um pouco mais puro.

07:07.800 --> 07:13.380
Talvez não consigamos chegar a 100%, mas estamos novamente falando sobre a arte.

07:13.410 --> 07:18.150
Cabe a você decidir quão puro e quão impuro você quer que seu código fique.

07:18.180 --> 07:23.580
Agora, alguns desenvolvedores podem, teoricamente, abordar o assunto de forma a querer que tudo seja puro o tempo todo

07:23.580 --> 07:24.210
tempo.

07:24.510 --> 07:25.620
Essa é uma abordagem.

07:25.650 --> 07:29.250
Outra é simplesmente criar o código como você costumava criá-lo.

07:29.250 --> 07:32.550
E se isso for impuro, você simplesmente o deixa impuro.

07:32.550 --> 07:38.010
O que eu quero convidá-lo a fazer é massagear um pouco as idéias e ficar à vontade para brincar com elas

07:38.010 --> 07:42.810
em algum lugar no meio, onde você possa pegar algo não puro e torná-lo um pouco mais puro.

07:42.810 --> 07:47.580
Reconhecer os benefícios para os testes unitários, bem como os benefícios para o código de produção.

07:47.580 --> 07:49.290
Então, vamos ver o que podemos fazer aqui.

07:49.290 --> 07:51.990
Podemos eliminar alguns dos efeitos secundários.

07:52.110 --> 07:56.700
Podemos eliminar o estado compartilhado semelhante aos efeitos colaterais.

07:56.730 --> 07:59.580
Podemos eliminar as dependências que são usadas.

07:59.730 --> 08:04.350
E podemos nos convidar a ter uma asserção por teste.

08:04.380 --> 08:12.270
Isso nos ajudará a entender que se um teste afirma apenas uma coisa, então o nosso código tem de

08:12.270 --> 08:15.270
ser bastante simples para atender a essa afirmação.

08:15.360 --> 08:17.640
Então, vamos brincar um pouco com isso quando analisarmos o código.

08:17.640 --> 08:19.050
Então, como podemos fazer isso?

08:19.050 --> 08:23.700
Bem, podemos refatorar parte do código de produção, seguindo as etapas que vimos na seção

08:23.700 --> 08:24.630
slide anterior.

08:24.630 --> 08:29.730
E outra é que quero apresentar um novo conceito de teste duplo na próxima seção.

08:29.760 --> 08:30.570
Obrigado.
