WEBVTT

00:00.110 --> 00:06.330
Olá e bem-vindo ao Artificial Intelligence for Production Code, que incorpora a IA ao unity.

00:06.350 --> 00:09.350
O desenvolvimento de jogos pode agilizar o desenvolvimento e os testes.

00:09.350 --> 00:11.180
Alguns dos benefícios estão listados aqui.

00:11.180 --> 00:15.710
E o que vamos falar neste vídeo em particular é sobre a geração de código.

00:15.740 --> 00:22.430
A capacidade de analisar e sugerir projetos para otimizações de novos sistemas torna o seu código mais eficiente,

00:22.430 --> 00:25.430
melhor desempenho e economia de tempo de desenvolvimento.

00:25.430 --> 00:27.550
Há muitas ferramentas que você pode usar para essa etapa.

00:27.560 --> 00:32.330
As duas que vou mostrar são o ChatGPT e o GitHub Copilot.

00:32.540 --> 00:40.520
Geralmente, utilizo o ChatGPT para fazer perguntas maiores, dar-me mais amostras de código e respostas, enquanto que

00:40.520 --> 00:47.450
Eu uso o GitHub copilot quando preciso de uma linha, um método, algo menor dentro do contexto de um determinado

00:47.450 --> 00:48.470
página de código.

00:48.860 --> 00:51.380
Continuo a desenvolver a minha própria prática.

00:51.380 --> 00:55.970
Vou mostrar um pouco sobre como ambos funcionam e você pode decidir por si mesmo qual fluxo de trabalho é mais adequado.

00:55.970 --> 00:56.780
sentido para você.

00:56.810 --> 00:59.360
Uma das ferramentas que podemos usar é o OpenAI.

00:59.390 --> 01:05.240
Como mencionei, e você pode clicar no botão try ChatGPT no site aqui e abriremos o

01:05.240 --> 01:05.510
chat.

01:05.510 --> 01:13.550
GPT Eu sou um usuário pagante, e essa é uma taxa de assinatura mensal para obter o ChatGPT plus, alguns dos recursos

01:13.550 --> 01:19.430
que você pode ver não são usados na versão gratuita, mas você certamente pode acompanhar usando a versão gratuita

01:19.430 --> 01:20.300
e dar uma olhada.

01:20.300 --> 01:23.330
A outra ferramenta que mostrarei é o GitHub Copilot.

01:23.330 --> 01:27.350
Normalmente, ela é ativada em seu editor de código.

01:27.350 --> 01:33.110
Eu uso o writer, mas você pode usar o Visual Studio, Visual Studio Code ou outras ferramentas, e ele sabe sobre

01:33.110 --> 01:36.740
a página de código em que você está sentado e pode lhe dar respostas mais contextualizadas.

01:36.740 --> 01:41.390
Sugiro que você faça uma avaliação de um ou dos dois softwares para ver se gosta do fluxo.

01:41.420 --> 01:47.510
Acho que, com o tempo, essas ferramentas estarão amadurecendo, amadurecendo rapidamente, e o preço também cairá

01:47.510 --> 01:50.870
ou será introduzido um nível gratuito para a maioria desses produtos.

01:50.870 --> 01:51.620
Eventualmente.

01:51.620 --> 01:58.160
Quando abro o ChatGPT no navegador, recebo esta experiência aqui e posso começar a conversar

01:58.160 --> 01:59.210
com uma IA.

01:59.210 --> 02:03.680
Se eu quiser ter uma conversa completamente separada, abro um bate-papo diferente.

02:03.710 --> 02:07.910
O ChatGPT só sabe sobre a conversa que você está tendo em um determinado chat.

02:07.910 --> 02:13.370
Portanto, se eu apresentar alguns conceitos aqui e abrir um chat separado, ele não saberá nada sobre a conversa que você está tendo em um determinado chat.

02:13.370 --> 02:14.660
conceitos de que falei.

02:14.660 --> 02:18.410
Portanto, geralmente deixo um chat aberto para cada uma das áreas principais.

02:18.410 --> 02:22.310
O que queremos fazer é começar com um prompt que diga algo assim.

02:22.490 --> 02:28.340
Eu direi, aja como um especialista em desenvolvimento de jogos da unidade e me diga isso ou aquilo.

02:28.760 --> 02:34.760
Então, decidi criar uma classe chamada Product Manager que permite adicionar produto, remover produto

02:34.760 --> 02:36.020
e obter produtos.

02:36.020 --> 02:39.290
Use uma lista ou dicionário para gerenciar a lista de produtos.

02:39.290 --> 02:44.750
Essa lista começará vazia, portanto, você pode fornecer apenas essa informação e ela saberá que será

02:44.750 --> 02:46.670
um especialista em desenvolvimento de jogos em unity.

02:46.700 --> 02:50.240
Ele vai inferir que precisa lhe dar informações em C-sharp.

02:50.240 --> 02:51.950
Então, vamos ver o resultado.

02:51.950 --> 02:53.120
Obtivemos duas respostas completas.

02:53.120 --> 02:54.500
Vamos dar uma olhada no que temos aqui.

02:54.800 --> 02:59.420
GPT diz que certamente na unidade você usaria C-sharp para criar essa classe.

02:59.420 --> 02:59.810
Ótimo.

02:59.810 --> 03:00.940
Está no caminho certo.

03:00.950 --> 03:06.500
Aqui está um exemplo de como você pode implementar um gerenciador de produtos usando uma lista para gerenciar os produtos.

03:06.770 --> 03:10.010
Isso pressupõe que você tenha uma classe de produto definida em outro lugar.

03:10.010 --> 03:14.180
Acrescentou que eu não necessariamente queria ou precisava disso, mas adorei a sugestão.

03:14.180 --> 03:21.680
Então, primeiro ele define o que é um produto para que ele saiba sobre a palavra produto e aplicativo de software geral

03:21.680 --> 03:22.970
usos de um produto.

03:22.970 --> 03:29.690
Ele pode ter um nome ou um ID e, como dá a entender outras propriedades, tem o construtor

03:29.690 --> 03:32.240
configurado e poderíamos até acrescentar mais coisas a ele.

03:32.270 --> 03:35.930
Agora posso copiar e colar isso na unidade e podemos começar.

03:35.930 --> 03:37.970
A seguir, vamos ver que outro código ele nos fornece.

03:37.970 --> 03:41.120
Aqui está o gerenciador de produtos que terá uma lista dos produtos.

03:41.150 --> 03:45.830
Ele sabe a diferença entre privado e público, e como provavelmente queremos gerenciar isso.

03:45.830 --> 03:53.030
E, de modo geral, neste momento em que estamos usando o ChatGPT para código, cerca de um ano após o início da tecnologia, presumo que

03:53.030 --> 03:55.910
que, em geral, o código será compilado logo de cara.

03:55.910 --> 03:57.830
Ocasionalmente, haverá um problema com isso.

03:57.830 --> 04:03.260
Particularmente, ele pode obter algo correto no dó sustenido, mas não saber sobre a unidade ou algo do gênero

04:03.260 --> 04:03.650
isso.

04:03.650 --> 04:08.420
Mas se você sabe o que está procurando e sempre cola na unidade e tenta, você vai

04:08.420 --> 04:13.160
rapidamente terá uma sensação de que está 9,599% certo.

04:14.110 --> 04:17.210
Aqui temos a opção de adicionar produto, remover produto, etc.

04:17.230 --> 04:20.030
Vamos dar uma olhada na configuração da unidade e depois colamos isso.

04:20.050 --> 04:25.420
Aqui estamos dentro do unity e já temos uma boa pasta configurada onde podemos trabalhar.

04:25.420 --> 04:29.500
Então, dentro dos workshops, tenho uma pasta I aqui.

04:29.500 --> 04:33.070
E dentro dela eu já tenho algumas classes bem vazias.

04:33.100 --> 04:37.120
Para o nosso exemplo de IA, o script de exemplo de IA está aqui.

04:37.120 --> 04:38.950
Vamos dar uma olhada no código-fonte para isso.

04:38.980 --> 04:40.540
Aqui está o exemplo de IA.

04:40.540 --> 04:45.250
E, como diz o comentário, está pronto para ser usado por um gerente de produto.

04:45.250 --> 04:47.410
Mas tem uma configuração bastante vazia.

04:48.580 --> 04:55.420
Em seguida, tenho o executor de teste aqui mostrando a categoria de IA e temos alguns testes de IA diferentes

04:55.420 --> 04:55.870
aqui.

04:55.900 --> 04:57.480
Basta configurar um teste vazio.

04:57.490 --> 05:02.500
Se dermos uma olhada no código-fonte do teste de IA, ele está bem vazio.

05:02.500 --> 05:03.550
Parece com isso.

05:07.570 --> 05:11.170
E se olharmos para o teste do modo I play, ele também está bem vazio.

05:11.500 --> 05:15.380
E, finalmente, temos uma classe de gerente de produto aqui que está pronta para o código que está chegando.

05:15.400 --> 05:21.130
Agora estou dando um exemplo um tanto forçado aqui onde já sei que quero um gerente de produto, mas

05:21.130 --> 05:24.520
Não tenho muitas outras coisas das quais ele dependa ou com as quais precise conversar.

05:24.550 --> 05:27.010
Portanto, será fácil para nós integrarmos.

05:27.040 --> 05:31.690
Você poderia imaginar que tem um jogo existente com centenas de classes existentes e quer

05:31.690 --> 05:32.920
adicionar um novo sistema.

05:32.920 --> 05:36.610
Ele não saberá tudo sobre o seu projeto existente, portanto, você terá de explicar isso para

05:36.610 --> 05:36.890
ele.

05:36.910 --> 05:40.740
Portanto, é reconhecidamente um exemplo mais simples aqui, começando do zero.

05:40.750 --> 05:45.640
Mas uma coisa que quero mencionar é que tenho algo parecido com o namespace aqui.

05:45.640 --> 05:52.090
E provavelmente ao interagir com o ChatGPT, vou colar do ChatGPT para o unity.

05:52.120 --> 05:53.260
Usá-lo um pouco.

05:53.260 --> 05:58.510
Posso ajustar o código aqui e depois vou querer copiar e colar novamente no ChatGPT.

05:58.510 --> 06:04.180
O ChatGPT não sabe sobre o meu código aqui, portanto, sempre tenho que manter o bate-papo em andamento neste arquivo separado

06:04.180 --> 06:05.080
conversa.

06:05.080 --> 06:11.830
Portanto, uma das coisas que aprendi é que não quero ter de colar manualmente determinadas seções do

06:11.830 --> 06:14.860
ChatGPT no meu código e algumas seções de volta.

06:14.860 --> 06:19.000
Por exemplo, tenho este espaço de nome já declarado.

06:19.000 --> 06:19.630
E aqui.

06:19.630 --> 06:24.460
Então, vou voltar ao ChatGPT e ver que ele não tem nenhum espaço de nome.

06:24.460 --> 06:27.370
Então, vou dizer: ótimo trabalho.

06:28.890 --> 06:34.170
Por favor, integre este código em sua amostra.

06:35.240 --> 06:36.900
E eu vou colar isso aqui.

06:36.920 --> 06:38.600
Então vamos ver o que ele fez aqui.

06:38.600 --> 06:44.390
Dizia certamente para integrar a classe do gestor de produto no espaço de nome e estrutura fornecidos.

06:44.390 --> 06:48.580
Assim, posso ver que foi adicionado isto e isto.

06:48.590 --> 06:55.340
É apenas um pequeno truque que eu percebi ser útil, para que eu não tenha que adicionar manualmente isso a cada

06:55.340 --> 06:56.660
vez que faço uma pergunta.

06:56.660 --> 06:59.210
Acho que no decorrer deste exercício você verá o porquê.

06:59.240 --> 07:02.960
Então, vou copiar o código completamente e colá-lo na unidade.

07:03.080 --> 07:03.680
Aqui está.

07:03.680 --> 07:08.540
Ele foi colado e não vejo nenhum erro de compilação.

07:08.540 --> 07:09.080
Vamos fazer o check-in.

07:09.080 --> 07:09.620
Unidade.

07:09.650 --> 07:11.270
O Unity foi recompilado.

07:11.270 --> 07:12.440
Tudo parece bem.

07:12.440 --> 07:19.220
Agora, antes de fazermos qualquer teste, vamos dar uma olhada no exemplo I aqui e fazer com que ele execute um exemplo simples

07:19.220 --> 07:20.840
de algumas das funcionalidades.

07:20.840 --> 07:28.040
Então, vou copiar todo esse script e vou dizer "ok, não repita esse código".

07:29.340 --> 07:33.930
Crie uma nova página de código para uma nova classe.

07:34.080 --> 07:37.770
Use isso como inspiração.

07:37.920 --> 07:40.020
Atualize o despertar.

07:40.640 --> 07:45.830
Com uma demonstração simples do Product Manager.

07:45.830 --> 07:47.070
Vamos ver a resposta aqui.

07:47.090 --> 07:52.100
Certamente para criar uma nova classe que demonstre a utilização do Product Manager no despertar.

07:52.130 --> 07:53.390
Aqui está o exemplo.

07:53.420 --> 07:55.150
Vamos dar uma olhada no código-fonte.

07:55.160 --> 07:59.800
Podemos ver que manteve o nome da classe, o comentário e o espaço de nomes de que gosto.

07:59.810 --> 08:03.010
Ele manteve essa parte aqui que eu queria usar.

08:03.020 --> 08:07.550
Coloquei esse atributo aqui apenas para que ele não seja confundido nos testes.

08:07.550 --> 08:09.980
Em seguida, executo o awake aqui.

08:10.070 --> 08:10.810
Parece bom.

08:10.820 --> 08:14.820
Agora vamos copiar isso para o nosso projeto unity e ver como funciona.

08:14.840 --> 08:16.480
Pronto, já colei.

08:16.490 --> 08:17.900
Não vejo nenhum erro aqui.

08:17.900 --> 08:18.440
Vamos fazer o check-in.

08:18.440 --> 08:18.980
Unidade.

08:19.010 --> 08:19.460
Unidade.

08:19.460 --> 08:20.150
Recompilado.

08:20.160 --> 08:21.650
Parece que tudo está funcionando bem.

08:21.650 --> 08:23.750
Aqui está o exemplo já em cena.

08:23.750 --> 08:24.830
Vamos prosseguir e executar.

08:24.860 --> 08:29.090
Meu console mostra o ID do produto um, dois e três.

08:29.120 --> 08:30.680
Vamos dar uma olhada no código-fonte.

08:30.680 --> 08:32.860
Então, vamos rever o que estamos fazendo aqui.

08:32.870 --> 08:36.190
Temos um gerenciador de produto que é instanciado.

08:36.200 --> 08:37.700
Adicionamos três produtos.

08:37.700 --> 08:39.320
Chamamos o get products.

08:39.320 --> 08:40.730
E depois os cuspimos.

08:40.760 --> 08:46.910
Este é um exemplo simples que está fazendo algo em um projeto bastante vazio.

08:46.910 --> 08:52.520
Portanto, concordamos que é provavelmente mais fácil de integrar do que algo muito posterior em um projeto maior e mais complexo

08:52.520 --> 08:53.090
produto.

08:53.090 --> 08:55.190
Mas veja como isso é incrível.

08:55.220 --> 08:59.450
Ele foi capaz de me fornecer o gerente de produto e um exemplo de demonstração além disso.

08:59.450 --> 09:06.320
Isso é tudo para esta demonstração de como a inteligência artificial, particularmente o ChatGPT, pode

09:06.320 --> 09:12.140
nos dar a capacidade de adicionar novos códigos de produção em um vídeo futuro, veremos como a IA pode ajudar

09:12.140 --> 09:15.140
a criar testes de unidade em cima desse código de produção.

09:15.710 --> 09:16.490
Obrigado.
