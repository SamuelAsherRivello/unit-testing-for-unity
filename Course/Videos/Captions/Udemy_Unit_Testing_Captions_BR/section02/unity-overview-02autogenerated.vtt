WEBVTT

00:00.530 --> 00:02.180
A estrutura da unidade.

00:02.210 --> 00:05.090
Este curso está dividido em diferentes trilhas de aprendizagem.

00:05.120 --> 00:10.670
Em teoria, daremos um passo atrás e examinaremos alguns dos fundamentos do software e do design de jogos.

00:10.670 --> 00:16.970
Ao falar sobre o editor, analisaremos o unity, a ferramenta de edição em si, que é o que nós, como desenvolvedores

00:16.970 --> 00:19.070
abrimos e usamos como nosso software.

00:19.070 --> 00:24.350
E nas seções de código, veremos a linguagem de programação C sharp e como ela se aplica ao jogo unity

00:24.350 --> 00:25.100
desenvolvimento de jogos.

00:25.160 --> 00:26.840
Vamos começar com a teoria.

00:26.870 --> 00:34.100
O ciclo de vida do desenvolvimento de software inclui muitos estágios, levando-nos de uma ideia a um produto acabado.

00:34.100 --> 00:40.400
Isso inclui a análise de requisitos, o planejamento do projeto, a concepção do conceito e assim por diante

00:40.400 --> 00:43.640
ao desenvolvimento, teste e implantação.

00:43.640 --> 00:51.080
Embora o unity seja uma ferramenta poderosa em muitos desses estágios, vamos nos concentrar no uso do unity no desenvolvimento,

00:51.110 --> 00:55.280
testes e fases de implantação dentro do mundo do unity.

00:55.280 --> 00:57.590
Os conceitos estão estruturados da seguinte forma.

00:57.590 --> 01:01.040
Em um projeto, você tem uma ou mais cenas.

01:01.490 --> 01:06.500
Dentro de cada cena, você tem objetos de jogo com componentes anexados.

01:06.500 --> 01:14.030
Esses componentes podem lidar com coisas como o renderizador de malha, o corpo rígido de áudio Collider para física,

01:14.030 --> 01:17.450
sistemas de partículas e, é claro, scripts personalizados.

01:17.450 --> 01:21.920
O objeto de jogo é uma peça fundamental do quebra-cabeça da unidade.

01:21.920 --> 01:28.880
É tudo o que é visual e não visual, sobre o qual penduramos nossos componentes personalizados e os componentes do Unity.

01:28.880 --> 01:30.380
componentes embutidos também.

01:30.410 --> 01:33.650
Dê uma olhada nesta captura de tela de jogo como um exemplo.

01:34.230 --> 01:39.780
Aqui temos uma cena de jogo que está dividida em vários prefabs diferentes.

01:39.780 --> 01:45.990
Você pode pensar em um prefab como um objeto de jogo com um ou mais componentes armazenados para reutilização.

01:45.990 --> 01:51.450
Por exemplo, vemos várias moedas aqui, cada uma com uma posição e rotação exclusivas.

01:51.450 --> 01:58.230
No entanto, a moeda também tem alguns recursos comuns, talvez funcionalidade, detecção de colisão,

01:58.500 --> 02:05.520
como ela é renderizada, e esses recursos comuns são mantidos no prefab ao organizar seu projeto e

02:05.520 --> 02:07.260
decidir sobre a estrutura.

02:07.890 --> 02:14.010
As equipes geralmente escolhem entre cenas e pré-fabricados para a organização de alto nível.

02:14.040 --> 02:20.010
O GameObject é o conceito fundamental em qualquer cena e, embora possa haver muitos componentes diferentes

02:20.040 --> 02:23.940
em um objeto de jogo, o componente de transformação está sempre presente.

02:23.970 --> 02:30.180
O componente de transformação armazena e manipula aspectos de como o objeto se situa no mundo.

02:30.180 --> 02:34.650
Quer o objeto tenha gráficos ou não, ele tem um objeto de transformação.

02:34.680 --> 02:38.580
O código que usamos é a linguagem de instruções do software.

02:38.580 --> 02:43.350
As raízes históricas do Unity estão relacionadas com o projeto mono.

02:43.380 --> 02:45.600
Esta era uma versão de código aberto do.

02:45.900 --> 02:47.130
Net framework.

02:47.160 --> 02:53.760
Você ainda verá o termo mono usado um pouco através da API da unidade, incluindo o comportamento mono.

02:53.760 --> 02:59.610
Enquanto no passado o unity oferecia várias linguagens de programação diferentes, o C sharp é a única linguagem de programação

02:59.610 --> 03:03.810
e, embora o unity suporte C-sharp, ele não depende dela.

03:04.020 --> 03:11.250
Net, a versão do Unity do C-sharp é bastante robusta e apresenta muitos dados diferentes, conceitos

03:11.250 --> 03:12.270
e estruturas.

03:12.270 --> 03:20.130
Os principais namespaces que usamos dentro do unity são o unity engine para o código de tempo de execução, o unity editor para o código de tempo de execução e o unity editor para o código de tempo de execução.

03:20.130 --> 03:27.630
código de tempo de edição e o espaço de nomes do sistema, que inclui muitas funcionalidades diferentes, não especificamente

03:27.630 --> 03:32.140
relacionada à unidade, mas bastante útil, incluindo matemática, bibliotecas, etc.

03:32.160 --> 03:36.540
Aqui está um exemplo de um script personalizado em C sharp para uso na unidade.

03:36.570 --> 03:39.150
Começando do topo, vemos as instruções de uso.

03:39.150 --> 03:43.920
Elas trazem os namespaces que precisamos usar neste arquivo de classe específico.

03:44.400 --> 03:50.850
Em seguida, vemos um namespace que nos ajuda a declarar e organizar onde este código se encontra em nosso projeto.

03:50.880 --> 03:55.710
Em seguida, declaramos a classe ou interface pública que define esse tipo.

03:55.710 --> 03:59.070
Observe que aqui estamos estendendo ou herdando o Monobehaviour.

03:59.100 --> 04:04.550
Agora, de dentro desse escopo, podemos acessar todas as funcionalidades do Monobehaviour também.

04:04.560 --> 04:07.230
Algumas características específicas do unity a serem observadas aqui.

04:07.260 --> 04:11.400
A capacidade de serializar o campo usando o atributo serialized field.

04:11.400 --> 04:18.240
Isso pode pegar um valor público ou privado e renderizá-lo no Unity Inspector para que, enquanto

04:18.240 --> 04:21.470
o jogo ao vivo esteja sendo jogado, podemos ajustar essa configuração.

04:21.480 --> 04:24.630
Isso ajuda na criação de protótipos e no design da jogabilidade.

04:24.630 --> 04:28.350
O comportamento do monitor vem com muitos eventos importantes que podem ser aproveitados.

04:28.380 --> 04:35.790
Ao nomear um dos seus métodos como awake, você captura o evento de quando esse objeto é acordado pela primeira vez no

04:35.790 --> 04:36.360
mundo.

04:36.360 --> 04:37.950
Isso acontece apenas uma vez.

04:38.340 --> 04:40.830
Depois disso, o método start é chamado aqui.

04:40.830 --> 04:46.140
É bom configurar quaisquer dependências com outros objetos e, em seguida, o método update é chamado a cada

04:46.140 --> 04:47.400
quadro depois disso.

04:47.400 --> 04:52.170
Esse é um ótimo lugar para fazer a lógica de entrada e atualizar os gráficos.

04:52.680 --> 04:58.590
Esses são apenas alguns dos eventos ou substituições de métodos dos quais você pode tirar proveito, mas certamente estes

04:58.590 --> 05:00.000
são alguns dos mais importantes.

05:00.030 --> 05:00.870
Obrigado.
