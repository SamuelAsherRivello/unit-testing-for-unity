WEBVTT

00:00.140 --> 00:03.740
Os editores são algumas das principais ferramentas que usamos no desenvolvimento de software.

00:03.770 --> 00:10.100
Ao desenvolver jogos com o unity, o próprio unity editor é onde fazemos a maior parte do nosso trabalho.

00:10.100 --> 00:13.470
E um editor de código separado é onde adicionamos o código.

00:13.490 --> 00:19.310
O editor de unidade é composto por um conceito de layout, que é um grupo de diferentes abas e encaixes

00:19.310 --> 00:20.150
janelas.

00:21.040 --> 00:26.830
E cada uma dessas janelas executa funções e nos dá mais informações sobre o jogo e o projeto

00:26.830 --> 00:27.580
que estamos criando.

00:27.580 --> 00:31.840
Aqui está um layout bastante comum com as janelas mais populares e úteis.

00:31.840 --> 00:34.960
A janela de hierarquia nos mostra os objetos no mundo.

00:34.960 --> 00:38.770
A visualização da cena nos dá uma representação 3D desse mundo.

00:38.770 --> 00:42.070
Ela também pode ser alternada para 2D para uma jogabilidade 2D.

00:42.070 --> 00:48.040
A janela do projeto representa a biblioteca de todos os ativos possíveis em código que podemos trazer para essa cena,

00:48.040 --> 00:54.460
e, à medida que selecionamos diferentes itens e funcionalidades nessas janelas, a janela do Inspetor fornece

00:54.460 --> 00:58.390
mais detalhes e campos serializados do nosso código.

00:58.390 --> 01:02.230
Aparecem aqui para facilitar a edição no momento da edição e no tempo de execução.

01:02.230 --> 01:03.640
Vamos ver isso em ação.

01:03.640 --> 01:06.490
No editor do Houdini, vou criar uma nova cena.

01:06.490 --> 01:08.260
Criarei um objeto de jogo.

01:08.260 --> 01:14.500
Adicionarei um script personalizado a esse objeto de jogo, pressionarei Play no Unity e veremos como esse script

01:14.500 --> 01:15.850
se traduz em tempo de execução.

01:15.850 --> 01:21.430
E depois vou brincar com os campos serializados dentro do inspetor para demonstrar como isso funciona.

01:21.430 --> 01:25.690
Os pré-requisitos para este curso incluem algum software livre.

01:25.840 --> 01:29.290
Primeiro, use o seu navegador da Web favorito.

01:30.110 --> 01:35.180
Isso é útil para fazer qualquer pesquisa adicional que você precise fazer durante o curso.

01:35.710 --> 01:38.380
Por exemplo, você pode obter o Chrome do Google.

01:38.380 --> 01:40.990
Em seguida, precisaremos do editor de unidade propriamente dito.

01:41.200 --> 01:48.430
O unity editor também vem com um editor de código, ou você pode usar o editor de código que quiser do

01:48.460 --> 01:54.580
No botão Getting Started na parte superior da navegação, encontramos diferentes opções e preços para o software unity

01:54.580 --> 01:55.240
pacote.

01:55.240 --> 02:02.200
As opções incluem o Unity Personal e o Unity Student, ambos gratuitos e recomendados para uso

02:02.200 --> 02:03.090
neste curso.

02:03.100 --> 02:08.260
Eles incluem todos os recursos e funcionalidades de que falamos e tudo o que você precisa para

02:08.260 --> 02:09.880
aprender com este curso também.

02:09.880 --> 02:16.600
Quando baixarmos e executarmos o unity pela primeira vez em um projeto aberto e vazio, teremos aquele layout familiar e

02:16.600 --> 02:19.200
série de janelas que vimos antes.

02:19.210 --> 02:20.680
Vamos criar uma nova cena.

02:20.680 --> 02:24.610
Podemos fazer isso de várias maneiras, mas basta arquivar New Scene.

02:24.610 --> 02:30.430
Vamos escolher a cena básica integrada e, na hierarquia, podemos ver que temos a cena básica configurada

02:30.430 --> 02:32.770
com a câmera e a iluminação padrão.

02:32.770 --> 02:34.330
Vamos criar um novo objeto de jogo.

02:34.330 --> 02:38.890
Escolheremos o cubo e depois colocaremos alguns scripts personalizados no cubo.

02:38.920 --> 02:44.170
Há muitas maneiras de fazer isso, mas escolheremos Game Object, 3D object e Cube.

02:44.170 --> 02:47.680
Agora podemos ver a renderização do cubo na visualização do jogo.

02:47.680 --> 02:51.970
A visualização do jogo representa o que os usuários finais verão a partir da câmera do jogo.

02:51.970 --> 02:58.330
Com esse cubo selecionado na hierarquia, podemos ver na janela do inspetor todos os componentes atuais

02:58.330 --> 02:59.200
anexados.

02:59.350 --> 03:01.540
Vamos adicionar um novo componente personalizado.

03:06.320 --> 03:10.190
Agora, em nossa janela de projeto, vemos o primeiro ativo que criamos.

03:10.930 --> 03:14.920
Podemos clicar duas vezes nesse script e abri-lo no editor de código padrão.

03:15.600 --> 03:21.090
Quando criamos um novo script e o abrimos, o editor de código padrão é aberto para nós.

03:21.300 --> 03:25.470
E para você começar, o unity inclui um pequeno trecho de código de modelo.

03:25.500 --> 03:30.510
Você é livre para remover as partes que não quer ou não precisa e começar a codificar do zero.

03:30.900 --> 03:35.190
Vou copiar do nosso slide de script e colar na unidade.

03:35.220 --> 03:40.920
Temos o método awake, o método start e o método update que será executado a cada quadro.

03:41.640 --> 03:45.010
Aqui estou usando o componente transform para girar o objeto.

03:45.030 --> 03:48.570
Salvamos o nosso script aqui e voltamos para a unidade e executamos a cena.

03:48.600 --> 03:56.070
Você pode ver em tempo de execução que o código de rotação de transformação dentro do método de atualização está girando o cubo.

03:56.070 --> 04:00.160
Além disso, enquanto o unity está rodando aqui com o cubo selecionado.

04:00.180 --> 04:04.020
Eu vejo o campo serializado da velocidade e posso manipulá-lo.

04:12.830 --> 04:15.410
Agora ele está girando muito, muito mais rápido.

04:24.330 --> 04:25.680
Ou muito mais devagar.

04:28.560 --> 04:35.760
Podemos fazer essas alterações em quaisquer campos serializados para que possamos ajustar a sensação de jogabilidade ou o jogo

04:35.760 --> 04:38.370
sem interromper a unidade.

04:39.160 --> 04:43.360
Esta é uma característica incrivelmente poderosa do motor da unidade.

04:43.390 --> 04:47.620
O unity editor nos mostra uma aproximação do nosso jogo em desenvolvimento.

04:48.070 --> 04:52.510
É melhor testá-lo em uma compilação completa para ver os resultados reais.

04:52.540 --> 04:56.260
Há muitas maneiras de fazer isso, mas vou usar a compilação de arquivos e a execução.

04:56.260 --> 05:00.370
E agora vemos nosso projeto em execução em uma compilação autônoma.

05:00.400 --> 05:03.550
No meu caso, isso está definido para o Windows.

05:03.580 --> 05:06.280
Isso é tudo para uma breve visão geral do unity.

05:06.640 --> 05:09.280
Adicionando scripts e construindo o projeto.

05:10.810 --> 05:18.670
Com essa rápida visão geral do Unity, do editor do Unity e dos scripts, podemos começar a ver o quão poderoso é o Unity.

05:18.670 --> 05:19.510
a unidade é.

05:19.540 --> 05:22.750
Estamos apenas arranhando a superfície do que é possível.

05:22.750 --> 05:27.030
Revisamos o editor teórico e a codificação dentro do Unity.

05:27.040 --> 05:33.130
Vimos que o objeto de jogo é um conceito fundamental que os pré-fabricados e as cenas são usados para o alto nível

05:33.130 --> 05:38.860
organização de alto nível em seu projeto, e que, ao criar uma classe e estender o monobehaviour, obtemos muito

05:38.860 --> 05:40.750
de funcionalidade fora da caixa.

05:40.750 --> 05:47.050
A seguir, vamos nos afastar um pouco das especificidades do unity e examinar alguns conceitos de design de software.

05:47.050 --> 05:55.960
Veremos os princípios de design, padrões de design e UML ou Unified Modeling Language para diagramação

05:55.960 --> 05:57.610
nossos conceitos e planos.

05:58.210 --> 05:59.080
Muito obrigado.
