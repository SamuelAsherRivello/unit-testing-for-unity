WEBVTT

00:00:00.020 --> 00:00:02.750
Olá e bem-vindo ao teste de unidade para unidade.

00:00:02.780 --> 00:00:10.010
Aqui vamos falar sobre o Unity Cloud Build como uma forma popular de fazer integração contínua e

00:00:10.010 --> 00:00:11.270
implantação com unidade.

00:00:11.300 --> 00:00:17.480
Portanto, vimos os enormes benefícios dos testes unitários e da configuração de um processo automatizado para executar

00:00:17.480 --> 00:00:18.620
esses testes de unidade.

00:00:18.650 --> 00:00:23.640
Uma dessas opções populares que você pode usar é a construção em nuvem do Unity.

00:00:23.660 --> 00:00:25.820
Isto é oferecido pela própria unidade.

00:00:25.850 --> 00:00:31.040
Também há muitas alternativas baseadas em terceiros ou na comunidade para o que estou prestes a mostrar.

00:00:31.070 --> 00:00:37.820
Porque a construção da nuvem é específica da unidade, construída pela unidade, e funciona com bastante facilidade.

00:00:37.820 --> 00:00:43.280
Vou me concentrar nisso aqui, mas a maioria das etapas que você vê aqui seriam muito semelhantes

00:00:43.280 --> 00:00:45.560
na criação de algumas ferramentas competitivas.

00:00:45.560 --> 00:00:49.100
Portanto, o Unity Cloud Build oferece automação de criação de unidade.

00:00:49.100 --> 00:00:55.750
Criar jogos de qualidade significa ter um pipeline de CI CD pronto para testes e lançamentos frequentes.

00:00:55.760 --> 00:01:00.440
Automatize seu pipeline de construção na nuvem e mantenha o desenvolvimento em andamento com unidade.

00:01:00.440 --> 00:01:01.460
Automação de construção.

00:01:01.460 --> 00:01:03.530
Então neste vídeo vamos passar por todo o processo.

00:01:03.530 --> 00:01:07.880
Mas o Unity Cloud Build é um software como serviço baseado na web.

00:01:07.910 --> 00:01:12.710
Custa, mas há um nível inicial gratuito que usaremos hoje.

00:01:12.740 --> 00:01:17.870
As empresas que têm muitas construções para fazer e querem minimizar o tempo de espera do seu edifício

00:01:17.870 --> 00:01:23.480
ser mais adequado com níveis pagos para este serviço ou encontrar uma alternativa.

00:01:23.870 --> 00:01:27.350
Depois de usar a versão Unity Cloud, ela será baseada na Web.

00:01:27.350 --> 00:01:30.710
Como mencionei, você abre o histórico de construção e clica em construir.

00:01:30.710 --> 00:01:36.350
Se você quiser fazer um teste manualmente ou agendar essas compilações, você pode tê-las, por exemplo,

00:01:36.350 --> 00:01:42.260
acontece apenas no seu branch principal, mas acontece todas as noites à 1h e ele será compilado automaticamente

00:01:42.260 --> 00:01:43.310
uma vez por dia.

00:01:43.340 --> 00:01:45.190
Você também pode configurar um gatilho.

00:01:45.200 --> 00:01:52.220
Você também pode configurar gatilhos para que sejam criados automaticamente com base em determinados critérios, como quando

00:01:52.220 --> 00:01:56.540
o código é confirmado de uma ramificação para outra, execute-o automaticamente.

00:01:56.540 --> 00:01:57.920
Então você tem algumas opções aí.

00:01:57.920 --> 00:02:02.570
E depois de iniciar essa construção, manual ou automaticamente, você e todos os membros do seu

00:02:02.570 --> 00:02:08.300
a equipe que desejar receberá um e-mail confirmando compilações bem-sucedidas, com falha ou qualquer nível

00:02:08.300 --> 00:02:09.200
de informações que você deseja.

00:02:09.230 --> 00:02:10.940
Vamos ver uma demonstração disso em ação.

00:02:10.940 --> 00:02:17.180
Agora já passei e criei um projeto, testei para ter certeza de que funciona bem com Unity

00:02:17.180 --> 00:02:17.600
Nuvem.

00:02:17.600 --> 00:02:19.310
Construa e termine isso.

00:02:19.310 --> 00:02:22.550
Fiz parte desse trabalho para poder entender como o sistema funciona.

00:02:22.550 --> 00:02:25.990
E também para tirar algumas das capturas de tela que vimos aqui nesta apresentação.

00:02:26.000 --> 00:02:32.750
No entanto, o que farei é apenas iniciar o processo do zero para que você possa ver cada etapa envolvida.

00:02:32.780 --> 00:02:38.150
Agora, não vou criar o projeto em si, mas farei toda a automação além disso.

00:02:38.150 --> 00:02:44.780
Então aqui está nosso projeto de unidade que já possui os testes de unidade adicionados e todas as diferentes cenas de exemplo.

00:02:44.780 --> 00:02:49.760
É o único projeto deste curso e está vinculado à seção de recursos do curso.

00:02:49.760 --> 00:02:55.460
Podemos encontrar isso aqui no GitHub apenas para explorar a página e confirmar se ela está realmente pronta.

00:02:55.460 --> 00:02:57.170
E vou abri-lo dentro da unidade.

00:02:57.170 --> 00:02:59.390
Aqui estamos no projeto dentro da unidade.

00:02:59.420 --> 00:03:01.430
Podemos ver aqui no Inspetor.

00:03:01.430 --> 00:03:07.070
Temos alguns links nos quais podemos clicar para diferentes áreas do projeto para começar a ver

00:03:07.070 --> 00:03:12.290
alguns dos exemplos, bem como clicar no curso e no próprio link do projeto de amostra.

00:03:12.380 --> 00:03:15.830
Também podemos testar se todos os testes de unidade passam dentro do executor de testes.

00:03:15.830 --> 00:03:16.850
Então vamos fazer isso.

00:03:19.000 --> 00:03:21.610
Você pode ver todos os 148 testes aprovados.

00:03:21.760 --> 00:03:27.340
Outra coisa que quero fazer é acessar as configurações de compilação e, se ainda não estiver lá, quero

00:03:27.340 --> 00:03:33.280
para adicionar isso, mantenha esta cena em Configurações de compilação para Cloud Build, e farei questão de confirmá-la

00:03:33.280 --> 00:03:34.030
para o repositório.

00:03:34.060 --> 00:03:37.900
Agora, cada um desses processos de construção funciona de maneira bem diferente.

00:03:37.930 --> 00:03:45.670
O Unity Cloud Build deseja construir pelo menos uma cena para que ela seja considerada uma construção passageira

00:03:45.670 --> 00:03:46.660
processo.

00:03:46.660 --> 00:03:49.060
Então é por isso que precisa de uma cena ali.

00:03:49.060 --> 00:03:52.540
E essa cena é bastante simples, bastante vazia.

00:03:52.570 --> 00:03:56.530
Ele existe apenas para testar funcionalidades mínimas.

00:03:56.560 --> 00:04:02.410
Você também pode ter uma cena mais envolvente, se quiser, e fazer com que esse seja o único teste a ser construído,

00:04:02.410 --> 00:04:08.620
mas presumo que minha cobertura de teste de unidade no modo de edição e no modo de reprodução esteja fazendo isso por mim.

00:04:08.620 --> 00:04:12.410
Então eu tenho uma cena de teste bem vazia que arrasto para lá.

00:04:12.430 --> 00:04:14.550
Aqui vemos o Unity Hub aberto.

00:04:14.560 --> 00:04:19.780
Normalmente estamos logados, mas eu me desconectei propositalmente para poder criar uma nova conta.

00:04:19.810 --> 00:04:24.550
Se você já criou uma conta para usar no Unity, pode pular esta etapa.

00:04:24.550 --> 00:04:26.310
Estou apenas mostrando que está completo.

00:04:26.320 --> 00:04:30.820
Não há nada exclusivo que você precise fazer aqui, especificamente a construção de nuvem ainda.

00:04:30.910 --> 00:04:33.690
Então, o que farei aqui é criar uma conta.

00:04:33.700 --> 00:04:40.000
Depois que a configuração mais básica estiver concluída, irei para Cloud Unity.com.

00:04:40.000 --> 00:04:43.240
E é aqui que preciso fazer algumas configurações adicionais.

00:04:43.240 --> 00:04:47.500
Para que meu projeto que mostrei no GitHub seja construído automaticamente.

00:04:47.950 --> 00:04:51.970
Agora já fiz esses passos, mas vou fazê-los novamente do zero para que possamos ver tudo

00:04:51.970 --> 00:04:52.300
aqui.

00:04:52.300 --> 00:04:57.990
Então irei para projetos aqui na barra lateral e clicarei em novo para pegar um novo projeto.

00:04:58.000 --> 00:05:06.010
Chamarei isso de teste de unidade para unidade dois porque já tenho um que usei.

00:05:06.040 --> 00:05:08.520
Isso será direcionado a crianças menores de 13 anos?

00:05:08.530 --> 00:05:09.520
Não, não vai.

00:05:14.670 --> 00:05:15.480
OK.

00:05:15.720 --> 00:05:17.290
Então, vamos dar uma olhada em alguns desses detalhes.

00:05:17.310 --> 00:05:25.470
Temos o nome do projeto, um ícone, um ID do projeto, a chave de licença do Google para compras no aplicativo não está lá

00:05:25.470 --> 00:05:26.060
ainda.

00:05:26.070 --> 00:05:32.730
Este painel que estamos vendo oferece todos os tipos de recursos diferentes que a unidade oferece em seus serviços.

00:05:32.760 --> 00:05:34.950
Não precisamos fazer nada disso aqui.

00:05:35.040 --> 00:05:35.310
Tudo bem.

00:05:35.340 --> 00:05:38.460
Agora que o projeto foi configurado, vamos passar para o Dev Ops aqui.

00:05:41.900 --> 00:05:44.420
Uma das coisas que podemos fazer é construir automação.

00:05:44.420 --> 00:05:46.640
Iremos para as configurações de automação de construção.

00:05:46.760 --> 00:05:49.790
Então, aqui estamos com as configurações de automação de construção.

00:05:49.910 --> 00:05:52.760
Podemos ver algumas informações gerais aqui.

00:06:00.250 --> 00:06:00.760
Sim.

00:06:01.480 --> 00:06:03.370
Vou para o controle de origem.

00:06:05.470 --> 00:06:09.010
O controle de origem tem um menu suspenso, podemos escolher Git Hub.

00:06:09.140 --> 00:06:09.430
OK.

00:06:09.460 --> 00:06:13.660
Isso nos diz que precisamos de um token de acesso pessoal do git.

00:06:13.690 --> 00:06:14.020
OK.

00:06:14.020 --> 00:06:19.490
O que precisamos fazer é conectar nossa conta de faturamento Unity Cloud aqui com nossa conta GitHub.

00:06:19.510 --> 00:06:26.950
Dessa forma, o processo de construção sabe onde nosso código está e pode ouvir determinados eventos, como

00:06:26.950 --> 00:06:32.480
quando o código foi atualizado ou mesclado, etc., para permitir permissão para construção do Unity Cloud.

00:06:32.500 --> 00:06:38.220
Entraremos nas configurações aqui e pegaremos um token de acesso pessoal do nosso GitHub.

00:06:38.230 --> 00:06:42.180
Portanto, isso cria e fornece seu token de acesso pessoal do GitHub.

00:06:42.190 --> 00:06:46.960
Você precisará selecionar o escopo da organização de leitura do repositório.

00:06:50.800 --> 00:06:55.330
Portanto, você precisará de uma conta GitHub para onde quer que esteja o repositório.

00:06:55.360 --> 00:06:57.760
Não precisa ser o repositório que configurei aqui.

00:06:57.760 --> 00:07:02.590
Você poderia executar isso sozinho, mas para obter esse token de acesso pessoal, isso é algo

00:07:02.590 --> 00:07:04.270
específico para sua conta.

00:07:04.300 --> 00:07:06.910
Nada a ver comigo como instrutor aqui.

00:07:07.030 --> 00:07:12.010
Então podemos ir aqui até o perfil e descer nas configurações.

00:07:16.450 --> 00:07:20.320
Então aqui embaixo do lado vamos para Configurações do desenvolvedor.

00:07:30.250 --> 00:07:33.580
Então, nos tokens de acesso pessoal, podemos ir para o clássico.

00:07:35.260 --> 00:07:38.000
Já tenho um lá que criei recentemente.

00:07:38.020 --> 00:07:42.130
Este é o projeto read org e repo.

00:07:42.460 --> 00:07:45.460
Vou gerar um novo token, então darei um nome a ele.

00:07:45.460 --> 00:07:51.040
Será o token de construção do Unity Cloud.

00:07:54.200 --> 00:07:56.480
Não vou dar prazo.

00:07:56.480 --> 00:07:58.910
Então aqui vou escolher repo.

00:07:59.120 --> 00:08:03.860
Escolherei ler, ler e ler algumas dessas configurações.

00:08:04.760 --> 00:08:07.250
Isso pode não ser tudo necessário.

00:08:07.250 --> 00:08:08.450
Talvez você pudesse fazer menos.

00:08:08.450 --> 00:08:09.530
Mas eu farei isso.

00:08:13.200 --> 00:08:13.530
OK.

00:08:13.560 --> 00:08:15.780
Então copiamos o valor daí.

00:08:22.760 --> 00:08:25.490
Colamos o valor e autorizamos.

00:08:32.850 --> 00:08:33.750
Escolha minha unidade.

00:08:33.750 --> 00:08:35.040
Testando a unidade.

00:08:36.210 --> 00:08:38.670
Agora vamos dar uma olhada nas configurações aqui.

00:08:40.080 --> 00:08:47.070
Faremos uma configuração rápida do alvo e escolheremos o Windows 64.

00:08:47.580 --> 00:08:55.290
Agora, se o seu projeto final estiver sendo reproduzido por usuários de dispositivos alvo específicos, como Android, iOS,

00:08:55.320 --> 00:08:59.520
etc., você pode querer fazer compilações para todos eles desde o início.

00:08:59.550 --> 00:09:02.850
Aqui podemos ver que temos muitas coisas diferentes para selecionar.

00:09:02.880 --> 00:09:08.760
Normalmente, há menos atrito em fazer com que uma compilação do Windows funcione em uma máquina Windows, então

00:09:08.760 --> 00:09:09.930
Eu apenas escolho esse.

00:09:16.830 --> 00:09:17.160
Aqui.

00:09:17.160 --> 00:09:19.260
Escolheremos o branch que queremos construir.

00:09:19.290 --> 00:09:22.350
Agora aqui vemos o caminho da subpasta do projeto.

00:09:22.350 --> 00:09:23.550
E isso é opcional.

00:09:23.550 --> 00:09:30.030
Mas diz que se seus ativos e configurações do projeto não estiverem na pasta raiz do seu repositório, recomendamos

00:09:30.030 --> 00:09:31.740
inserindo o caminho da pasta.

00:09:31.770 --> 00:09:34.230
Vamos dar uma olhada no meu projeto aqui.

00:09:34.260 --> 00:09:43.380
Agora aqui está o repositório e minha convenção é que meu projeto de unidade está sempre sob uma barra de repositório barra de unidade

00:09:43.410 --> 00:09:44.750
ativos, por exemplo.

00:09:44.760 --> 00:09:49.200
Acho que em projetos maiores é sempre útil ter essa separação.

00:09:49.200 --> 00:09:53.070
Então, todos os projetos de todas as escalas eu começo assim?

00:09:53.160 --> 00:09:58.660
Dentro dessa pasta de unidade podemos ver os ativos, pacotes e configurações do projeto familiares.

00:09:58.680 --> 00:10:02.040
Agora essas três pastas estão imediatamente na sua raiz.

00:10:02.070 --> 00:10:07.860
Você não precisa de nenhuma configuração personalizada, mas se essas três pastas não estiverem na sua raiz, então você

00:10:07.860 --> 00:10:10.500
precisamos abordar exatamente de onde eles vêm.

00:10:12.180 --> 00:10:15.570
Então, no meu caso, é apenas uma barra de unidade.

00:10:16.780 --> 00:10:19.140
Então podemos falar sobre a versão unitária.

00:10:19.150 --> 00:10:26.290
Agora, acho que detectar automaticamente a versão da unidade provavelmente é uma boa ideia para que ela possa construir

00:10:26.290 --> 00:10:31.250
um baseado na versão mais recente que foi inserida no repositório.

00:10:31.270 --> 00:10:37.720
No entanto, suspeito que não funcione para mim por causa do meu caminho, então vou ativar a detecção automática

00:10:37.750 --> 00:10:38.560
desligado.

00:10:39.530 --> 00:10:48.530
E direi sempre para usar o último 2022 porque é nisso que meu projeto está sendo construído e irei

00:10:48.530 --> 00:10:50.900
use um servidor Windows aqui.

00:10:51.870 --> 00:10:57.570
Não estou fazendo nenhuma compilação para iOS ou Android, então não preciso aproveitar as vantagens da configuração adicional

00:10:57.570 --> 00:10:57.930
lá.

00:10:57.930 --> 00:11:00.690
Mas a versão Xcode para iOS está aqui.

00:11:00.690 --> 00:11:04.170
Por exemplo, você pode pular muitas dessas coisas durante a configuração.

00:11:05.060 --> 00:11:10.720
Agora, à medida que continua a configuração de construção, permite-me escolher um computador mais ou menos potente.

00:11:10.730 --> 00:11:14.060
Não pretendo fazer nenhuma construção paga aqui.

00:11:14.090 --> 00:11:18.590
Isso não se destina a um caso de uso real, então não vou pensar muito sobre isso.

00:11:18.590 --> 00:11:24.440
Usarei apenas o nível gratuito qualificado e então poderei escolher aqui como uma das capturas de tela mencionadas.

00:11:24.440 --> 00:11:29.300
Crie ou configure automaticamente um cronograma de compilação repetido.

00:11:30.300 --> 00:11:30.820
Hum.

00:11:31.200 --> 00:11:35.880
Digamos que eu queira construir automaticamente quando seu repositório for atualizado.

00:11:37.090 --> 00:11:39.300
Então vamos salvar essa configuração.

00:11:45.430 --> 00:11:47.230
Ok, temos isso aí.

00:11:50.480 --> 00:11:55.580
Agora, continuando com as configurações da automação de build, podemos ver que no cache podemos ter

00:11:55.580 --> 00:11:56.660
não armazene em cache.

00:11:57.290 --> 00:12:01.280
Cache, apenas a biblioteca ou cache de todo o projeto.

00:12:01.430 --> 00:12:09.890
Se escolhermos sem cache, cada compilação levará mais tempo, mas terá menos chance de erro

00:12:09.890 --> 00:12:13.230
porque não está usando nenhum arquivo de cache mais antigo.

00:12:13.250 --> 00:12:20.750
Se eu armazenar em cache apenas o diretório da biblioteca, a primeira compilação não será beneficiada porque primeiro

00:12:20.750 --> 00:12:27.800
precisa construir o projeto e armazená-lo em cache, mas cada projeto construído depois dele será mais rápido do que

00:12:27.800 --> 00:12:32.900
o primeiro porque não é necessário reconstruí-lo todas as vezes.

00:12:33.020 --> 00:12:39.260
Um dos perigos de fazer isso é que isso poderia estar usando alguns arquivos antigos e dando uma

00:12:39.260 --> 00:12:44.240
resultado ruim, mas geralmente entendemos esse risco como possível.

00:12:44.240 --> 00:12:47.660
E qual seria minha abordagem é armazenar em cache o diretório da biblioteca.

00:12:47.660 --> 00:12:57.230
E se você não tiver certeza do motivo pelo qual o projeto não está sendo compilado ou por que os testes estão sendo aprovados no seu local

00:12:57.230 --> 00:13:01.520
editor de unidade, mas eles não estão passando na construção da nuvem, então talvez eu desativasse o cache em

00:13:01.520 --> 00:13:02.720
essa situação.

00:13:03.390 --> 00:13:04.890
Então aqui vou usar apenas dinheiro.

00:13:04.890 --> 00:13:05.640
Biblioteca.

00:13:09.610 --> 00:13:11.500
Então aqui está o consumo de construção.

00:13:11.500 --> 00:13:16.490
Uma vez que essas compilações fazem parte de um cenário potencialmente pré-pago.

00:13:16.510 --> 00:13:18.130
Dê uma olhada nesta informação.

00:13:18.160 --> 00:13:24.250
Você deseja adicionar qualquer tipo de limite à rapidez com que suas compilações podem ser construídas, para economizar um pouco do mundo real

00:13:24.250 --> 00:13:24.700
dinheiro.

00:13:24.730 --> 00:13:30.220
Aqui nas configurações de compilação, podemos ver que há algumas opções que queremos analisar para teste.

00:13:30.400 --> 00:13:34.210
Então, se eu rolar para baixo aqui, veremos a saída do build.

00:13:34.240 --> 00:13:44.080
Vemos a seção de cache que vimos antes, algumas configurações de dependência específicas, ganchos de script e

00:13:44.080 --> 00:13:44.620
mais.

00:13:45.130 --> 00:13:50.110
O importante que queremos alcançar aqui para as nossas necessidades é a execução dos testes.

00:13:50.110 --> 00:13:54.310
Executaremos os testes do modo de edição e do modo de reprodução.

00:13:54.340 --> 00:14:01.840
Queremos marcar a compilação como falha se o teste falhar, para que apenas executemos e entreguemos o código que

00:14:01.840 --> 00:14:03.820
passou em todos os nossos testes.

00:14:04.000 --> 00:14:08.080
Você pode ter uma situação em que um teste conhecido falhou.

00:14:08.080 --> 00:14:11.020
Você sabe por que ele falha e planeja consertar.

00:14:11.020 --> 00:14:17.590
Portanto, você pode optar por falhar nos testes, e não falhar em toda a construção nesses momentos.

00:14:17.590 --> 00:14:21.160
Portanto, ter sua configuração assim é provavelmente o melhor.

00:14:21.190 --> 00:14:28.420
Agora, quando vou para a página Histórico de construção aqui, isso me permite construir localmente e fazer upload da construção aqui

00:14:28.420 --> 00:14:36.040
para que você possa distribuí-lo ou fazer com que o desenvolvimento ou implantação contínua assuma o controle.

00:14:36.550 --> 00:14:42.040
Ou você pode fazer a construção aqui automaticamente, o que acho que é provavelmente o caso de uso muito mais provável.

00:14:42.040 --> 00:14:48.100
Então lembre-se que escolhi construir automaticamente sempre que o branch principal for atualizado.

00:14:48.100 --> 00:14:49.840
Então isso aconteceria automaticamente.

00:14:49.840 --> 00:14:56.530
Eu poderia ter feito uma compilação automática todas as noites à 1 da manhã, independentemente de quaisquer alterações.

00:14:56.560 --> 00:14:57.640
Você sempre pode fazer isso.

00:14:57.640 --> 00:14:59.410
Então, vamos em frente e fazer uma construção agora.

00:15:19.390 --> 00:15:24.040
E aqui podemos ver os resultados de uma construção bem-sucedida.

00:15:24.070 --> 00:15:27.840
Agora normalmente você seria notificado por e-mail.

00:15:27.850 --> 00:15:30.610
Existem definições de configuração aqui onde você pode fazer isso.

00:15:30.610 --> 00:15:35.890
Assim, você pode continuar seu dia sem realmente pensar no que o servidor de compilação está fazendo.

00:15:35.890 --> 00:15:42.130
E somente quando você recebe um e-mail confirmando uma falha no teste ou na construção, você reage.

00:15:42.880 --> 00:15:48.010
Ao longo de uma determinada semana, você esperaria que a maior parte do tráfego recebido dessa notificação

00:15:48.010 --> 00:15:52.390
sistema para confirmar que sim, outra compilação funcionou e funcionou bem.

00:15:54.760 --> 00:15:59.830
Então, apenas rolando aqui para baixo, podemos ter uma visão geral do log completo, o que será útil

00:15:59.830 --> 00:16:01.060
se você tiver alguns problemas.

00:16:01.060 --> 00:16:06.880
Você precisa depurar o log compacto, que mostrará apenas os erros mais relevantes.

00:16:07.990 --> 00:16:09.610
E há mais informações também.

00:16:09.610 --> 00:16:15.550
Você pode ver muitos relatórios diferentes sobre como foi e, em relação aos testes, você pode ver quais

00:16:15.550 --> 00:16:21.520
os testes foram aprovados e, se algum não for aprovado, você poderá se aprofundar e descobrir como fazê-los funcionar.

00:16:21.520 --> 00:16:29.620
Bem, um fluxo de trabalho, se você vir uma notificação com falha, o que eu faria é agendar um horário para abrir

00:16:29.620 --> 00:16:32.140
aquela construção específica do projeto.

00:16:32.140 --> 00:16:36.330
Onde quer que esteja no controle de versão, ele está parado, talvez mesclando algum código.

00:16:36.340 --> 00:16:42.370
Eu abriria isso localmente e então executaria o teste de dentro da unidade, sendo capaz de depurar

00:16:42.370 --> 00:16:42.790
eles.

00:16:43.270 --> 00:16:49.930
Então é isso aqui para configurar o Unity Cloud Build para automatizar a construção em nuvem do seu projeto, seja

00:16:49.960 --> 00:16:56.170
em uma programação regular acionada por eventos específicos ou manualmente no painel.

00:16:56.170 --> 00:17:01.780
Dentro de todos esses cenários, temos um bom histórico de todas as nossas construções para sempre no passado.

00:17:01.780 --> 00:17:08.500
Então, tendo esse sistema automatizado configurado, tendo mensagens esperançosamente bem-sucedidas chegando em sua direção,

00:17:08.530 --> 00:17:14.740
fornece informações suficientes sobre quando e onde a base de código está quebrada para que você possa entrar e poder

00:17:14.740 --> 00:17:16.060
corrigir quaisquer problemas.

00:17:16.150 --> 00:17:18.310
É isso para configurar o Unity Cloud Build.

00:17:18.310 --> 00:17:19.060
Obrigado.