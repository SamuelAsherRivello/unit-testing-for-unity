WEBVTT

00:00:00.050 --> 00:00:02.970
Olá e bem-vindo à Integração Contínua com unidade.

00:00:02.990 --> 00:00:08.600
Isso faz parte do aprendizado sobre testes unitários e como os testes unitários podem se encaixar em seus fluxos de trabalho.

00:00:08.630 --> 00:00:14.510
Nesta seção, faremos uma breve introdução ao tópico e, em seguida, veremos a construção do Unity Cloud

00:00:14.510 --> 00:00:21.530
como uma forma de configurar a integração contínua e a implantação contínua para seus projetos de unidade.

00:00:21.560 --> 00:00:28.550
Como vimos no ciclo de vida de desenvolvimento de software para a criação de jogos, a unidade é usada predominantemente

00:00:28.550 --> 00:00:31.970
nas fases de desenvolvimento, teste e implantação.

00:00:32.000 --> 00:00:36.650
Quando falamos sobre fazer testes unitários, estamos adicionando isso nas etapas cinco e seis aqui.

00:00:36.650 --> 00:00:41.180
E quando falamos sobre integração contínua e implantação contínua, estamos realmente procurando

00:00:41.180 --> 00:00:47.770
em todas essas três etapas para automatizar nossos testes e incorporá-los em nossos fluxos de trabalho de produção.

00:00:47.780 --> 00:00:51.360
Então, o que é integração contínua e implantação contínua?

00:00:51.380 --> 00:00:59.120
O CI CD, como é chamado, reduz erros e defeitos de código, tornando-o crucial para todos os fluxos de trabalho de DevOps.

00:00:59.450 --> 00:01:06.530
As operações do desenvolvedor normalmente são o estágio ou estágios finais em que seu projeto está sendo testado,

00:01:06.560 --> 00:01:10.580
entrar no ar e ter novas atualizações adicionadas à experiência ao vivo.

00:01:10.610 --> 00:01:17.510
CI CD envolve práticas de integração frequente de suas alterações de código, integrando automaticamente essas

00:01:17.510 --> 00:01:20.930
código e, em seguida, liberando compilações para seus usuários finais.

00:01:20.930 --> 00:01:25.730
Então, se você estiver fazendo tudo isso junto, estará executando o processo completo do CI CD.

00:01:25.730 --> 00:01:30.590
Mas você também pode fazer um ou outro ou focar nas principais áreas do fluxo de trabalho.

00:01:30.590 --> 00:01:30.860
Agora.

00:01:30.890 --> 00:01:37.940
O CI CD não é exclusivo da Unity, e durante os anos de desenvolvimento profissional da Unity e sendo usado

00:01:37.940 --> 00:01:45.650
no setor, cada vez mais terceiros acrescentam ferramentas para oferecer integração contínua e

00:01:45.650 --> 00:01:47.960
implantação contínua dentro da unidade.

00:01:47.990 --> 00:01:55.220
Algumas das tecnologias usadas são GitHub e GitLab para armazenar o código ou para armazenar o código onde

00:01:55.220 --> 00:02:00.170
você tem isso online e controle de versão, mas há outras operações que você também pode usar para isso.

00:02:00.170 --> 00:02:02.480
Mas também existem outras tecnologias.

00:02:02.480 --> 00:02:11.480
E então ferramentas como CI circular ou CI de jogo, código Magic Bamboo, Unity Cloud Build, Jenkins.

00:02:11.510 --> 00:02:17.300
Essas são tecnologias construídas sobre onde quer que seu código esteja sendo controlado por versão e seja capaz de

00:02:17.300 --> 00:02:21.590
para conectar os gatilhos certos para causar as ações certas para o fluxo de trabalho.

00:02:21.620 --> 00:02:26.690
Isso faz sentido para vocês dois que são mais relevantes para este vídeo, porque foi o que usei, é

00:02:26.720 --> 00:02:32.600
GitHub para hospedar o repositório que vamos construir no Unity Cloud, build como a ferramenta que fará o

00:02:32.600 --> 00:02:33.770
construção e os testes.

00:02:33.770 --> 00:02:39.980
Mencionamos que o CI CD combina as práticas de integração contínua e entrega contínua.

00:02:39.980 --> 00:02:44.810
Portanto, a integração consiste em colocar seu novo código em produção.

00:02:44.810 --> 00:02:49.250
Isso inclui testá-lo, construí-lo e colocá-lo no código.

00:02:49.370 --> 00:02:54.740
A entrega contínua ou implantação contínua, como também é chamada.

00:02:54.740 --> 00:02:58.310
Isso automatiza a entrega desse código ao destino de construção.

00:02:58.310 --> 00:02:59.380
Então isso é diferente.

00:02:59.390 --> 00:03:02.900
Isso não é apenas colocar seu código no projeto, é CI.

00:03:03.140 --> 00:03:05.990
Isso é colocá-lo nas mãos de seus usuários finais.

00:03:05.990 --> 00:03:07.490
Então esse é o CD.

00:03:07.550 --> 00:03:13.280
Até este ponto do curso, vimos que o teste unitário é incrivelmente útil para ajudar a moldar

00:03:13.280 --> 00:03:18.290
como nosso código amadurece e certamente como mantemos e depuramos esse código.

00:03:18.290 --> 00:03:20.720
E temos feito os testes manualmente.

00:03:20.720 --> 00:03:26.450
Isso significa que mesmo que criemos alguns testes automatizados, jogamos a experiência de tempo de execução como

00:03:26.450 --> 00:03:27.950
um usuário e procure por bugs.

00:03:27.950 --> 00:03:30.980
Dessa forma, há uma maneira de testar manualmente.

00:03:30.980 --> 00:03:36.470
E a outra coisa que estamos fazendo é clicar manualmente no botão no Unity Test Runner

00:03:36.470 --> 00:03:38.330
janela para executar esses testes.

00:03:38.330 --> 00:03:40.850
Então, vamos dar uma olhada em alguns pontos do manual.

00:03:40.880 --> 00:03:46.520
Em primeiro lugar, não garantimos que nenhum processo automatizado aconteça, portanto não podemos garantir nenhum resultado.

00:03:46.550 --> 00:03:51.530
É menos confiável e sujeito a erros do que uma alternativa automatizada.

00:03:51.620 --> 00:03:57.530
Essas tarefas repetitivas, executando você mesmo de vez em quando, lembrando de fazer isso, olhando

00:03:57.530 --> 00:03:59.840
diligentemente nos resultados que tudo consome energia.

00:03:59.840 --> 00:04:02.120
E essas tarefas repetitivas podem ser chatas.

00:04:02.120 --> 00:04:05.930
E quando as coisas são chatas, os desenvolvedores podem ignorá-las ou executá-las com menos frequência.

00:04:05.930 --> 00:04:11.690
E por último, se esquecermos de testar, não teremos nenhum status atualizado sobre como está o nosso projeto.

00:04:11.690 --> 00:04:12.110
fazendo.

00:04:12.110 --> 00:04:18.350
No entanto, se seguirmos todas as melhores práticas que temos na configuração desses testes e também automatizarmos

00:04:18.350 --> 00:04:24.140
a execução dessas tarefas e até mesmo a entrega do nosso código aos nossos usuários finais, podemos aproveitar

00:04:24.140 --> 00:04:25.430
de mais benefícios.

00:04:25.610 --> 00:04:29.150
Por exemplo, temos aqui um processo repetitivo confiável.

00:04:29.150 --> 00:04:35.990
Quando tivermos configuração automática do CI CD, teremos feedback rápido e relevante que podemos escolher e veremos

00:04:36.020 --> 00:04:37.670
o que aciona cada construção.

00:04:37.670 --> 00:04:43.670
Mas se quisermos fazer isso para cada commit no repositório git, então toda vez que fizermos um commit em um repositório git,

00:04:43.700 --> 00:04:48.620
o teste é executado, a compilação é verificada e somos notificados sobre isso.

00:04:48.620 --> 00:04:51.920
Portanto, você pode fazer isso com mais ou menos frequência, dependendo de quais são suas necessidades.

00:04:51.950 --> 00:04:54.740
Isso lhe dá mais confiança em seu código, portanto há menos riscos.

00:04:54.740 --> 00:04:57.980
Então, quando você refatora sistemas ou adiciona novos recursos.

00:04:57.980 --> 00:04:59.780
E por último por ter um.

00:05:00.340 --> 00:05:04.630
Compilações disponíveis para todos e, em seguida, automatizando-as ainda mais.

00:05:04.630 --> 00:05:10.870
Temos uma base dessa confiança e segurança em nossa base de código que nos permite mais facilmente

00:05:10.870 --> 00:05:12.360
colaborar com outros.

00:05:12.370 --> 00:05:18.340
Poderemos saber quais contribuições continuam a manter o projeto estável, o que é incrivelmente

00:05:18.340 --> 00:05:22.060
informação eficaz para ter quando você está trabalhando em equipe.

00:05:22.060 --> 00:05:29.800
Então, voltando aqui, olhando de uma forma visual, a integração contínua é a fusão do código, a

00:05:29.800 --> 00:05:31.240
o código é construído.

00:05:31.270 --> 00:05:36.010
Então, na entrega contínua, verificamos se nossos testes foram aprovados.

00:05:36.040 --> 00:05:42.910
Em seguida, movemos para um ambiente de teste, que é algum lugar que ainda não está pronto para os usuários finais,

00:05:42.910 --> 00:05:44.020
mas quase lá.

00:05:44.020 --> 00:05:48.400
E garantimos que o processo funcione muito bem antes de distribuí-lo aos usuários finais.

00:05:48.430 --> 00:05:55.930
Agora, você pode fazer testes automatizados e entrega automatizada desses resultados de testes, independentemente de ter

00:05:55.930 --> 00:06:01.750
qualquer fluxo específico de como você programa seu código no controle de versão.

00:06:01.750 --> 00:06:08.920
Mas só para falar sobre o potencial alinhamento e conexões aqui, isso mostra o que poderia ser diferente

00:06:08.920 --> 00:06:10.690
compromete-se em diferentes ramos.

00:06:10.690 --> 00:06:16.240
No controle de versão estou usando git, então vamos fingir que estou usando git aqui e tenho um main ou master

00:06:16.240 --> 00:06:17.110
filial lá.

00:06:17.110 --> 00:06:21.580
E então faço todo o meu trabalho de desenvolvimento em uma segunda ramificação de desenvolvedor.

00:06:21.580 --> 00:06:28.420
E então, cada vez que eu quiser criar um novo recurso, eu ramificarei o desenvolvimento, darei um nome a ele

00:06:28.420 --> 00:06:35.420
como, digamos, recurso, menu principal, botão rápido, e então eu adicionaria esse menu principal para sair

00:06:35.440 --> 00:06:41.770
e certifique-se de que essa ramificação se refira apenas às alterações necessárias para aquele recurso específico.

00:06:41.890 --> 00:06:45.310
Então, digamos que eu tenha o recurso número um na parte inferior.

00:06:45.310 --> 00:06:46.510
Eu tinha terminado.

00:06:46.540 --> 00:06:52.570
Aqui estão alguns dos locais potenciais onde poderíamos executar o processo automatizado de CI CD.

00:06:52.570 --> 00:06:58.330
Em primeiro lugar, começando de baixo, cada vez que me comprometo com meu ramo de recursos de desenvolvimento,

00:06:58.330 --> 00:07:04.450
Eu poderia iniciar uma compilação automatizada para garantir que todos os testes sejam executados e que tudo esteja funcionando

00:07:04.450 --> 00:07:05.560
particularmente bem.

00:07:05.560 --> 00:07:06.730
Esse é o número um.

00:07:06.760 --> 00:07:13.210
Então eu poderia retroceder para um recurso maior na etapa número dois e, ao mesclá-lo de volta a esse

00:07:13.210 --> 00:07:18.940
ramo de desenvolvimento, quero fazer um teste de construção automatizado, atingindo potencialmente todos os diferentes alvos

00:07:18.940 --> 00:07:19.750
plataformas.

00:07:19.750 --> 00:07:26.290
Isso significa que o teste automatizado pode ser executado dentro do editor de unidade no iOS, no Android, no dispositivo,

00:07:26.290 --> 00:07:27.040
não no dispositivo.

00:07:27.040 --> 00:07:28.780
Você tem muitas opções diferentes lá.

00:07:29.500 --> 00:07:35.350
Então, por último, quando o desenvolvimento, o branch estiver pronto e com todos os recursos mais recentes instalados, e

00:07:35.350 --> 00:07:38.980
queremos testar como isso funcionaria no branch master.

00:07:38.980 --> 00:07:46.480
Temos o número três lá, onde antes de eu ir colocá-lo na linha superior, o principal ou o

00:07:46.480 --> 00:07:53.620
branch master, o que eu poderia fazer é mesclar do branch principal de volta para desenvolver, então certifique-se de que

00:07:53.620 --> 00:07:59.320
tudo funciona bem no ramo de desenvolvimento e somente se funcionar bem, então me comprometo a

00:07:59.320 --> 00:08:00.520
o branch principal ou master.

00:08:01.220 --> 00:08:07.160
Então você pode ver que não precisa executar essas etapas em uma ordem específica, mas pode

00:08:07.160 --> 00:08:11.440
tenha a ajuda dos testes o quanto quiser ao longo deste fluxo de trabalho.

00:08:11.450 --> 00:08:15.440
Outra recapitulação de alto nível apenas para ver essas informações de algumas maneiras diferentes.

00:08:15.440 --> 00:08:21.350
Isto é especificamente para instruções de construção do Unity Cloud aqui, mas acho que as etapas fornecidas são de alto nível

00:08:21.350 --> 00:08:21.850
suficiente.

00:08:21.860 --> 00:08:24.290
Isso também se aplica à maioria dos concorrentes.

00:08:24.320 --> 00:08:27.830
A primeira coisa que você deseja fazer é configurar a automação de construção.

00:08:27.830 --> 00:08:32.810
Então você aponta a automação de construção para o controle de versão onde seu código está localizado.

00:08:32.810 --> 00:08:38.090
No meu caso, isso seria conectar o build do Unity Cloud e conectá-lo ao GitHub, onde tenho um

00:08:38.090 --> 00:08:39.440
repositório para o projeto.

00:08:39.470 --> 00:08:42.080
Então você decide qual gatilho usar.

00:08:42.110 --> 00:08:49.490
Talvez isso seja confirmar uma alteração em seu projeto em uma ramificação específica ou mesclar a partir de uma ramificação

00:08:49.490 --> 00:08:53.240
em outro ramo, ou você pode configurar regras diferentes que desejar.

00:08:53.270 --> 00:08:59.990
A ideia aqui é não executá-lo manualmente, mas sim ter alguma parte do seu processo de desenvolvimento

00:08:59.990 --> 00:09:01.610
acionar automaticamente.

00:09:01.610 --> 00:09:03.140
Então esse seria o número dois aqui.

00:09:03.170 --> 00:09:09.260
Em seguida, o número três em algum gatilho quando você libera o código, quando você confirma o código, quando você mescla

00:09:09.260 --> 00:09:13.100
o código, o que você decidir, a compilação será criada automaticamente.

00:09:13.100 --> 00:09:16.700
E na etapa três é onde o teste também seria executado.

00:09:16.700 --> 00:09:21.980
E finalmente a equipe é notificada quando o projeto for implantado.

00:09:21.980 --> 00:09:29.660
Então naquele fluxo de exemplo que acabamos de ver em cada um desses momentos, quem quiser pode se inscrever no

00:09:29.660 --> 00:09:34.490
um e-mail informando que este branch de recurso foi mesclado com este.

00:09:34.490 --> 00:09:39.020
Essa não é realmente minha área de especialização, então não vou ouvir nenhuma notificação por lá.

00:09:39.020 --> 00:09:46.310
Mas todos os desenvolvedores talvez gostariam de ser notificados através do sistema sobre qualquer coisa mesclada a esse

00:09:46.310 --> 00:09:52.820
ramificação principal ou master final, e ter esse sistema CI CD nessas etapas principais confirmará

00:09:52.820 --> 00:09:58.700
que todos os seus testes de unidade passem, que nenhum deles falhe e que tudo funcione com sucesso que seu projeto

00:09:58.700 --> 00:09:59.510
constrói.

00:09:59.510 --> 00:10:04.940
Você pode imaginar que há cenários mesmo em que todos os testes seriam aprovados, que talvez a compilação não

00:10:04.940 --> 00:10:05.510
trabalhar.

00:10:05.510 --> 00:10:12.080
Talvez haja algum código quebrado ou algum ativo quebrado que não tenha cobertura de teste

00:10:12.080 --> 00:10:12.530
ainda.

00:10:12.530 --> 00:10:18.470
E só o fato de o projeto apresentar um erro durante o processo de construção já é uma evidência muito sólida.

00:10:18.470 --> 00:10:19.910
informações de depuração para ter.

00:10:19.940 --> 00:10:25.370
Você também saberá a hora, a data e a filial que causou o problema, o que ajuda você a identificar onde

00:10:25.370 --> 00:10:27.320
onde procurar para resolver o problema.

00:10:27.320 --> 00:10:29.900
E então, finalmente, o projeto seria implementado com sucesso.

00:10:29.900 --> 00:10:35.870
Então a gente viu que o CI CD é importante para a gente saber que o projeto foi construído, mas é

00:10:35.870 --> 00:10:38.900
combinação especialmente poderosa com testes unitários.

00:10:38.900 --> 00:10:44.570
Portanto, ele não apenas foi compilado, mas também com todos os testes aprovados e uma recapitulação dos testes unitários, já que isso é

00:10:44.570 --> 00:10:46.160
o tema de todo o curso.

00:10:46.190 --> 00:10:52.370
À medida que seu projeto cresce com mais scripts, classes e métodos, fica difícil garantir que

00:10:52.370 --> 00:10:56.360
uma mudança em uma parte do seu código não quebra as coisas em outro lugar.

00:10:56.390 --> 00:11:00.950
O teste automatizado ajuda você a verificar se seu código está funcionando conforme o esperado.

00:11:00.980 --> 00:11:07.130
Os testes economizam seu tempo ao descobrir quando e onde os problemas ocorrem assim que são introduzidos,

00:11:07.130 --> 00:11:14.240
em vez de esperar pelos testes manuais dos usuários, torna-se muito mais caro quanto mais tarde você descobrir

00:11:14.240 --> 00:11:14.930
esses insetos.

00:11:14.930 --> 00:11:16.460
Portanto, ter o sistema é muito bom.

00:11:16.460 --> 00:11:21.400
E lembramos que algo bastante contra-intuitivo é a regra 8020.

00:11:21.410 --> 00:11:29.300
Acontece que 80% do tempo estamos trabalhando na correção de bugs e na manutenção de nossa base de código existente, e

00:11:29.300 --> 00:11:33.740
20% do tempo é onde adicionamos novos recursos e novas funcionalidades.

00:11:33.770 --> 00:11:38.900
Muitas vezes pensamos que passamos a maior parte do nosso dia adicionando novos recursos, então é aí que queremos colocar

00:11:38.900 --> 00:11:40.370
nossa energia mental.

00:11:40.370 --> 00:11:49.250
No entanto, vemos nas pesquisas que ter boas práticas de teste unitário, ter bons testes automatizados,

00:11:49.280 --> 00:11:56.210
ter um sistema CI CD impacta tremendamente e melhora a eficiência de seus 80%.

00:11:56.210 --> 00:12:01.550
Portanto, estamos realmente analisando onde você pode causar o maior impacto com as alterações em seu fluxo de trabalho.

00:12:01.550 --> 00:12:09.190
Portanto, antes de vermos um exemplo de como fazer o ci CD em si, vamos recapitular o tipo mais simples de classe aqui.

00:12:09.200 --> 00:12:14.180
Imagine que temos um sistema matemático que faz algumas adições e algumas subtrações.

00:12:16.120 --> 00:12:23.620
Então aqui temos um teste de unidade, que é um arquivo separado e uma classe separada usando o atributo test

00:12:23.620 --> 00:12:24.070
aqui.

00:12:24.100 --> 00:12:30.640
Isso irá pegar uma instância da última classe que vimos, criá-la e testar uma unidade ou método específico

00:12:30.640 --> 00:12:38.530
disso, sendo cauteloso com entradas e saídas não intencionais desse sistema e verificando se o

00:12:38.530 --> 00:12:40.810
resultado afirmado é aquele que obtemos.

00:12:40.840 --> 00:12:45.550
Agora, no caso do Unity Cloud Build, quando você tiver testes como esse configurados em seu projeto e

00:12:45.550 --> 00:12:52.120
você configurou o projeto no sistema CI CD, você pode esperar poder manualmente

00:12:52.120 --> 00:12:57.700
ou execute automaticamente essas compilações visitando o Unity Cloud Build neste caso, que é um site baseado na web

00:12:57.730 --> 00:12:58.420
ferramenta.

00:12:58.450 --> 00:13:01.750
Viu que a compilação foi construída para a plataforma de destino?

00:13:01.750 --> 00:13:04.780
Neste caso, estamos testando o desktop do Windows de 64 bits.

00:13:04.810 --> 00:13:09.850
Vemos que todos os testes do modo de edição foram aprovados e todos os testes do modo de reprodução foram aprovados.

00:13:09.880 --> 00:13:14.320
Tudo isso acontece automaticamente com base no gatilho que você decidiu.

00:13:14.320 --> 00:13:16.530
Portanto, isso é fantasticamente útil.

00:13:16.540 --> 00:13:20.230
Em seguida, os membros da equipe interessados ​​​​podem receber um e-mail.

00:13:20.230 --> 00:13:26.080
Há um pequeno trecho de e-mail que mostra apenas, ei, alguém da equipe fez uma construção.

00:13:26.110 --> 00:13:30.610
A construção foi acionada porque este branch foi mesclado com aquele branch ou o que quer que fosse.

00:13:30.640 --> 00:13:32.340
E aqui estão os resultados.

00:13:32.350 --> 00:13:35.820
Eles podem permitir que você clique em uma página da web ou resumi-la no e-mail.

00:13:35.830 --> 00:13:42.940
Agora, este tópico CI CD, bem como os fundamentos dos testes unitários, os fundamentos deles, tópicos avançados

00:13:42.940 --> 00:13:48.880
também, como falar sobre funções puras e realizar workshops individuais para alguns tópicos avançados

00:13:48.880 --> 00:13:51.310
como cenas, pré-fabricados e ajustáveis.

00:13:51.310 --> 00:13:55.450
Tudo faz parte deste curso aqui você pode conferir no link abaixo.

00:13:55.450 --> 00:13:59.920
Se você ainda não está no curso confira os trailers.

00:13:59.920 --> 00:14:02.800
Inscreva-se no curso e comece seu aprendizado hoje mesmo.

00:14:02.800 --> 00:14:07.330
E se você já é aluno do curso e está encontrando esse vídeo dentro do próprio curso,

00:14:07.330 --> 00:14:11.260
obrigado por ser um aluno e estou ansioso para vê-lo em aulas futuras também.

00:14:11.260 --> 00:14:17.620
Então, no geral, o que pudemos ver é que o teste de unidade em si é uma ferramenta tremendamente

00:14:17.620 --> 00:14:24.550
ferramenta poderosa que ajuda você a ter mais eficiência nas áreas de desenvolvimento onde você está gastando

00:14:24.550 --> 00:14:25.850
muito tempo.

00:14:25.870 --> 00:14:33.160
Lembre-se de que 80% do esforço geral de desenvolvimento que vimos é manutenção e depuração de sistemas existentes.

00:14:33.160 --> 00:14:39.040
Então, como reconhecemos o quão grande é essa área da nossa vida, é incrível que tenhamos ferramentas como

00:14:39.040 --> 00:14:46.960
Unity Testing e CI CD com ferramentas como Unity Cloud Build ou outras ferramentas da comunidade para poder

00:14:46.960 --> 00:14:53.890
nos dê todos esses benefícios e automatize a entrega desses resultados de teste, os resultados de construção e

00:14:53.890 --> 00:14:56.200
a entrega das próprias construções.