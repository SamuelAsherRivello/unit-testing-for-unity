WEBVTT

00:00.050 --> 00:02.970
Olá e bem-vindo à Integração Contínua com o unity.

00:02.990 --> 00:08.600
Isso faz parte do aprendizado sobre testes unitários e as formas como eles podem se encaixar em seus fluxos de trabalho.

00:08.630 --> 00:14.510
Nesta seção, faremos uma breve introdução ao tópico e, em seguida, veremos a compilação do Unity Cloud

00:14.510 --> 00:21.530
como uma maneira de configurar a integração contínua e a implantação contínua para seus projetos Unity.

00:21.560 --> 00:28.550
Como vimos, no ciclo de vida de desenvolvimento de software para a criação de jogos, o unity é usado predominantemente

00:28.550 --> 00:31.970
nas fases de desenvolvimento, teste e implementação.

00:32.000 --> 00:36.650
Quando falamos em fazer testes unitários, estamos adicionando isso aos passos cinco e seis aqui.

00:36.650 --> 00:41.180
E quando falamos de integração contínua e implementação contínua, estamos realmente procurando

00:41.180 --> 00:47.770
em todas essas três etapas de forma a automatizar nossos testes e incorporá-los aos nossos fluxos de trabalho de produção.

00:47.780 --> 00:51.360
Então, o que é integração contínua e implementação contínua?

00:51.380 --> 00:59.120
A CI CD, como é chamada, reduz erros e defeitos de código, tornando-a crucial para todo fluxo de trabalho de DevOps.

00:59.450 --> 01:06.530
As operações do desenvolvedor são normalmente o estágio ou estágios finais em que o projeto está sendo testado,

01:06.560 --> 01:10.580
em andamento e com novas atualizações adicionadas à experiência em andamento.

01:10.610 --> 01:17.510
O CI CD envolve práticas de integração frequente das alterações do seu código, integrando automaticamente essas alterações.

01:17.510 --> 01:20.930
código e, em seguida, liberar as compilações para os usuários finais.

01:20.930 --> 01:25.730
Portanto, se você estiver fazendo tudo isso junto, estará realizando o processo completo de CI CD.

01:25.730 --> 01:30.590
Mas você também pode fazer um ou outro ou se concentrar em áreas-chave do fluxo de trabalho.

01:30.590 --> 01:30.860
Agora.

01:30.890 --> 01:37.940
O CI CD não é exclusivo do Unity e, durante os anos de desenvolvimento profissional do Unity e de seu uso

01:37.940 --> 01:45.650
no setor, cada vez mais terceiros adicionaram ferramentas para oferecer a você integração contínua e

01:45.650 --> 01:47.960
implantação contínua dentro do unity.

01:47.990 --> 01:55.220
Algumas das tecnologias usadas são GitHub e GitLab para manter o código ou armazenar o código onde

01:55.220 --> 02:00.170
você o tem on-line e o controle de versão, mas há outras operações que também podem ser usadas para isso.

02:00.170 --> 02:02.480
Mas também há outras tecnologias.

02:02.480 --> 02:11.480
E então ferramentas como circle CI ou game CI, code Magic bamboo, Unity Cloud Build, Jenkins.

02:11.510 --> 02:17.300
Essas são tecnologias construídas em cima de onde quer que o seu código esteja sendo controlado por versão e sendo capaz de

02:17.300 --> 02:21.590
de conectar os gatilhos certos para causar as ações certas para o fluxo de trabalho.

02:21.620 --> 02:26.690
Isso faz sentido para vocês dois, o que é mais relevante para este vídeo, porque é o que eu usei, é

02:26.720 --> 02:32.600
GitHub para hospedar o repositório que vamos construir no Unity Cloud, construir como a ferramenta que fará o

02:32.600 --> 02:33.770
construção e os testes.

02:33.770 --> 02:39.980
Já mencionamos que o CI CD combina as práticas de integração contínua e entrega contínua.

02:39.980 --> 02:44.810
Portanto, a integração consiste em colocar seu novo código em produção.

02:44.810 --> 02:49.250
Isso inclui testá-lo, construí-lo e colocá-lo no código.

02:49.370 --> 02:54.740
A entrega contínua ou implantação contínua, como também é chamada.

02:54.740 --> 02:58.310
Isso automatiza a entrega desse código para o alvo de construção.

02:58.310 --> 02:59.380
Portanto, isso é diferente.

02:59.390 --> 03:02.900
Não se trata apenas de colocar seu código no projeto, isso é CI.

03:03.140 --> 03:05.990
Isso é colocá-lo nas mãos dos usuários finais.

03:05.990 --> 03:07.490
Portanto, esse é o CD.

03:07.550 --> 03:13.280
Até este ponto do curso, vimos que o teste de unidade é incrivelmente útil para ajudar a moldar

03:13.280 --> 03:18.290
como o nosso código amadurece e, certamente, como mantemos e depuramos esse código.

03:18.290 --> 03:20.720
E temos feito os testes manualmente.

03:20.720 --> 03:26.450
Isso significa que, apesar de criarmos alguns testes automatizados, reproduzimos a experiência de tempo de execução como

03:26.450 --> 03:27.950
um usuário e procuramos por bugs.

03:27.950 --> 03:30.980
Dessa forma, há uma maneira de testar manualmente.

03:30.980 --> 03:36.470
E a outra coisa que estamos fazendo é clicar manualmente no botão do Unity Test Runner

03:36.470 --> 03:38.330
para executar esses testes.

03:38.330 --> 03:40.850
Então vamos dar uma olhada em alguns pontos para o manual.

03:40.880 --> 03:46.520
Em primeiro lugar, não estamos garantindo que nenhum processo automatizado aconteça, portanto não podemos garantir nenhum resultado.

03:46.550 --> 03:51.530
É mais pouco confiável e propenso a erros do que uma alternativa automatizada.

03:51.620 --> 03