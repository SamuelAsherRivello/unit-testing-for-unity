WEBVTT

00:00.140 --> 00:01.400
Projeto de software.

00:01.400 --> 00:02.360
Visão geral.

00:02.510 --> 00:05.980
Vamos começar com a teoria dos princípios de Design.

00:06.020 --> 00:10.620
Os desenvolvedores veteranos podem fazer com que pareça fácil, mas o código limpo não é escrito por acaso.

00:10.640 --> 00:17.330
A criação de bons projetos vem do uso de princípios sólidos, bons fluxos de trabalho e padrões produtivos

00:17.330 --> 00:18.540
em seu processo.

00:18.560 --> 00:21.300
Primeiro, vamos discutir os princípios de projeto.

00:21.320 --> 00:24.920
Essas são as filosofias que levam ao desenvolvimento produtivo de software.

00:24.920 --> 00:32.420
Os benefícios incluem planejamento mais rápido, comunicação clara e foco durante o desenvolvimento.

00:32.570 --> 00:37.310
A história da ciência da computação está repleta desses princípios de design.

00:37.340 --> 00:39.750
Vou falar sobre alguns dos mais populares.

00:39.770 --> 00:46.070
Esta é uma excelente oportunidade para você fazer a sua própria pesquisa sobre qualquer um que seja novo para você e para

00:46.070 --> 00:49.280
se aprofundar naqueles com os quais você tem alguma familiaridade.

00:49.280 --> 00:56.150
Vamos começar com os princípios sólidos, onde cada letra em sólido corresponde a um princípio de design.

00:56.330 --> 01:04.430
O princípio de responsabilidade única é o desejo geral de que cada uma de suas classes e estruturas

01:04.430 --> 01:05.990
façam apenas uma coisa.

01:05.990 --> 01:13.910
O princípio aberto-fechado significa que cada classe deve ser aberta para extensão, mas fechada para modificação.

01:13.910 --> 01:19.160
Com a programação orientada a objetos, você tem herança e interfaces.

01:19.160 --> 01:27.740
O princípio de substituição de Liskov diz que qualquer subtipo deve ser capaz de ser convertido como o pai

01:27.770 --> 01:28.100
tipo.

01:28.100 --> 01:35.900
Uma segregação de interface significa que não devemos aplicar mais interfaces a um determinado tipo do que o necessário.

01:35.900 --> 01:41.870
E, finalmente, a inversão de dependência indica que quando você está lidando com código alto e código baixo em

01:41.870 --> 01:49.190
um sistema, o código de alto nível não deve depender de implementações concretas do código de nível inferior.

01:49.190 --> 01:52.760
Em vez disso, ele deve usar algo como interfaces para abstrair isso.

01:52.760 --> 01:55.060
Alguns outros conceitos populares incluem.

01:55.070 --> 01:56.360
Não se repita.

01:56.360 --> 02:02.840
Este é um lembrete que usamos como desenvolvedores de que se você estiver copiando e colando um código literal

02:02.840 --> 02:08.780
ou conceitos, pode haver uma abordagem sistemática que nos ajude a reutilizar esse código de forma mais eficiente.

02:08.810 --> 02:15.500
O Keep it simple nos lembra de não complicar demais as nossas soluções e você não vai precisar dele.

02:15.500 --> 02:19.460
Lembra-nos de não construir hoje as soluções de amanhã.

02:20.150 --> 02:21.800
No desenvolvimento iterativo.

02:21.800 --> 02:27.980
Queremos resolver os desafios que temos pela frente agora com princípios sólidos e não criar algo que

02:27.980 --> 02:30.080
seja necessariamente à prova de futuro.

02:30.110 --> 02:36.500
Muitas vezes não sabemos o que o futuro nos reserva e projetar para o amanhã é uma complicação desnecessária.

02:36.500 --> 02:42.800
O simples fato de praticar os princípios aqui expostos e aplicá-los em seu projeto lhe dará automaticamente

02:42.800 --> 02:49.080
mais escalabilidade, facilidade de manutenção e qualidade de vida como desenvolvedor.

02:49.100 --> 02:54.800
Quando pensamos nesses princípios de design de software nesta seção específica, partimos de um ponto alto

02:54.800 --> 03:00.570
coisas de alto nível teórico que podem ser mais universais em diferentes plataformas de programação.

03:00.590 --> 03:06.470
Em seguida, vamos nos aprofundar nos detalhes de como isso se aplica, especialmente dentro do unity.

03:06.470 --> 03:12.920
Mas você notará essa diferença quando falamos em alto nível e depois concretamente em baixo nível.

03:12.920 --> 03:18.920
E, com isso, você pode desenvolver seu próprio estilo pessoal de quais desses princípios afetam sua vida.

03:18.920 --> 03:20.930
vida profissional cotidiana mais do que outros.

03:20.960 --> 03:26.510
Também reconheceremos alguns desses princípios nas arquiteturas que usamos e

03:26.510 --> 03:29.990
no final das contas, o código que fazemos juntos nas seções de codificação.

03:30.020 --> 03:31.160
Por enquanto é isso.

03:31.160 --> 03:31.910
Obrigado.
