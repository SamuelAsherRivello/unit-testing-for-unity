WEBVTT

00:00.140 --> 00:01.400
Software-Design.

00:01.400 --> 00:02.360
Überblick.

00:02.510 --> 00:05.980
Beginnen wir mit der Theorie der Designprinzipien.

00:06.020 --> 00:10.620
Erfahrene Entwickler können es einfach aussehen lassen, aber sauberer Code wird nicht durch Zufall geschrieben.

00:10.640 --> 00:17.330
Gute Projekte entstehen durch die Anwendung solider Prinzipien, guter Arbeitsabläufe und produktiver Muster

00:17.330 --> 00:18.540
in Ihrem Prozess.

00:18.560 --> 00:21.300
Lassen Sie uns zunächst über Gestaltungsprinzipien sprechen.

00:21.320 --> 00:24.920
Dies sind die Philosophien, die zu einer produktiven Softwareentwicklung führen.

00:24.920 --> 00:32.420
Zu den Vorteilen gehören schnellere Planung, klare Kommunikation und Konzentration während der Entwicklung.

00:32.570 --> 00:37.310
Die Geschichte der Informatik ist voll von diesen Entwurfsprinzipien.

00:37.340 --> 00:39.750
Ich werde einige der bekanntesten durchgehen.

00:39.770 --> 00:46.070
Dies ist eine ausgezeichnete Gelegenheit für Sie, Ihre eigenen Nachforschungen über die für Sie neuen Prinzipien anzustellen, und um

00:46.070 --> 00:49.280
zu vertiefen, mit denen Sie bereits vertraut sind.

00:49.280 --> 00:56.150
Beginnen wir mit den soliden Prinzipien, wobei jeder Buchstabe in solid einem Gestaltungsprinzip entspricht.

00:56.330 --> 01:04.430
Das Prinzip der einzigen Verantwortung ist der allgemeine Wunsch, dass jede Ihrer Klassen und Strukturen

01:04.430 --> 01:05.990
nur eine Sache tun.

01:05.990 --> 01:13.910
Das Prinzip "offen geschlossen" bedeutet, dass jede Klasse offen für Erweiterungen, aber geschlossen für Änderungen sein sollte.

01:13.910 --> 01:19.160
Bei der objektorientierten Programmierung gibt es Vererbung und Schnittstellen.

01:19.160 --> 01:27.740
Das Liskovsche Substitutionsprinzip besagt, dass jeder Untertyp als Elternteil gecastet werden können sollte

01:27.770 --> 01:28.100
Typ.

01:28.100 --> 01:35.900
Eine Schnittstellentrennung bedeutet, dass wir nicht mehr Schnittstellen auf einen bestimmten Typ anwenden sollten als nötig.

01:35.900 --> 01:41.870
Und schließlich bedeutet die Inversion von Abhängigkeiten, dass man, wenn man es mit hohem Code und niedrigem Code in

01:41.870 --> 01:49.190
einem System zu tun hat, sollte der High-Level-Code nicht von konkreten Implementierungen des Low-Level-Codes abhängen.

01:49.190 --> 01:52.760
Stattdessen sollte er so etwas wie Schnittstellen verwenden, um das zu abstrahieren.

01:52.760 --> 01:55.060
Einige andere beliebte Konzepte sind.

01:55.070 --> 01:56.360
Wiederholen Sie sich nicht.

01:56.360 --> 02:02.840
Dies ist eine Erinnerung, die wir als Entwickler verwenden, wenn Sie sich dabei ertappen, dass Sie wörtlichen Code kopieren und einfügen

02:02.840 --> 02:08.780
oder Konzepte kopiert, kann es einen systematischen Ansatz geben, der uns hilft, diesen Code effizienter wiederzuverwenden.

02:08.810 --> 02:15.500
Keep it simple erinnert uns daran, unsere Lösungen nicht zu sehr zu verkomplizieren, und Sie werden es nicht brauchen.

02:15.500 --> 02:19.460
Erinnert uns daran, nicht schon heute die Lösungen von morgen zu entwickeln.

02:20.150 --> 02:21.800
In der iterativen Entwicklung.

02:21.800 --> 02:27.980
Wir wollen die Herausforderungen, vor denen wir stehen, jetzt mit soliden Prinzipien lösen und nicht etwas entwickeln, das

02:27.980 --> 02:30.080
unbedingt zukunftssicher ist.

02:30.110 --> 02:36.500
Wir wissen oft nicht, was die Zukunft bringen wird, und die Planung für morgen ist eine unnötige Komplikation.

02:36.500 --> 02:42.800
Wenn Sie die hier beschriebenen Prinzipien praktizieren und sie in Ihrem Projekt anwenden, werden Sie automatisch

02:42.800 --> 02:49.080
mehr Skalierbarkeit, Wartbarkeit und Lebensqualität als Entwickler.

02:49.100 --> 02:54.800
Wenn wir in diesem Abschnitt über diese Software-Design-Prinzipien nachdenken, gehen wir von einem hohen

02:54.800 --> 03:00.570
theoretischen Ebene, die über verschiedene Programmierplattformen hinweg universell sein kann.

03:00.590 --> 03:06.470
Dann werden wir uns mit den Details befassen, insbesondere mit der Anwendung in Unity.

03:06.470 --> 03:12.920
Aber Sie werden den Unterschied bemerken, dass wir auf hoher Ebene sprechen und dann konkret auf niedriger Ebene.

03:12.920 --> 03:18.920
Und dadurch können Sie Ihren eigenen persönlichen Stil entwickeln, welche dieser Prinzipien sich auf Ihre

03:18.920 --> 03:20.930
Arbeitsalltag mehr auswirken als andere.

03:20.960 --> 03:26.510
Wir werden auch einige dieser Prinzipien in den von uns verwendeten Architekturen wiedererkennen, und

03:26.510 --> 03:29.990
schließlich in dem Code, den wir gemeinsam in den Kodierungsabschnitten erstellen.

03:30.020 --> 03:31.160
Das war's für jetzt.

03:31.160 --> 03:31.910
Vielen Dank!
