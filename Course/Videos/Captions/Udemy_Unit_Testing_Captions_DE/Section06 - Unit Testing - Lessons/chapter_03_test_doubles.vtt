WEBVTT

00:00.050 --> 00:02.900
Lassen Sie uns hier über Testdoppelungen sprechen.

00:02.910 --> 00:03.970
Ich werde einen Überblick geben.

00:03.980 --> 00:07.940
Lassen Sie uns zunächst über einige Arten von Einheitstests sprechen.

00:07.940 --> 00:12.020
Dies ist ein sehr breiter und abstrakter Weg, um Ihre Unit-Tests zu betrachten.

00:12.230 --> 00:13.460
Ich werde es hier vorlesen.

00:13.580 --> 00:21.260
Ein Unit-Test kann entweder als solitär betrachtet werden, wenn das zu testende System keine Abhängigkeiten hat,

00:21.290 --> 00:26.990
oder gesellig, wenn das zu testende System tatsächlich Abhängigkeiten hat.

00:27.140 --> 00:34.220
Etwas Solitäres ist ein bisschen reiner, wenn man sich an die Lektion über reine Funktionen erinnert, während etwas

00:34.220 --> 00:36.200
gesellig ist, eher unrein ist.

00:36.230 --> 00:37.220
Schauen wir uns das mal an.

00:37.220 --> 00:44.150
In diesem Diagramm hier, stellen wir uns vor, wir haben einen Produktionscode und wir wollen einige einsame Unit-Tests einfügen

00:44.150 --> 00:47.780
einsetzen, weil Solitary keine Abhängigkeiten hat.

00:47.810 --> 00:55.150
Beachten Sie, dass unser erster Test direkt auf eine und nur eine Klasse im Produktionscode zugreift.

00:55.160 --> 01:01.970
Und wir haben einen weiteren einzelnen Test, der nur eine bestimmte Klasse testet.

01:01.970 --> 01:06.080
Das wäre eher ein einsamer Ansatz, eher ein reiner Ansatz.

01:06.080 --> 01:10.280
Vergleichen wir dies nun mit einem geselligen Einheitstest, den wir unten sehen.

01:10.310 --> 01:16.760
Ein soziologischer Test könnte ein System testen, das selbst von 1 oder 2 anderen Systemen abhängt.

01:16.760 --> 01:22.670
Hier testen wir also etwas auf einer etwas höheren Ebene, aber wir erkennen, dass das abhängig sein wird

01:22.670 --> 01:24.770
von einigen anderen Systemen abhängt.

01:24.770 --> 01:26.560
Es gibt also einige Abhängigkeiten.

01:26.570 --> 01:30.010
Jetzt möchte ich nur ein paar $0.02 hier geben.

01:30.030 --> 01:31.520
Es ist ein bisschen eine Meinung.

01:31.730 --> 01:36.620
Wenn man sozialverträgliche Tests durchführt, hat man am Ende vielleicht weniger Tests.

01:36.620 --> 01:42.800
Aber diese Tests testen Konzepte auf höherer Ebene mit mehr Annahmen und Abhängigkeiten.

01:43.250 --> 01:49.550
Wenn wir hingegen einzelne Unit-Tests durchführen, haben wir vielleicht ein höheres Volumen an Tests, weil wir testen

01:49.550 --> 01:51.500
mehr einzelne Systeme.

01:52.080 --> 01:58.650
Wenn Sie mehr Einzeltests durchführen wollen, müssen Sie wahrscheinlich auch mehr Refactoring betreiben,

01:58.650 --> 02:02.250
weil wahrscheinlich unser Produktionscode standardmäßig darauf basiert.

02:02.250 --> 02:08.280
Als Unity-Entwickler denke ich an mehr Abhängigkeiten, mehr Interoperationen von Systemen.

02:08.280 --> 02:15.060
Wenn man also anfängt, sich von soziologischen Tests zu entfernen, die wahrscheinlich einfacher auf der bestehenden Codebasis durchzuführen sind

02:15.060 --> 02:20.520
und Sie sich auf solitäre Tests zubewegen wollen, werden Sie vielleicht einige Refactorings an Ihren Systemen vornehmen, damit sie

02:20.520 --> 02:22.070
unabhängiger arbeiten.

02:22.080 --> 02:24.530
Lassen Sie uns nun darüber sprechen, was Testdoubles sind.

02:24.540 --> 02:29.610
Ein Testdoppelgänger ist also ein Objekt, das für ein beliebiges reales Objekt stehen kann.

02:29.640 --> 02:35.610
Dies kann helfen, die Reinheit des Unit-Tests zu erhöhen, indem es ihn einsamer macht.

02:35.610 --> 02:42.330
Wie unser Bild hier andeutet, ist ein Test-Double so etwas wie ein Zwilling für eine bestehende Produktionsklasse.

02:42.330 --> 02:44.610
Und wie ähnlich sind sich diese beiden Zwillinge?

02:44.610 --> 02:48.540
Nun, das hängt sehr stark davon ab, welche Art von Test-Double wir implementieren.

02:48.660 --> 02:50.130
Es gibt eine ganze Reihe von Möglichkeiten.

02:50.130 --> 02:51.510
Jetzt gehe ich diese Tabelle durch.

02:51.510 --> 02:53.910
Hier sind einige der Arten von Testdoppelungen.

02:53.910 --> 03:00.330
Ganz oben auf dieser Liste steht im Allgemeinen ein eher dummes Objekt, das weniger Dinge tut, und am Ende

03:00.330 --> 03:03.780
unten steht ein kompletteres Objekt, das mehr kann.

03:03.930 --> 03:10.440
Je nachdem, um welchen Test es sich handelt, kann es sein, dass eines dieser Objekte, ein beliebiges von

03:10.440 --> 03:12.180
die beste Lösung ist.

03:12.210 --> 03:17.610
Das Ziel ist nicht unbedingt, sich immer für Mock oder für Fake zu entscheiden.

03:17.640 --> 03:22.050
Beide haben hier eine Rolle, und je nachdem, was Sie tun, können Sie einen gewissen Nutzen daraus ziehen.

03:22.410 --> 03:29.220
Ein Dummy ist also ein Nullwert oder ein dummes Objekt, das wenig oder nichts tut.

03:29.220 --> 03:33.570
Und das wird für die Kompilierung verwendet, aber es wird nie wirklich aufgerufen.

03:33.570 --> 03:38.250
Stellen Sie sich also vor, Sie haben eine Klasse, die etwas im Konstruktor haben muss, und dann wollen Sie aufrufen

03:38.250 --> 03:40.950
eine Methode in dieser Klasse für den Test.

03:40.980 --> 03:46.020
Solange die Methode, die du aufrufst, nicht wirklich davon abhängt, was du im Konstruktor übergeben hast,

03:46.050 --> 03:52.740
ist es in Ordnung, wenn Sie einen Nullwert übergeben oder was auch immer das Minimum ist, das Sie für die Kompilierung benötigen.

03:52.740 --> 03:59.130
Man kann sich das so vorstellen, dass man gerade genug eingibt, um es zu kompilieren, und dann die Teile testet

03:59.130 --> 04:00.230
die noch funktionieren.

04:00.240 --> 04:03.930
Dieser hat die geringste Macht oder den geringsten Einfluss auf den Test.

04:03.960 --> 04:05.670
Sie hat effektiv keinen Einfluss.

04:05.670 --> 04:07.560
Als Nächstes gibt es die Idee des Stubbing.

04:07.560 --> 04:13.410
Im Leben bedeutet Stubbing im Allgemeinen, dass man etwas Vorübergehendes einführt, das den Zweck gerade noch erfüllt.

04:13.410 --> 04:15.180
Daher kommt auch der Begriff Stummel.

04:15.180 --> 04:19.260
Hier stellen wir also dem zu testenden System gefälschte Daten zur Verfügung.

04:19.290 --> 04:22.290
Dies ist für die Kompilierung wie der Dummy.

04:22.290 --> 04:26.550
Aber es ist auch mit dem verbunden, was man tatsächlich aufruft und testet.

04:26.850 --> 04:32.550
Aber auch hier geht es darum, den Mindestbetrag einzugeben, um die gewünschten Ergebnisse zu erhalten.

04:32.580 --> 04:37.050
Und um noch einmal auf das Konzept der Einzeltests zurückzukommen.

04:37.050 --> 04:44.400
Wenn Ihr System von einem zweiten System abhängt und Sie es testen wollen, können Sie einen Dummy einfügen

04:44.400 --> 04:46.590
oder einen Stub für dieses zweite System einfügen.

04:46.590 --> 04:53.760
Auf diese Weise erwartet und bekommt das primäre System immer noch, was es braucht, aber Sie setzen nicht unbedingt

04:53.760 --> 04:57.540
den hart kodierten Produktionscode für diese zweite Abhängigkeit ein.

04:57.540 --> 04:59.550
Und wir werden das in den Beispielen sehen.

04:59.790 --> 05:01.670
Der nächste unten ist ein Spion.

05:01.710 --> 05:06.420
Ein Spion zeichnet also auf, wie das zu testende System benutzt wird.

05:06.450 --> 05:12.840
Hier testet man also, ob eine bestimmte Methode aufgerufen wird und etwas zurückkommt, das ein bisschen mehr

05:12.840 --> 05:14.730
Macht und Einfluss auf den Test.

05:14.730 --> 05:17.550
Hier geht es weiter mit dem Spotten von Werten.

05:17.550 --> 05:22.560
Hier definieren Sie also das zu testende System und was es zurückgibt.

05:22.560 --> 05:24.300
Dies hat also eine höhere Leistung.

05:24.300 --> 05:28.950
Und hier wird nicht nur definiert, ob eine Methode zurückkommt, sondern was sie zurückgibt.

05:28.950 --> 05:37.980
Und schließlich ist Backen, wenn man eine vollständige Nicht-Produktions-Implementierung hinzufügt und man die volle Kontrolle hat, um

05:37.980 --> 05:39.180
was auch immer Sie brauchen.

05:39.210 --> 05:45.630
Sie können hier also kurz sehen, dass Sie eine Menüauswahl von weniger leistungsfähigen, schnelleren, billigeren

05:45.630 --> 05:50.700
Optionen am Anfang und leistungsstärkeren Optionen am Ende des Menüs.

05:50.700 --> 05:55.620
Hier ist ein Codeschnipsel, der aus einem früheren Abschnitt dieser Lektion stammt.

05:55.620 --> 06:03.570
Und wir sehen, dass wir, wenn wir diese Instanz von my system erstellen, auch die folgenden Daten übergeben

06:03.570 --> 06:06.540
den Konstruktor und wir übergeben einen Multiplikatorwert.

06:06.840 --> 06:12.150
Wenn wir dann den Konvertierungswert aufrufen, stellen Sie sich vor, wir führen einen Einheitstest für den Konvertierungswert durch.

06:12.180 --> 06:18.990
Wir haben diese indirekte Eingabe, weil der Konvertierungswert nicht nur von dem Argument des Wertes abhängt, der

06:18.990 --> 06:21.900
wir übergeben, sondern von etwas anderem.

06:21.900 --> 06:26.220
Und das würden wir als nicht rein oder unrein betrachten.

06:26.220 --> 06:28.860
Und das ist nicht unbedingt ein Problem.

06:28.860 --> 06:33.270
Aber wir erkennen, dass dies nicht so deterministisch ist, wie es sein könnte.

06:33.270 --> 06:37.470
Es besteht auch eine Abhängigkeit von diesem Multiplikatorwert.

06:38.320 --> 06:41.170
Nun, man könnte dies sicherlich so testen, wie es ist.

06:41.200 --> 06:44.680
Und wenn wir uns den Code ansehen, werden wir sehen, dass wir genau das tun können.

06:44.710 --> 06:47.650
Wir könnten einen Standardtest direkt darauf aufsetzen.

06:47.650 --> 06:50.590
Aber lassen Sie uns überlegen, welche Art von Refactoring wir hier durchführen könnten.

06:50.590 --> 06:54.940
Hier ist eine neue Klasse, die das, was wir gerade gesehen haben, verbessern soll.

06:55.270 --> 07:03.280
Hier übergebe ich tatsächlich etwas in den Konstruktor, aber stattdessen übergebe ich nicht nur

07:03.280 --> 07:07.120
einen Wert, sondern eine Schnittstelle, die diesen Wert enthält.

07:07.150 --> 07:10.030
Dies ist ein sehr einfaches Beispiel.

07:10.060 --> 07:16.900
Es löst nicht notwendigerweise alle Herausforderungen, aber in diesem kleinen Babyschritt, während wir mehr lernen,

07:16.900 --> 07:20.530
werden wir lernen, warum eine Schnittstelle hier hilfreicher ist.

07:21.460 --> 07:26.790
Auch hier unten im Konvertierungswert werden wir die Konverterklasse verwenden.

07:26.800 --> 07:33.340
Wir geben einen Teil der Verantwortung auf eine Art und Weise ab, die ein bisschen mehr indirekt ist

07:33.340 --> 07:35.950
Funktionalität, ein bisschen mehr Abhängigkeit.

07:35.950 --> 07:40.780
Aber wir werden wieder sehen, dass, weil es eine Schnittstelle ist, wir in der Lage sein werden, mit etwas zu spielen

07:40.780 --> 07:43.780
hier mit einer der uns zur Verfügung stehenden Bibliotheken.

07:43.780 --> 07:45.850
Schauen wir also, wie uns das helfen könnte.

07:45.850 --> 07:53.860
Hier im grünen Bereich werden wir also eine Bibliothek verwenden, die uns bei der Erstellung einiger Testdoubles helfen wird

07:54.220 --> 07:55.450
in diesem Fall.

07:55.450 --> 07:58.110
Nun, welche Art von Testdoppel erstellen wir.

07:58.120 --> 08:02.620
Nun, die Sprache der End-Ersatz-Bibliothek, die wir benutzen.

08:02.620 --> 08:07.180
Und diese Endvertreter-Abhängigkeit ist im Beispielprojekt für Sie enthalten.

08:07.180 --> 08:09.550
Und wir werden uns das im Beispielcode ansehen.

08:10.240 --> 08:19.120
Was end substitute für uns tun kann, ist dot for zu ersetzen und wir können einen neuen Test double erstellen, der auf

08:19.120 --> 08:20.350
dem I-Konverter.

08:20.530 --> 08:27.130
Dann können wir hier in Grün in der Testwelt, ohne den Produktionscode zu beeinflussen, Folgendes tun

08:27.130 --> 08:32.580
genau definieren, was der Konvertertest double für uns tun soll.

08:32.590 --> 08:39.670
Hier in Grün können wir also das gewünschte Verhalten vollständig kontrollieren und simulieren.

08:39.700 --> 08:44.230
Wir reduzieren die Abhängigkeiten vom Produktionscode.

08:44.530 --> 08:49.540
Wir verlagern die Abhängigkeit hierher in den reinen Testcode.

08:49.540 --> 08:50.950
Und das ist sehr nützlich.

08:50.950 --> 08:56.470
Je mehr Sie diese Art von Konzepten übernehmen, desto flexibler ist Ihr Produktionscode.

08:56.470 --> 08:59.230
In diesem Fall bedeutet "flexibel genug" Schnittstellen.

08:59.230 --> 09:01.120
Aber es gibt auch andere Möglichkeiten, das zu verkaufen.

09:01.450 --> 09:09.910
Es muss flexibel genug sein, damit unsere Tests einen gefälschten Stub simulieren können, mehr von dem, was wir brauchen,

09:09.910 --> 09:10.840
desto besser.

09:11.170 --> 09:13.540
Dann geben wir den Konverter ein.

09:13.540 --> 09:19.750
Im Vergleich zum vorherigen Beispiel geben wir also nicht den Multiplikatorwert von 20 ein.

09:19.780 --> 09:28.420
Wir übergeben ein simuliertes Stubbed-Test-Double, das wir hier genauer kontrollieren können.

09:28.600 --> 09:33.910
Jetzt wissen wir also, dass in der zweiten Zeile steht: convert convert convert value.

09:33.940 --> 09:35.940
Es gibt eine bestimmte Sprache.

09:35.940 --> 09:41.530
Es sieht ein bisschen seltsam aus, wenn man damit nicht vertraut ist, aber ich füge Links zur Dokumentation dazu bei.

09:41.560 --> 09:50.470
Was wir sagen wollen ist, wenn wir convert value aufrufen und ein beliebiges Argument vom Typ int übergeben, was das ist, was

09:50.470 --> 09:56.080
benötigt, wird es immer Wert mal Multiplikator zurückgeben.

09:56.380 --> 09:57.670
Effektiv.

09:57.700 --> 10:00.790
Wir sind wie eine heiße Verdrahtung im Ergebnis.

10:00.790 --> 10:07.030
Wir erwarten die Implementierung, die wir erwarten, ohne unsere eigenen Testklassen erstellen zu müssen.

10:07.060 --> 10:11.530
Dummy-Klassen, Fake-Klassen ist wohl das bessere Wort.

10:12.070 --> 10:17.230
Und dann hier unten im Blauen nennen wir das gleiche alte System Punktkonvertierung Wert.

10:17.410 --> 10:25.630
Wenn wir uns dies nun zwischen Grün und Blau ansehen, können wir genug erkennen, um die Annahme zu treffen

10:25.630 --> 10:31.510
dass unser Ergebnis gleich 30 sein wird, weil die gesamte Umsetzung genau hier stattfindet.

10:31.600 --> 10:37.840
Die blaue Farbe testet also wirklich nur ein Minimum an Funktionalität.

10:38.230 --> 10:42.610
Man könnte sogar argumentieren, dass es keine Funktionalität des Systems selbst testet.

10:42.790 --> 10:47.920
Aber auch hier spielen wir mit diesem und einem absichtlich einfachen Beispiel, das eine Attrappe zeigt.

10:48.190 --> 10:55.090
Wenn der Konvertierungswert etwas mehr tun würde, könnten wir einen Teil, aber nicht alles, beeinflussen

10:55.090 --> 10:57.970
seine Implementierung beeinflussen, indem wir das verwenden, was hier grün dargestellt ist.

10:57.970 --> 11:04.060
Aber denken Sie daran, dass wir hier mit der Idee spielen, uns zwischen dem Reinen und dem Unreinen zu bewegen, und zwischen

11:04.060 --> 11:09.730
einsamen und geselligen Tests, und der Vorteil, dass wir diese Bibliotheken ansehen können, die uns helfen

11:09.730 --> 11:17.560
Tests zu verdoppeln, ist, dass wir innerhalb unserer Unit-Tests mehr tun können, ohne notwendigerweise refaktorisieren zu müssen

11:17.560 --> 11:18.850
unseren Produktionscode.

11:18.850 --> 11:25.870
Aber ich denke, wenn man testgetriebene Entwicklung und auch Unit-Tests im Allgemeinen einsetzt, wird das Testen der bestehenden

11:25.870 --> 11:31.690
Produktionscode zu testen und offen dafür zu sein, den Produktionscode zu überarbeiten, falls und wenn es notwendig ist.

11:31.720 --> 11:39.340
Dies sind großartige Werkzeuge, die Sie auf diesem Weg verwenden können, so dass Sie sehen können, dass durch die Reduzierung der Komplexität

11:39.340 --> 11:43.960
und Abhängigkeiten in Ihrem Produktionscode reduzieren, erhalten wir mehr unit-testbaren Code.

11:43.960 --> 11:50.320
Aber auch wenn Sie das nicht getan haben, haben wir hier einige Bibliotheken, die uns helfen können, bessere Tests durchzuführen

11:50.320 --> 11:50.860
Verdoppelung.

11:50.860 --> 11:52.420
Das gibt uns also einige weitere Optionen.
