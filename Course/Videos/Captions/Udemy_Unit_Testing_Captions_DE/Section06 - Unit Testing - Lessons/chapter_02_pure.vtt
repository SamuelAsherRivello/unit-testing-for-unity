WEBVTT

00:00.380 --> 00:02.620
Reine Funktionen und Übersicht.

00:02.630 --> 00:06.290
Was ist also eine reine Funktion, auch bekannt als reine Methode.

00:06.290 --> 00:10.250
Und warum ist sie hier für den Unit-Test-Prozess relevant?

00:10.280 --> 00:18.320
Eine reine Funktion kann als eine Funktion betrachtet werden, die weniger Auswirkungen und Abhängigkeiten von anderen, nicht verwandten Systemen hat.

00:18.440 --> 00:24.020
Mit unverbunden meine ich, dass sie nicht direkt mit dem Code im Körper der Funktion selbst verbunden ist.

00:24.440 --> 00:31.580
Eine Möglichkeit, wie wir es hier beim Lesen des Bildschirms sehen können, ist, dass die Rückgabewerte für identische

00:31.580 --> 00:37.850
Argumente identisch sind, d.h. wenn Sie einen Wert als eines der Argumente übergeben, erhalten Sie immer den

00:37.850 --> 00:41.650
dasselbe Ergebnis, und zweitens, dass es keine Nebenwirkungen hat.

00:41.660 --> 00:50.030
Nebeneffekte sind indirekte Ausgaben oder andere Systeme, die bei der Ausführung eines bestimmten Programms beeinflusst werden

00:50.030 --> 00:50.770
Methode beeinflusst werden.

00:50.780 --> 00:57.800
Je reiner also eine Funktion ist, desto isolierter und unabhängiger läuft sie.

00:57.800 --> 01:03.200
Im mitgelieferten Beispielcode für das Beispielprojekt sehen Sie etwas Ähnliches wie das hier in der

01:03.230 --> 01:04.490
C-sharp Code-Basis.

01:04.850 --> 01:07.640
Hier habe ich ein paar Farben eingefügt, damit wir es uns ansehen können.

01:07.640 --> 01:15.650
Stellen Sie sich vor, wir haben hier eine benutzerdefinierte Klasse, die My System heißt, und eine Methode darin heißt

01:15.650 --> 01:16.910
Wert umwandeln.

01:16.940 --> 01:23.810
Beachten Sie, dass es zwei Argumente gibt, die ich übergebe, und diese zwei Werte, und nur diese zwei Werte sind

01:23.810 --> 01:26.630
die direkten Eingaben, die die Operation beeinflussen.

01:26.660 --> 01:34.670
Es gibt kein drittes öffentliches, statisches, privates, statisches, unverbundenes System, das wir dort in Blau sehen.

01:34.670 --> 01:36.140
Es ist sehr einfach.

01:36.140 --> 01:38.960
Jetzt könnte man hier noch viel mehr Zeilen Code haben.

01:38.960 --> 01:41.840
Es ist nicht nur, dass dies kurz ist, das macht es rein.

01:41.840 --> 01:48.860
Es geht darum, dass wir sehen, dass das Ergebnis von den Argumenten abhängt und nur von diesen Argumenten.

01:48.860 --> 01:56.930
Es ist also sehr rein, wenn wir über die Ergebnisse oder die Nebenwirkungen sprechen, können wir sehen, dass keine anderen

01:56.930 --> 01:58.610
Werte hier gesetzt sind.

01:58.880 --> 02:02.840
Wenn wir irgendwelche temporären Werte setzen, ist das in einer reinen Funktion in Ordnung.

02:02.840 --> 02:09.620
Aber wenn wir Werte innerhalb des Blauen hier auf nicht verwandte Systeme oder auf statische Variablen setzen würden

02:09.620 --> 02:15.620
die eine Lebensdauer haben, die über diese Methode hinausgeht, wären das Dinge, die sie weniger rein machen würden.

02:15.620 --> 02:20.840
Jetzt werden wir uns noch ein paar weitere Folien ansehen, ein bisschen Theorie und einen Sprung in die

02:20.840 --> 02:21.440
den Code.

02:21.440 --> 02:27.470
Während ich also diese Konzepte einführe und verstärke, werden wir alle ein bisschen mehr über die Wertschätzung lernen

02:27.470 --> 02:29.330
was es bedeutet, eine reine Funktion zu sein.

02:29.330 --> 02:33.140
Hier sehen wir also eine noch tiefer gehende Erklärung.

02:33.140 --> 02:34.310
Ich lese sie laut vor.

02:34.400 --> 02:41.450
Eine reine Funktion ist im Allgemeinen einfacher zu debuggen, zu warten und zu testen, und zwar aus folgenden Gründen

02:41.450 --> 02:41.930
erstens.

02:41.930 --> 02:43.670
Es hat keine Seiteneffekte.

02:43.670 --> 02:49.010
Das bedeutet, dass das Verhalten vorhersehbar und konsistent ist und nur auf dieser Eingabe basiert.

02:49.010 --> 02:52.640
Wie wir im Beispiel gesehen haben, ist es deterministisch.

02:52.640 --> 02:57.140
Das bedeutet, dass wir bei einer bestimmten Eingabe immer die gleiche Ausgabe erzeugen.

02:57.170 --> 03:00.250
Das bedeutet, dass es keine anderen Werte gibt, die nicht miteinander verbunden sind.

03:00.260 --> 03:02.060
Es gibt keine Zufälligkeit.

03:02.060 --> 03:07.400
Wenn wir die Werte drei und zehn eingeben, würden wir immer den Wert 30 erhalten.

03:07.430 --> 03:13.610
Im vorigen Beispiel läuft eine reine Funktion auch isoliert ab, so dass es nicht notwendig ist, und

03:13.610 --> 03:15.620
externe Abhängigkeiten zu verwalten.

03:15.620 --> 03:19.790
Es könnte viele verschiedene Beispiele geben, aber ein paar davon sind Datenbanken.

03:19.790 --> 03:27.080
Dateisystem, Netzwerkressourcen, andere Klassen, die erstellt werden und die das System ebenfalls nutzt.

03:27.080 --> 03:32.600
Und ein weiterer Grund, warum es so einfach ist, Unit-Tests zu debuggen und zu warten, ist, weil es einfach einfacher ist

03:32.600 --> 03:33.530
Einheitstests gibt.

03:33.530 --> 03:37.610
Man kann die Eingaben bereitstellen und die spezifischen Ausgaben bestätigen.

03:37.610 --> 03:42.560
Es gibt weniger Boilerplate für die Erstellung von Dingen rund um den Test selbst.

03:42.560 --> 03:45.080
Und schließlich ist es modular und wiederverwendbar.

03:45.080 --> 03:51.950
Code, der eine reine Funktion ist und auf reinen Funktionen basiert, ist in der Regel in sich geschlossener und portabel,

03:51.950 --> 03:56.170
und macht es einfacher, die gleiche Funktionalität in verschiedenen Kontexten wiederzuverwenden.

03:56.180 --> 04:01.910
Wenn wir nun weitergehen und über reine Funktionen sprechen, so ist das Thema des Kurses insgesamt,

04:01.910 --> 04:08.690
Ich würde sagen, wenn Ihr Code leichter testbar ist, ist das gut für den Testprozess, aber mehr

04:08.690 --> 04:12.890
im Großen und Ganzen deutet es darauf hin, dass der Code einfach besser gestaltet ist.

04:12.890 --> 04:20.450
Also selbst wenn wir unseren Code nicht testen würden, wenn unser Code keine Nebenwirkung hat, deterministischer ist, ist

04:20.450 --> 04:28.010
isolierter, modularer und wiederverwendbar ist, ist das für den Produktionscode selbst von Vorteil.

04:28.010 --> 04:36.110
Wir sehen also ein Auf und Ab zwischen den Vorteilen, die sich daraus ergeben, dass etwas unit-testbar ist, und den Vorteilen, die sich daraus ergeben

04:36.110 --> 04:37.370
wenn es sich um Produktionscode handelt.

04:37.370 --> 04:41.120
Wenn das also eine reine Funktion ist, was ist dann eine nicht reine Funktion?

04:41.120 --> 04:44.410
Nun, es ist einfach eine Funktion, die nicht so rein ist.

04:44.420 --> 04:49.190
Auch das ist nicht 100% rein, 100% nicht rein.

04:49.190 --> 04:53.780
Wenn wir über eine bestimmte Funktion sprechen, können wir ihren Reinheitsgrad beurteilen.

04:53.780 --> 04:55.520
Das könnte irgendwo in der Mitte liegen.

04:55.520 --> 04:59.660
Einige der Hauptkriterien einer nicht reinen Funktion sind, dass sie.

04:59.820 --> 05:03.450
Indirekte Eingaben, d.h. es gibt eine Art gemeinsamen Zustand.

05:03.570 --> 05:10.740
Vielleicht geben wir einen Wert ein und es wird auf diesem Wert operiert, plus einige andere Abhängigkeiten, die unrein sind

05:10.740 --> 05:13.140
und hat auch indirekte Ausgaben.

05:13.170 --> 05:14.700
Erinnern Sie sich an unser einfaches Beispiel.

05:14.700 --> 05:16.200
Wir werden uns bald ein anderes Beispiel ansehen.

05:16.200 --> 05:18.940
Es würde einfach zwei Zahlen multiplizieren und das Ergebnis zurückgeben.

05:18.960 --> 05:26.460
Es wurden keine unverbundenen Systemwerte gesetzt, die als eine Art gemeinsamer Wert herumstehen würden

05:26.460 --> 05:26.820
Zustand.

05:27.030 --> 05:33.930
Aber hier, im Fall einer nicht reinen Funktion, kann sie eine oder beide der Ideen von indirekten Eingaben haben

05:33.960 --> 05:35.040
indirekte Ausgänge.

05:35.040 --> 05:36.690
Hier ist also ein sehr einfaches Beispiel.

05:36.690 --> 05:38.430
Dies ist auch im Beispielprojekt enthalten.

05:38.430 --> 05:41.670
Und dies ist ein Beispiel für ein System, das nicht rein ist.

05:41.760 --> 05:43.800
Es ist also ein bisschen anders.

05:43.830 --> 05:47.460
Wir führen hier sozusagen die gleiche Multiplikationsoperation durch.

05:47.460 --> 05:50.490
Aber beachte hier die Methode der Wertumwandlung.

05:50.490 --> 05:53.910
Sie nimmt nicht alle Argumente an, die sie braucht.

05:53.910 --> 05:59.180
Sie nimmt einen Wert und multipliziert ihn mit einem vorhandenen Systemwert.

05:59.190 --> 06:03.000
Dies ist also ein Beispiel für eine indirekte Eingabe.

06:03.030 --> 06:09.210
Der Multiplikator existiert, bevor die Methode convert value aufgerufen wird.

06:09.210 --> 06:13.890
Das ist also der Teil der indirekten Eingabe einer unreinen Funktion.

06:13.920 --> 06:18.840
Der andere Teil, über den wir gesprochen haben, ist die indirekte Ausgabe hier.

06:18.840 --> 06:20.760
Wir sehen kein Beispiel dafür.

06:20.790 --> 06:24.270
Es gibt keinen Zustand, der sich geändert hat, der bestehen bleibt.

06:24.300 --> 06:26.310
Wir geben nur einen einfachen Wert zurück.

06:26.310 --> 06:29.100
Und die Rückgabe eines Wertes zählt nicht dagegen.

06:29.100 --> 06:32.640
Wir haben also eine indirekte Eingabe, aber keine indirekte Ausgabe.

06:32.640 --> 06:35.880
Aber wenn wir einen dieser Werte hier haben, ist er trotzdem unrein.

06:35.880 --> 06:38.610
Was machen wir also mit diesen nicht reinen Funktionen.

06:38.610 --> 06:44.250
Wir haben angedeutet, dass reine Funktionen einfacher zu testen sind und viele Vorteile in ihrem Produktionscode haben

06:44.250 --> 06:45.360
Verwendung haben.

06:45.360 --> 06:50.330
Nun, wenn wir keine reine Funktion haben, was können wir dann tun?

06:50.340 --> 06:56.010
Nun, einige der Dinge, die wir tun könnten, wir könnten sie sicherlich in Ruhe lassen, sie als unrein belassen.

06:56.010 --> 06:57.720
Und oft werden wir das auch tun.

06:57.720 --> 07:03.570
Aber manchmal, wenn wir einen Blick auf die Unit-Tests von etwas werfen, könnten wir ermutigt werden

07:03.570 --> 07:07.800
ein bisschen Refactoring zu betreiben, um das System ein bisschen reiner zu machen.

07:07.800 --> 07:13.380
Vielleicht bekommen wir es nicht zu 100% hin, aber es geht hier wieder um die Kunst.

07:13.410 --> 07:18.150
Es liegt an Ihnen zu entscheiden, wie rein und wie unrein Sie Ihren Code haben wollen.

07:18.180 --> 07:23.580
Nun, einige Entwickler könnten theoretisch so vorgehen, dass sie alles immer rein haben wollen

07:23.580 --> 07:24.210
Zeit.

07:24.510 --> 07:25.620
Das ist ein Ansatz.

07:25.650 --> 07:29.250
Eine andere ist, den Code so zu erstellen, wie Sie ihn früher erstellt haben.

07:29.250 --> 07:32.550
Und wenn der zufällig unsauber ist, lässt man ihn einfach unsauber.

07:32.550 --> 07:38.010
Ich möchte Sie dazu einladen, die Ideen ein wenig zu massieren und mit ihnen zu spielen.

07:38.010 --> 07:42.810
irgendwo in der Mitte, wo man etwas Unreines ein bisschen reiner machen kann.

07:42.810 --> 07:47.580
Erkennen der Vorteile für die Unit-Tests und die Vorteile für den Produktionscode.

07:47.580 --> 07:49.290
Schauen wir also, was wir hier tun können.

07:49.290 --> 07:51.990
Wir könnten einige der Seiteneffekte eliminieren.

07:52.110 --> 07:56.700
Wir könnten den gemeinsamen Zustand ähnlich wie bei den Nebeneffekten eliminieren.

07:56.730 --> 07:59.580
Wir könnten Abhängigkeiten, die verwendet werden, eliminieren.

07:59.730 --> 08:04.350
Und wir können uns einladen, eine Behauptung pro Test zu haben.

08:04.380 --> 08:12.270
Das wird uns helfen zu verstehen, dass, wenn ein Test nur eine Sache behauptet, unser Code Folgendes tun muss

08:12.270 --> 08:15.270
ziemlich einfach sein, um diese Behauptung zu erfüllen.

08:15.360 --> 08:17.640
Wir werden also ein wenig damit spielen, wenn wir uns den Code ansehen.

08:17.640 --> 08:19.050
Wie können wir also vorgehen?

08:19.050 --> 08:23.700
Nun, wir können einen Teil des Refactorings des Produktionscodes durchführen, indem wir die Schritte ausführen, die wir im

08:23.700 --> 08:24.630
vorherigen Folie gesehen haben.

08:24.630 --> 08:29.730
Im nächsten Abschnitt möchte ich ein neues Konzept der Testdoppel einführen.

08:29.760 --> 08:30.570
Vielen Dank.
