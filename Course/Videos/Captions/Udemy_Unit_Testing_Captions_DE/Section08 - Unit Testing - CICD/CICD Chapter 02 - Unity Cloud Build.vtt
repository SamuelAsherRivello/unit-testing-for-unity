WEBVTT

00:00:00.020 --> 00:00:02.750
Hallo und willkommen beim Unit-Testen für Unity.

00:00:02.780 --> 00:00:10.010
Hier werden wir über Unity Cloud Build als eine beliebte Methode zur kontinuierlichen Integration und Kontinuität sprechen

00:00:10.010 --> 00:00:11.270
Bereitstellung mit Einheit.

00:00:11.300 --> 00:00:17.480
Wir haben also die enormen Vorteile von Unit-Tests und der Einrichtung eines automatisierten Prozesses zur Durchführung gesehen

00:00:17.480 --> 00:00:18.620
diese Unit-Tests.

00:00:18.650 --> 00:00:23.640
Eine dieser beliebten Optionen, die Sie nutzen können, ist der Cloud-Build von Unity.

00:00:23.660 --> 00:00:25.820
Dies wird von Unity selbst angeboten.

00:00:25.850 --> 00:00:31.040
Es gibt auch zahlreiche Alternativen von Drittanbietern oder der Community zu dem, was ich Ihnen gleich zeigen werde.

00:00:31.070 --> 00:00:37.820
Denn Cloud Build ist Unity-spezifisch, wird von Unity erstellt und funktioniert einfach ganz einfach.

00:00:37.820 --> 00:00:43.280
Ich werde mich hier darauf konzentrieren, aber die meisten Schritte, die Sie hier sehen, wären sehr ähnlich

00:00:43.280 --> 00:00:45.560
bei der Einrichtung einiger wettbewerbsfähiger Tools.

00:00:45.560 --> 00:00:49.100
Daher bietet Unity Cloud Build eine Unity-Build-Automatisierung.

00:00:49.100 --> 00:00:55.750
Um qualitativ hochwertige Spiele zu entwickeln, muss man über eine CI-CD-Pipeline verfügen, die für häufige Tests und Veröffentlichungen bereit ist.

00:00:55.760 --> 00:01:00.440
Automatisieren Sie Ihre Build-Pipeline in der Cloud und halten Sie die Entwicklung mit Unity am Laufen.

00:01:00.440 --> 00:01:01.460
Automatisierung erstellen.

00:01:01.460 --> 00:01:03.530
In diesem Video werden wir den gesamten Prozess durchgehen.

00:01:03.530 --> 00:01:07.880
Aber Unity Cloud Build ist eine webbasierte Software as a Service.

00:01:07.910 --> 00:01:12.710
Es kostet zwar etwas, aber es gibt eine kostenlose Einstiegsstufe, die wir heute nutzen werden.

00:01:12.740 --> 00:01:17.870
Unternehmen, die viel zu bauen haben und die Wartezeit für ihr Gebäude minimieren möchten, würden dies tun

00:01:17.870 --> 00:01:23.480
Am besten geeignet sind kostenpflichtige Tarife für diesen Service oder die Suche nach einer Alternative.

00:01:23.870 --> 00:01:27.350
Sobald Sie den Unity Cloud-Build verwenden, ist er webbasiert.

00:01:27.350 --> 00:01:30.710
Wie bereits erwähnt, öffnen Sie den Build-Verlauf und klicken auf „Build“.

00:01:30.710 --> 00:01:36.350
Wenn Sie einen Test manuell durchführen möchten oder diese Builds planen können, können Sie sie beispielsweise so einrichten, dass

00:01:36.350 --> 00:01:42.260
passiert nur in Ihrem Hauptzweig, passiert aber jede Nacht um 1 Uhr morgens und wird einfach automatisch erstellt

00:01:42.260 --> 00:01:43.310
einmal am Tag dazu.

00:01:43.340 --> 00:01:45.190
Sie können auch einen Auslöser einrichten.

00:01:45.200 --> 00:01:52.220
Sie können auch Auslöser einrichten, damit es automatisch basierend auf bestimmten Kriterien erstellt wird, z. B. wann

00:01:52.220 --> 00:01:56.540
Code wird von einem Zweig zum anderen übertragen und automatisch ausgeführt.

00:01:56.540 --> 00:01:57.920
Da haben Sie also einige Möglichkeiten.

00:01:57.920 --> 00:02:02.570
Und sobald Sie diesen Build starten, entweder manuell oder automatisch, werden Sie und alle Mitglieder Ihres

00:02:02.570 --> 00:02:08.300
Das gewünschte Team erhält eine E-Mail mit der Bestätigung erfolgreicher Builds, fehlgeschlagener Builds oder eines beliebigen Levels

00:02:08.300 --> 00:02:09.200
an Informationen, die Sie benötigen.

00:02:09.230 --> 00:02:10.940
Sehen wir uns eine Demo davon in Aktion an.

00:02:10.940 --> 00:02:17.180
Jetzt habe ich bereits ein Projekt erstellt und getestet, ob es gut mit Unity funktioniert

00:02:17.180 --> 00:02:17.600
Wolke.

00:02:17.600 --> 00:02:19.310
Baue das auf und beende es.

00:02:19.310 --> 00:02:22.550
Ich habe einige dieser Arbeiten durchgeführt, um zu verstehen, wie das System funktioniert.

00:02:22.550 --> 00:02:25.990
Und auch um einige der Screenshots zu machen, die wir hier in dieser Präsentation gesehen haben.

00:02:26.000 --> 00:02:32.750
Was ich jedoch tun werde, ist, den Prozess einfach von vorne zu beginnen, damit Sie jeden einzelnen Schritt sehen können.

00:02:32.780 --> 00:02:38.150
Jetzt werde ich nicht das Projekt selbst erstellen, sondern darüber hinaus die gesamte Automatisierung vornehmen.

00:02:38.150 --> 00:02:44.780
Hier ist also unser Unity-Projekt, zu dem bereits die Unit-Tests und die verschiedenen Beispielszenen hinzugefügt wurden.

00:02:44.780 --> 00:02:49.760
Es handelt sich um das einzige Projekt für diesen Kurs und es ist im Abschnitt „Kursressourcen“ verlinkt.

00:02:49.760 --> 00:02:55.460
Wir können das hier auf GitHub finden, nur um die Seite zu erkunden und zu bestätigen, dass sie tatsächlich bereit ist.

00:02:55.460 --> 00:02:57.170
Und ich werde es innerhalb der Einheit öffnen.

00:02:57.170 --> 00:02:59.390
Hier sind wir im Projekt innerhalb der Einheit.

00:02:59.420 --> 00:03:01.430
Wir können es hier oben im Inspektor sehen.

00:03:01.430 --> 00:03:07.070
Wir haben einige Links, über die wir zu verschiedenen Bereichen des Projekts klicken können, um mit der Besichtigung zu beginnen

00:03:07.070 --> 00:03:12.290
Einige der Beispiele sowie das Durchklicken zum Kurs und zum Link zum Beispielprojekt selbst.

00:03:12.380 --> 00:03:15.830
Wir können auch testen, ob alle Unit-Tests innerhalb des Test-Runners erfolgreich sind.

00:03:15.830 --> 00:03:16.850
Also lasst uns das tun.

00:03:19.000 --> 00:03:21.610
Sie können sehen, dass alle 148 Tests bestanden wurden.

00:03:21.760 --> 00:03:27.340
Etwas anderes, was ich tun möchte, ist, in die Build-Einstellungen zu gehen, und wenn es noch nicht dort ist, möchte ich es tun

00:03:27.340 --> 00:03:33.280
Um dies hinzuzufügen, behalten Sie diese Szene in den Build-Einstellungen für Cloud Build bei, und ich werde sicherstellen, dass sie festgeschrieben wird

00:03:33.280 --> 00:03:34.030
zum Repo.

00:03:34.060 --> 00:03:37.900
Nun funktioniert jeder dieser Build-Prozesse ganz anders.

00:03:37.930 --> 00:03:45.670
Unity Cloud Build möchte mindestens eine Szene erstellen, damit sie als vorübergehender Build betrachtet wird

00:03:45.670 --> 00:03:46.660
Verfahren.

00:03:46.660 --> 00:03:49.060
Deshalb braucht es dort eine Szene.

00:03:49.060 --> 00:03:52.540
Und diese Szene ist ganz einfach, ganz leer.

00:03:52.570 --> 00:03:56.530
Es dient lediglich dazu, die minimalste Funktionalität zu testen.

00:03:56.560 --> 00:04:02.410
Sie könnten auch eine komplexere Szene haben, wenn Sie möchten, und dies als den einzigen Test festlegen, der erstellt wird.

00:04:02.410 --> 00:04:08.620
Aber ich gehe davon aus, dass meine Unit-Test-Abdeckung im Bearbeitungsmodus und im Wiedergabemodus das für mich erledigt.

00:04:08.620 --> 00:04:12.410
Ich habe also eine ziemlich leere Testszene, die ich dort hineinziehe.

00:04:12.430 --> 00:04:14.550
Hier sehen wir, wie der Unity Hub geöffnet ist.

00:04:14.560 --> 00:04:19.780
Normalerweise sind wir angemeldet, aber ich habe mich absichtlich abgemeldet, damit ich ein brandneues Konto erstellen kann.

00:04:19.810 --> 00:04:24.550
Wenn Sie bereits ein Konto zur Verwendung in Unity erstellt haben, können Sie diesen Schritt überspringen.

00:04:24.550 --> 00:04:26.310
Ich zeige es nur als Vollständigkeit.

00:04:26.320 --> 00:04:30.820
Hier müssen Sie nichts Besonderes tun, insbesondere nicht den Cloud-Aufbau.

00:04:30.910 --> 00:04:33.690
Was ich hier also tun werde, ist, ein Konto zu erstellen.

00:04:33.700 --> 00:04:40.000
Sobald die grundlegendste Einrichtung abgeschlossen ist, gehe ich dann zu Cloud Unity.com.

00:04:40.000 --> 00:04:43.240
Und hier muss ich einige zusätzliche Konfigurationen vornehmen.

00:04:43.240 --> 00:04:47.500
Damit mein Projekt, das ich auf GitHub gezeigt habe, automatisch erstellt wird.

00:04:47.950 --> 00:04:51.970
Jetzt habe ich diese Schritte bereits durchgeführt, aber ich werde sie noch einmal von Grund auf wiederholen, damit wir alles sehen können

00:04:51.970 --> 00:04:52.300
Hier.

00:04:52.300 --> 00:04:57.990
Deshalb gehe ich hier in der Seitenleiste zu „Projekte“ und klicke dann auf „Neu“, um ein neues Projekt zu erstellen.

00:04:58.000 --> 00:05:06.010
Ich werde diesen Unit-Test für Unity Two nennen, da ich bereits einen habe, den ich verwendet habe.

00:05:06.040 --> 00:05:08.520
Ist dies auf Kinder unter 13 Jahren ausgerichtet?

00:05:08.530 --> 00:05:09.520
Nein es wird nicht.

00:05:14.670 --> 00:05:15.480
Okay.

00:05:15.720 --> 00:05:17.290
Schauen wir uns also einige dieser Details an.

00:05:17.310 --> 00:05:25.470
Wir haben den Projektnamen, ein Symbol und eine Projekt-ID. Der Google-Lizenzschlüssel für In-App-Käufe ist nicht vorhanden

00:05:25.470 --> 00:05:26.060
noch.

00:05:26.070 --> 00:05:32.730
Dieses Dashboard, das wir sehen, bietet alle möglichen Funktionen, die Unity in seinen Diensten anbietet.

00:05:32.760 --> 00:05:34.950
Wir müssen hier nichts davon tun.

00:05:35.040 --> 00:05:35.310
In Ordnung.

00:05:35.340 --> 00:05:38.460
Nachdem das Projekt nun eingerichtet ist, gehen wir hier zu den Entwicklern über.

00:05:41.900 --> 00:05:44.420
Eines der Dinge, die wir tun können, ist die Build-Automatisierung.

00:05:44.420 --> 00:05:46.640
Wir gehen zu den Einstellungen für die Build-Automatisierung.

00:05:46.760 --> 00:05:49.790
Hier sind wir also bei den Build-Automatisierungseinstellungen.

00:05:49.910 --> 00:05:52.760
Einige allgemeine Informationen finden Sie hier.

00:06:00.250 --> 00:06:00.760
Ja.

00:06:01.480 --> 00:06:03.370
Ich gehe zur Quellcodeverwaltung.

00:06:05.470 --> 00:06:09.010
Die Quellcodeverwaltung verfügt über ein Dropdown-Menü. Wir können Git Hub auswählen.

00:06:09.140 --> 00:06:09.430
Okay.

00:06:09.460 --> 00:06:13.660
Das sagt uns also, dass wir ein persönliches Zugriffstoken von Git benötigen.

00:06:13.690 --> 00:06:14.020
Okay.

00:06:14.020 --> 00:06:19.490
Was wir tun müssen, ist unser Unity Cloud-Rechnungskonto hier mit unserem GitHub-Konto zu verbinden.

00:06:19.510 --> 00:06:26.950
Auf diese Weise weiß der Erstellungsprozess, wo sich unser Code befindet, und kann bestimmte Ereignisse abhören, z

00:06:26.950 --> 00:06:32.480
wenn der Code aktualisiert oder zusammengeführt wurde usw., um die Erlaubnis für den Unity Cloud-Build zu erteilen.

00:06:32.500 --> 00:06:38.220
Wir gehen hier auf die Einstellungen ein und holen uns ein persönliches Zugriffstoken von unserem GitHub.

00:06:38.230 --> 00:06:42.180
Hier heißt es also, dass Ihr persönliches GitHub-Zugriffstoken erstellt und bereitgestellt wird.

00:06:42.190 --> 00:06:46.960
Sie müssen den Bereich der Repo-Leseorganisation auswählen.

00:06:50.800 --> 00:06:55.330
Sie benötigen also ein GitHub-Konto für den Ort, an dem sich das Repo befindet.

00:06:55.360 --> 00:06:57.760
Es muss nicht das Repo sein, das ich hier eingerichtet habe.

00:06:57.760 --> 00:07:02.590
Sie könnten dies selbst ausführen, aber um dieses persönliche Zugriffstoken zu erhalten, ist das eine Sache

00:07:02.590 --> 00:07:04.270
spezifisch für Ihr Konto.

00:07:04.300 --> 00:07:06.910
Das hat nichts mit mir als Ausbilder zu tun.

00:07:07.030 --> 00:07:12.010
Wir können also hier nach oben zum Profil und nach unten zu den Einstellungen gehen.

00:07:16.450 --> 00:07:20.320
Dann gehen wir hier unten zu den Entwicklereinstellungen.

00:07:30.250 --> 00:07:33.580
Dann können wir unter „Persönliche Zugriffstoken“ zum klassischen Modus übergehen.

00:07:35.260 --> 00:07:38.000
Ich habe dort bereits eines, das ich kürzlich erstellt habe.

00:07:38.020 --> 00:07:42.130
Dies ist Projekt Read Org und Repo.

00:07:42.460 --> 00:07:45.460
Ich werde ein neues Token generieren und diesem einen Namen geben.

00:07:45.460 --> 00:07:51.040
Es wird ein Unity Cloud-Build-Token sein.

00:07:54.200 --> 00:07:56.480
Ich gebe ihm kein Ablaufdatum.

00:07:56.480 --> 00:07:58.910
Hier wähle ich also Repo.

00:07:59.120 --> 00:08:03.860
Ich werde für einige dieser Einstellungen „Lesen“, „Lesen“ und „Lesen“ wählen.

00:08:04.760 --> 00:08:07.250
Dies ist möglicherweise nicht alles erforderlich.

00:08:07.250 --> 00:08:08.450
Vielleicht könnten Sie weniger tun.

00:08:08.450 --> 00:08:09.530
Aber ich werde das tun.

00:08:13.200 --> 00:08:13.530
Okay.

00:08:13.560 --> 00:08:15.780
Dann kopieren wir den Wert von dort.

00:08:22.760 --> 00:08:25.490
Wir fügen den Wert ein und autorisieren.

00:08:32.850 --> 00:08:33.750
Wählen Sie meine Einheit.

00:08:33.750 --> 00:08:35.040
Prüfung auf Einheit.

00:08:36.210 --> 00:08:38.670
Schauen wir uns nun die Konfigurationen hier an.

00:08:40.080 --> 00:08:47.070
Wir werden eine schnelle Zieleinrichtung durchführen und Windows 64 auswählen.

00:08:47.580 --> 00:08:55.290
Wenn Ihr Endprojekt nun von Benutzern bestimmter Zielgeräte wie Android, iOS,

00:08:55.320 --> 00:08:59.520
usw. Möglicherweise möchten Sie frühzeitig Builds für all diese erstellen.

00:08:59.550 --> 00:09:02.850
Hier sehen wir, dass wir viele verschiedene Dinge zur Auswahl haben.

00:09:02.880 --> 00:09:08.760
Normalerweise ist es am geringsten, einen Windows-Build auf einem Windows-Rechner zum Laufen zu bringen

00:09:08.760 --> 00:09:09.930
Ich wähle einfach das aus.

00:09:16.830 --> 00:09:17.160
Hier.

00:09:17.160 --> 00:09:19.260
Wir wählen den Zweig aus, den wir bauen möchten.

00:09:19.290 --> 00:09:22.350
Hier sehen wir nun den Pfad des Projektunterordners.

00:09:22.350 --> 00:09:23.550
Und das ist optional.

00:09:23.550 --> 00:09:30.030
Es heißt jedoch, dass wir dies empfehlen, wenn sich Ihre Assets und Projekteinstellungen nicht im Stammordner Ihres Repositorys befinden

00:09:30.030 --> 00:09:31.740
Eingabe des Ordnerpfads.

00:09:31.770 --> 00:09:34.230
Werfen wir hier einen Blick auf mein Projekt.

00:09:34.260 --> 00:09:43.380
Hier ist nun das Repo und meine Konvention ist, dass mein Unity-Projekt immer unter einem Repo-Slash-Unity-Slash steht

00:09:43.410 --> 00:09:44.750
Vermögenswerte, zum Beispiel.

00:09:44.760 --> 00:09:49.200
Ich finde, dass es bei größeren Projekten immer hilfreich ist, diese Trennung zu haben.

00:09:49.200 --> 00:09:53.070
Also fange ich alle Projekte aller Größenordnungen auf diese Weise an?

00:09:53.160 --> 00:09:58.660
In diesem Unity-Ordner können wir die bekannten Assets, Pakete und Projekteinstellungen sehen.

00:09:58.680 --> 00:10:02.040
Jetzt befinden sich diese drei Ordner sofort in Ihrem Stammverzeichnis.

00:10:02.070 --> 00:10:07.860
Sie benötigen keine benutzerdefinierte Konfiguration, aber wenn sich diese drei Ordner nicht in Ihrem Stammverzeichnis befinden, dann ist dies der Fall

00:10:07.860 --> 00:10:10.500
Es muss genau geklärt werden, woher diese kommen.

00:10:12.180 --> 00:10:15.570
In meinem Fall ist es also nur ein Einheits-Schrägstrich.

00:10:16.780 --> 00:10:19.140
Dann können wir über die Unity-Version sprechen.

00:10:19.150 --> 00:10:26.290
Nun halte ich es für eine gute Idee, die Unity-Version automatisch zu erkennen, damit sie erstellt werden kann

00:10:26.290 --> 00:10:31.250
eine basierend auf der neuesten Version, die in das Repo gepusht wurde.

00:10:31.270 --> 00:10:37.720
Allerdings vermute ich, dass es aufgrund meiner Pfadangabe bei mir nicht funktioniert, also werde ich die automatische Erkennung aktivieren

00:10:37.750 --> 00:10:38.560
aus.

00:10:39.530 --> 00:10:48.530
Und ich werde sagen, dass Sie immer die neueste Version von 2022 verwenden sollten, denn darauf baut mein Projekt auf und das werde ich auch tun

00:10:48.530 --> 00:10:50.900
Verwenden Sie hier einen Windows-Server.

00:10:51.870 --> 00:10:57.570
Ich mache keine Builds für iOS oder Android, daher muss ich die Vorteile der zusätzlichen Konfiguration nicht nutzen

00:10:57.570 --> 00:10:57.930
Dort.

00:10:57.930 --> 00:11:00.690
Aber die Xcode-Version für iOS-Sachen ist hier.

00:11:00.690 --> 00:11:04.170
Beispielsweise können Sie bei der Konfiguration viele dieser Dinge überspringen.

00:11:05.060 --> 00:11:10.720
Da die Build-Konfiguration nun fortgesetzt wird, kann ich einen mehr oder weniger leistungsstarken Computer auswählen.

00:11:10.730 --> 00:11:14.060
Ich möchte hier keine kostenpflichtigen Builds durchführen.

00:11:14.090 --> 00:11:18.590
Dies ist nicht für einen echten Anwendungsfall gedacht, daher werde ich nicht zu tief darüber nachdenken.

00:11:18.590 --> 00:11:24.440
Ich nutze einfach das kostenlose Kontingent, dann kann ich hier einen meiner angespielten Screenshots auswählen.

00:11:24.440 --> 00:11:29.300
Erstellen oder konfigurieren Sie automatisch einen sich wiederholenden Build-Zeitplan.

00:11:30.300 --> 00:11:30.820
Mhm.

00:11:31.200 --> 00:11:35.880
Nehmen wir an, ich wollte einen automatischen Build durchführen, wenn Ihr Repository aktualisiert wird.

00:11:37.090 --> 00:11:39.300
Dann speichern wir diese Konfiguration.

00:11:45.430 --> 00:11:47.230
Okay, das haben wir.

00:11:50.480 --> 00:11:55.580
Wenn wir nun mit den Einstellungen der Build-Automatisierung fortfahren, können wir sehen, dass wir unter Caching verfügen können

00:11:55.580 --> 00:11:56.660
Nicht zwischenspeichern.

00:11:57.290 --> 00:12:01.280
Cache, nur die Bibliothek oder das gesamte Projekt zwischenspeichern.

00:12:01.430 --> 00:12:09.890
Wenn wir keinen Cache wählen, nimmt jeder Build mehr Zeit in Anspruch, aber es besteht auch eine geringere Fehlerwahrscheinlichkeit

00:12:09.890 --> 00:12:13.230
weil keine älteren Cache-Dateien verwendet werden.

00:12:13.250 --> 00:12:20.750
Wenn ich nur das Bibliotheksverzeichnis zwischenspeichere, ist der erste Build überhaupt nicht von Vorteil, da er zuerst erstellt wird

00:12:20.750 --> 00:12:27.800
muss das Projekt erstellen und zwischenspeichern, aber dann ist jeder Projektaufbau danach schneller als

00:12:27.800 --> 00:12:32.900
das erste, weil es nicht jedes Mal neu erstellt werden muss.

00:12:33.020 --> 00:12:39.260
Eine der Gefahren dabei besteht darin, dass möglicherweise einige alte Dateien verwendet werden und ein Problem auftritt

00:12:39.260 --> 00:12:44.240
schlechtes Ergebnis, aber im Allgemeinen verstehen wir dieses Risiko nur als möglich.

00:12:44.240 --> 00:12:47.660
Und mein Ansatz wäre, das Bibliotheksverzeichnis zwischenzuspeichern.

00:12:47.660 --> 00:12:57.230
Und wenn Sie jemals unsicher sind, warum das Projekt nicht erstellt werden kann oder warum die Tests in Ihrem lokalen Netzwerk erfolgreich sind

00:12:57.230 --> 00:13:01.520
Unity-Editor, aber sie übergeben den Cloud-Build nicht, dann würde ich vielleicht den Cache deaktivieren

00:13:01.520 --> 00:13:02.720
diese Situation.

00:13:03.390 --> 00:13:04.890
Hier verwende ich also einfach Bargeld.

00:13:04.890 --> 00:13:05.640
Bibliothek.

00:13:09.610 --> 00:13:11.500
Dann hier unter Build-Verbrauch.

00:13:11.500 --> 00:13:16.490
Da diese Builds Teil eines potenziellen Pay-as-you-go-Szenarios sind.

00:13:16.510 --> 00:13:18.130
Schauen Sie sich diese Informationen an.

00:13:18.160 --> 00:13:24.250
Sie möchten die Geschwindigkeit, mit der Ihre Builds erstellt werden können, beliebig begrenzen, um etwas reales Leben zu sparen

00:13:24.250 --> 00:13:24.700
Geld.

00:13:24.730 --> 00:13:30.220
Hier in den Build-Konfigurationen können wir sehen, dass es einige Optionen gibt, die wir zum Testen prüfen möchten.

00:13:30.400 --> 00:13:34.210
Wenn ich also hier nach unten scrolle, sehen wir die Build-Ausgabe.

00:13:34.240 --> 00:13:44.080
Wir sehen den Caching-Abschnitt, den wir zuvor gesehen haben, einige spezifische Abhängigkeitseinstellungen, Skript-Hooks und

00:13:44.080 --> 00:13:44.620
mehr.

00:13:45.130 --> 00:13:50.110
Das Wichtigste, was wir hier für unsere Bedürfnisse erreichen wollen, ist die Durchführung der Tests.

00:13:50.110 --> 00:13:54.310
Wir führen die Bearbeitungsmodustests und den Wiedergabemodustest durch.

00:13:54.340 --> 00:14:01.840
Wir möchten den Build als fehlgeschlagen markieren, wenn der Test fehlschlägt, sodass wir nur diesen Code durchsetzen und liefern

00:14:01.840 --> 00:14:03.820
hat alle unsere Tests bestanden.

00:14:04.000 --> 00:14:08.080
Es kann sein, dass Sie einen bekannten Test haben, der fehlschlägt.

00:14:08.080 --> 00:14:11.020
Sie wissen, warum es fehlschlägt, und planen, es zu beheben.

00:14:11.020 --> 00:14:17.590
Sie können sich also dafür entscheiden, dass die Tests fehlschlagen und nicht, dass in diesen Momenten der gesamte Build fehlschlägt.

00:14:17.590 --> 00:14:21.160
Daher ist es wahrscheinlich am besten, wenn Ihre Konfiguration so aussieht.

00:14:21.190 --> 00:14:28.420
Wenn ich jetzt hier auf die Seite „Build-Verlauf“ gehe, kann ich lokal bauen und den Build hier hochladen

00:14:28.420 --> 00:14:36.040
sodass Sie es verteilen oder die kontinuierliche Entwicklung oder Bereitstellung lieber übernehmen können.

00:14:36.550 --> 00:14:42.040
Oder Sie können den Build hier automatisch durchführen, was meiner Meinung nach wahrscheinlich der wahrscheinlichere Anwendungsfall ist.

00:14:42.040 --> 00:14:48.100
Denken Sie also daran, dass ich mich dafür entschieden habe, jedes Mal automatisch zu erstellen, wenn der Hauptzweig aktualisiert wird.

00:14:48.100 --> 00:14:49.840
Das würde also automatisch passieren.

00:14:49.840 --> 00:14:56.530
Ich hätte jeden Abend um 1 Uhr morgens einen automatischen Build durchführen können, unabhängig von Änderungen.

00:14:56.560 --> 00:14:57.640
Das kann man immer machen.

00:14:57.640 --> 00:14:59.410
Machen wir also jetzt mit dem Build weiter.

00:15:19.390 --> 00:15:24.040
Und hier können wir die Ergebnisse eines durchweg erfolgreichen Builds sehen.

00:15:24.070 --> 00:15:27.840
Normalerweise werden Sie jetzt per E-Mail benachrichtigt.

00:15:27.850 --> 00:15:30.610
Hier gibt es Konfigurationseinstellungen, in denen Sie das tun können.

00:15:30.610 --> 00:15:35.890
So können Sie Ihren Tag fortsetzen, ohne wirklich darüber nachdenken zu müssen, was der Build-Server tut.

00:15:35.890 --> 00:15:42.130
Und erst wenn Sie eine E-Mail mit der Bestätigung eines fehlgeschlagenen Tests oder eines fehlgeschlagenen Builds erhalten, reagieren Sie.

00:15:42.880 --> 00:15:48.010
Im Laufe einer Woche würden Sie davon ausgehen, dass der Großteil des eingehenden Datenverkehrs über diese Benachrichtigung erfolgt

00:15:48.010 --> 00:15:52.390
Das System bestätigt, dass ein anderer Build funktioniert hat, und zwar gut.

00:15:54.760 --> 00:15:59.830
Wenn wir also hier nach unten scrollen, können wir einen Überblick über das vollständige Protokoll sehen, was hilfreich sein wird

00:15:59.830 --> 00:16:01.060
wenn Sie Probleme haben.

00:16:01.060 --> 00:16:06.880
Sie müssen das kompakte Protokoll debuggen, das nur die relevantesten Fehler anzeigt.

00:16:07.990 --> 00:16:09.610
Und es gibt auch noch mehr Infos.

00:16:09.610 --> 00:16:15.550
Sie können viele verschiedene Berichte darüber sehen, wie es gelaufen ist, und dann können Sie sehen, welche Tests es gibt

00:16:15.550 --> 00:16:21.520
Tests bestanden, und wenn einige nicht bestanden wurden, können Sie sich damit befassen und herausfinden, wie sie funktionieren.

00:16:21.520 --> 00:16:29.620
Nun, ein Workflow: Wenn Sie eine Benachrichtigung über einen Fehler sehen, würde ich Zeit zum Öffnen einplanen

00:16:29.620 --> 00:16:32.140
dieser spezielle Build des Projekts.

00:16:32.140 --> 00:16:36.330
Wo auch immer in der Versionskontrolle sitzt es und führt vielleicht Code zusammen.

00:16:36.340 --> 00:16:42.370
Ich würde das lokal öffnen und dann den Test innerhalb von Unity ausführen, um das Debuggen durchführen zu können

00:16:42.370 --> 00:16:42.790
ihnen.

00:16:43.270 --> 00:16:49.930
Hier geht es also um die Einrichtung von Unity Cloud Build, um einen Cloud-Build Ihres Projekts zu automatisieren

00:16:49.960 --> 00:16:56.170
nach einem regelmäßigen Zeitplan, der durch bestimmte Ereignisse ausgelöst wird, oder manuell im Dashboard.

00:16:56.170 --> 00:17:01.780
In all diesen Szenarien erhalten wir eine schöne Historie aller unserer Builds für immer in der Vergangenheit.

00:17:01.780 --> 00:17:08.500
Nachdem Sie also dieses automatisierte System eingerichtet haben und hoffentlich größtenteils erfolgreiche Nachrichten auf Sie zukommen,

00:17:08.530 --> 00:17:14.740
gibt Ihnen gerade genug Informationen darüber, wann und wo die Codebasis kaputt ist, damit Sie hineingehen können

00:17:14.740 --> 00:17:16.060
Beheben Sie alle Probleme.

00:17:16.150 --> 00:17:18.310
Das ist alles für die Einrichtung von Unity Cloud Build.

00:17:18.310 --> 00:17:19.060
Danke.