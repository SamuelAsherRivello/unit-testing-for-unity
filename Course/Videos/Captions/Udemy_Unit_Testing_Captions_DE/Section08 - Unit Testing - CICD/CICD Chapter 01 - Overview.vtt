WEBVTT

00:00:00.050 --> 00:00:02.970
Hallo und willkommen bei Continuous Integration mit Unity.

00:00:02.990 --> 00:00:08.600
Dies ist Teil des Lernens über Unit-Tests und die Art und Weise, wie Unit-Tests in Ihre Arbeitsabläufe passen.

00:00:08.630 --> 00:00:14.510
In diesem Abschnitt geben wir eine kurze Einführung in das Thema und schauen uns dann den Unity Cloud-Build an

00:00:14.510 --> 00:00:21.530
als eine Möglichkeit, kontinuierliche Integration und kontinuierliche Bereitstellung für Ihre Unity-Projekte einzurichten.

00:00:21.560 --> 00:00:28.550
Wie wir im Softwareentwicklungslebenszyklus zur Erstellung von Spielen gesehen haben, wird Unity am häufigsten verwendet

00:00:28.550 --> 00:00:31.970
in der Entwicklungs-, Test- und Bereitstellungsphase.

00:00:32.000 --> 00:00:36.650
Wenn wir über die Durchführung von Unit-Tests sprechen, fügen wir dies hier in die Schritte fünf und sechs ein.

00:00:36.650 --> 00:00:41.180
Und wenn wir über Continuous Integration und Continuous Deployment sprechen, dann sind wir wirklich auf der Suche

00:00:41.180 --> 00:00:47.770
Wir haben alle drei Schritte so durchgeführt, dass wir unsere Tests automatisieren und in unsere Produktionsabläufe integrieren konnten.

00:00:47.780 --> 00:00:51.360
Was ist also kontinuierliche Integration und kontinuierliche Bereitstellung?

00:00:51.380 --> 00:00:59.120
CI CD, wie es genannt wird, reduziert Codefehler und -defekte und ist daher für jeden DevOps-Workflow von entscheidender Bedeutung.

00:00:59.450 --> 00:01:06.530
Der Entwicklerbetrieb ist in der Regel die letzte Phase bzw. die letzten Phasen, in denen Ihr Projekt getestet wird.

00:01:06.560 --> 00:01:10.580
Live gehen und neue Updates zum Live-Erlebnis hinzufügen.

00:01:10.610 --> 00:01:17.510
CI CD beinhaltet Praktiken zur häufigen Integration Ihrer Codeänderungen und zur automatischen Integration dieser

00:01:17.510 --> 00:01:20.930
Code erstellen und dann Builds für Ihre Endbenutzer freigeben.

00:01:20.930 --> 00:01:25.730
Wenn Sie also alles zusammen machen, führen Sie den gesamten CI-CD-Prozess durch.

00:01:25.730 --> 00:01:30.590
Sie können aber auch das eine oder andere tun oder sich auf Schlüsselbereiche des Arbeitsablaufs konzentrieren.

00:01:30.590 --> 00:01:30.860
Jetzt.

00:01:30.890 --> 00:01:37.940
CI CD ist nicht nur auf Unity beschränkt, sondern auch auf die Jahre der professionellen Entwicklung und Nutzung von Unity

00:01:37.940 --> 00:01:45.650
In der Branche haben immer mehr Drittanbieter Tools hinzugefügt, die Ihnen eine kontinuierliche Integration ermöglichen

00:01:45.650 --> 00:01:47.960
Kontinuierliche Bereitstellung innerhalb der Einheit.

00:01:47.990 --> 00:01:55.220
Einige der verwendeten Technologien sind GitHub und GitLab, um den Code zu speichern oder den Code dort zu speichern

00:01:55.220 --> 00:02:00.170
Sie haben es online und verfügen über eine Versionskontrolle, aber es gibt auch andere Vorgänge, die Sie dafür verwenden können.

00:02:00.170 --> 00:02:02.480
Aber es gibt auch andere Technologien.

00:02:02.480 --> 00:02:11.480
Und dann Tools wie Circle CI oder Game CI, Code Magic Bamboo, Unity Cloud Build, Jenkins.

00:02:11.510 --> 00:02:17.300
Hierbei handelt es sich um Technologien, die auf der Versionskontrolle Ihres Codes aufbauen und dies ermöglichen

00:02:17.300 --> 00:02:21.590
um die richtigen Auslöser einzubinden, um die richtigen Aktionen für den Workflow auszulösen.

00:02:21.620 --> 00:02:26.690
Das macht Sinn für euch beide, die für dieses Video am relevantesten sind, denn es ist das, was ich verwendet habe

00:02:26.720 --> 00:02:32.600
GitHub soll das Repo hosten, das wir in Unity Cloud erstellen werden, und es als das Tool erstellen, das dies erledigt

00:02:32.600 --> 00:02:33.770
Bauen und Testen.

00:02:33.770 --> 00:02:39.980
Wir haben also erwähnt, dass CI CD die Praktiken der kontinuierlichen Integration und der kontinuierlichen Bereitstellung kombiniert.

00:02:39.980 --> 00:02:44.810
Bei der Integration geht es also darum, Ihren neuen Code in die Produktion zu integrieren.

00:02:44.810 --> 00:02:49.250
Dazu gehört das Testen, Erstellen und Einfügen in den Code.

00:02:49.370 --> 00:02:54.740
Die Continuous Delivery oder auch Continuous Deployment genannt.

00:02:54.740 --> 00:02:58.310
Dadurch wird die Bereitstellung dieses Codes an das Build-Ziel automatisiert.

00:02:58.310 --> 00:02:59.380
Das ist also anders.

00:02:59.390 --> 00:03:02.900
Dabei geht es nicht nur darum, Ihren Code in das Projekt einzufügen, das ist CI.

00:03:03.140 --> 00:03:05.990
Damit legen Sie es in die Hände Ihrer Endbenutzer.

00:03:05.990 --> 00:03:07.490
Das ist also die CD.

00:03:07.550 --> 00:03:13.280
Bis zu diesem Punkt des Kurses haben wir gesehen, dass Unit-Tests unglaublich nützlich sind, um bei der Gestaltung zu helfen

00:03:13.280 --> 00:03:18.290
Wie unser Code reift und wie wir diesen Code pflegen und debuggen.

00:03:18.290 --> 00:03:20.720
Und wir haben die Tests manuell durchgeführt.

00:03:20.720 --> 00:03:26.450
Das bedeutet also, dass wir, obwohl wir einige automatisierte Tests erstellen, entweder die Laufzeitumgebung als solche nutzen

00:03:26.450 --> 00:03:27.950
einen Benutzer und suchen Sie nach Fehlern.

00:03:27.950 --> 00:03:30.980
Auf diese Weise gibt es eine Möglichkeit, manuell zu testen.

00:03:30.980 --> 00:03:36.470
Und außerdem klicken wir manuell auf die Schaltfläche im Unity Test Runner

00:03:36.470 --> 00:03:38.330
Fenster, um diese Tests auszuführen.

00:03:38.330 --> 00:03:40.850
Werfen wir also einen Blick auf einige Aufzählungspunkte für das Handbuch.

00:03:40.880 --> 00:03:46.520
Erstens garantieren wir nicht, dass ein automatisierter Prozess stattfindet, und können daher keine Ergebnisse garantieren.

00:03:46.550 --> 00:03:51.530
Es ist unzuverlässiger und fehleranfälliger als eine automatisierte Alternative.

00:03:51.620 --> 00:03:57.530
Diese sich wiederholenden Aufgaben, sie von Zeit zu Zeit selbst auszuführen, sich daran zu erinnern, nachzuschauen

00:03:57.530 --> 00:03:59.840
Fleißig an den Ergebnissen arbeiten, die alles Energie kosten.

00:03:59.840 --> 00:04:02.120
Und diese sich wiederholenden Aufgaben können langweilig sein.

00:04:02.120 --> 00:04:05.930
Und wenn Dinge langweilig sind, überspringen Entwickler sie möglicherweise oder machen sie seltener.

00:04:05.930 --> 00:04:11.690
Und schließlich: Wenn wir vergessen, zu testen, haben wir keinen guten aktuellen Status darüber, wie unser Projekt ist

00:04:11.690 --> 00:04:12.110
tun.

00:04:12.110 --> 00:04:18.350
Wenn wir jedoch alle bewährten Vorgehensweisen anwenden, die wir bei der Einrichtung dieser Tests haben, können wir sie auch automatisieren

00:04:18.350 --> 00:04:24.140
Die Ausführung dieser Aufgaben und sogar die Bereitstellung unseres Codes an unsere Endbenutzer können wir nutzen

00:04:24.140 --> 00:04:25.430
von mehr Vorteilen.

00:04:25.610 --> 00:04:29.150
Wir haben hier beispielsweise einen zuverlässigen repetitiven Prozess.

00:04:29.150 --> 00:04:35.990
Wenn wir über ein automatisches CI-CD-Setup verfügen, erhalten wir schnelles und relevantes Feedback, aus dem wir auswählen können, und wir werden es sehen

00:04:36.020 --> 00:04:37.670
was jeden Build auslöst.

00:04:37.670 --> 00:04:43.670
Aber wenn wir es für jeden Commit zu einem Git-Repo tun wollen, dann jedes Mal, wenn wir einen Commit zu einem Git-Repo machen,

00:04:43.700 --> 00:04:48.620
Der Test wird ausgeführt, der Build wird überprüft und wir werden darüber benachrichtigt.

00:04:48.620 --> 00:04:51.920
Sie können dies also je nach Bedarf mehr oder weniger häufig tun.

00:04:51.950 --> 00:04:54.740
Es gibt Ihnen mehr Vertrauen in Ihren Code und verringert das Risiko.

00:04:54.740 --> 00:04:57.980
Wenn Sie also Systeme umgestalten oder neue Funktionen hinzufügen.

00:04:57.980 --> 00:04:59.780
Und schließlich, indem man eines hat.

00:05:00.340 --> 00:05:04.630
Builds, die für alle verfügbar sind, und die dann darüber hinaus automatisiert werden.

00:05:04.630 --> 00:05:10.870
Wir haben die Grundlage dieses Vertrauens und der Sicherheit in unserer Codebasis, die es uns einfacher macht

00:05:10.870 --> 00:05:12.360
mit anderen zusammenarbeiten.

00:05:12.370 --> 00:05:18.340
Wir werden in der Lage sein zu wissen, wer mit seinen Beiträgen das Projekt weiterhin stabil hält, was unglaublich ist

00:05:18.340 --> 00:05:22.060
effektive Informationen, die Sie haben sollten, wenn Sie in einem Team arbeiten.

00:05:22.060 --> 00:05:29.800
Wenn wir hier also einen Schritt zurücktreten und die kontinuierliche Integration visuell betrachten, handelt es sich um die Zusammenführung des Codes

00:05:29.800 --> 00:05:31.240
Code wird erstellt.

00:05:31.270 --> 00:05:36.010
Im Continuous Delivery prüfen wir dann, ob unsere Tests bestanden wurden.

00:05:36.040 --> 00:05:42.910
Dann verschieben wir es in eine Staging-Umgebung, die noch nicht für die Endbenutzer bereit ist.

00:05:42.910 --> 00:05:44.020
aber fast da.

00:05:44.020 --> 00:05:48.400
Und wir stellen sicher, dass der Prozess wirklich gut funktioniert, bevor wir ihn den Endbenutzern zur Verfügung stellen.

00:05:48.430 --> 00:05:55.930
Jetzt können Sie automatisierte Tests durchführen und diese Testergebnisse automatisch bereitstellen, unabhängig davon, ob dies der Fall ist

00:05:55.930 --> 00:06:01.750
Jeder bestimmte Ablauf, wie Sie Ihren Code in der Versionskontrolle programmieren.

00:06:01.750 --> 00:06:08.920
Aber um hier nur über die mögliche Ausrichtung und Verbindungen zu sprechen, zeigt dies, was anders sein könnte

00:06:08.920 --> 00:06:10.690
Commits für verschiedene Zweige.

00:06:10.690 --> 00:06:16.240
In der Versionskontrolle verwende ich Git, also tun wir einfach so, als würde ich hier Git verwenden und einen Main oder einen Master haben

00:06:16.240 --> 00:06:17.110
Filiale dort.

00:06:17.110 --> 00:06:21.580
Und dann erledige ich meine gesamte Entwicklungsarbeit in einem zweiten Entwicklerzweig.

00:06:21.580 --> 00:06:28.420
Und jedes Mal, wenn ich eine neue Funktion erstellen möchte, verzweige ich die Entwicklung und gebe ihr einen Namen

00:06:28.420 --> 00:06:35.420
Nehmen wir an, Funktion, Hauptmenü, Schnelltaste, und dann würde ich das Hauptmenü hinzufügen und beenden

00:06:35.440 --> 00:06:41.770
Klicken Sie auf die Schaltfläche und stellen Sie sicher, dass dieser Zweig nur die Änderungen betrifft, die für diese bestimmte Funktion erforderlich sind.

00:06:41.890 --> 00:06:45.310
Nehmen wir also an, ich hätte dort unten Feature Nummer eins.

00:06:45.310 --> 00:06:46.510
Ich hatte es fertig.

00:06:46.540 --> 00:06:52.570
Hier sind einige potenzielle Orte, an denen wir den automatisierten CI-CD-Prozess ausführen könnten.

00:06:52.570 --> 00:06:58.330
Beginnen Sie zunächst einmal ganz unten, jedes Mal, wenn ich mich auf meinen Entwicklungs-Feature-Zweig verpflichte,

00:06:58.330 --> 00:07:04.450
Ich könnte einen automatisierten Build starten, um sicherzustellen, dass alle Tests ausgeführt werden und alles funktioniert

00:07:04.450 --> 00:07:05.560
besonders gut.

00:07:05.560 --> 00:07:06.730
Das ist Nummer eins.

00:07:06.760 --> 00:07:13.210
Dann könnte ich das in Schritt Nummer zwei auf eine größere Funktion zurückführen und es dann wieder damit zusammenführen

00:07:13.210 --> 00:07:18.940
Im Entwicklungszweig möchte ich einen automatisierten Build-Test durchführen, der möglicherweise alle unterschiedlichen Ziele erreicht

00:07:18.940 --> 00:07:19.750
Plattformen.

00:07:19.750 --> 00:07:26.290
Das bedeutet, dass der automatisierte Test im Unity-Editor in iOS, in Android, auf dem Gerät ausgeführt werden kann.

00:07:26.290 --> 00:07:27.040
nicht auf dem Gerät.

00:07:27.040 --> 00:07:28.780
Da hast du viele verschiedene Möglichkeiten.

00:07:29.500 --> 00:07:35.350
Wenn diese Entwicklung abgeschlossen ist, ist der Zweig bereit und verfügt über alle neuesten Funktionen

00:07:35.350 --> 00:07:38.980
Wir wollen testen, wie das im Master-Zweig funktionieren würde.

00:07:38.980 --> 00:07:46.480
Wir haben dort Nummer drei, bevor ich sie in die oberste Zeile begebe, dort in die Hauptzeile oder in die

00:07:46.480 --> 00:07:53.620
Master-Zweig, was ich tun könnte, wäre, den Hauptzweig wieder zusammenzuführen, um ihn zu entwickeln, und dann sicherzustellen, dass

00:07:53.620 --> 00:07:59.320
Im Entwicklungszweig funktioniert alles gut, und nur wenn das gut funktioniert, verpflichte ich mich dazu

00:07:59.320 --> 00:08:00.520
der Haupt- oder Hauptzweig.

00:08:01.220 --> 00:08:07.160
Sie sehen also, dass Sie diese bestimmten Schritte nicht in einer bestimmten Reihenfolge ausführen müssen, dies aber möglich ist

00:08:07.160 --> 00:08:11.440
Lassen Sie sich in diesem Arbeitsablauf so viel oder so wenig Testhilfe geben, wie Sie möchten.

00:08:11.450 --> 00:08:15.440
Noch eine allgemeine Zusammenfassung, um diese Informationen auf verschiedene Arten zu betrachten.

00:08:15.440 --> 00:08:21.350
Dies bezieht sich hier speziell auf die Unity Cloud-Build-Anweisungen, aber ich denke, dass die angegebenen Schritte auf hohem Niveau sind

00:08:21.350 --> 00:08:21.850
genug.

00:08:21.860 --> 00:08:24.290
Das gilt auch für die meisten Konkurrenten.

00:08:24.320 --> 00:08:27.830
Als Erstes möchten Sie Ihre Build-Automatisierung einrichten.

00:08:27.830 --> 00:08:32.810
Sie verweisen also die Build-Automatisierung auf die Versionskontrolle, in der sich Ihr Code befindet.

00:08:32.810 --> 00:08:38.090
In meinem Fall würde das bedeuten, den Unity Cloud-Build zu verbinden und ihn mit GitHub zu verbinden, wo ich einen habe

00:08:38.090 --> 00:08:39.440
Repo für das Projekt.

00:08:39.470 --> 00:08:42.080
Dann entscheiden Sie, welchen Auslöser Sie haben möchten.

00:08:42.110 --> 00:08:49.490
Dabei handelt es sich möglicherweise um die Durchführung einer Änderung Ihres Projekts in einem bestimmten Zweig oder die Zusammenführung von einem Zweig

00:08:49.490 --> 00:08:53.240
in einen anderen Zweig verschieben, oder Sie können andere Regeln einrichten, die Sie möchten.

00:08:53.270 --> 00:08:59.990
Die Idee hier ist, es nicht manuell auszuführen, sondern stattdessen einen Teil Ihres Entwicklungsprozesses zu übernehmen

00:08:59.990 --> 00:09:01.610
automatisch auslösen.

00:09:01.610 --> 00:09:03.140
Das wäre hier also die Nummer zwei.

00:09:03.170 --> 00:09:09.260
Dann Nummer drei bei einem Auslöser, wenn Sie den Code freigeben, wenn Sie den Code festschreiben, wenn Sie ihn zusammenführen

00:09:09.260 --> 00:09:13.100
der Code, was auch immer Sie entscheiden, der Build wird automatisch erstellt.

00:09:13.100 --> 00:09:16.700
Und in Schritt drei würde auch der Test durchgeführt.

00:09:16.700 --> 00:09:21.980
Und schließlich wird das Team benachrichtigt, wenn das Projekt bereitgestellt wurde.

00:09:21.980 --> 00:09:29.660
In diesem Beispielablauf haben wir gerade gesehen, dass jeder, der möchte, in jedem dieser Momente abonnieren kann

00:09:29.660 --> 00:09:34.490
eine E-Mail, die besagt, dass dieser Funktionszweig mit diesem zusammengeführt wurde.

00:09:34.490 --> 00:09:39.020
Das ist nicht wirklich mein Fachgebiet, daher werde ich dort keine Benachrichtigungen anhören.

00:09:39.020 --> 00:09:46.310
Aber vielleicht möchten alle Entwickler über das System über alles, was damit zusammengeführt wird, benachrichtigt werden

00:09:46.310 --> 00:09:52.820
Letzte Haupt- oder Hauptverzweigung und die Anwesenheit dieses CI-CD-Systems bei diesen wichtigen Schritten wird dies bestätigen

00:09:52.820 --> 00:09:58.700
dass Ihre Unit-Tests alle erfolgreich sind, dass keiner von ihnen fehlschlägt und dass alles mit Erfolg funktioniert, dass Ihr Projekt

00:09:58.700 --> 00:09:59.510
baut.

00:09:59.510 --> 00:10:04.940
Sie können sich vorstellen, dass es Szenarien gibt, in denen alle Tests bestanden würden, der Build dies jedoch möglicherweise nicht tut

00:10:04.940 --> 00:10:05.510
arbeiten.

00:10:05.510 --> 00:10:12.080
Möglicherweise ist ein Code oder ein Asset defekt, für das keine Testabdeckung besteht

00:10:12.080 --> 00:10:12.530
noch.

00:10:12.530 --> 00:10:18.470
Und allein die Tatsache, dass das Projekt während des Build-Prozesses einen Fehler ausgibt, ist ein sehr solides Stück

00:10:18.470 --> 00:10:19.910
Debugging-Informationen zu haben.

00:10:19.940 --> 00:10:25.370
Außerdem kennen Sie die Uhrzeit, das Datum und den Zweig, der das Problem verursacht hat, sodass Sie leichter erkennen können, wo das Problem liegt

00:10:25.370 --> 00:10:27.320
wo Sie suchen müssen, um das Problem zu beheben.

00:10:27.320 --> 00:10:29.900
Und dann würde das Projekt endlich erfolgreich umgesetzt.

00:10:29.900 --> 00:10:35.870
Wir haben also gesehen, dass die CI-CD wichtig ist, damit wir wissen können, dass das Projekt erstellt wurde, aber das ist es

00:10:35.870 --> 00:10:38.900
besonders wirkungsvoll in Kombination mit Unit-Tests.

00:10:38.900 --> 00:10:44.570
Es wurde also nicht nur gebaut, sondern auch mit allen bestandenen Tests und einer Zusammenfassung der Unit-Tests, denn das ist so

00:10:44.570 --> 00:10:46.160
das Thema des gesamten Kurses.

00:10:46.190 --> 00:10:52.370
Wenn Ihr Projekt mit mehr Skripten, Klassen und Methoden wächst, wird es schwieriger, dies sicherzustellen

00:10:52.370 --> 00:10:56.360
Eine Änderung an einem Teil Ihres Codes führt nicht zu Problemen an anderer Stelle.

00:10:56.390 --> 00:11:00.950
Mithilfe automatisierter Tests können Sie überprüfen, ob Ihr Code wie erwartet funktioniert.

00:11:00.980 --> 00:11:07.130
Durch Tests sparen Sie Zeit, da Sie sofort bei ihrem Auftreten herausfinden, wann und wo Probleme auftreten.

00:11:07.130 --> 00:11:14.240
Anstatt darauf zu warten, dass Benutzer manuelle Tests durchführen, wird das Testen umso teurer, je später Sie es finden

00:11:14.240 --> 00:11:14.930
diese Käfer.

00:11:14.930 --> 00:11:16.460
Es ist also ziemlich gut, das System zu haben.

00:11:16.460 --> 00:11:21.400
Und wir erinnern uns, dass die 8020-Regel etwas völlig Kontraintuitives ist.

00:11:21.410 --> 00:11:29.300
Es ist so, dass wir 80 % der Zeit daran arbeiten, Fehler zu beheben und unsere bestehende Codebasis zu pflegen

00:11:29.300 --> 00:11:33.740
In 20 % der Fälle fügen wir neue Features und neue Funktionen hinzu.

00:11:33.770 --> 00:11:38.900
Wir denken oft, dass wir die meiste Zeit unseres Tages damit verbringen, neue Funktionen hinzuzufügen, also wollen wir genau diese ansprechen

00:11:38.900 --> 00:11:40.370
unsere geistige Energie.

00:11:40.370 --> 00:11:49.250
Aus der Forschung geht jedoch hervor, dass gute Testpraktiken für Testeinheiten, gute automatisierte Tests,

00:11:49.280 --> 00:11:56.210
Mit einem CI-CD-System hat es enorme Auswirkungen und verbessert die Effizienz Ihrer 80 %.

00:11:56.210 --> 00:12:01.550
Es geht also darum, herauszufinden, wo Sie mit Änderungen an Ihrem Arbeitsablauf die größte Wirkung erzielen können.

00:12:01.550 --> 00:12:09.190
Bevor wir uns also ein Beispiel für die Erstellung der ci-CD selbst ansehen, wollen wir hier noch einmal den einfachsten Klassentyp zusammenfassen.

00:12:09.200 --> 00:12:14.180
Stellen Sie sich vor, wir hätten ein mathematisches System, das Additionen und Subtraktionen durchführt.

00:12:16.120 --> 00:12:23.620
Dann haben wir hier einen Unit-Test, bei dem es sich um eine separate Datei und eine separate Klasse handelt, die das Testattribut verwendet

00:12:23.620 --> 00:12:24.070
Hier.

00:12:24.100 --> 00:12:30.640
Dadurch wird eine Instanz der zuletzt gesehenen Klasse erfasst und erstellt, um eine bestimmte Einheit oder Methode zu testen

00:12:30.640 --> 00:12:38.530
davon, seien Sie vorsichtig bei unbeabsichtigten Eingaben und unbeabsichtigten Ausgaben in dieses System und überprüfen Sie, ob die

00:12:38.530 --> 00:12:40.810
Das behauptete Ergebnis ist dasjenige, das wir erhalten.

00:12:40.840 --> 00:12:45.550
Nun, im Fall von Unity Cloud Build, wenn Sie solche Tests in Ihrem Projekt eingerichtet haben und

00:12:45.550 --> 00:12:52.120
Wenn Sie das Projekt selbst im CI-CD-System konfiguriert haben, können Sie davon ausgehen, dass dies manuell möglich ist

00:12:52.120 --> 00:12:57.700
Oder führen Sie diese Builds automatisch aus, indem Sie in diesem Fall Unity Cloud Build besuchen, das webbasiert ist

00:12:57.730 --> 00:12:58.420
Werkzeug.

00:12:58.450 --> 00:13:01.750
Sehen Sie, dass der Build für die Zielplattform erstellt wurde?

00:13:01.750 --> 00:13:04.780
In diesem Fall testen wir den Windows-Desktop 64-Bit.

00:13:04.810 --> 00:13:09.850
Wir sehen, dass alle Tests im Bearbeitungsmodus und alle Tests im Wiedergabemodus erfolgreich sind.

00:13:09.880 --> 00:13:14.320
Alles geschieht automatisch für Sie, basierend auf dem von Ihnen festgelegten Auslöser.

00:13:14.320 --> 00:13:16.530
Das ist also fantastisch nützlich.

00:13:16.540 --> 00:13:20.230
Dann können Interessierte im Team eine E-Mail erhalten.

00:13:20.230 --> 00:13:26.080
Dort gibt es einen kleinen Ausschnitt aus einer E-Mail, der nur zeigt, dass jemand aus dem Team einen Build erstellt hat.

00:13:26.110 --> 00:13:30.610
Der Build wurde ausgelöst, weil dieser Zweig mit diesem Zweig oder was auch immer zusammengeführt wurde.

00:13:30.640 --> 00:13:32.340
Und hier sind die Ergebnisse.

00:13:32.350 --> 00:13:35.820
Sie können es Ihnen ermöglichen, zu einer Webseite durchzuklicken oder sie in der E-Mail zusammenzufassen.

00:13:35.830 --> 00:13:42.940
Jetzt dieses CI-CD-Thema sowie die Grundlagen des Unit-Tests, deren Grundlagen und fortgeschrittene Themen

00:13:42.940 --> 00:13:48.880
Darüber hinaus sprechen wir über reine Funktionen und führen individuelle Workshops zu einigen fortgeschrittenen Themen durch

00:13:48.880 --> 00:13:51.310
wie Szenen, Fertigteile und anpassbare Elemente.

00:13:51.310 --> 00:13:55.450
Das alles ist Teil dieses Kurses. Sie können sich den Link unten ansehen.

00:13:55.450 --> 00:13:59.920
Wenn Sie noch nicht im Kurs sind, schauen Sie sich die Trailer an.

00:13:59.920 --> 00:14:02.800
Melden Sie sich für den Kurs an und beginnen Sie noch heute mit dem Lernen.

00:14:02.800 --> 00:14:07.330
Und wenn Sie bereits Kursteilnehmer sind und dieses Video im Kurs selbst finden,

00:14:07.330 --> 00:14:11.260
Vielen Dank, dass Sie Student sind, und ich freue mich darauf, Sie auch in zukünftigen Kursen zu sehen.

00:14:11.260 --> 00:14:17.620
Alles in allem konnten wir also feststellen, dass Unit-Tests selbst eine enorme Herausforderung darstellen

00:14:17.620 --> 00:14:24.550
leistungsstarkes Tool, das Ihnen hilft, die Entwicklungsbereiche, in die Sie investieren, effizienter zu gestalten

00:14:24.550 --> 00:14:25.850
Jede Menge Zeit.

00:14:25.870 --> 00:14:33.160
Denken Sie daran, dass 80 % des gesamten Entwicklungsaufwands unserer Meinung nach auf die Wartung und Fehlerbehebung bestehender Systeme entfällt.

00:14:33.160 --> 00:14:39.040
Da wir also erkennen, wie groß der Bereich unseres Lebens ist, ist es großartig, dass wir über solche Tools verfügen

00:14:39.040 --> 00:14:46.960
Unity-Unit-Tests und CI-CD mit Tools wie Unity Cloud Build oder anderen Community-Tools, um dies zu können

00:14:46.960 --> 00:14:53.890
Geben Sie uns all diese Vorteile und automatisieren Sie die Bereitstellung dieser Testergebnisse, der Build-Ergebnisse usw

00:14:53.890 --> 00:14:56.200
die Lieferung der Bauten selbst.