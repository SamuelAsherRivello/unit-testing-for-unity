WEBVTT

00:00.050 --> 00:02.970
Hallo und willkommen zur kontinuierlichen Integration mit unity.

00:02.990 --> 00:08.600
Dies ist ein Teil des Lernens über Unit-Tests und die Möglichkeiten, wie Unit-Tests in Ihre Arbeitsabläufe passen können.

00:08.630 --> 00:14.510
In diesem Abschnitt werden wir eine kurze Einführung in das Thema geben, und dann schauen wir uns den Unity Cloud Build an

00:14.510 --> 00:21.530
als eine Möglichkeit, wie man kontinuierliche Integration und kontinuierliches Deployment für seine Unity-Projekte einrichten kann.

00:21.560 --> 00:28.550
Wie wir gesehen haben, wird Unity im Lebenszyklus der Softwareentwicklung für die Erstellung von Spielen am häufigsten verwendet

00:28.550 --> 00:31.970
in der Entwicklungs-, Test- und Einsatzphase.

00:32.000 --> 00:36.650
Wenn wir über die Durchführung von Unit-Tests sprechen, fügen wir das hier zu den Schritten fünf und sechs hinzu.

00:36.650 --> 00:41.180
Und wenn wir über kontinuierliche Integration und kontinuierliches Deployment sprechen, geht es wirklich um

00:41.180 --> 00:47.770
alle drei Schritte, um unsere Tests zu automatisieren und in unsere Produktionsabläufe zu integrieren.

00:47.780 --> 00:51.360
Was sind also kontinuierliche Integration und kontinuierliche Bereitstellung?

00:51.380 --> 00:59.120
CI CD, wie es genannt wird, reduziert Codefehler und Defekte und ist daher für jeden DevOps-Workflow von entscheidender Bedeutung.

00:59.450 --> 01:06.530
Der Entwicklerbetrieb ist in der Regel die letzte Stufe oder Stufen, in denen Ihr Projekt getestet wird,

01:06.560 --> 01:10.580
live geschaltet wird und neue Aktualisierungen zum Live-Erlebnis hinzugefügt werden.

01:10.610 --> 01:17.510
CI CD beinhaltet Praktiken zur häufigen Integration von Code-Änderungen, die automatische Integration von

01:17.510 --> 01:20.930
Code zu integrieren und dann Builds für Ihre Endbenutzer freizugeben.

01:20.930 --> 01:25.730
Wenn Sie das alles zusammen machen, führen Sie den kompletten CI-CD-Prozess durch.

01:25.730 --> 01:30.590
Sie können aber auch das eine oder das andere tun oder sich auf Schlüsselbereiche des Workflows konzentrieren.

01:30.590 --> 01:30.860
Jetzt.

01:30.890 --> 01:37.940
CI CD ist nicht einzigartig für Unity, und während der Jahre der professionellen Entwicklung von Unity und der Verwendung von

01:37.940 --> 01:45.650
in der Industrie, haben mehr und mehr Drittanbieter Tools hinzugefügt, die eine kontinuierliche Integration und

01:45.650 --> 01:47.960
kontinuierliche Bereitstellung innerhalb von Unity.

01:47.990 --> 01:55.220
Einige der Technologien, die verwendet werden, sind GitHub und GitLab, um den Code zu halten oder um den Code zu speichern, wo

01:55.220 --> 02:00.170
und Versionskontrolle, aber es gibt auch andere Verfahren, die man dafür verwenden kann.

02:00.170 --> 02:02.480
Aber es gibt auch noch andere Technologien.

02:02.480 --> 02:11.480
Und dann Tools wie Circle CI oder Game CI, Code Magic Bamboo, Unity Cloud Build, Jenkins.

02:11.510 --> 02:17.300
Das sind Technologien, die auf der Versionskontrolle deines Codes aufbauen, und die in der Lage sind

02:17.300 --> 02:21.590
die richtigen Auslöser einzubinden, um die richtigen Aktionen für den Workflow auszulösen.

02:21.620 --> 02:26.690
Das macht Sinn für euch zwei, die für dieses Video am relevantesten sind, weil es das ist, was ich verwendet habe, ist

02:26.720 --> 02:32.600
GitHub, um das Repo zu hosten, das wir in Unity Cloud bauen werden, als das Tool, das die

02:32.600 --> 02:33.770
bauen und testen wird.

02:33.770 --> 02:39.980
Wir haben bereits erwähnt, dass CI CD die Praktiken der kontinuierlichen Integration und der kontinuierlichen Bereitstellung kombiniert.

02:39.980 --> 02:44.810
Bei der Integration geht es also darum, den neuen Code in die Produktion zu bringen.

02:44.810 --> 02:49.250
Dazu gehört, dass man ihn testet, baut und in den Code einbringt.

02:49.370 --> 02:54.740
Die kontinuierliche Bereitstellung oder das kontinuierliche Deployment, wie es auch genannt wird.

02:54.740 --> 02:58.310
Dies automatisiert die Bereitstellung des Codes an das Build-Ziel.

02:58.310 --> 02:59.380
Das ist also anders.

02:59.390 --> 03:02.900
Das ist nicht nur das Einfügen des Codes in das Projekt, das ist CI.

03:03.140 --> 03:05.990
Es geht darum, ihn in die Hände der Endbenutzer zu geben.

03:05.990 --> 03:07.490
Das ist also die CD.

03:07.550 --> 03:13.280
Bis zu diesem Punkt des Kurses haben wir gesehen, dass Unit-Tests unglaublich nützlich sind, um die

03:13.280 --> 03:18.290
wie unser Code reift und wie wir diesen Code pflegen und debuggen.

03:18.290 --> 03:20.720
Und wir haben die Tests manuell durchgeführt.

03:20.720 --> 03:26.450
Das heißt, obwohl wir einige automatisierte Tests erstellen, spielen wir entweder die Laufzeit-Erfahrung als

03:26.450 --> 03:27.950
als Benutzer und suchen nach Fehlern.

03:27.950 --> 03:30.980
Auf diese Weise gibt es eine Möglichkeit, manuell zu testen.

03:30.980 --> 03:36.470
Und die andere Sache, die wir tun, ist, dass wir manuell auf die Schaltfläche im Unity Test Runner klicken

03:36.470 --> 03:38.330
Fenster, um diese Tests auszuführen.

03:38.330 --> 03:40.850
Schauen wir uns also einige Aufzählungspunkte für die manuelle Ausführung an.

03:40.880 --> 03:46.520
Zunächst einmal garantieren wir nicht, dass ein automatisierter Prozess stattfindet, also können wir auch keine Ergebnisse garantieren.

03:46.550 --> 03:51.530
Es ist unzuverlässiger und fehleranfälliger als eine automatisierte Alternative.

03:51.620 --> 03