WEBVTT

00:00.530 --> 00:02.180
Die Einheitsstruktur.

00:02.210 --> 00:05.090
Dieser Kurs ist in verschiedene Lernabschnitte unterteilt.

00:05.120 --> 00:10.670
In der Theorie gehen wir einen Schritt zurück und schauen uns einige der Grundlagen von Software und Spieldesign an.

00:10.670 --> 00:16.970
Wenn wir über den Editor sprechen, schauen wir uns Unity an, das Editor-Tool selbst, das wir als Entwickler

00:16.970 --> 00:19.070
öffnen und als unsere Software benutzen.

00:19.070 --> 00:24.350
Und in den Code-Abschnitten werden wir uns die Programmiersprache C sharp ansehen und wie sie sich auf Unity-Spiele anwenden lässt

00:24.350 --> 00:25.100
Entwicklung.

00:25.160 --> 00:26.840
Fangen wir mit der Theorie an.

00:26.870 --> 00:34.100
Der Lebenszyklus der Softwareentwicklung umfasst viele Phasen, die uns von einer Idee bis zum fertigen Produkt führen.

00:34.100 --> 00:40.400
Dazu gehören die Anforderungsanalyse, die Planung des Projekts, der Entwurf des Konzepts und vieles mehr

00:40.400 --> 00:43.640
zur Entwicklung, zum Testen und zum Einsatz.

00:43.640 --> 00:51.080
Obwohl Unity ein mächtiges Werkzeug für viele dieser Phasen ist, konzentrieren wir uns auf die Verwendung von Unity in der Entwicklung,

00:51.110 --> 00:55.280
Test- und Bereitstellungsphasen innerhalb der Welt von Unity.

00:55.280 --> 00:57.590
Die Konzepte sind wie folgt aufgebaut.

00:57.590 --> 01:01.040
Innerhalb eines Projekts hat man eine oder mehrere Szenen.

01:01.490 --> 01:06.500
Innerhalb jeder Szene gibt es Spielobjekte mit angehängten Komponenten.

01:06.500 --> 01:14.030
Diese Komponenten können Dinge wie den Mesh Renderer, den Collider Audio Rigid Body für die Physik behandeln,

01:14.030 --> 01:17.450
Partikelsysteme, und natürlich benutzerdefinierte Skripte.

01:17.450 --> 01:21.920
Das Spielobjekt ist ein grundlegendes Teil des Puzzles in Unity.

01:21.920 --> 01:28.880
Das ist alles, was visuell und nicht-visuell ist, woran wir unsere benutzerdefinierten Komponenten und Unitys

01:28.880 --> 01:30.380
eingebauten Komponenten.

01:30.410 --> 01:33.650
Sehen Sie sich als Beispiel diesen Screenshot aus dem Spiel an.

01:34.230 --> 01:39.780
Hier haben wir eine Spielszene, die in mehrere verschiedene Prefabs aufgeteilt ist.

01:39.780 --> 01:45.990
Man kann sich eine Prefab als ein Spielobjekt mit einer oder mehreren Komponenten vorstellen, die zur Wiederverwendung gespeichert werden.

01:45.990 --> 01:51.450
Hier sehen wir zum Beispiel mehrere Münzen, jede mit einer eigenen Position und Drehung.

01:51.450 --> 01:58.230
Die Münze hat aber auch einige gemeinsame Merkmale, vielleicht die Funktionalität, die Kollisionserkennung,

01:58.500 --> 02:05.520
wie sie gerendert wird, und diese gemeinsamen Eigenschaften sind in der Vorabversion enthalten, wenn man sein Projekt organisiert und

02:05.520 --> 02:07.260
über die Struktur entscheiden.

02:07.890 --> 02:14.010
Teams wählen oft zwischen Szenen und vorgefertigten Elementen für die Organisation auf hoher Ebene.

02:14.040 --> 02:20.010
GameObject ist das grundlegende Konzept innerhalb jeder Szene, und obwohl es viele verschiedene Komponenten geben kann

02:20.040 --> 02:23.940
eines Spielobjekts gibt, ist die Transformationskomponente immer vorhanden.

02:23.970 --> 02:30.180
Die Transformationskomponente speichert und manipuliert Aspekte, wie das Objekt in der Welt sitzt.

02:30.180 --> 02:34.650
Ob das Objekt Grafiken hat oder nicht, es hat ein Transformationsobjekt.

02:34.680 --> 02:38.580
Der Code, den wir verwenden, ist die Sprache der Anweisungen für die Software.

02:38.580 --> 02:43.350
Die historischen Wurzeln von Unity beziehen sich auf das Mono-Projekt.

02:43.380 --> 02:45.600
Dies war eine Open-Source-Version des.

02:45.900 --> 02:47.130
Net-Frameworks.

02:47.160 --> 02:53.760
Du wirst den Begriff Mono immer noch ein wenig in der Unity-API sehen, einschließlich des Mono-Verhaltens.

02:53.760 --> 02:59.610
Während Unity in der Vergangenheit mehrere verschiedene Programmiersprachen angeboten hat, ist C sharp die einzige Programmiersprache.

02:59.610 --> 03:03.810
Wahl, und obwohl Unity C-Sharp unterstützt, ist es nicht abhängig von der.

03:04.020 --> 03:11.250
Net Framework abhängt, ist Unity's Version von C sharp ziemlich robust und bietet eine Menge verschiedener Daten, Konzepte

03:11.250 --> 03:12.270
und Strukturen.

03:12.270 --> 03:20.130
Die wichtigsten Namespaces, die wir in Unity verwenden, sind die Unity Engine für den Laufzeitcode, der Unity Editor für

03:20.130 --> 03:27.630
Editierzeit-Code, und der System-Namensraum, der viele verschiedene Funktionen beinhaltet, die nicht spezifisch

03:27.630 --> 03:32.140
mit Unity zu tun hat, aber sehr hilfreich ist, einschließlich Mathematik, Bibliotheken, etcetera.

03:32.160 --> 03:36.540
Hier ist ein Beispiel für ein benutzerdefiniertes Skript in C sharp zur Verwendung in Unity.

03:36.570 --> 03:39.150
Von oben nach unten sehen wir die using-Anweisungen.

03:39.150 --> 03:43.920
Diese bringen Namespaces ein, die wir in dieser speziellen Klassendatei verwenden müssen.

03:44.400 --> 03:50.850
Dann sehen wir einen Namespace, der uns hilft zu deklarieren und zu organisieren, wo dieser Code in unserem Projekt sitzt.

03:50.880 --> 03:55.710
Als nächstes deklarieren wir die öffentliche Klasse oder Schnittstelle, die diesen Typ definiert.

03:55.710 --> 03:59.070
Beachten Sie, dass wir hier Monobehaviour erweitern oder erben.

03:59.100 --> 04:04.550
Von diesem Bereich aus können wir nun auch auf die gesamte Funktionalität von Monobehaviour zugreifen.

04:04.560 --> 04:07.230
Hier sind einige spezifische Unity-Funktionen zu erwähnen.

04:07.260 --> 04:11.400
Die Möglichkeit, Felder mit dem Attribut serialized field zu serialisieren.

04:11.400 --> 04:18.240
Dies kann einen öffentlichen oder privaten Wert nehmen und ihn im Unity Inspector darstellen, so dass während

04:18.240 --> 04:21.470
das Live-Spiel läuft, können wir diese Einstellung ändern.

04:21.480 --> 04:24.630
Das hilft beim Prototyping und Gameplay-Design.

04:24.630 --> 04:28.350
Das Verhalten des Monitors beinhaltet viele Schlüsselereignisse, auf die man zurückgreifen kann.

04:28.380 --> 04:35.790
Indem du eine deiner Methoden awake nennst, fängst du das Ereignis ein, wenn das Objekt zum ersten Mal in der

04:35.790 --> 04:36.360
Welt.

04:36.360 --> 04:37.950
Dies geschieht nur einmal.

04:38.340 --> 04:40.830
Danach wird hier die Startmethode aufgerufen.

04:40.830 --> 04:46.140
Es ist gut, eventuelle Abhängigkeiten mit anderen Objekten herzustellen, und dann wird die update-Methode jedes Mal aufgerufen

04:46.140 --> 04:47.400
Frame danach aufgerufen.

04:47.400 --> 04:52.170
Dies ist ein großartiger Ort, um Eingabelogik und die Aktualisierung von Grafiken durchzuführen.

04:52.680 --> 04:58.590
Dies sind nur einige der Ereignisse oder Methodenüberschreibungen, die Sie nutzen können, aber sicherlich diese

04:58.590 --> 05:00.000
sind einige der wichtigsten.

05:00.030 --> 05:00.870
Danke!
