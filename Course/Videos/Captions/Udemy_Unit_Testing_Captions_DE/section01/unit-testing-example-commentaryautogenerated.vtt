WEBVTT

00:02.920 --> 00:07.120
Gehen wir also einen Schritt zurück und sehen wir uns kurz ein grundlegendes Beispiel an.

00:07.120 --> 00:09.100
Dies ist also kein Einheitstest.

00:09.100 --> 00:16.270
Und dies stellt eine Einheitsklasse dar, etwas, das ich als Produktionscode betrachten würde, also nicht als Testcode.

00:16.270 --> 00:19.990
Und dies wäre in Ihrem vielleicht ein Mathematikspiel.

00:19.990 --> 00:23.890
Es ist eine sehr einfache Mathe-System-Klasse, die zwei Dinge tut.

00:23.890 --> 00:26.140
Sie kann addieren und sie kann subtrahieren.

00:26.140 --> 00:27.820
Wir haben also die Additionsmethode.

00:27.820 --> 00:31.300
Beachten Sie, dass ich eine ganze Zahl a und b eingebe.

00:31.300 --> 00:33.970
Ich addiere sie zusammen und gebe den Wert zurück.

00:33.970 --> 00:40.540
Wenn du das in deinem Spiel verwenden würdest und sicher sein wolltest, dass es zuverlässig funktioniert, würdest du einfach

00:40.540 --> 00:48.640
Ihr Spiel spielen und hoffen, dass Sie eine erfolgreiche Add-Operation auf dem Bildschirm sehen,

00:48.640 --> 00:50.500
einfach zu beurteilende Ergebnisse liefert.

00:50.500 --> 00:52.210
Aber das ist nicht immer der Fall.

00:52.210 --> 00:59.470
Vielleicht werden hier A und B und C aus Versehen addiert, und Sie bemerken vielleicht nicht, dass Ihr Punktesystem vielleicht

00:59.470 --> 01:05.470
von 1 auf 2 auf 4 erhöht, weil es falsch gerechnet hat, und du hast es einfach nicht bemerkt.

01:05.500 --> 01:11.920
Das Schöne am Hinzufügen eines Einheitstests ist, dass man mehr Situationen testen kann, als man vielleicht vorfindet

01:11.920 --> 01:15.370
als der Spieler, und zwar systematischer.

01:15.370 --> 01:18.400
Werfen wir einen kurzen Blick auf unseren allerersten Einheitstest.

01:18.400 --> 01:21.850
Und es wird ein Unit-Test auf diesem System hier sein.

01:22.870 --> 01:25.540
Dies ist also eine separate Klasse.

01:25.540 --> 01:31.060
Und indem wir die Codebasis hier einfügen, sehen wir an einer bestimmten Stelle in Ihrem Projekt.

01:31.060 --> 01:36.600
Und indem wir die Methode, wie der Pfeil zeigt, mit test markieren, wird Unity sie ein wenig anders behandeln.

01:36.610 --> 01:42.880
Dies muss nirgendwo in deinem Produktionscode aufgerufen werden, aber sieh dir an, wie einfach es darin ist

01:42.880 --> 01:43.570
im Körper.

01:43.570 --> 01:49.960
Hier sehen wir, dass wir die Methodik arrange, act and assert verwenden, und wir werden diese Methodik noch weiter vertiefen

01:49.960 --> 01:50.380
hier.

01:50.380 --> 01:53.950
Es ist ein optionaler Ansatz, der Ihnen nur hilft, Ihre Gedanken zu organisieren.

01:53.950 --> 01:56.380
Zuerst erstellen wir also eine Instanz der Klasse.

01:56.380 --> 01:59.020
Dann rufen wir eine Methode in dieser Klasse auf.

01:59.020 --> 02:04.990
Und dann behaupten wir oder nehmen wir an, dass dies unser erwartetes Ergebnis sein wird.

02:05.020 --> 02:12.010
Dieser Test wird erfolgreich sein, wenn die Behauptung richtig ist, und er wird fehlschlagen, wenn die Behauptung falsch ist.

02:12.040 --> 02:18.820
Nun mag es albern erscheinen, fünf und zehn zu bestehen und zu prüfen, ob es 15 wird, denn auch hier gilt, dass unsere Implementierung

02:18.820 --> 02:20.110
Code so einfach ist.

02:20.110 --> 02:26.080
Aber das sind die grundlegenden Ideen, die, wenn wir sie auf noch größere Klassen anwenden, es wird

02:26.080 --> 02:26.800
wichtig.

02:26.920 --> 02:28.900
Das ist also unser Kursüberblick.

02:28.900 --> 02:31.240
Lasst uns darüber nachdenken, was wir hier gelernt haben.

02:31.240 --> 02:35.980
Wir haben ein wenig darüber gesprochen, wie und warum Unit-Tests für ein Projekt wichtig sind.

02:35.980 --> 02:39.640
Ich habe ein wenig angedeutet, warum es in der Spieleentwicklung ziemlich selten ist.

02:39.670 --> 02:45.490
Ein Grund ist, dass wir als Spieleentwickler es lieben, neue Features hinzuzufügen, und das fühlt sich ein bisschen

02:45.490 --> 02:48.070
eher wie eine Verlangsamung an.

02:48.070 --> 02:53.500
Aber als wir uns die 80-zu-20-Regel angesehen haben, waren wir ziemlich überrascht, dass tatsächlich

02:53.500 --> 02:59.800
die meiste Zeit unseres Lebens als Spieleentwickler damit verbracht wird, bestehende Features zu reparieren und zu warten, und nicht damit, neue hinzuzufügen

02:59.800 --> 03:00.490
neue Funktionen hinzuzufügen.

03:00.490 --> 03:07.420
Das zu erkennen und zu sehen, dass Unit-Tests uns helfen werden, diese neuen Funktionen zu entwickeln, sowie

03:07.420 --> 03:13.630
gibt uns viel mehr Vertrauen in die 80% der Wartung, die wir für unser Projekt aufwenden.

03:13.630 --> 03:19.210
Es wird sich für Sie als Spieleentwickler leicht auszahlen, und es ist eine wunderbare Fähigkeit, die man lernen kann.

03:19.210 --> 03:20.500
Fangen wir also an.
