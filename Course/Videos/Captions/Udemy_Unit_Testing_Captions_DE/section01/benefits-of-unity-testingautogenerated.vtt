WEBVTT

00:03.320 --> 00:08.780
Lassen Sie uns einige der Vorteile rekapitulieren, die wir bisher in diesem theoretischen Teil über Unit-Tests gesehen haben.

00:08.780 --> 00:11.940
Zu den Vorteilen gehört also, dass man seinem Code mehr Vertrauen schenken kann.

00:11.960 --> 00:12.830
Was bedeutet das für Sie?

00:12.830 --> 00:19.070
Es bedeutet, dass Ihr Team, wenn es über die Codebasis nachdenkt, ein gutes Gefühl dabei hat, dass die 101.

00:19.070 --> 00:21.080
Funktion nichts kaputt machen wird.

00:21.110 --> 00:26.060
Wenn es an Vertrauen mangelt, ist man ein bisschen schüchtern, Funktionen hinzuzufügen, besonders in bestimmten Bereichen

00:26.060 --> 00:32.300
der Codebasis, wo man weiß, dass die Dinge ziemlich lose zusammenhalten und eine neue Codezeile könnte

00:32.330 --> 00:33.320
etwas kaputt machen.

00:33.320 --> 00:36.080
Es erlaubt auch mutigere Refactors.

00:36.080 --> 00:41.270
Wenn du zum Beispiel ein bestimmtes System in deinem Spiel umgestalten willst und du hast

00:41.270 --> 00:46.040
kein Testen, würde der Prozess darin bestehen, das Spiel zu spielen und Ihr Team es spielen zu lassen.

00:46.070 --> 00:49.880
Erledigen Sie die ganze Arbeit des Refactors und spielen Sie dann Ihr Spiel erneut.

00:49.910 --> 00:53.690
Das Problem bei diesem manuellen Testen ist, dass es mehr Zeit in Anspruch nimmt.

00:53.690 --> 00:59.960
Es ist schwieriger, sicher zu sein, dass der Test vor und nach dem Refactor derselbe ist, und das Testen

00:59.960 --> 01:02.450
auch die gleichen Bereiche.

01:02.990 --> 01:10.340
Wenn man also vor dem Refactor einige Unit-Tests für diese Systeme hat, kann man die Tests durchführen,

01:10.370 --> 01:14.960
sehen, dass alles funktioniert, dass die Automatisierung, die Sie dort hatten, gut funktioniert.

01:14.960 --> 01:18.350
Führen Sie dann genau dieselben Tests nach dem Refactoring durch.

01:18.380 --> 01:21.650
Sie werden feststellen, dass einige der Tests nicht funktionieren.

01:21.650 --> 01:23.390
Sie können einige Änderungen vornehmen.

01:23.390 --> 01:24.380
Der Test ist bestanden.

01:24.380 --> 01:30.860
Vielleicht fügen Sie sogar neue Tests hinzu, weil der Refactor sie braucht, und dann befindet sich Ihr Code jetzt in einer gleichmäßigen

01:30.860 --> 01:34.130
besser aufgestellt und hat mehr Vertrauen in den Code nach dem Refactor.

01:34.310 --> 01:36.170
Das spart auch Zeit.

01:36.170 --> 01:41.480
Wenn man mit Unit-Tests anfängt, wird man das Gefühl haben, dass das ein Extra ist, vielleicht sogar.

01:41.480 --> 01:45.950
Es fühlt sich in bestimmten Systemen ein wenig unnötig an, aber wir werden das noch ausbauen.

01:45.950 --> 01:51.650
Wir werden an diesem Bereich arbeiten und sehen, wie und wann Sie Ihre Unit-Tests hinzufügen wollen.

01:51.680 --> 01:56.810
Jeder Entwickler wird seinen eigenen Stil finden, und als Team sollte man sich zusammensetzen und einige

01:56.810 --> 01:59.000
bewährte Praktiken, die Sie alle befolgen können.

01:59.980 --> 02:04.720
Das Ergebnis ist, wie ich bereits erwähnt habe, mehr Vertrauen und Robustheit in Ihre Codebasis,

02:04.720 --> 02:10.450
und der Effekt auf Ihre Codebasis ist nicht nur, dass es der gleiche alte Code mit Tests ist.

02:10.480 --> 02:15.040
Es ist die Tatsache, dass die Art des Testens die Art und Weise beeinflusst, wie Sie Ihren Code entwerfen.

02:15.070 --> 02:22.360
Um testbaren Code zu erstellen, müssen die Dinge in kleineren Einheiten oder kleineren Klassen mit weniger Code funktionieren,

02:22.360 --> 02:27.550
und das ermutigt uns, einen einzigen Zweck für jede Klasse und Methode zu haben, was eine gute Designpraxis ist.

02:27.550 --> 02:30.010
Wir werden das im Abschnitt über Softwaredesign sehen.

02:30.010 --> 02:34.630
Es ermutigt auch zu einfacheren Lösungen, besonders wenn wir über testgetriebene Entwicklung sprechen.

02:34.660 --> 02:41.290
Mit automatisierten Tests, d.h. Unit-Tests als Teil der Codebasis, die automatisch durchgeführt werden

02:41.290 --> 02:47.760
aufgerufen und in regelmäßigen Abständen wiederholt werden. Das ist es, was Ihnen hier den größten Nutzen bringt.

02:47.770 --> 02:54.100
Einige Teams verwenden die Unit-Tests innerhalb von Unity, was der Schwerpunkt unseres Vortrags sein wird

02:54.100 --> 02:54.550
hier.

02:54.550 --> 03:02.230
Du kannst diese Fähigkeit auch nutzen und dein Git Repo oder ein anderes Versionskontrollsystem automatisch laufen lassen

03:02.230 --> 03:09.280
diese Tests zu wichtigen Zeitpunkten ausführen, vielleicht täglich oder nachts, oder jedes Mal, wenn Ihr Team an einem bestimmten

03:09.280 --> 03:11.260
Zweig übergibt, wird es den Test erneut ausführen.

03:11.260 --> 03:17.110
Es gibt also elegante Möglichkeiten, die Häufigkeit des Testaufrufs zu erhöhen, und dann nur

03:17.110 --> 03:20.020
Ihren Code nur dann zusammenführen, wenn alle Tests erfolgreich sind.
