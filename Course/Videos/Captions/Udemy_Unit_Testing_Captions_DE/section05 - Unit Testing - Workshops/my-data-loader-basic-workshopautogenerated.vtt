WEBVTT

00:00.050 --> 00:03.650
Hallo und willkommen zu diesem Unity Unit Testing Workshop.

00:03.650 --> 00:07.190
Wir werden uns meinen Datenlader Basic als Beispiel ansehen.

00:07.190 --> 00:07.820
Lasst uns einsteigen.

00:07.820 --> 00:10.670
In dieser Demo werde ich also Unity öffnen.

00:10.670 --> 00:16.040
Öffne unser Kernprojekt und schau dir die Szene meines Data Loader Basic an.

00:16.040 --> 00:21.890
Der Grund, warum ich mich entschieden habe, eine Art von Datenladen zu machen, ist, dass ich darüber sprechen möchte, nun, was

00:21.890 --> 00:30.290
wenn unsere Unit-Tests, von denen wir hoffen, dass sie sehr zuverlässig und isoliert sind und schnell laufen, zum Wohle unserer

00:30.290 --> 00:32.390
eigenen Testmethodologien?

00:32.390 --> 00:38.150
Was ist, wenn sie von anderen Systemen abhängen? Wie können wir sicher sein, dass wir nur einen Teil testen können?

00:38.180 --> 00:46.130
Im Allgemeinen wird bei Unit-Tests eine einzelne Einheit getestet, die man sich als eine Methode einer Klasse vorstellen kann.

00:46.130 --> 00:52.130
Aber oft besteht unser Code aus mehreren Klassen, die zusammenhängen, und das kann eine Herausforderung sein, um zu entscheiden

00:52.130 --> 00:55.460
wie man sie trennen und isoliert testen kann.

00:55.460 --> 01:01.640
Man könnte auch ein System haben, das von etwas Asynchronem abhängt, wie das Rendern von Grafiken, das Rendern

01:01.640 --> 01:05.150
Audio, oder in diesem Fall der Aufruf eines Backend-Servers.

01:05.150 --> 01:12.770
Ich habe hier ein sehr einfaches Beispiel erstellt, das Daten lädt, die man in einer URL angibt, es ruft einfach eine Webseite auf

01:12.770 --> 01:15.020
und bekommt den Text der Webseite zurück.

01:15.050 --> 01:21.800
Dies ist also das einfachste Beispiel, aber Sie können sich vorstellen, dass dies eine beliebige Serverlogik ist, die aufruft, um Folgendes zu senden

01:21.800 --> 01:26.930
einen Highscore von deinem Spiel, einen Aufruf zum Laden von Spielerdaten, irgendetwas im Zusammenhang mit Multiplayer.

01:26.930 --> 01:31.690
Vielleicht hängen all diese Dinge von einem asynchronen Netzwerkverkehr ab.

01:31.700 --> 01:32.720
Schauen wir uns das mal an.

01:32.810 --> 01:34.640
Hier sind wir also im Beispiel.

01:34.640 --> 01:36.650
Wir haben meinen Data Loader Basic.

01:36.650 --> 01:37.310
Laden Sie ihn auf.

01:37.310 --> 01:38.330
Drücken wir auf Play.

01:41.030 --> 01:42.380
In dieser speziellen Demo.

01:42.410 --> 01:46.940
Es gibt keine wirklich interessanten Dinge in dieser speziellen Demo.

01:46.970 --> 01:49.340
Es gibt keine allzu interessanten Dinge beim Gameplay.

01:49.610 --> 01:53.330
Wir gehen hier auf die Konsole und sehen, dass diese Szene keine Benutzeroberfläche hat.

01:53.360 --> 01:59.660
Die Unity-Konsole zeigt nur die Länge dessen an, was vom Server zurückgegeben wird.

01:59.660 --> 02:03.590
Alles, was nicht Null ist, bedeutet, dass eine Seite geladen wurde.

02:03.590 --> 02:05.030
Also sehr leicht.

02:05.030 --> 02:06.080
Einfacher Test.

02:06.080 --> 02:09.550
Ich habe keine Fehlerprüfung oder solche Dinge eingebaut.

02:09.560 --> 02:14.030
Der Einfachheit halber wird in dieser Demo nur der Erfolg angenommen.

02:14.060 --> 02:18.170
Wenn Sie produktiven Code machen und Server aufrufen, würden Sie viel mehr Funktionalität hinzufügen wollen

02:18.170 --> 02:18.800
hinzufügen.

02:18.800 --> 02:23.160
Das ist also die Erfahrung zur Laufzeit, die ziemlich einfach und nicht besonders interessant ist.

02:23.180 --> 02:28.940
Wenn wir uns nun den Testrunner ansehen, können wir unsere Kategorie auf "my data loader basic" setzen.

02:28.940 --> 02:32.720
Es werden also nur die Tests angezeigt, die sich auf diesen speziellen Code beziehen.

02:32.720 --> 02:34.520
Und dann gehen wir in den Bearbeitungsmodus.

02:34.520 --> 02:38.600
Hier haben wir wieder den Spielmodus, aber Sie können das selbst erkunden.

02:38.600 --> 02:42.620
Ich finde, dass der Bearbeitungsmodus für diese spezielle Demo interessanter ist.

02:42.620 --> 02:45.050
Ich drücke also auf "Alles ausführen".

02:46.660 --> 02:48.740
Und wir können sehen, dass wir Erfolg haben.

02:48.760 --> 02:54.910
Dies besagt, dass load async result doctype contains when is loaded.

02:54.910 --> 02:56.890
Schauen wir uns das mal ein bisschen an.

02:57.010 --> 02:59.200
Wir gehen hierher und öffnen unsere Quelle.

03:00.590 --> 03:02.210
Und hier ist der Test.

03:02.300 --> 03:08.000
Es zeigt, dass wir zuerst eine Instanz unseres Data Loader Basic erstellen.

03:08.300 --> 03:12.050
Dann warten wir darauf, dass sie geladen wird.

03:13.000 --> 03:16.260
Wir überprüfen die Daten, die vom Server zurückgeladen werden.

03:16.270 --> 03:21.190
Auch hier wird nur eine Webseite aufgerufen, und was auch immer der Quellcode der Webseite zurückgibt, wird als

03:21.190 --> 03:22.420
großer Klumpen Text.

03:22.420 --> 03:24.760
Es wird also wie ein HTML-Zeug aussehen.

03:24.760 --> 03:30.310
Und als ich es mir anschaute, während ich das hier erstellte, bemerkte ich, dass es doctype als Teil davon sagte.

03:30.310 --> 03:35.920
Doctype ist also nichts super Wichtiges, jedenfalls nicht in der Unity-Welt, aber ich dachte einfach

03:35.920 --> 03:40.030
es ist ein kleiner Test, der mir sagt, habe ich etwas von einer Webseite zurückbekommen?

03:40.030 --> 03:43.460
Sie können sich vorstellen, dass Sie auf jede andere Teilzeichenkette testen können, die für Sie sinnvoll ist.

03:43.480 --> 03:50.410
Schließlich führe ich hier die Aktion aus, die wir testen, und lade den asynchronen Aufruf dort

03:50.410 --> 03:51.700
und gebe die URL ein.

03:51.730 --> 03:58.600
Beachten Sie, dass die URL die URL der GitHub-Seite ist, aber das ist nicht so wichtig, wenn es nichts Einzigartiges gibt

03:58.600 --> 03:58.960
dort.

03:58.960 --> 04:06.010
Wenn man z.B. google.com testen will, ruft es einfach google.com auf und holt sich die Quelle

04:06.010 --> 04:07.210
Code von dort zurück.

04:07.210 --> 04:12.610
Ich möchte mich nicht wirklich darauf konzentrieren, was ich hier im Produktionscode mache, denn es ist zugegebenermaßen eine

04:12.610 --> 04:13.720
einfaches Beispiel ist.

04:13.720 --> 04:19.030
Ich wollte nur, dass es eine Möglichkeit ist, etwas Asynchrones in Unity zu machen.

04:20.210 --> 04:22.880
Schauen wir uns also den Quellcode an, nur damit wir es verstehen.

04:23.880 --> 04:24.330
Hier.

04:24.330 --> 04:24.930
Was wir hier tun.

04:24.930 --> 04:29.130
Wenn ich load aufrufe, sage ich einfach, hey, stell sicher, dass die URL nicht leer ist.

04:29.520 --> 04:34.710
Dann mache ich weiter und verwende die Webanforderung von Unity, die eine eingebaute Funktionalität ist.

04:34.710 --> 04:41.880
Ich rufe send request auf und setze das Ergebnis auf den Text des Download-Handlers.

04:41.910 --> 04:44.220
Das ist einfach ein super billiger, einfacher Weg.

04:44.220 --> 04:47.400
Von Unity empfohlen, um einfache Daten online abzurufen.

04:47.430 --> 04:48.930
Sehr einfach und übersichtlich.

04:48.960 --> 04:53.250
Nun stellt sich die Frage, was wir hier eigentlich testen?

04:53.640 --> 04:59.940
Ich habe eine benutzerdefinierte Klasse mit dem Namen "Data Loader", aber im Inneren bin ich stark von einer bestehenden Unity abhängig

04:59.970 --> 05:02.550
Funktionalität von Unity Web Request.

05:02.580 --> 05:06.420
Dann rufe ich eine Webseite auf, in diesem Fall GitHub.

05:06.420 --> 05:08.040
Und das ist involviert.

05:08.040 --> 05:13.170
Wenn GitHub den ganzen Tag nicht erreichbar wäre, würde dieser Test fehlschlagen.

05:13.200 --> 05:14.490
Ist das angemessen?

05:14.490 --> 05:21.390
Wenn es bei meinem Unit-Test wirklich darum geht, meine eigene Methodik, meine eigene Funktionalität zu testen, sollte ich nicht in Betracht ziehen

05:21.390 --> 05:22.440
einen fehlgeschlagenen Test betrachten.

05:22.440 --> 05:25.230
Wenn eine nicht verwandte Abhängigkeit fehlschlägt.

05:25.230 --> 05:27.000
Aber hier ist das der Fall.

05:27.000 --> 05:29.030
Ich würde scheitern, wenn GitHub nicht erreichbar wäre.

05:29.040 --> 05:34.830
Außerdem verwende ich hier die Unity-Webanforderung, die eine von Unity eingebaute Funktionalität ist.

05:34.860 --> 05:41.280
Wir hoffen, dass es zu 100% in allen Situationen funktioniert, aber es ist möglich, dass mein Code funktioniert und

05:41.280 --> 05:42.600
sein Code nicht funktioniert.

05:42.600 --> 05:44.910
Hier gibt es also eine Grauzone.

05:44.910 --> 05:50.070
Wenn Sie darüber nachdenken, Ihre Klassen zu entwerfen und dann die Tests für diese Klassen zu entwerfen, wie können Sie

05:50.070 --> 05:52.350
wissen, worauf man sich konzentrieren sollte?

05:52.350 --> 05:54.780
Tests, allgemein gesprochen.

05:54.780 --> 05:59.940
Und es gibt Bücher und Bücher, die über dieses Thema geschrieben wurden, wie man die Kunst des Unit-Testens angeht.

05:59.940 --> 06:05.730
Aber im Allgemeinen möchte man seine Abhängigkeiten reduzieren und die Anzahl der Tests vereinfachen.

06:05.730 --> 06:07.920
von Codezeilen, die man testet.

06:07.920 --> 06:14.880
Weniger Code ist also besser, weil er einfacher und zielgerichteter ist und man genau weiß, welche

06:14.880 --> 06:16.410
Code man testet.

06:16.410 --> 06:22.710
Dies ist also kein perfektes Beispiel, aber für uns ist es ein guter Einstieg, um über asynchrone

06:22.710 --> 06:23.340
Code läuft.

06:23.340 --> 06:25.440
Damit beenden wir dieses Beispiel.
