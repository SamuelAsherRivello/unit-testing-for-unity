WEBVTT

00:00.050 --> 00:02.240
Hallo und willkommen zu Unit Testing für Unity.

00:02.270 --> 00:05.270
Dies ist unser Workshop zum Thema Charakterphysik.

00:05.300 --> 00:11.750
In früheren Workshops haben wir uns langsam von einem sehr einfachen Beispiel für einen Charakter, der sich mit einem Pfeil bewegt

00:11.750 --> 00:17.600
Tasten zu einem fortgeschrittenen Beispiel, das Monobehaviour und Nicht-Monobehaviour trennt.

00:17.600 --> 00:22.580
Und hier in diesem Beispiel werden wir darüber sprechen, was passiert, wenn wir von einem anderen Unity-System abhängig sind

00:22.580 --> 00:23.540
wie die Physik.

00:23.540 --> 00:29.360
Und auch wenn wir die Physik in diesem speziellen Beispiel verwenden, wird unsere Bewegung unschärfer.

00:29.360 --> 00:33.500
Das heißt, ich klicke nicht links und es klickt sofort an einer Position.

00:33.500 --> 00:35.570
Es bewegt sich langsam mit der Zeit.

00:35.570 --> 00:39.740
Wie könnten wir den Wert testen, der sich langsam über die Zeit verändert?

00:39.740 --> 00:42.860
Wir werden also ein paar dieser Dinge hier im Quellcode besprechen.

00:42.860 --> 00:47.930
Um einen Blick auf diese Demo zu werfen, öffnen wir unseren Unity-Editor und das Beispielprojekt.

00:47.930 --> 00:50.660
Die Szene hier wird die Charakterphysikszene sein.

00:50.660 --> 00:54.330
Und eines der Dinge, die wir uns ansehen werden, ist, wie man diese Fuzzy-Werte testet.

00:54.350 --> 01:01.280
Ich nenne es noch einmal, unscharfe Werte sind für mich Werte, die sich nicht unbedingt sofort von

01:01.280 --> 01:02.270
A nach B.

01:02.270 --> 01:09.500
Sie verändern sich langsam im Laufe der Zeit, wie zum Beispiel die Position eines Objekts oder ein Punktestand, der sich allmählich erhöht.

01:09.560 --> 01:14.720
Dies sind alles Bereiche, in denen man etwas im Laufe der Zeit testen möchte, und wir haben einen einfachen Ansatz

01:14.720 --> 01:15.860
hier, um das zu tun.

01:15.860 --> 01:20.360
Es ist nicht die einzige Lösung, aber ich denke, es ist eine, die uns hilft, auf dem Weg zu lernen.

01:20.360 --> 01:21.410
Schauen wir es uns also an.

01:21.410 --> 01:23.060
Hier sind wir also im Unity-Projekt.

01:23.060 --> 01:25.580
Wir haben das Beispiel der Charakterphysik geöffnet.

01:25.580 --> 01:27.140
Lasst uns weitermachen und die Szene starten.

01:33.260 --> 01:36.170
Hier kann ich mich nun mit den Pfeiltasten bewegen.

01:40.030 --> 01:45.610
Und in früheren Beispielen hier im Workshop haben wir gesehen, dass sie jeden Klick, den ich auf der linken Seite gemacht habe, übersprungen hat

01:45.610 --> 01:51.040
Pfeil geklickt habe, hat sich die Position augenblicklich geändert, aber hier gibt es eine sanftere Bewegung.

01:51.670 --> 01:56.890
Ich kann immer noch alle Pfeiltasten benutzen, um zu bestimmen, in welche Richtung es gehen soll, aber die Idee

01:56.890 --> 02:00.670
dass es sich langsam über die Zeit bewegt, ist jetzt wirklich neu.

02:00.670 --> 02:06.430
Es gibt viele Möglichkeiten, wie man das in Unity machen kann, aber ich habe mich entschieden, das Physiksystem zu benutzen, um zu reden

02:06.430 --> 02:11.530
ein bisschen darüber zu reden, was passiert, wenn wir ein paar mehr Unity-Systeme involviert haben.

02:11.530 --> 02:13.570
Erinnern Sie sich, womit wir uns gestreckt haben?

02:13.600 --> 02:20.770
Die Idee ist, dass man in einer idealen Welt die Unit-Tests so gestaltet, dass sie die wenigsten Zeilen von

02:20.770 --> 02:24.400
Abhängigkeiten, die wenigsten Codezeilen auf einmal.

02:24.400 --> 02:28.240
Aber oft ist unser Produktionscode nicht so einfach.

02:28.240 --> 02:30.160
Wir sind von verschiedenen Dingen abhängig.

02:30.160 --> 02:35.620
Mit dem My Data Loader und den vorherigen Zeichenbeispielen hier haben wir einige Möglichkeiten gesehen, wie man

02:35.650 --> 02:37.750
mit diesen verschiedenen Abhängigkeiten umzugehen.

02:37.780 --> 02:40.900
Dies ist ein weiteres Beispiel, das ein wenig komplexer ist als die anderen.

02:40.930 --> 02:42.880
Werfen wir einen Blick auf den Produktionscode hier.

02:42.880 --> 02:45.760
Hier sehen wir uns also das Beispiel der Charakterphysik an.

02:47.240 --> 02:48.440
Öffnen wir das?

02:49.860 --> 02:53.160
Und hier haben wir die Erstellung eines Charakterprimitivs.

02:53.970 --> 03:02.490
Hier erstellen wir das Spielobjekt zuerst mit dem Würfel als Primitiv, und dann fügen wir hinzu

03:02.490 --> 03:06.120
die Komponente des Charakter-Physik-Monobehaviours hinzu.

03:06.120 --> 03:09.690
Und dann haben wir eine separate Charakter-Physik-Klasse, die wir dort einfügen.

03:09.690 --> 03:15.360
Wir trennen uns also bereits von einer monolithischen Klasse von Monobehaviour in zwei.

03:15.360 --> 03:21.000
Das ist also ein guter Weg, um unseren Code zu vereinfachen und jeweils einen einzigen Zweck zu erfüllen.

03:21.000 --> 03:28.260
Im vorigen Beispiel haben wir gesehen, dass der größte Teil der Monobehaviour-Funktionalität, die wir brauchen, nur die Aktualisierung ist.

03:28.260 --> 03:30.330
Das ist das Einzige, um das wir uns wirklich kümmern mussten.

03:30.330 --> 03:35.760
Indem wir also alles, was nicht mit der Aktualisierung zu tun hat, in die zweite Klasse verschieben, haben wir jetzt etwas, das einfacher zu handhaben ist

03:35.760 --> 03:36.360
testen.

03:39.080 --> 03:42.210
In diesem einfachen Beispiel bewegen wir uns zu einer bestimmten Position.

03:42.230 --> 03:46.340
Führen wir nun die Tests aus und werfen wir einen Blick auf den Produktionscode.

03:46.370 --> 03:49.130
Schauen wir uns also die Ausführung der ausgewählten Tests an.

03:51.190 --> 03:52.480
Es läuft alles dort.

03:52.500 --> 03:53.500
Alles läuft.

03:53.520 --> 03:55.290
Das ist jetzt nur der Test im Spielmodus.

03:55.290 --> 03:59.760
Aber wir haben auch Tests für den Bearbeitungsmodus, wenn Sie sich das noch einmal ansehen wollen, denn wir sind

03:59.760 --> 04:01.600
mit Monobehaviour-Zeug zu tun haben.

04:01.620 --> 04:03.990
Es scheint angemessener zu sein, einen Spielmodus zu verwenden.

04:03.990 --> 04:05.610
Das ist also der Ansatz, den ich hier verfolgt habe.

04:05.610 --> 04:09.090
Aber es liegt an Ihnen und Ihrem Projekt zu entscheiden, welche Systeme Sie testen wollen.

04:09.120 --> 04:10.860
Bearbeitungsmodus und welche Sie testen wollen.

04:10.890 --> 04:11.430
Spielmodus.

04:18.220 --> 04:23.620
Nun, da wir diese Tests gesehen haben, lassen Sie uns einen kurzen Blick auf den Quellcode der Klasse werfen.

04:23.620 --> 04:25.300
Und dann schauen wir uns einige der Tests oben an.

04:25.330 --> 04:25.510
Also gut.

04:25.510 --> 04:27.380
Hier sind wir also in der Zeichenphysik.

04:27.400 --> 04:31.520
Wir werden sehen, dass es dem Charakter, den wir zuletzt gesehen haben, ziemlich ähnlich ist.

04:31.540 --> 04:35.470
Wieder haben wir die Klasse Monobehaviour und die Klasse ohne Monobehaviour getrennt.

04:35.470 --> 04:39.250
Hier ist also die Nicht-Monobehaviour-Klasse, die den größten Teil der Arbeit macht.

04:39.280 --> 04:45.460
Beachten Sie, dass im Konstruktor eine Referenz auf den Monobehaviour genommen und gespeichert wird und dann

04:45.460 --> 04:50.320
übergibt dem Monobehaviour auch einen Verweis auf diese Klasse hier.

04:50.320 --> 04:54.550
Das ist so, dass es den Move by jedes Mal aufrufen kann, wenn es eine Aktualisierung durchführt.

04:54.580 --> 04:56.620
Es gibt verschiedene Möglichkeiten, wie man das organisieren kann.

04:56.620 --> 05:00.460
Man könnte sogar die hartkodierte Abhängigkeit, die wir hier voneinander haben, entfernen.

05:00.460 --> 05:04.000
Aber der Einfachheit halber ist das in diesem Beispiel sehr angebracht.

05:04.360 --> 05:05.410
Wir gehen den Code abwärts.

05:05.410 --> 05:08.470
Auch hier ist es in den meisten Teilen genau wie bei den Fortgeschrittenen.

05:08.500 --> 05:11.290
Ich werde darauf hinweisen, wo Physik verwendet wird.

05:11.290 --> 05:19.540
Also hier in der Bewegung, statt nur durch die Position hardcodiert über eine Instanz Taneous Update zu bewegen,

05:19.570 --> 05:22.960
werden wir hier die Bewegungsposition verwenden.

05:22.960 --> 05:28.510
Und dann unter Kraft hinzufügen, das ist eine neue Methode, die ich gemacht habe, die sich basierend auf der Physik bewegen wird

05:28.510 --> 05:29.200
Kräfte.

05:29.200 --> 05:33.250
Stellt euch vor, das ist ein Block und wir geben auf einer Seite einen Stoß.

05:33.250 --> 05:39.010
Und dann, basierend auf Reibung, Masse und Schwerkraft, gibt es eine Art von Folge, die dazu neigt

05:39.010 --> 05:41.890
zu einer unschärferen Reaktion, wenn man die zusätzliche Kraft benutzt.

05:41.890 --> 05:48.220
Und wir bewegen uns mit add force hier oben in der gleichen Klassendatei und sehen das Physik-Monobehaviour

05:48.220 --> 05:49.240
deklariert ist.

05:49.240 --> 05:55.210
Es ist ziemlich vertraut, da das gleiche fortgeschrittene Zeichen, das wir im letzten Workshop gesehen haben, ziemlich ähnlich aussieht,

05:55.210 --> 05:58.000
aber wir haben hier einen starren Körper, den wir speichern.

05:58.000 --> 06:04.630
Und wenn diese Klasse aufwacht, fügen wir den Starrkörper hinzu und setzen dann einige physikalische Parameter

06:04.630 --> 06:05.320
Werte.

06:05.320 --> 06:12.070
Wenn wir also darüber nachdenken, einfach eine Art Zusammenfassung zu machen, anstatt ein Monobehaviour zu haben, das die ganze Physik macht

06:12.070 --> 06:16.840
und Bewegung zusammen macht, haben wir das Monobehaviour von dem Nicht-Monobehaviour getrennt.

06:16.870 --> 06:23.130
Innerhalb des Monobehaviour führen wir dann die Aktualisierungsschleife durch und kümmern uns auch um einige physikalische Dinge.

06:23.140 --> 06:29.200
Dann von dem anderen, dem nicht Monobehaviour, können wir uns bewegen wie wir wollen und Charaktereingaben annehmen,

06:29.200 --> 06:31.110
also Tastatureingaben und solche Sachen.

06:31.120 --> 06:35.560
Das ist also eine ziemlich gute Trennung und bringt uns auf den Weg, was wir brauchen.

06:36.740 --> 06:40.430
Lassen Sie mich laut überlegen, ob es noch etwas gibt, das ich hier erwähnen möchte.

06:40.970 --> 06:43.070
Ähm, ja.

06:43.070 --> 06:45.230
Ich habe also über die Idee hier gescherzt.

06:45.230 --> 06:53.030
Wenn man die hart kodierte Abhängigkeit reduzieren wollte, die wir haben, jede Klasse hängt von der anderen ab

06:53.030 --> 06:58.910
und mehr von der Flexibilität, die wir im My Data loader Beispiel gesehen haben, zu erhalten, könnten Sie sicherlich deklarieren

06:58.910 --> 07:03.320
Schnittstellen deklarieren und auf diese Weise ansprechen, aber das brauchen wir hier nicht.

07:03.320 --> 07:06.020
Wir gehen einfach zurück und führen das Beispiel noch einmal aus.

07:06.020 --> 07:10.340
Hier in Unity laufen wir also und wir haben die Pfeiltasten, die sich bewegen.

07:10.370 --> 07:15.770
In den letzten Videos haben wir Beispiele für die Reduzierung der Komplexität gesehen.

07:15.770 --> 07:20.480
Durch die Verringerung verschiedener Abhängigkeiten haben wir eine gewisse Flexibilität, um unseren Code zu trennen.

07:20.480 --> 07:26.120
Also für dieses Beispiel hier mit dem Input und der Physik und den Monobehavioren oder so, ich

07:26.120 --> 07:27.250
denke, wir sind hier fertig.

07:27.260 --> 07:27.980
Danke!
