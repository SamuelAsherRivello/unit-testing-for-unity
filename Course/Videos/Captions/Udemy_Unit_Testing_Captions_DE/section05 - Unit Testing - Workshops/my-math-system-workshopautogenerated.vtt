WEBVTT

00:00.110 --> 00:00.980
Hallo und herzlich willkommen.

00:00.980 --> 00:07.040
In diesem Workshop werden wir einen Blick auf das System My Math werfen und uns mit einem ziemlich

00:07.070 --> 00:11.300
einfaches Beispiel, das uns wieder mit den Grundlagen des Unit-Testens vertraut macht.

00:11.300 --> 00:14.720
In dieser Demo können Sie das Core Sample Projekt verwenden, um mitzumachen.

00:14.720 --> 00:19.520
Wir werden den Unity-Editor öffnen, das Core Sample Projekt öffnen und dann werden wir

00:19.520 --> 00:21.140
öffnen und einige Szenen abspielen.

00:21.140 --> 00:26.360
Wir werden uns das My Math System und den Test dahinter ansehen und eine Zusammenfassung machen

00:26.390 --> 00:31.970
von Unit-Tests und sprechen über alle grundlegenden Konzepte, die ich dort sehe und die ich erwähnen möchte.

00:31.970 --> 00:38.450
Und wir werden auch über parametrisierte Werte sprechen, was ein Zwischenweg ist, den man gehen kann

00:38.450 --> 00:38.960
Testen.

00:38.960 --> 00:42.620
Und es ist eine gute zusätzliche Fähigkeit, die man haben sollte, wenn man sich dem Unit-Testing nähert.

00:42.620 --> 00:43.640
Lasst uns eintauchen.

00:43.850 --> 00:48.410
Hier bin ich also im Unity-Editor und habe das Beispiel für mein mathematisches System geöffnet.

00:48.410 --> 00:51.050
Lasst uns einfach die Szene selbst ausprobieren.

00:51.080 --> 00:54.710
Manchmal ist in diesen Workshops die Szene spannender.

00:54.710 --> 00:56.300
Diese hier ist nicht so spannend.

00:56.300 --> 01:01.730
Wir machen weiter und drücken hier unten im Fenster auf "Play", wir sehen einen einfachen Text, der uns hilft

01:01.730 --> 01:07.040
wir verstehen, dass wir uns in der Unit-Testing-Demo befinden, und wir werden einfach die Szene abspielen und die Konsole anzeigen.

01:07.040 --> 01:08.510
Schauen wir uns also die Konsole an.

01:08.600 --> 01:11.210
Die Konsole sagt, dass diese Szene keine Benutzeroberfläche hat.

01:11.630 --> 01:14.510
Siehe die Unity-Konsole hier sind wir in der Konsole.

01:14.510 --> 01:15.140
Wirklich.

01:15.140 --> 01:19.880
Es wird uns nur ein Wert angezeigt, der nach einer erfolgreichen Operation ausgespuckt wurde.

01:19.880 --> 01:25.370
In echtem Produktionscode wäre dies also eine viel interessantere Szene.

01:25.370 --> 01:30.590
Vielleicht findet hier tatsächlich das Spielmenü oder der Spielablauf statt.

01:30.860 --> 01:35.810
Das ist eine ziemlich magere Szene, in der es nicht viel zu sehen gibt, aber man kann sich vorstellen, dass das

01:35.810 --> 01:36.200
sein.

01:36.770 --> 01:41.960
Es ist nicht besonders wichtig, dass es eine Laufzeitszene für den Test gibt.

01:41.960 --> 01:47.600
Ich möchte nur oft über das Gleichgewicht zwischen dem Produktionscode und der Produktion sprechen, die hier stattfindet

01:47.600 --> 01:48.200
Sache.

01:48.200 --> 01:51.560
Und hier drüben ist der Testcode, der sein Test-Ding macht.

01:51.560 --> 01:57.380
Den Produktionscode erleben wir immer, wenn wir in einer Unity-Szene wie dieser auf Play drücken.

01:57.380 --> 02:00.860
Und um unsere Unit-Tests durchzuführen, machen wir etwas anderes.

02:00.860 --> 02:04.040
Was wir hier tun, ist, dass wir uns das Fenster des Testläufers ansehen.

02:04.580 --> 02:08.420
Wir erkunden die Kategorie, die dem entspricht, was wir uns hier ansehen wollen.

02:08.420 --> 02:10.550
Wir schauen uns nur das System "Mein Mathe" an.

02:11.630 --> 02:14.090
Und dann schauen wir uns das mal an.

02:14.090 --> 02:15.350
Lass uns einfach die Aufgabe im Bearbeitungsmodus machen.

02:15.470 --> 02:19.850
Wir führen alle hier aus und alle Tests laufen einfach so.

02:19.880 --> 02:22.120
Jetzt ist die Szene nicht wirklich gelaufen.

02:22.130 --> 02:28.490
Es läuft nur sozusagen nebenbei in seinem eigenen kleinen Universum und führt diese Tests innerhalb eines

02:28.490 --> 02:29.360
Bearbeitungsmodus.

02:29.360 --> 02:32.860
Also Tests im Bearbeitungsmodus, um ein wenig über den Unterschied zu sprechen.

02:32.870 --> 02:38.090
Die Tests im Editiermodus laufen im Editiermodus, den es in Unity in zwei primären Modi gibt.

02:38.090 --> 02:43.700
Im Grunde genommen, von dem Moment an, in dem du den Play-Button drückst, bis zu dem Moment, in dem du den Play-Button drückst, also

02:43.700 --> 02:44.360
Wiedergabemodus.

02:44.390 --> 02:47.990
Hier erlebt der Benutzer im Allgemeinen das Unity-Spiel.

02:48.680 --> 02:53.240
Immer wenn wir nicht in diesem Modus sind, sind wir im Bearbeitungsmodus, der hier sitzt, wir sind im Bearbeitungsmodus.

02:53.270 --> 02:59.330
Diese Tests werden im Bearbeitungsmodus ausgeführt, weil sie nicht unbedingt die ganze Komplexität einer Laufzeitumgebung benötigen

02:59.330 --> 02:59.870
Szene.

02:59.870 --> 03:05.180
Das hilft uns, einen einfachen kleinen isolierten Bereich zu haben, in dem diese Codes laufen.

03:05.180 --> 03:10.850
Nun braucht man manchmal die Annehmlichkeiten von Monobehaviour und Laufzeitfunktionalität.

03:10.850 --> 03:14.750
Hier kommt der Spielmodus ins Spiel.

03:14.750 --> 03:17.330
Und hier haben wir auch einige Tests für den Spielmodus.

03:17.330 --> 03:22.550
Jedes Mal, wenn ich auf eines dieser Kontrollkästchen klicke, werden uns leicht unterschiedliche Listen angezeigt

03:22.580 --> 03:23.810
von dem, was wir zur Verfügung haben.

03:23.810 --> 03:26.240
Hier im Spielmodus drücke ich also auf "run all".

03:27.020 --> 03:34.670
Und hier wird tatsächlich eine brandneue Szene erstellt, eine Laufzeitszene, die nur zur Demonstration dient

03:34.670 --> 03:36.380
mit jeglichem Testcode, den ich habe.

03:36.380 --> 03:39.920
Und dann kehren wir zur ursprünglichen Szene zurück, in der wir waren.

03:39.920 --> 03:44.180
Wenn wir die Szene nicht gespeichert hätten, würde es uns sagen: Hey, du bist dabei, einen Spielmodus zu starten

03:44.210 --> 03:44.660
Test.

03:44.690 --> 03:46.430
Wir werden deine Szene vorübergehend verlassen.

03:46.460 --> 03:48.110
Willst du deine Szene zuerst speichern?

03:48.110 --> 03:50.570
Im Allgemeinen ist das eine gute Idee, also achten Sie darauf.

03:50.600 --> 03:52.370
Schauen wir uns nun den Quellcode an.

03:52.400 --> 03:56.060
Schauen wir uns zuerst den Produktionscode zur Laufzeit an.

03:56.060 --> 03:58.850
Wir öffnen also das My Math System Beispiel.

03:58.880 --> 04:05.810
Jeder dieser Workshops hat, allgemein gesprochen, ein Spielobjekt mit einem Beispielskript, das Folgendes auslöst

04:05.810 --> 04:06.620
alles in Gang setzt.

04:06.620 --> 04:12.560
Wenn wir uns das ansehen, sind wir hier im Code-Editor und können das komplette my math-System sehen

04:12.560 --> 04:13.250
Beispiel.

04:13.250 --> 04:18.740
Dies ist ein Monobehaviour, weil ich die Annehmlichkeiten des Codes in einem Spielobjekt haben möchte.

04:18.740 --> 04:20.230
Und dann im Wachzustand.

04:20.240 --> 04:23.450
Hier werde ich etwas Produktionscode simulieren.

04:23.450 --> 04:29.210
Jetzt ist er sehr schlank, es gibt nicht viel, und er sieht genauso aus wie der Test, den wir gleich machen werden

04:29.210 --> 04:34.850
anschauen werden, weil ich die Klasse von Grund auf neu erzeuge und dann eine Methode aufrufe, und dann zeige ich

04:34.850 --> 04:35.600
die Ergebnisse.

04:35.600 --> 04:41.390
Aber es ist wichtig zu wissen, dass in einem Produktionsbeispiel, in einem echten Spielprojekt, dieses Äquivalent

04:41.390 --> 04:46.640
viele Klassen und all die Szenen und all die Prefabs und all die Komplexität, die man normalerweise hat

04:46.640 --> 04:47.600
in Ihrem Projekt haben.

04:47.600 --> 04:50.300
Aber hier halte ich es absichtlich sehr schlank.

04:50.300 --> 04:51.980
Beachten Sie also, was wir hier tun.

04:51.980 --> 04:53.960
Wir erstellen das System my math.

04:53.990 --> 04:58.820
Wir nehmen ein paar Ints und füllen sie mit den Werten fünf und zehn.

04:58.820 --> 05:01.010
Und dann rufen wir das my Math System auf.

05:01.010 --> 05:03.620
Und wir geben die Fünf und die Zehn zusammen ein.

05:03.620 --> 05:05.570
Und dann zeigen wir hier das Ergebnis.

05:05.570 --> 05:07.100
Machen wir also weiter und tun das.

05:07.100 --> 05:08.540
Hier drücke ich also auf Play.

05:12.600 --> 05:16.600
Und hier unten im Konsolenfenster sehen wir, dass das Ergebnis 15 ist.

05:16.620 --> 05:22.290
Mir gefällt die Einfachheit dieses Beispiels, weil es uns dazu bringt, über eine Welt nachzudenken, in der

05:22.290 --> 05:27.570
in der es keine Unit-Tests gäbe, wie würde ich dann sicherstellen, dass dieser Code funktioniert?

05:27.600 --> 05:34.620
Nun, vielleicht wird dieser Code meines mathematischen Systems an vielen, vielen Stellen in deinem Spiel verwendet, und du hast einfach

05:34.620 --> 05:40.020
jedes Mal, wenn du sehen und überprüfen willst, ob dieses System gut funktioniert, spielst du einfach das Spiel und

05:40.020 --> 05:44.160
Ihr Spiel kann mehrere Minuten oder auch mehrere Stunden dauern.

05:44.160 --> 05:50.220
Und dieses spezielle System, das gerade getestet wird, könnte an so vielen verschiedenen Orten eingesetzt werden, je nachdem

05:50.220 --> 05:53.400
von verschiedenen Benutzerverhalten, Eingaben und Situationen.

05:53.400 --> 05:55.740
Vielleicht spielt auch die Tageszeit eine Rolle.

05:55.740 --> 06:01.020
Und so ist es schwierig für Sie zu wissen, ob ich es wirklich isoliert teste?

06:01.020 --> 06:09.570
Ein erster Schritt, den ich tun könnte, wenn ich eine Validierung durchführen möchte, ist, dies hier zu kopieren und einzufügen

06:09.570 --> 06:10.440
hier.

06:12.790 --> 06:15.290
Und dies hier aufrufen und testen.

06:15.310 --> 06:16.840
Nun, was wäre, wenn es sechs wären?

06:16.840 --> 06:18.700
Und was wäre, wenn es 11 wäre?

06:20.790 --> 06:22.410
A bis, B bis.

06:27.060 --> 06:33.060
Jetzt teste ich also keinen Einheitstest, sondern ich überprüfe hier nur zwei verschiedene Beispiele.

06:33.060 --> 06:35.820
Also mache ich das hier als erstes und das hier als zweites.

06:35.850 --> 06:42.840
Das nennt man Benutzertest oder Test im Spielmodus oder Integrationstest, wo ich tatsächlich

06:42.840 --> 06:43.980
Produktionscode.

06:43.980 --> 06:50.760
Und ich probiere es einfach als Benutzer aus, in der Hoffnung, dass ich es aus Versehen auffordere, eine Reihe von verschiedenen

06:50.790 --> 06:53.690
Operationen ausführe und sehe, dass keine von ihnen fehlschlägt.

06:53.700 --> 06:57.870
Aber Sie können sich vorstellen, dass ich hier Dinge hinzufüge, die ich am Ende nicht wirklich will

06:57.870 --> 06:59.190
Benutzererfahrung.

06:59.190 --> 07:05.700
Ich versuche nur, mir selbst ein bisschen mehr Vertrauen in meinen eigenen Code zu geben, indem ich einige Funktionen aufrufe

07:05.700 --> 07:06.960
zusätzliche Zeiten.

07:06.990 --> 07:13.590
Sie könnten auch irgendwo in Ihrem Projekt einen Booleschen Wert setzen, der besagt, dass der Debug-Modus wahr ist, und dann

07:13.590 --> 07:15.330
Sie Ihren gesamten Produktionscode.

07:15.330 --> 07:18.810
Wenn das der Fall ist, werden Sie ein paar zusätzliche Tests durchführen.

07:18.810 --> 07:20.220
Das ist nicht schlecht.

07:20.220 --> 07:25.200
In bestimmten Situationen kann das durchaus hilfreich sein, aber sehen wir uns mal an, wie viel besser die Situation ist

07:25.200 --> 07:25.770
sein kann.

07:25.770 --> 07:29.010
Wenn ich stattdessen Unit-Tests durchführe.

07:29.010 --> 07:31.860
Hier ist also der Code für dieses Projekt.

07:31.860 --> 07:36.060
In diesem Projekt haben wir das My Math System, My Math System Beispiel, das wir uns angeschaut haben.

07:36.750 --> 07:42.630
Die Struktur dieses Systems und die Art und Weise, wie sie zusammenarbeiten, haben wir schon früher im Kurs besprochen.

07:42.630 --> 07:47.430
Aber wir haben einen Editor-Test und einen Laufzeit-Test, über die wir sprechen werden.

07:47.430 --> 07:54.030
Nochmals, jeder Editor-Test wird einen Bearbeitungsmodus ausführen, und er ist im Allgemeinen ideal für Dinge, die nicht

07:54.030 --> 07:57.360
unity-spezifische Klassen wie Monobehaviour verwenden.

07:57.390 --> 08:02.520
Monobehaviour ist nur dafür gedacht, im Spielmodus in vollem Umfang zu funktionieren.

08:02.520 --> 08:04.470
Hier ist es also nicht so gut geeignet.

08:04.470 --> 08:04.950
So.

08:04.950 --> 08:07.860
Aber für einfache Tests wie den, den wir hier haben, ist es großartig.

08:07.890 --> 08:12.630
Der Laufzeitbereich hier, wo wir den Spielmodus-Test haben, wäre ein großartiger Ort.

08:12.630 --> 08:18.180
Und von jedem dieser Workshops mache ich einen, damit Sie die Unterschiede sehen können.

08:18.180 --> 08:23.040
Aber es ist wichtig zu bedenken, dass man in bestimmten Situationen, je nachdem, was man testet, wahrscheinlich

08:23.040 --> 08:27.060
ein Unit-Test im Bearbeitungsmodus in dieser Situation besser geeignet ist.

08:27.060 --> 08:31.680
Das ist auf jeden Fall später der Fall, wenn es darum geht, sich mit der Eingabe zu bewegen und etwas zu tun mit

08:31.680 --> 08:37.800
Physik, vielleicht ist dort der Spielmodus-Test erforderlich, weil Eingabe und Physik wirklich darauf ausgelegt sind

08:37.800 --> 08:39.270
als Erfahrungen im Spielmodus.

08:39.270 --> 08:41.700
Es ist also wichtig, diesen Unterschied zu kennen.

08:41.700 --> 08:43.080
Und ich werde es hier und da erwähnen.

08:43.320 --> 08:45.840
Schauen wir uns also den Test zu meinem mathematischen System an.

08:49.240 --> 08:52.210
Und sehen Sie, wie das organisiert ist.

08:53.800 --> 08:59.050
Hier sehen Sie, dass der My Math System-Test ein paar Unterschiede aufweist.

09:04.440 --> 09:06.270
Er hat einige verschiedene Methoden darunter.

09:06.420 --> 09:10.560
Jeder der Namen, die wir hier sehen, sind die Namen der Testmethoden.

09:10.560 --> 09:12.180
Beginnen wir also mit der ersten.

09:12.570 --> 09:18.030
Die Konvention, die ich gerne verwende, wird hier befolgt, und wir werden sie in den Code einbauen, den ich normalerweise verwende

09:18.030 --> 09:23.520
zuerst, welche Methode wir testen, was wir erwarten und dann, wie die Situation ist.

09:23.520 --> 09:26.490
Hier steht also, dass wir die Add-Methode testen.

09:26.490 --> 09:31.140
Wir erwarten, dass das Ergebnis 15 sein wird, wenn wir fünf und zehn eingeben.

09:31.380 --> 09:36.840
Eine nette Abkürzung ist hier, dass man beim Ausführen eines Tests einfach doppelt darauf klicken kann, um ihn erneut auszuführen.

09:37.890 --> 09:39.600
Und dann kann ich mit der rechten Maustaste darauf klicken.

09:41.550 --> 09:42.420
Entschuldigung, ich war im Spielmodus.

09:42.960 --> 09:44.910
Doppelklick darauf und es läuft wieder.

09:44.940 --> 09:45.390
Sehr gut.

09:45.390 --> 09:46.290
Immer noch grün.

09:46.290 --> 09:49.650
Und ich kann mit der rechten Maustaste darauf klicken und Quellcode öffnen wählen.

09:50.810 --> 09:54.860
Das ist ein einfacher Weg, um direkt zur richtigen Klasse und zur richtigen Methode zu gelangen.

09:54.890 --> 09:57.380
Hier ist wieder der Methodenname, den wir gesehen haben.

09:57.410 --> 10:00.920
Wieder ist das Ergebnis 15, wenn fünf und zehn addiert werden.

10:00.950 --> 10:07.130
Der Grund, warum das wichtig ist, ist, dass wenn man viele Testklassen mit vielen Testmethoden hat,

10:07.130 --> 10:14.660
und ich hoffe, dass Sie das in Ihrem Projekt tun, um herauszufinden, was im Test Runner was im Code ist

10:14.660 --> 10:17.670
Basis hier ist, ist es schön, diese konsistente Benennung zu haben.

10:17.690 --> 10:22.960
Was wir hier also tun, ist die Methodik arrange, act und assert.

10:22.970 --> 10:23.780
In der Anordnung.

10:23.780 --> 10:28.370
Als erstes erstellen wir eine neue Instanz von dem, was wir testen wollen.

10:28.370 --> 10:32.490
Auf diese Weise wissen wir, dass sie nicht herumgelegen hat und keine alten Daten in ihr enthalten sind.

10:32.510 --> 10:33.850
Das ist immer eine gute Übung.

10:33.860 --> 10:35.540
Dann werden wir danach handeln.

10:35.540 --> 10:39.200
Was ist die eine Methode, wenn man damit durchkommt?

10:39.200 --> 10:41.750
Vielleicht zwei Methoden, die wirklich den Test machen.

10:41.750 --> 10:43.220
Aber eine Methode ist ideal.

10:43.250 --> 10:45.740
Hier addieren wir fünf und zehn zusammen.

10:45.740 --> 10:49.720
Und dann in der Assert-Sprache werden wir diese Assert-Sprache verwenden.

10:49.730 --> 10:56.720
Die Assert-Klasse hat eine bestimmte Struktur, in der man sagt, ich behaupte, dass etwas etwas ist.

10:56.720 --> 11:01.730
Und Sie können sich die Dokumentation dazu ansehen, um zu sehen, wie man das formatieren kann.

11:01.730 --> 11:07.840
Aber oft verwende ich is equal to oder is true oder is false.

11:07.850 --> 11:10.730
Das sind die Formate, die man hier recht häufig sieht.

11:11.060 --> 11:15.980
Wenn ich das ausführe, weil der Code korrekt läuft, addiert er fünf und zehn zu 15.

11:16.010 --> 11:16.760
Das war's.

11:16.790 --> 11:18.070
Wir sind in der Lage, das zu tun.

11:18.080 --> 11:21.710
Erinnern Sie sich jetzt an das Beispiel, das ich im Produktionscode gegeben habe.

11:21.710 --> 11:30.710
Was wäre, wenn Sie fünf und zehn testen wollten und dann sechs und 11 und dann sieben und 12 oder was auch immer

11:30.710 --> 11:31.760
Kombinationen?

11:31.760 --> 11:38.570
Je besser man im Testen wird, desto mehr erkennt man, wie viele Tests man wirklich braucht, um eine angemessene Abdeckung zu erreichen.

11:38.600 --> 11:44.240
Es ist eine Kunst und eine Wissenschaft, wie viele Tests man mindestens durchführen kann, um eine ausreichende Abdeckung zu erreichen.

11:44.240 --> 11:47.800
und die Codeabdeckung, die Sie haben, maximieren.

11:47.810 --> 11:53.090
Eines der Dinge, über die ich im Rahmen dieses Workshops sprechen wollte, sind die sogenannten

11:53.090 --> 11:54.890
parametrisierte Tests.

11:54.890 --> 12:01.520
Anstatt also einfach diesen Test zu kopieren, ihn unten einzufügen und die Werte so zu verändern, dass sie sich zu sechs addieren

12:01.520 --> 12:08.840
und 11 oder 0 und negative Zehn zu addieren, können wir Unity bitten, genau denselben Test durchzuführen, aber mit anderen

12:08.840 --> 12:09.590
Werte.

12:09.590 --> 12:11.810
Hier gibt es eine Menge verschiedener Optionen.

12:11.810 --> 12:13.400
Ich zeige hier nur eine von ihnen.

12:13.400 --> 12:15.890
Aber sehen wir uns mal hier unten um.

12:16.790 --> 12:23.150
Wir sagen, dass wir davon ausgehen, dass das Ergebnis korrekt ist, wenn diese Werte übereinstimmen.

12:23.150 --> 12:28.670
Also die Methodennamen sind ein bisschen vager, weil sie parametrisiert sind, ich weiß nicht unbedingt.

12:28.700 --> 12:31.490
Ist das ein Test für fünf und zehn ist 15.

12:31.520 --> 12:37.340
Beachten Sie, dass ich hier anstelle von fünf und zehn, was ich vorher gemacht habe, fünf und zehn deklariert habe.

12:37.370 --> 12:42.950
Im Hauptteil der Methode verwende ich diese besondere Sprache, ich verwende etwas, das sich Wertquelle nennt.

12:42.950 --> 12:44.300
Und dann übergebe ich es.

12:44.300 --> 12:50.180
Unity füllt dieses Feld auf und gibt die ersten Werte hier ein.

12:50.180 --> 12:51.800
Sagen wir also, es sind fünf.

12:51.830 --> 12:54.380
Dann wird hier eine weitere Wertquelle geholt.

12:54.410 --> 13:01.070
Sagen wir, einer ist zehn, und er nimmt an, dass sie fünf plus zehn addiert sind.

13:01.070 --> 13:06.020
Bei jedem Durchlauf wird also das Äquivalent des letzten Tests durchgeführt, den wir gesehen haben.

13:06.020 --> 13:12.110
Aber anstatt nur auf einen Satz von Werten festgelegt zu sein, wird er sie mischen und eine Vielzahl von Werten anzeigen

13:12.110 --> 13:12.620
von ihnen.

13:12.620 --> 13:15.520
Auch hier gibt es viele verschiedene Möglichkeiten, dies zu formatieren.

13:15.520 --> 13:19.730
Sie sollten sich die Dokumentation für parametrisierte Tests in Unity ansehen.

13:19.730 --> 13:21.980
Aber lassen Sie uns meinen speziellen Fall hier betrachten.

13:22.010 --> 13:24.410
Diese Wertquellen haben die Werte A und b.

13:24.410 --> 13:27.860
Sie beziehen sich einfach auf ein paar Arrays, die ich hier oben habe.

13:27.860 --> 13:34.040
Und was es tun wird, ist einfach durchzugehen und eins und eins zu testen, negativ zwei und

13:34.040 --> 13:36.620
negativ zwei, negativ drei und negativ drei und leitet sie weiter.

13:36.650 --> 13:43.130
Man kann sie so organisieren, wie man will, und verschiedene Szenarien testen, in denen man vielleicht sieben, 11

13:43.130 --> 13:43.730
und 12.

13:43.760 --> 13:45.260
Sie können alles testen, was Sie wollen.

13:45.290 --> 13:48.080
Jetzt müssen Sie nicht mehr unendlich viel testen.

13:50.510 --> 13:57.020
In manchen Szenarien sollte man ein paar negative Werte mit Null und ein paar positive Werte testen.

13:57.050 --> 14:01.880
Vielleicht ist das, was du tust, nicht mathematisch begründet und du möchtest es anders angehen, aber was du tust

14:01.880 --> 14:10.309
nach so genannten Eckfällen suchen. Wenn Sie zum Beispiel eine Divisionsmethode anwenden und sie mathematisch testen wollen, gibt es

14:10.310 --> 14:12.800
eine Herausforderung bei der Division durch Null.

14:12.800 --> 14:17.030
Man möchte also sehen, dass man die Null einfügt und das elegant handhabt.

14:17.030 --> 14:22.100
Sie müssen wirklich die spezifische Domäne kennen, in der Ihr Produktionscode liegt, um zu wissen, wie

14:22.100 --> 14:22.790
zu testen.

14:22.790 --> 14:27.080
Aber hier ein paar von jedem positiv und negativ und so weiter.

14:28.230 --> 14:31.010
Schauen wir uns mal an, wie das im Unity-Editor aussieht.

14:31.020 --> 14:32.730
Beachte also, was es hier macht.

14:32.730 --> 14:38.040
Es führt tatsächlich 49 Tests durch, die auf allen Kombinationen basieren, die wir hier haben.

14:38.040 --> 14:41.930
Es zeigt Ihnen also, wann die Werte sind, und gibt sie dann ein.

14:41.940 --> 14:43.490
Das ist also wirklich schön.

14:43.500 --> 14:50.490
Wenn du dir jetzt diese Ausgabe ansiehst, wirst du vielleicht feststellen, dass es für mich wichtig ist, 100 zu testen

14:50.490 --> 14:51.860
und -100.

14:51.870 --> 14:52.410
Sehr gut.

14:52.410 --> 14:58.950
Dann gehst du einfach zurück und fügst diese Beispielwerte ein, wenn du andere Dinge tun willst, anstatt nur eine harte

14:58.950 --> 14:59.700
kodierte Liste.

14:59.700 --> 15:03.600
Wenn du einen Zufallswert auswählen willst, hast du viele andere Möglichkeiten.

15:03.600 --> 15:06.240
Recherchieren Sie erneut über parametrisierte Tests.

15:06.420 --> 15:10.950
Sie können sich auch mit dem Spielmodus-Test befassen, wenn Sie wollen, aber da dieser interessanter sein wird

15:10.950 --> 15:15.060
interessant ist, machen wir weiter und schließen diesen Workshop ab.

15:15.060 --> 15:15.900
Ich danke Ihnen.
