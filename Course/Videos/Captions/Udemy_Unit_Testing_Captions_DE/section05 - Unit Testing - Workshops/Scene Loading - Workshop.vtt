WEBVTT

00:00.320 --> 00:03.950
Hallo und herzlich willkommen zu den Unit-Tests für Unity-Workshops.

00:03.950 --> 00:06.800
Und hier werden wir uns das Laden von Szenen ansehen.

00:06.800 --> 00:12.860
Wenn wir an Unit-Tests denken, denken wir traditionell an das Testen der kleinsten Code-Einheit mit dem

00:12.860 --> 00:15.530
wenigsten Zeilen und den wenigsten Abhängigkeiten.

00:15.530 --> 00:21.530
Am anderen Ende des Spektrums der Einfachheit steht die Komplexität.

00:21.530 --> 00:27.710
Und eines der wichtigen grundlegenden Objekte innerhalb der Einheit ist die Szene selbst.

00:28.220 --> 00:35.150
Alles, was du als Spieler in einem Spiel siehst, befindet sich in einer Szene.

00:35.150 --> 00:39.950
Wir können also die einzelnen Skripte oder Elemente innerhalb einer Szene testen.

00:39.950 --> 00:44.210
Oder, wie wir hier zeigen werden, können wir die gesamte Szene selbst testen.

00:44.210 --> 00:45.710
Und warum sollten wir das tun?

00:45.710 --> 00:48.110
Zunächst einmal ist es ein netter Rauchtest.

00:48.140 --> 00:53.630
Ein einfacher Weg, um zu sehen, ob die Szene geladen wurde und ob sie ohne Ausnahmen geladen wurde.

00:53.630 --> 00:54.980
Das allein ist es wert.

00:54.980 --> 00:56.690
Lasst uns über die Dinge nachdenken, die wir tun können.

00:56.720 --> 01:00.770
Wir könnten Annahmen über die Struktur der Szene und die darin befindlichen Objekte machen.

01:00.770 --> 01:04.340
Wir können Annahmen über das Verhalten von Dingen in der Szene machen.

01:04.340 --> 01:11.210
Und ein Arbeitsablauf, den ich wirklich cool finde, ist, dass man diese Tests hinter sich lassen kann und die Nicht-Programmierer

01:11.210 --> 01:15.590
in Ihrem Team die Tests vor und nach ihrer Arbeit durchführen lassen.

01:15.590 --> 01:21.590
Vielleicht kann ein Leveldesigner zuversichtlicher arbeiten, weil er weiß, dass neu hinzugefügte Level nicht

01:21.590 --> 01:25.490
bestehende Szenen oder Überarbeitungen bestehender Levels unterbrechen.

01:25.490 --> 01:31.450
Machen Sie auch keine der Szenen kaputt, und Ihr Grafikteam kann sicher sein, dass, wenn sie einige Szenen ersetzen würden

01:31.460 --> 01:37.400
Assets ersetzt oder neue Assets hinzufügt, aus der Sicht des Programmierers nichts kaputt gemacht wird.

01:37.400 --> 01:39.200
Wie würde dieser Arbeitsablauf also aussehen?

01:39.200 --> 01:45.680
Nun, ich zeige hier ein Beispiel, wie man einen Test im Wiedergabemodus erstellt und eine ganze Szene in

01:45.680 --> 01:49.070
diesen Wiedergabemodus-Test laden und mit Hilfe von Assertions einige Annahmen treffen.

01:49.070 --> 01:56.030
Zum Beispiel könnte man eine Szene laden und in der Intro-Szene prüfen, ob das Menü richtig angezeigt wird.

01:56.030 --> 01:57.620
Wir sind in einer Gameplay-Szene.

01:57.650 --> 02:03.080
Stellen Sie sicher, dass das Hintergrundelement, der Held und alle Feinde an der richtigen Stelle instanziiert wurden.

02:03.080 --> 02:03.470
Moment instanziiert werden.

02:03.470 --> 02:08.900
Da wir nun die Tür zu der großen Komplexität öffnen, die innerhalb einer bestimmten Szene möglich ist, kann es

02:08.900 --> 02:15.380
überwältigend erscheinen, dass man alles in einer Szene ausprobieren möchte, aber auch hier denke ich, dass selbst ein sehr

02:15.380 --> 02:22.490
konservativer Test, der nur die Szene lädt und sicherstellt, dass 1 oder 2 Schlüsselelemente vorhanden sind, ohne Ausnahmen.

02:22.490 --> 02:27.400
Thrown ist eine fantastische niedrig hängende Frucht, die Ihrem Team einen Mehrwert bringt.

02:27.410 --> 02:28.580
Lassen Sie uns einen Blick hineinwerfen.

02:28.580 --> 02:29.240
Einigkeit.

02:29.510 --> 02:31.910
Hier sind wir innerhalb des Kernprojekts.

02:31.940 --> 02:33.440
Jetzt im Fenster des Testläufers.

02:33.440 --> 02:35.450
Hier haben wir viele verschiedene Kategorien.

02:35.450 --> 02:42.140
Ich habe das Laden der Szene ausgewählt und Sie können sehen, dass wir einige Editor- und Laufzeittests haben.

02:42.140 --> 02:48.380
Weil die Szenen und die Dinge, die ich hier testen will, mit dem typischen Laufzeitverhalten zusammenhängen

02:48.380 --> 02:50.240
von Unity Monobehaviours.

02:50.240 --> 02:54.470
Ich werde mich zum Beispiel nur auf den Laufzeittest konzentrieren, den Spielmodus-Test.

02:54.470 --> 02:56.470
Ich werde also den Test im Bearbeitungsmodus deaktivieren.

02:56.480 --> 02:58.220
Schauen wir uns mal an, was wir hier haben.

02:58.220 --> 03:04.970
Wir werden also jedes Mal, wenn wir diesen Test ausführen, überprüfen, ob

03:04.970 --> 03:12.500
die Intro-Szene einen Helden enthält, der unseren Hauptcharakter im Spiel simuliert, dass die Intro-Szene

03:12.500 --> 03:15.020
geladen wird, ohne dass Ausnahmen ausgelöst werden.

03:15.260 --> 03:17.720
Und dann wiederholen wir das für die Spielszene.

03:17.930 --> 03:23.480
Sie könnten sich vorstellen, dass Sie einen Test haben, der alle Ihre Szenen systematisch testet.

03:23.480 --> 03:30.950
Ich habe mich dafür entschieden, einen Test für jede der gewünschten Funktionalitäten zu strukturieren, einen

03:30.950 --> 03:36.770
für den Helden, einen für die Ausnahmen, und das für jede der Szenen, alles innerhalb eines Tests

03:36.770 --> 03:37.310
Struktur.

03:37.310 --> 03:40.610
Aber Sie können entscheiden, wie Sie das Ganze skalieren, je nachdem, was Sie und Ihr Team tun wollen.

03:40.640 --> 03:41.840
Lassen Sie mich diese Tests durchführen.

03:41.840 --> 03:42.920
Alles ist bestanden.

03:42.920 --> 03:44.690
Sie können sehen, dass wir etwas Konsolenverkehr haben.

03:44.690 --> 03:45.920
Werfen wir einen Blick auf den Quellcode.

03:45.920 --> 03:50.990
In diesem Test sage ich also, dass das Intro der Szene eins, das ist der Name einer der Szenen im

03:50.990 --> 03:57.710
Projekt ist, gehen wir davon aus, dass der Held nicht Null ist, wenn die Szene geladen wird, im Gegensatz zu einigen unserer kleinsten

03:57.710 --> 04:01.280
Unit-Tests, die Szene laden und es gut und schön machen.

04:01.280 --> 04:02.540
Einen schönen Arbeitsablauf hier zu haben.

04:02.540 --> 04:06.140
Es erfordert einige Vorbereitungen, also lasst uns darüber sprechen, was die Vorbereitungen sind.

04:06.140 --> 04:09.380
Als erstes höre ich mir den Szenenmanager an, um zu sehen.

04:09.380 --> 04:14.840
Hey, ist die Szene, die ich laden möchte, geladen worden, dann werde ich die Szene hier laden.

04:14.840 --> 04:21.830
Ich habe eine statische Variable für die Szenennamen erstellt, damit ich sie leichter isolieren kann und

04:21.830 --> 04:23.360
zu aktualisieren, wenn ich das muss.

04:23.390 --> 04:26.090
Dann werde ich hier sitzen und warten, während die Szene geladen wird.

04:26.090 --> 04:31.580
Das stellt sicher, dass ich nichts annehme oder behaupte, bis die Szene geladen ist.

04:31.580 --> 04:33.020
Es passiert ziemlich schnell.

04:33.020 --> 04:37.640
Dann kann ich hier eine Introspektion der Szene durchführen.

04:37.670 --> 04:43.700
Eine sehr mächtige Sache, die ich tun kann, ist, die gesamte Szene zu durchsuchen, nachdem sie geladen wurde, und nach irgendwelchen

04:43.700 --> 04:45.320
Existenz eines bestimmten Skripts.

04:45.320 --> 04:52.730
Wenn ich eine Voreinstellung namens hero oder ein individuelles hero-Skript in dieser Szene hätte, würde dies einen Wert zurückgeben.

04:52.730 --> 04:57.020
Ich könnte auch eine Liste aller Helden oder aller Feinde zurückbekommen.

04:57.020 --> 04:59.840
Wenn ich mehrere habe, kann ich über sie iterieren und.

04:59.940 --> 05:01.670
Und jeden Test durchführen, den ich will.

05:01.680 --> 05:03.960
Ich mache hier einen absichtlich schlanken Test.

05:03.990 --> 05:06.780
Ich muss nur sicherstellen, dass der Held nicht Null ist.

05:06.810 --> 05:14.100
Wenn zum Beispiel ein Künstler oder ein Leveldesigner den Helden in einer bestimmten Szene versehentlich gelöscht hat, ist das

05:14.730 --> 05:17.680
Und es war ein netter Test, um sicherzustellen, dass die Elemente vorhanden sind.

05:17.700 --> 05:23.550
Sie können sich vorstellen, dass ein System in Unity ziemlich komplex sein kann und Ihre Szenen ziemlich komplex sein können

05:23.550 --> 05:24.000
auch.

05:24.030 --> 05:26.820
Du kannst hunderte oder sogar tausende von Objekten haben.

05:26.820 --> 05:33.060
Sie müssen nicht unbedingt für jedes einzelne Objekt eine Behauptung aufstellen, aber je nachdem, wie Sie

05:33.060 --> 05:38.460
organisieren, können Sie vielleicht einige einfache Dinge wie den Hintergrund oder die Benutzeroberfläche überprüfen,

05:38.490 --> 05:45.360
der Held, und eine Liste von Feinden, die allein einfach zu testen sind, indem man einfach ein paar Zeilen hier hinzufügt, und

05:45.360 --> 05:50.340
dann haben Sie mehr Vertrauen, wenn Sie und Ihr Team am Code arbeiten und Änderungen an Ihrer Version vornehmen

05:50.340 --> 05:53.790
Kontroll-Repository, dass niemand aus Versehen etwas kaputt macht.

05:53.790 --> 06:00.630
Erinnern Sie sich, was Sie jetzt tun, ist die Szene oder alle Szenen abzuspielen und dann

06:00.630 --> 06:05.780
sicherstellen, dass Sie nicht visuell feststellen, dass hier etwas fehlt oder kaputt ist.

06:05.790 --> 06:07.930
Die Automatisierung ist viel, viel reibungsloser.

06:07.950 --> 06:09.290
Werfen wir einen Blick auf die anderen Tests.

06:09.300 --> 06:16.080
Wir haben hier einen, der die Szene lädt und dann sicherstellt, dass er keine Ausnahmen auslöst.

06:17.110 --> 06:20.960
Dann wiederholen wir die gleichen zwei Tests für alle anderen Szenen.

06:20.980 --> 06:25.630
Werfen wir nun einen Blick auf den oberen Teil dieser Testszene und sehen uns einige der zusätzlichen Einstellungen an, die

06:25.660 --> 06:26.230
benötigt werden.

06:26.260 --> 06:32.410
Eine Sache ist, dass, weil wir Szenen mit Code laden, diese in den Unity Build Einstellungen vorhanden sein müssen.

06:32.410 --> 06:35.530
Das gilt sowohl für die Produktion als auch für das Testen.

06:35.560 --> 06:41.110
Nun könnten Sie und Ihr Team einfach sicherstellen, dass es immer aktualisiert wird und dies manuell innerhalb der

06:41.110 --> 06:41.950
Unity-Editor.

06:41.950 --> 06:44.950
Schauen wir uns an, wie wir das jetzt hier in Unity machen würden.

06:44.980 --> 06:46.840
Man geht zu File Build Settings.

06:46.840 --> 06:50.020
Und hier oben ist die Liste mit allen Szenen, die man braucht.

06:50.050 --> 06:53.710
Wenn Sie nun vergessen, eine Szene hinzuzufügen, wird der Test fehlschlagen.

06:53.710 --> 06:59.380
Anstatt also zu verlangen, dass wir uns diesen speziellen Schritt merken, was in Ordnung ist, wenn Ihr Team das tun möchte

06:59.380 --> 07:04.030
Ich automatisiere das und füge die Szenen, die wir hinzufügen wollen, dynamisch hinzu.

07:04.060 --> 07:10.990
Ich verwende also einige vorhandene Schnittstellen, die Unity hier zur Verfügung stellt, wenn

07:10.990 --> 07:13.930
der Build aufgesetzt wird und wenn der Build aufgeräumt wird.

07:13.960 --> 07:18.550
Diese sind anders als einige der Attribute, die wir in früheren Tests gesehen haben, aber ich werde nicht weiter darauf eingehen

07:18.550 --> 07:19.720
die Komplexität hier.

07:19.720 --> 07:25.960
Aber Sie sollten wissen, dass ich im Setup unsere beiden Testszenen zu den Build-Einstellungen hinzufüge.

07:26.290 --> 07:32.020
Und hier unten, in der Bereinigung, mache ich die beiden hinzugefügten Szenen rückgängig oder entferne sie.

07:32.230 --> 07:35.890
Es gibt viele verschiedene Möglichkeiten, das zu organisieren, aber Sie können einen Blick auf den Quellcode werfen

07:35.890 --> 07:37.520
und sehen, ob man dort etwas anderes machen will.

07:37.540 --> 07:44.800
Hier unten im Test nehme ich an, dass ich in der Lage bin, load scene für jede der testbaren Szenen aufzurufen

07:44.800 --> 07:46.150
und wir sind startklar.

07:46.150 --> 07:47.110
Das war's also.

07:47.140 --> 07:52.660
Es ist ziemlich einfach einzurichten, und wenn Sie auf dem aufbauen, was hier im Beispielprojekt angegeben ist, werden Sie

07:52.660 --> 07:57.750
werden Sie schnell Erfolg haben, wenn Sie Ihre Szenen für Ihre Spielproduktion testen.

07:57.760 --> 07:58.660
Danke!
