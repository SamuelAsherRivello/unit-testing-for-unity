WEBVTT

00:00.260 --> 00:02.360
Hallo und willkommen zu Unit Testing für Unity.

00:02.390 --> 00:06.020
Wir werden uns hier meinen Datenlader in der fortgeschrittenen Version ansehen.

00:06.020 --> 00:12.170
Um diese Demo in Aktion zu sehen, öffnen wir den Unity Download und verwenden das Source Beispielprojekt für

00:12.170 --> 00:12.920
diesen Kurs.

00:12.920 --> 00:15.020
Und wir werden uns hier eine Schlüsselszene ansehen.

00:15.020 --> 00:17.210
Das ist der erweiterte My Data Loader.

00:17.210 --> 00:23.210
Einige der Konzepte, über die ich hier sprechen werde, beinhalten die Injektion von Abhängigkeiten, wie wir sie sehen, und den Endersatz.

00:23.210 --> 00:29.150
Hier sind wir in Unity, ich habe diese Szene für den My Data Loader fortgeschritten und bereit, hier loszulegen.

00:29.150 --> 00:34.070
Also werden wir diese Szene für eine ganze Reihe von Szenen im Workshop ausführen.

00:34.070 --> 00:38.840
Das Ausführen der Produktionsszene ist nicht das Interessante, aber ich ermutige Sie immer dazu, es einfach zu tun

00:38.840 --> 00:39.890
als Ausgangspunkt.

00:39.890 --> 00:46.310
Hier sehen wir ein einfaches Konsolenprotokoll, das besagt, dass die Länge der geladenen Daten diese ist.

00:46.340 --> 00:50.120
Dieser Wert ist nicht allzu wichtig, aber Sie können sich die Beispielklasse ansehen, wenn Sie wollen

00:50.120 --> 00:50.480
ansehen wollen.

00:50.480 --> 00:52.160
Führen wir den Test dafür aus.

00:54.550 --> 00:58.090
Hier oben habe ich meine Kategorie auf "Datenlader erweitert" eingestellt.

00:58.090 --> 01:02.320
Wir sehen also nur den Test, der damit zusammenhängt, und nur im Bearbeitungsmodus.

01:02.350 --> 01:06.490
Es gibt auch einen Test im Spielmodus, den Sie sich in Ruhe ansehen können, aber ich denke, dass der Bearbeitungsmodus

01:06.490 --> 01:07.630
hier interessanter ist.

01:07.630 --> 01:09.490
Ich werde also alle Läufe durchführen.

01:15.130 --> 01:19.450
Und hier sehen wir, dass wir zwei Tests haben, und beide bestehen mit einem grünen Haken, was großartig ist.

01:19.480 --> 01:24.510
Schauen wir uns sowohl den Load Async als auch den Mock Load Async an und sehen wir uns an, wie sie funktionieren.

01:24.520 --> 01:26.260
Hier sind wir also im Beispielcode.

01:26.260 --> 01:31.060
Wenn Sie dem letzten Video gefolgt sind, und ich hoffe, das sind Sie, haben wir die Methode besprochen, nach der wir suchen

01:31.060 --> 01:38.920
die einen Aufruf an einen Webserver verwendet, die Daten zurücklädt und den Wert überprüft.

01:38.920 --> 01:42.370
Das kommt dem Anwendungsfall in der Produktion sehr nahe, oder?

01:42.370 --> 01:44.830
Aber wir haben über einige der Probleme gesprochen, die dabei auftreten.

01:44.860 --> 01:49.030
Teste ich meinen Code oder teste ich den darunter liegenden Unity Web Service?

01:49.180 --> 01:50.140
Teste ich das?

01:50.140 --> 01:53.140
Oder teste ich das Backend von github.com?

01:53.140 --> 02:00.010
Und wenn es sich um einen stabilen Server handelt, sollten Sie Ihre Tests auf Ihren eigenen Code konzentrieren und mindestens

02:00.010 --> 02:01.810
und wenigsten Abhängigkeiten wie möglich haben.

02:01.810 --> 02:03.990
Es gibt also einige Probleme damit.

02:04.000 --> 02:09.910
Das erste, was ich gemacht habe, als ich mich mit diesem Thema beschäftigt habe, war, über Dependency Injection nachzudenken.

02:09.910 --> 02:16.510
Nehmen wir an, dass ich in der Produktion eine Möglichkeit haben möchte, dass ich dies aufrufe und dass es implementiert wird, dass

02:16.510 --> 02:18.340
ist die Verwendung des Unity Web Service.

02:18.370 --> 02:22.690
Dann möchte ich zum Testen vielleicht eine zweite Möglichkeit haben, wie ich es angehen kann.

02:22.720 --> 02:29.800
Man könnte ein Flag in der Codebasis haben, das besagt, dass Debug gleich true oder production ist

02:29.800 --> 02:30.700
gleich falsch ist?

02:30.700 --> 02:35.260
Und in Ihrem Produktionscode machen Sie bestimmte Dinge im Testmodus und bestimmte Dinge nicht.

02:35.290 --> 02:39.850
Ich sehe das oft in Codebasen, aber das ist generell keine gute Praxis.

02:39.850 --> 02:45.790
Man verschmutzt den Produktionscode mit Dingen, die eigentlich nur für Tests gedacht sind, also ist es nicht so gut geeignet.

02:45.820 --> 02:47.200
Dies ist eine bessere Lösung.

02:47.200 --> 02:49.810
Schauen wir uns an, was wir gut machen.

02:49.810 --> 02:55.600
Im vorigen einfachen Beispiel hatte ich weder ein Konzept für einen Netzdienst, noch habe ich ihn übergeben

02:55.600 --> 02:56.110
hier.

02:56.140 --> 02:59.440
Wir haben es einfach erstellt und es hat immer in eine Richtung funktioniert.

02:59.440 --> 03:03.670
Aber die Dependency Injection hier ist, dass ich entscheide.

03:03.670 --> 03:07.080
Hier ist ein benutzerdefinierter Weg, wie das funktionieren könnte.

03:07.090 --> 03:11.290
Hier ist ein Teil der Logik, die ich auf verschiedene Arten austauschen könnte.

03:11.290 --> 03:13.930
Ich deklariere es hier in einer Zeile, und dann gebe ich es ein.

03:13.930 --> 03:17.440
Sie können sich also vorstellen, dass Sie mehrere verschiedene Netzwerkdienste haben.

03:17.440 --> 03:22.000
Ich könnte einen haben, der nur zum Testen ist, einen, der nur für die Produktion ist, einen, der nur auf

03:22.000 --> 03:26.560
eine lokale Festplatte, eine, die für einen bestimmten Backend-Server geeignet ist.

03:26.560 --> 03:27.370
et cetera.

03:27.400 --> 03:30.070
Es gibt auch Anwendungsfälle in der Produktion.

03:30.070 --> 03:31.980
Die Idee der Dependency Injection.

03:31.990 --> 03:34.270
Warum nennen wir es nun Dependency Injection.

03:34.270 --> 03:43.960
Weil, anstatt dass mein fortgeschrittener Datenlader immer nur eine Sache macht, gebe ich einige Informationen ein, die entscheiden

03:43.960 --> 03:45.490
wie er arbeiten wird.

03:45.490 --> 03:52.000
Anstatt dass die Klasse selbst alles weiß, übergebe ich in diesem Fall eine Abhängigkeit zu

03:52.000 --> 03:54.160
den Unity Web Request Network Dienst.

03:54.160 --> 04:00.340
Schauen wir uns also an, wie das strukturiert ist, und dann werden wir sehen, warum es für uns hilfreich ist, wenn wir

04:00.340 --> 04:01.180
unsere Tests.

04:01.300 --> 04:05.050
Hier ist also der komplette Quellcode für den My Data Loader advanced.

04:05.080 --> 04:07.330
Jetzt möchte ich mich auf zwei Dinge konzentrieren.

04:07.330 --> 04:11.420
Das eine ist, dass ich in seinem Konstruktor diese Abhängigkeit übergebe.

04:11.440 --> 04:18.970
Nun zur Dependency Injection und wie man flexible Klassen aus diesem Konzept der Dependency Injection erstellt

04:18.970 --> 04:21.580
liegen wirklich außerhalb des Rahmens dieses Kurses.

04:21.610 --> 04:24.130
Es ist eine wirklich gute Sache, die Sie sich ansehen sollten.

04:24.130 --> 04:30.640
Du könntest etwas googeln wie D I für Unity oder Dependency Injection für Unity, oder sogar Dependency

04:30.640 --> 04:35.320
Injektion in der objektorientierten Programmierung, um mehr über diese allgemeinen Konzepte zu erfahren.

04:35.320 --> 04:41.040
Aber ich gehe davon aus, dass Sie mit diesen Konzepten einigermaßen vertraut sind, vor allem, wenn man meine Erklärung betrachtet, die ich gerade gegeben habe,

04:41.050 --> 04:42.340
Lassen Sie uns damit fortfahren.

04:42.370 --> 04:49.720
Jetzt, wo ich das hier als Abhängigkeit übergebe und speichere, kann ich jedes Mal, wenn ich unsere Kernfunktionalität aufrufe

04:49.750 --> 04:56.470
Load Async aufrufe, sage ich, okay, wenn ich bereit bin, Async zu laden, sage ich meinem Netzwerkdienst einfach

04:56.470 --> 04:57.630
async zu laden.

04:57.640 --> 05:04.930
Nun können Sie sich vorstellen, dass ich einen Netzwerkdienst übergeben habe, der ein asynchrones Laden für einen Backend-Server durchführt

05:04.930 --> 05:06.700
einer bestimmten Technologie.

05:06.730 --> 05:08.320
Diese Zeile hier würde das tun.

05:08.550 --> 05:14.800
Wenn ich etwas anderes einführe, das auf die Festplatte schreibt oder von der Festplatte liest, als einen anderen Typ

05:14.800 --> 05:17.890
eines Netzwerkdienstes, würde sich diese Zeile hier wirklich ändern.

05:17.890 --> 05:24.010
Ich muss also nicht 2 oder 3 verschiedene Versionen meines Datenladers haben, die hier fortgeschritten sind.

05:24.010 --> 05:29.040
Stattdessen übergebe ich eine benutzerdefinierte Implementierung, die dieses spezielle Detail auf eine einzigartige Weise behandelt.

05:29.050 --> 05:33.030
Das ist eine sehr leistungsfähige Methode, um Ihren Code flexibler zu gestalten.

05:33.040 --> 05:41.290
Nun, da wir über die Übergabe einer Abhängigkeit gesprochen haben und wie sie die Funktionalität umhüllen kann

05:41.290 --> 05:44.560
schauen wir uns nun an, was die Quelle für diese spezielle Abhängigkeit ist.

05:44.560 --> 05:49.150
Hier oben in der gleichen Klassendatei habe ich ein paar Dinge zu besprechen.

05:49.150 --> 05:51.490
Erstens, ich habe eine Schnittstelle erstellt.

05:51.610 --> 05:59.140
Diese Schnittstelle hier von I network service erklärt, dass jeder, der als lebensfähiges Unternehmen betrachtet werden will

05:59.140 --> 06:04.900
Abhängigkeit betrachtet werden will, muss eine oder mehrere Methoden zur Verfügung haben.

06:04.900 --> 06:09.820
Und in diesem Fall muss es nur die Load Async haben und eine String-URL nehmen.

06:09.850 --> 06:10.620
Das war's.

06:10.630 --> 06:14.530
Wenn Sie sich nicht so gut mit Schnittstellen auskennen.

06:14.820 --> 06:16.440
Bitte schauen Sie sich Schnittstellen an.

06:16.440 --> 06:22.200
Du könntest dir so etwas wie Schnittstellen im Vergleich zu Klassen in C-Sharp oder in Unity ansehen, und du wirst viel sehen

06:22.200 --> 06:23.040
von Beispielen.

06:23.040 --> 06:29.850
Aber ein wichtiger Unterschied ist, dass die Schnittstelle definiert, was die öffentliche API ist, aber sie definiert nicht

06:29.850 --> 06:31.920
um die Implementierung kümmert.

06:31.980 --> 06:35.430
Die Implementierung wird hier unten in einer öffentlichen Klasse deklariert.

06:35.460 --> 06:37.590
Mit Klassen sind Sie wahrscheinlich besser vertraut.

06:37.920 --> 06:42.480
Und was wir hier machen, ist, dass wir eine bestimmte Variante davon implementieren.

06:42.480 --> 06:48.240
Der Netzwerkdienst in dieser speziellen Variante sollte Ihnen aus dem vorherigen Video sehr vertraut vorkommen.

06:48.270 --> 06:50.640
Dies ist genau die gleiche Implementierung.

06:50.910 --> 06:58.020
Wir verwenden einfach die Unity-Webanforderung und führen dann die Send-Webanforderungs-Methodik aus.

06:58.020 --> 07:03.420
Jetzt, wo wir uns den Quellcode angeschaut haben, können wir sehen, dass wir nur Folgendes erstellen

07:03.420 --> 07:06.150
eine benutzerdefinierte Klasse, die einen kleinen Teil der Funktionalität übernimmt.

07:06.150 --> 07:08.430
Und wir übergeben diese benutzerdefinierte Klasse dort hinein.

07:08.430 --> 07:12.920
Aber wir haben jetzt eine erweiterte Klasse my data loader, die viel flexibler ist.

07:12.930 --> 07:17.600
Warum ist die Injektion von Abhängigkeiten gerade in der Welt des Testens relevant?

07:17.610 --> 07:23.280
Nun, wir haben ein wunderbares Dienstprogramm, das wir in Unity für unsere Unit-Tests verwenden können.

07:23.280 --> 07:28.710
Dies ist eine Bibliothek namens N-Substitut und sie ist hier im Beispielprojekt enthalten.

07:28.710 --> 07:31.890
Schauen wir uns eine weitere Testmethode direkt unter der anderen an.

07:31.890 --> 07:35.790
Hier wird ein sogenanntes Mock einer Klasse verwendet.

07:35.790 --> 07:41.190
Hier haben wir also eine sehr ähnliche Erstellung des My Data Loader advanced.

07:41.190 --> 07:46.980
Und anstatt die Version der Unity-Webanforderung zu übergeben, werden wir etwas tun, das ziemlich ähnlich aussieht

07:47.010 --> 07:47.760
merkwürdig aussieht.

07:47.760 --> 07:50.820
Wir werden eine Ersatzbibliothek verwenden.

07:50.820 --> 07:58.170
Und was wir hier tun werden, ist, dass wir in diesen beiden Zeilen "Hey on the fly" sagen und Folgendes erstellen werden

07:58.170 --> 08:02.910
eine Klasse, die genau die Funktionalität bietet, die ich brauche.

08:02.910 --> 08:09.900
Aber da es sich um eine Mock-Klasse handelt, muss sie nicht unbedingt den Server anrufen.

08:09.900 --> 08:15.330
Stattdessen wird sie in Schlüsselmomenten einen vorhersagbaren Wert an uns zurückgeben.

08:15.330 --> 08:24.570
Denken Sie daran, dass der Test den Datenlader anweist, eine URL innerhalb der Daten zu laden

08:24.570 --> 08:28.650
Loader sagt dem Netzwerkdienst, dass er eine URL laden soll.

08:28.680 --> 08:35.340
Dieser letzte Schritt dauert im Endergebnis eine halbe Sekunde, lädt vom Server und kehrt zurück

08:35.370 --> 08:36.780
eine Zeichenkette zurück.

08:36.780 --> 08:41.670
Alles, was ich in einer Simulationssituation brauche, ist also: Okay, rufe nicht einmal einen Server an.

08:41.670 --> 08:45.240
Wenn ich das aufrufe, gibst du mir einfach einen String zurück.

08:45.240 --> 08:54.630
Also sage ich hier mit dieser Sprache, dass ich jedes Mal, wenn ich load async aufrufe und einen beliebigen String übergebe

08:54.630 --> 08:59.370
für die URL, dann das Wort "mocked data" zurückgeben.

08:59.640 --> 09:05.970
Dann könnte ich hier unten sicherstellen, dass ich das erwartete Ergebnis erhalte, das ich will, anstatt zu prüfen

09:05.970 --> 09:09.930
dass es doctype in der Rückgabe hat, wie ich es vorher getan habe.

09:09.930 --> 09:13.650
Ich kann hier nach den Scheindaten suchen.

09:13.650 --> 09:22.290
Was wir hier sehen, ist also ein sehr einfaches Beispiel, und es mag nicht nützlich erscheinen, aber stellen Sie sich vor, in einem

09:22.290 --> 09:29.460
komplexeren Beispiel vor, in dem wir nicht nur Daten laden, sondern diese laden, lesen, schreiben, transformieren

09:29.460 --> 09:32.730
die Daten, eine ganze Menge, vielleicht 5 oder 6 verschiedene Methoden.

09:32.760 --> 09:39.060
Sie alle könnten auf ganz unterschiedliche Systeme verweisen, aber wenn wir wirklich nur die

09:39.060 --> 09:48.210
Datenlader testen wollen, dann wollen wir gespiegelte Fähigkeiten für diese anderen Systeme übergeben, um nur vorübergehend eine Art

09:48.210 --> 09:52.130
ignoriert werden, damit wir uns auf das konzentrieren können, was wir hier vor uns haben.

09:52.140 --> 09:54.360
Schauen wir uns nun an, was passieren würde.

09:54.360 --> 09:56.850
Ich rufe also die Last asynchron auf.

09:56.850 --> 10:03.960
Was passieren wird, ist, dass dieses System den vorhergesagten Wert zurückgeben wird.

10:03.960 --> 10:08.130
Und der Datenlader wird dann "loaded" aufrufen.

10:08.130 --> 10:14.070
Und der Ergebniswert ist der Wert, den wir erwarten.

10:14.070 --> 10:18.210
Führen wir dies also im Unity-Editor aus.

10:18.210 --> 10:19.680
Also klicken wir hier auf run all.

10:22.010 --> 10:23.380
Und es funktioniert recht schnell.

10:23.390 --> 10:29.180
Vergleichen wir auch, wenn ich nur load async ausführe, was tatsächlich einen Server aufruft.

10:33.100 --> 10:34.120
Es war schnell.

10:34.150 --> 10:38.620
Wenn ich dann mock load async aufrufe, das keinen Server aufruft.

10:42.510 --> 10:47.720
Es ist vielleicht nicht aus dem Video ersichtlich, aber es ist viel schneller, das MOC aufzurufen.

10:47.730 --> 10:53.060
Und das macht Sinn, weil wir nicht wirklich einen Server anrufen und auf ein Ergebnis warten müssen.

10:53.070 --> 10:56.550
Es geht also nicht nur darum, ein paar Sekunden zu sparen.

10:56.580 --> 11:00.180
Es geht auch darum, dass wir uns bei der Entwicklung unserer Tests konzentrieren können.

11:00.210 --> 11:02.670
Was wollen wir eigentlich testen?

11:02.670 --> 11:04.830
Und dann wollen wir es isolieren.

11:04.830 --> 11:09.060
Wir testen also nicht wirklich eine Unity Web Services Klasse.

11:09.090 --> 11:11.580
Wir testen kein GitHub-Backend.

11:11.610 --> 11:15.390
Das gemeinsame Testen mehrerer Systeme wird als Integrationstest bezeichnet.

11:15.390 --> 11:17.460
Das ist eine geeignete Art von Test.

11:17.460 --> 11:21.570
Aber das liegt außerhalb dessen, worüber wir hier sprechen, nämlich über Einheitstests.

11:21.570 --> 11:26.340
Nochmals, so wenige Abhängigkeiten wie möglich, wenige Zeilen Code.

11:26.340 --> 11:27.360
Man könnte darüber nachdenken.

11:27.360 --> 11:35.790
So, das war's, wir haben uns angesehen, wie man die Ersatzbibliothek benutzt und wie man auch einen Mock für

11:35.790 --> 11:37.620
einen Aufruf an den Backend-Server.

11:37.620 --> 11:38.460
Vielen Dank also.
