WEBVTT

00:00.260 --> 00:02.360
Hello and welcome to Unit Testing for unity.

00:02.390 --> 00:06.020
We're going to be looking at my data loader in advanced version here.

00:06.020 --> 00:12.170
To see this demo in action we're going to open up unity Download and use the Source sample project for

00:12.170 --> 00:12.920
this course.

00:12.920 --> 00:15.020
And we'll take a look at a key scene here.

00:15.020 --> 00:17.210
That is the My Data loader advanced.

00:17.210 --> 00:23.210
Some of the concepts I'm going to talk about here include dependency injection as we see and end substitute.

00:23.210 --> 00:29.150
Here we are inside unity I've got this scene for the My Data loader advanced ready and ready to go here.

00:29.150 --> 00:34.070
So we'll go ahead and run that scene for quite a lot of these scenes in the workshop.

00:34.070 --> 00:38.840
Running the production scene is not the interesting thing, but I always encourage you to do it just

00:38.840 --> 00:39.890
as a starting point.

00:39.890 --> 00:46.310
So here we see simple console log that says length of the data loaded is this.

00:46.340 --> 00:50.120
That value is not too important, but you can dig into that example class if you want to take a look

00:50.120 --> 00:50.480
at it.

00:50.480 --> 00:52.160
Let's run the test for it.

00:54.550 --> 00:58.090
So up here I've got my category set to my data loader advanced.

00:58.090 --> 01:02.320
So we're only seeing the test related to that and only in edit mode.

01:02.350 --> 01:06.490
There's also a play mode test you can take a look at on your own time, but I think that the edit mode

01:06.490 --> 01:07.630
is more interesting here.

01:07.630 --> 01:09.490
So I will do run all.

01:15.130 --> 01:19.450
And here we see we've got two tests and they both pass with a green check, which is great.

01:19.480 --> 01:24.510
Let's look at both the load async and the mock load async and take a look at how they work.

01:24.520 --> 01:26.260
So here we are in the sample code.

01:26.260 --> 01:31.060
If you followed along from the last video and I hope you do, we went over the method that we're looking

01:31.060 --> 01:38.920
at here, which uses an actual call to a web server, loads the data back and checks the value of it.

01:38.920 --> 01:42.370
This closely resembles what the production use case would it be?

01:42.370 --> 01:44.830
But we've talked about some of the problems there.

01:44.860 --> 01:49.030
Am I testing my code or am I testing Unity Web Service underneath it?

01:49.180 --> 01:50.140
My testing that?

01:50.140 --> 01:53.140
Or am I testing the back end of github.com?

01:53.140 --> 02:00.010
And if it's a stable server, you want to focus your tests on your own custom code and have as least

02:00.010 --> 02:01.810
and fewest dependencies as possible.

02:01.810 --> 02:03.990
So there's some problems with this.

02:04.000 --> 02:09.910
The first thing that I did when I went about this is to think about dependency injection.

02:09.910 --> 02:16.510
Let's say that in production I want to have one way that I call this and that it is implemented, that

02:16.510 --> 02:18.340
is using Unity web service.

02:18.370 --> 02:22.690
Then for testing, maybe I want to have a second way that I want to approach it.

02:22.720 --> 02:29.800
Now, you could have a flag in your code base that says something like is debug equals true or is production

02:29.800 --> 02:30.700
equals false?

02:30.700 --> 02:35.260
And in your production code do certain things in test mode and certain things not.

02:35.290 --> 02:39.850
I see a lot of that happen in code bases, but that's generally not a good practice.

02:39.850 --> 02:45.790
You're polluting your production code with really stuff that's only for tests, so it's not as appropriate.

02:45.820 --> 02:47.200
This is a better solution here.

02:47.200 --> 02:49.810
Let's take a look at what we do well.

02:49.810 --> 02:55.600
In the previous basic example, I did not have a concept of a network service, nor did I pass it in

02:55.600 --> 02:56.110
here.

02:56.140 --> 02:59.440
We just created it and it always worked one way.

02:59.440 --> 03:03.670
But the dependency injection here is that I decide.

03:03.670 --> 03:07.080
Here's some custom way that this could work.

03:07.090 --> 03:11.290
Here's some of the logic that I could swap out in a few different ways.

03:11.290 --> 03:13.930
I declare it here in one line, and then I pass it in.

03:13.930 --> 03:17.440
So you could imagine having several different network services.

03:17.440 --> 03:22.000
I could have one that's just for testing, one that's just for production, one that just writes to

03:22.000 --> 03:26.560
a local disk, one that is appropriate for a particular backend server.

03:26.560 --> 03:27.370
ET cetera.

03:27.400 --> 03:30.070
This has production use cases as well.

03:30.070 --> 03:31.980
This idea of dependency injection.

03:31.990 --> 03:34.270
Now why do we call it dependency injection.

03:34.270 --> 03:43.960
It's because instead of my data loader advanced always doing one thing, I pass in some info that decides

03:43.960 --> 03:45.490
how it's going to operate.

03:45.490 --> 03:52.000
So rather than the class itself knowing everything here, I'm passing in a dependency in this case to

03:52.000 --> 03:54.160
the Unity Web Request Network service.

03:54.160 --> 04:00.340
So let's take a look at how that's structured, and then we'll see why it is helpful for us as we do

04:00.340 --> 04:01.180
our testing.

04:01.300 --> 04:05.050
So here's the complete source code for the My Data loader advanced.

04:05.080 --> 04:07.330
Now two things I want to focus on here.

04:07.330 --> 04:11.420
One is that in its constructor I pass in that dependency.

04:11.440 --> 04:18.970
Now dependency injection and how to create flexible classes from this concept of dependency injection

04:18.970 --> 04:21.580
are really outside of the scope of this class.

04:21.610 --> 04:24.130
It's a really good thing for you to go and look at.

04:24.130 --> 04:30.640
You could google something like D I for unity or dependency injection for unity, or even dependency

04:30.640 --> 04:35.320
injection in object oriented programming, and see some more of those general concepts.

04:35.320 --> 04:41.040
But assuming you have somewhat of a familiarity, especially given my my explanation, I just gave there,

04:41.050 --> 04:42.340
let's move forward with it.

04:42.370 --> 04:49.720
Now that I'm passing in that as a dependency here and storing it, then any time I call our core functionality

04:49.750 --> 04:56.470
of load async, what I do is I say, okay, when I'm ready to load async, just tell my network service

04:56.470 --> 04:57.630
to load async.

04:57.640 --> 05:04.930
Now you can imagine if I've passed in a network service that does a load async for a back end server

05:04.930 --> 05:06.700
of a particular technology.

05:06.730 --> 05:08.320
This line here would do that.

05:08.550 --> 05:14.800
That if I passed in something else that did a writing to disk or reading from disk as a different type

05:14.800 --> 05:17.890
of network service, this is the line here that would really change.

05:17.890 --> 05:24.010
So I don't have to have 2 or 3 different versions of the my data loader advanced here.

05:24.010 --> 05:29.040
Instead, I pass in a custom implementation that handles that particular detail in a unique way.

05:29.050 --> 05:33.030
It's a very powerful way for you to have your code be more flexible.

05:33.040 --> 05:41.290
Now, now that we've talked about passing in a dependency and how it is able to wrap the functionality

05:41.290 --> 05:44.560
here, let's look at what the source for this particular one is.

05:44.560 --> 05:49.150
So up here in the same class file I've got a couple things to talk about.

05:49.150 --> 05:51.490
One, I created an interface.

05:51.610 --> 05:59.140
This interface here of I network service declares okay, anybody who wants to be considered as a viable

05:59.140 --> 06:04.900
dependency to be passed in here has to have some method or methods available.

06:04.900 --> 06:09.820
And in this case, it just needs to have the load async and take a string URL.

06:09.850 --> 06:10.620
That's it.

06:10.630 --> 06:14.530
Now if you're not too familiar with with interfaces.

06:14.820 --> 06:16.440
Please go check out interfaces.

06:16.440 --> 06:22.200
You could look at something like interfaces versus classes in C-sharp or in unity, and you'll see lots

06:22.200 --> 06:23.040
of examples.

06:23.040 --> 06:29.850
But an important distinction here is that the interface defines what the public API is, but it doesn't

06:29.850 --> 06:31.920
worry about doing the implementation.

06:31.980 --> 06:35.430
The implementation is declared down here in a public class.

06:35.460 --> 06:37.590
Now classes you're probably more familiar with.

06:37.920 --> 06:42.480
And what we do here is we implement a particular flavor of that.

06:42.480 --> 06:48.240
I network service in this particular flavor should look very familiar to you from the previous video.

06:48.270 --> 06:50.640
This is the exact same implementation.

06:50.910 --> 06:58.020
We're just using unity web request and then doing its send web request methodology.

06:58.020 --> 07:03.420
So now that we've looked at the source code coming back here, we can see, okay, we're just creating

07:03.420 --> 07:06.150
a custom class that handles a little bit of the functionality.

07:06.150 --> 07:08.430
And we pass that custom class in there.

07:08.430 --> 07:12.920
But we now have a my data loader advanced class that is much more flexible.

07:12.930 --> 07:17.600
Now, why specifically in the world of testing, is dependency injection relevant?

07:17.610 --> 07:23.280
Well, we have a wonderful utility that we can use inside unity for our unit testing.

07:23.280 --> 07:28.710
This is a library called N substitute and it's been included here in the sample project.

07:28.710 --> 07:31.890
Let's take a look at another test method just below the other one.

07:31.890 --> 07:35.790
And this is going to use what is called a mock of a class.

07:35.790 --> 07:41.190
So here we have a very similar creation of the My Data loader advanced.

07:41.190 --> 07:46.980
And instead of passing in the unity web request version, we're going to do something that looks quite

07:47.010 --> 07:47.760
odd here.

07:47.760 --> 07:50.820
We're going to use substitute library.

07:50.820 --> 07:58.170
And what we're going to do here is we're going to say hey on the fly in these two lines, go create

07:58.170 --> 08:02.910
me a class that can handle just the functionality I need.

08:02.910 --> 08:09.900
But because it's a mock class, it doesn't necessarily have to actually go call the server.

08:09.900 --> 08:15.330
What it's going to do instead is, at key moments, return a predictable value to us.

08:15.330 --> 08:24.570
Now remember, our flow here is that the test tells the data loader to go load a URL inside the data

08:24.570 --> 08:28.650
loader tells the network service to go load a URL.

08:28.680 --> 08:35.340
That last step, the end result is it takes a half a second, goes and loads from the server and returns

08:35.370 --> 08:36.780
a string back.

08:36.780 --> 08:41.670
So all I really need in a mock situation is okay, don't even call a server.

08:41.670 --> 08:45.240
Just when I call this you give me a string back.

08:45.240 --> 08:54.630
So I'm saying here with this language that I want any time I call load async and I pass in any string

08:54.630 --> 08:59.370
for the URL, then return the word mocked data.

08:59.640 --> 09:05.970
Then down here, I could make sure that I'm getting the expected result that I want, instead of checking

09:05.970 --> 09:09.930
that it has doctype in the return as I did previously.

09:09.930 --> 09:13.650
I can check for the mock data here.

09:13.650 --> 09:22.290
So what we're seeing here is a very simple example, and it might not seem useful, but imagine in a

09:22.290 --> 09:29.460
more complex example where we weren't just loading data, we were loading it, reading, writing, transforming

09:29.460 --> 09:32.730
the data, doing quite a bit, maybe a 5 or 6 different methods.

09:32.760 --> 09:39.060
All of them could be pointing to wildly different systems, but when we really want to test just the

09:39.060 --> 09:48.210
data loader, then we want to pass in mocked abilities for those other systems to be just kind of temporarily

09:48.210 --> 09:52.130
ignored so we can focus on just what we have at hand here.

09:52.140 --> 09:54.360
Now let's take a look at what would happen.

09:54.360 --> 09:56.850
So I call the load async.

09:56.850 --> 10:03.960
What's going to happen is this system inside is going to return the predicted value.

10:03.960 --> 10:08.130
And the data loader is then going to call loaded.

10:08.130 --> 10:14.070
And it's going to have its result value be the value that we expect it to be.

10:14.070 --> 10:18.210
So let's run this inside the unity editor.

10:18.210 --> 10:19.680
So we'll hit run all here.

10:22.010 --> 10:23.380
And it works quite quickly.

10:23.390 --> 10:29.180
Let's even compare if I just run load async which is actually calling a server.

10:33.100 --> 10:34.120
It was quick.

10:34.150 --> 10:38.620
Then if I call mock load async which is not calling any server.

10:42.510 --> 10:47.720
May not be evident from the video, but it's much faster to call the MOC.

10:47.730 --> 10:53.060
And that makes sense because we're not actually calling a server and waiting for a result.

10:53.070 --> 10:56.550
So this isn't just to save us a few seconds.

10:56.580 --> 11:00.180
It's again for us to focus as we're designing our tests.

11:00.210 --> 11:02.670
What actually do we want to test?

11:02.670 --> 11:04.830
And then we want to isolate it.

11:04.830 --> 11:09.060
So we're not actually testing a Unity Web Services class.

11:09.090 --> 11:11.580
We're not testing a GitHub back end.

11:11.610 --> 11:15.390
Testing several systems together is called an integration test.

11:15.390 --> 11:17.460
That is an appropriate type of test.

11:17.460 --> 11:21.570
But it's outside of what we're talking about here, which is unit testing.

11:21.570 --> 11:26.340
Again, getting down to as few dependencies as possible, few lines of code.

11:26.340 --> 11:27.360
You could think about it.

11:27.360 --> 11:35.790
So that's it there we've looked at how to use the substitute library and how also we can do a mock for

11:35.790 --> 11:37.620
a call to the back end server.

11:37.620 --> 11:38.460
So thanks.
