WEBVTT

00:00.260 --> 00:03.380
Hallo und willkommen zu Unit Testing für Unity.

00:03.410 --> 00:07.340
In diesem Workshop schauen wir uns die Charakterklasse in einer fortgeschrittenen Version an.

00:07.340 --> 00:09.290
Lasst uns einen Blick auf diese Demo in Aktion werfen.

00:09.290 --> 00:11.330
Hier werden wir unsere Unity öffnen.

00:11.360 --> 00:13.310
Wir werden unser Beispielprojekt öffnen.

00:13.310 --> 00:18.830
Und wir schauen uns eine Szene für die erweiterte Situation des Charakters an, die ich mir hier ansehen möchte

00:18.830 --> 00:21.620
ein wenig über die Codeseparation sprechen.

00:21.650 --> 00:26.420
In einem der früheren Workshops habe ich über die verschiedenen Abhängigkeiten gesprochen, die man hat.

00:26.420 --> 00:28.670
Wenn man zum Beispiel einen Backend-Server aufruft.

00:28.670 --> 00:35.840
Und in dieser Situation haben wir eine Ersatzbibliothek benutzt, um das Backend nicht aufrufen zu müssen.

00:35.870 --> 00:42.230
Es ist eine ähnliche Diskussion hier, wo wir uns anschauen, welche Abhängigkeiten mit einer bestimmten

00:42.230 --> 00:48.950
Test-Szenario involviert sind, und wie wir uns dieser verschiedenen Abhängigkeiten bewusst sein können, und was wir tun wollen, um

00:48.950 --> 00:49.190
sie?

00:49.220 --> 00:51.740
Hier werden wir die Ersatzbibliothek nicht verwenden.

00:51.740 --> 00:56.270
Wir werden darüber nachdenken, unser Monobehaviour von anderem Code zu trennen und einen Blick darauf zu werfen.

00:56.480 --> 00:58.250
Hier sind wir also innerhalb von Unity.

00:58.580 --> 00:59.750
Wir haben eine Produktionsklasse.

00:59.750 --> 01:00.560
Lasst uns einen Blick darauf werfen.

01:00.560 --> 01:01.160
Läuft.

01:04.840 --> 01:07.810
Hier unten sehen wir, dass wir uns mit den Pfeiltasten bewegen können.

01:07.810 --> 01:11.350
Genau wie im Basisbeispiel ist die Erfahrung des Endbenutzers die gleiche.

01:11.350 --> 01:16.630
Und das ist ein interessantes Beispiel dafür, dass einige der Änderungen, die wir am Code vornehmen

01:16.630 --> 01:21.550
Qualität und Testbarkeit unserer Systeme vornehmen, sich nicht unbedingt auf den Endbenutzer auswirken.

01:21.580 --> 01:22.680
Das ist ein Pluspunkt.

01:22.690 --> 01:25.570
Schauen wir uns also den Produktionscode an.

01:25.570 --> 01:27.640
Wir öffnen das erweiterte Zeichenbeispiel.

01:27.640 --> 01:29.200
Hier ist ein vollständiges Beispiel.

01:29.200 --> 01:35.140
Was wir im Kielwasser dieser Beispielklasse tun, ist, ein Primitiv für den Würfel zu erstellen.

01:35.140 --> 01:37.600
Der Organisation halber geben wir ihm einen Namen.

01:37.690 --> 01:45.310
Anstelle einer Zeile, in der wir einfach eine Komponente hinzufügen, die alle unsere Funktionen enthält, machen wir

01:45.340 --> 01:46.480
zwei Schritte.

01:46.720 --> 01:52.000
Das erinnert mich ein wenig an die Dependency Injection, die wir im My Data Loader Beispiel gesehen haben.

01:52.000 --> 01:55.300
Aber dies ist ein anderer Anwendungsfall mit anderen Abhängigkeiten.

01:55.300 --> 02:00.250
Anstelle einer einzigen Zeile add component machen wir also die add component.

02:00.250 --> 02:05.590
Und dann erstellen wir unsere eigene fortgeschrittene Klasse ohne Monobehaviour-Charakter.

02:05.590 --> 02:07.840
Und wir geben das Monobehaviour ein.

02:07.840 --> 02:12.700
Wir übergeben also die Abhängigkeit, die die Zeichenerweiterung verwenden wird.

02:12.730 --> 02:19.240
Jetzt ist Character Advanced kein Monobehaviour, und dadurch haben wir mehr Flexibilität, wie wir

02:19.240 --> 02:19.810
testen wollen.

02:19.840 --> 02:23.110
Wir könnten es zum Beispiel leichter im Bearbeitungsmodus testen.

02:23.260 --> 02:28.330
Nochmals, wenn Sie Monobehaviours verwenden, ist das eher für Tests im Spielmodus geeignet.

02:28.360 --> 02:31.270
Es ist keine feste Regel, aber das ist eine Möglichkeit, darüber nachzudenken.

02:31.270 --> 02:37.960
Indem wir also unser Monobehaviour von unserem Nicht-Monobehaviour trennen, haben wir ein paar mehr Möglichkeiten.

02:37.990 --> 02:43.360
Jetzt sind wir hier immer noch in einer Spielmodus-Umgebung, weil dies der Produktionscode ist.

02:43.360 --> 02:46.270
Schauen wir uns an, wie sich unser Quellcode verändert hat.

02:46.270 --> 02:48.340
Hier sind wir also im erweiterten Zeichen.

02:48.370 --> 02:50.530
Du wirst sehen, dass es ziemlich vertraut aussieht.

02:50.530 --> 02:56.400
Der größte Teil des Codes hier wird genau wie im vorherigen Beispiel sein, mit ein paar Ausnahmen.

02:56.410 --> 03:02.980
Eine davon ist, dass das erweiterte Zeichen in seinem Konstruktor einen Verweis auf das Monobehaviour aufnehmen wird.

03:03.010 --> 03:08.200
Das liegt daran, dass er einige Dinge über den Monobehaviour wissen muss, insbesondere über seine Transformation

03:08.200 --> 03:09.040
Position.

03:09.130 --> 03:15.700
Es gibt auch eine Situation, in der wir die zweite Zeile verwenden und dem Monobehaviour eine Referenz mitteilen müssen

03:15.700 --> 03:18.130
zurück zu uns, da das Zeichen vorgerückt ist.

03:18.160 --> 03:24.790
Das ist nur, damit das Monobehaviour, wenn es Update aufruft, uns sagen kann, dass wir die richtige Bewegung machen sollen.

03:24.820 --> 03:30.280
Es gibt andere Möglichkeiten, dies zu organisieren, aber der Einfachheit halber übergeben wir das Monobehaviour

03:30.280 --> 03:31.660
und behandeln es auf diese Weise.

03:31.990 --> 03:34.480
Schauen wir mal, welche anderen Änderungen wir in der Codebasis sehen.

03:35.800 --> 03:38.140
Der Bewegungstyp ist derselbe wie in der Grundversion.

03:38.170 --> 03:40.360
Die Bewegung durch Eingabe ist die gleiche.

03:41.260 --> 03:45.610
Hier unten ist der Zug nach Tastencode sehr ähnlich, wenn nicht sogar identisch.

03:46.480 --> 03:52.930
Und hier unten in "move to" und "move by" können Sie sehen, dass wir die Position erhalten und setzen

03:52.930 --> 03:55.630
auf die Transformation des Monobehaviour.

03:55.630 --> 04:02.590
Also haben wir hier wieder eine Klasse ohne Monobehaviour, die das tut, was sie tun kann, ohne eine Abhängigkeit von

04:02.590 --> 04:08.130
Monobehaviour und nur an den nötigsten Stellen spricht sie das Monobehaviour an.

04:08.140 --> 04:14.140
Diese Trennung hilft uns, darüber nachzudenken, wie wir nur das Monobehaviour testen könnten, wenn wir könnten,

04:14.170 --> 04:17.140
wie könnten wir nur das Nicht-Monobehaviour testen, wenn wir das könnten?

04:17.170 --> 04:22.570
Das ist kein perfektes Beispiel, weil es eine Art Zwischenschritt ist, während wir lernen über

04:22.570 --> 04:24.370
wie wir diese richtig trennen können.

04:24.370 --> 04:25.900
Aber ich denke, es ist ein guter Lernprozess.

04:25.900 --> 04:29.800
Schauen Sie sich also den Quellcode für das erweiterte Zeichen an.

04:29.800 --> 04:33.880
Vergleiche ihn mit dem Zeichen Basic in deiner eigenen Zeit und sieh dir die Unterschiede an.

04:34.030 --> 04:36.910
Schauen wir uns dann das Beispiel an, das wir machen.

04:36.910 --> 04:37.240
Wiederum.

04:37.270 --> 04:38.830
Hier ist das Beispiel, das wir gesehen haben.

04:38.830 --> 04:40.000
Es sind also diese beiden Linien.

04:40.000 --> 04:41.200
Das ist wirklich der Schlüssel.

04:41.230 --> 04:47.290
Wir fügen eine Komponente des fortgeschrittenen Monobehaviour des Charakters zu unserem Spielobjekt hinzu.

04:47.290 --> 04:49.580
Und dann werden wir einen neuen Charakter Advanced erstellen.

04:49.580 --> 04:50.740
Das ist ein separater Schritt.

04:50.740 --> 04:54.310
Sie können sich also vorstellen, dass wir diese beiden Dinge isoliert testen können.

04:54.310 --> 04:56.650
Jetzt sind sie aber ziemlich abhängig voneinander.

04:56.680 --> 04:58.390
Es gibt Möglichkeiten, wie wir das massieren können.

04:58.390 --> 05:01.300
So, dass das eine nicht direkt vom anderen abhängt.

05:01.300 --> 05:07.660
Oder wir könnten etwas tun, wie wir es im Beispiel des Datenladers getan haben und eine Ersatzbibliothek verwenden, so dass

05:07.660 --> 05:10.080
wir stattdessen die Abhängigkeit einspannen.

05:10.090 --> 05:15.730
Aber noch einmal, der Einfachheit halber, um zu lernen, wie man ein Monobehaviour abtrennt, denke ich, dass wir das getan haben

05:15.730 --> 05:16.510
der Fall hier.

05:16.510 --> 05:21.430
Sie können diese Tests mit dem Bearbeitungsmodus und dem Wiedergabemodus in Ihrer eigenen Zeit durchführen und sich das ansehen.

05:21.640 --> 05:27.760
Aber für mich sind wir fertig damit, über die Unterschiede bei der Trennung von Monobehaviour und Nicht-Monobehaviour zu sprechen.

05:27.790 --> 05:28.450
Vielen Dank für die Antwort.
