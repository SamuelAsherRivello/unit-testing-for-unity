WEBVTT

00:00.290 --> 00:04.310
Hallo und herzlich willkommen zur Unit Testing for Unity Workshop Serie.

00:04.460 --> 00:06.770
Hier werden wir uns die Prefabs anschauen.

00:06.800 --> 00:10.940
Bis zu diesem Moment im Kurs haben wir keine Prefabs getestet.

00:10.970 --> 00:16.460
In den Momenten, in denen ich einige Monobehaviours testen wollte, habe ich sie von Grund auf mit Code erstellt

00:16.460 --> 00:18.080
wie in den vorherigen Videos gezeigt.

00:18.080 --> 00:24.440
Aber natürlich ist ein wichtiger Grundbaustein in der Unity-Spielentwicklung die Prefab.

00:24.680 --> 00:32.300
Prefabs erlauben es dir, verschiedene Assets und Funktionen zu sammeln, sie in dein Projekt zu integrieren und

00:32.300 --> 00:38.020
sie einfach wiederzuverwenden, indem man sie in die Szene zieht, so dass man sie in der Szene speichert und sie da sind,

00:38.030 --> 00:40.690
oder indem man sie dynamisch mit Code erstellt.

00:40.700 --> 00:43.040
Warum sollten wir diese vorgefertigten Elemente testen wollen?

00:43.040 --> 00:48.800
Nun, in einer sehr einfachen Form, stell dir vor, dass dein Spiel eine Charakter Prefab in einer Feind Prefab benutzt, vielleicht

00:48.800 --> 00:49.900
mehrere von beiden.

00:49.910 --> 00:58.280
Man kann einen Unit-Test haben, der nur den Spieler erstellt und überprüft, dass er keine Ausnahmen auslöst,

00:58.400 --> 01:04.970
Das allein gibt Ihnen schon ein wenig mehr Vertrauen, dass das Asset über die Zeit gut funktioniert.

01:04.970 --> 01:10.670
Und wenn man mit anderen Talenten zusammenarbeitet, die keine Programmierer sind, z. B. Leveldesigner und Künstler,

01:10.700 --> 01:14.030
wissen Sie, dass diese Prefabs nicht aus Versehen kaputt gegangen sind.

01:14.030 --> 01:17.870
Man kann einige Annahmen über die Struktur machen, indem man einen Test macht.

01:17.870 --> 01:22.760
Sie können Annahmen über die serialisierten Felder machen und überprüfen, ob sie richtig ausgefüllt sind, und Sie

01:22.760 --> 01:25.400
können natürlich auch Annahmen über das Verhalten machen.

01:25.400 --> 01:31.160
In dem früheren Beispiel, in dem keine Prefabs verwendet wurden, hatte ich ein Charakterskript und ich würde

01:31.160 --> 01:36.770
um sicherzustellen, dass sie sich richtig in der Welt bewegen kann, wenn ich die Funktion move by oder move to aufrufe.

01:36.770 --> 01:43.730
Wenn man komplexe Prefabs mit Abhängigkeiten erstellt, kann man die Funktionalität auf diesen Prefabs aufrufen

01:43.730 --> 01:44.300
auch aufrufen.

01:44.300 --> 01:47.990
Jetzt können die Tests eine kleine Codeeinheit abdecken.

01:48.140 --> 01:54.680
In der idealen Welt hat man wenige Zeilen und vielleicht keine Abhängigkeiten bis hin zu einem komplexeren System,

01:54.680 --> 01:59.810
Wenn man weiß, was man tut, wenn man seine Unit-Tests durchführt, kann man ein zuverlässiges

01:59.810 --> 02:06.200
Test, der auch über einige Abhängigkeiten ausgeführt wird, und Ihnen eine gewisse Sicherheit gibt, dass diese Systeme

02:06.200 --> 02:07.490
gut zusammenarbeiten.

02:07.520 --> 02:14.120
Ein Fertighaus ist in der Tat wahrscheinlich der komplexere Teil des Spektrums, und Sie werden testen müssen

02:14.120 --> 02:14.270
das.

02:14.270 --> 02:21.560
Das Prefab kann sowohl seine eigenen benutzerdefinierten Komponenten als auch Unity-Komponenten wie Rigidbody verwenden.

02:21.560 --> 02:26.750
Achten Sie also beim Einrichten dieser Tests darauf, dass Sie nicht ein zu großes System testen.

02:26.750 --> 02:34.160
Wenn Ihr Held zum Beispiel einen starren Körper und eine benutzerdefinierte Flugkomponente verwendet, möchten Sie vielleicht

02:34.160 --> 02:38.060
die benutzerdefinierte Flugkomponente separat in einem eigenen Unit-Test testen.

02:38.060 --> 02:42.980
Denken Sie daran, dass es immer von Vorteil ist, wenn Sie weniger Abhängigkeiten in Ihrer Unit haben

02:42.980 --> 02:43.460
Testen.

02:43.460 --> 02:49.550
Dennoch können wir einen Test erstellen, der auf einer gesamten Voreinstellung läuft, einschließlich ihrer Abhängigkeiten

02:49.550 --> 02:50.240
wenn wir es für richtig halten.

02:50.240 --> 02:52.370
Schauen wir uns ein Beispiel dafür im Code an.

02:52.940 --> 02:54.640
Hier sind wir innerhalb von unity.

02:54.650 --> 02:59.720
Wenn ich mir das Test-Runner-Fenster hier in der Kategorie ansehe, habe ich es bereits auf Prefab eingestellt.

02:59.720 --> 03:05.510
Und hier unten in diesem Ordner können wir sehen, dass es ein vorgefertigtes Beispiel gibt.

03:05.510 --> 03:10.520
Lasst uns die Szene öffnen und einen Blick auf die Szene werfen, die ich jetzt ausführe

03:10.520 --> 03:10.850
es.

03:13.540 --> 03:18.130
Wenn ich diese Szene ausführe, fällt ein Ball mit Hilfe der Physik herunter und rutscht über den Boden.

03:18.160 --> 03:21.420
Es ist nicht dieses spezielle Verhalten, das uns interessiert.

03:21.430 --> 03:27.760
Ich wollte nur eine feindliche Voreinstellung in die Szene einfügen, um zu sehen, dass sie hier im Produktionscode existiert.

03:27.760 --> 03:34.750
Dies zu simulieren wäre dein größeres Spielmenü, Einstellungen, Szene, was auch immer es ist, und mit einigen

03:34.750 --> 03:39.730
Abhängigkeit von einem oder mehreren Mono Behaviors in einer Prefab.

03:39.940 --> 03:43.340
So, und jetzt schauen wir uns mal an, wie wir das testen können.

03:43.360 --> 03:49.480
In dieser Szene habe ich einen Editor-Test und einen Laufzeit-Test.

03:49.480 --> 03:55.450
Aber da dies mehr Unity-Verhalten testet und wir gesehen haben, dass Mono-Verhaltensweisen zum Beispiel

03:55.450 --> 03:57.400
etwas, das man nur zur Laufzeit testen sollte.

03:57.400 --> 03:59.470
Konzentrieren wir uns hier nur auf den Test des Spielmodus.

03:59.470 --> 04:00.820
Also werde ich diese Option deaktivieren.

04:01.600 --> 04:06.820
Und hier habe ich ein paar verschiedene Dinge, die wir tun können, wenn dieser Spielmodustest läuft, ich checke, dass der Feind

04:06.820 --> 04:08.380
selbst nicht null ist.

04:08.410 --> 04:10.420
Das ist die Menge des Verhaltensskripts.

04:10.450 --> 04:16.330
Dann teste ich, dass das Spielobjekt, auf dem es sitzt, nicht null ist, und wir würden im Allgemeinen annehmen, dass wenn

04:16.330 --> 04:18.460
der Feind existiert, auch das Spielobjekt existiert.

04:18.460 --> 04:20.740
Aber dies ist nur ein weiterer Test dafür.

04:20.740 --> 04:23.410
Und schließlich können wir prüfen, ob der Rigid Body nicht Null ist.

04:23.410 --> 04:27.670
Hier überprüfen wir also hauptsächlich die Struktur dessen, was wir hier haben.

04:27.670 --> 04:33.940
Aber man könnte auch serialisierte Felder, initialisierte öffentliche Werte, einige der Verhaltensfunktionalitäten überprüfen

04:33.940 --> 04:35.230
indem man Methoden aufruft.

04:35.230 --> 04:36.430
Das können Sie selbst tun.

04:36.430 --> 04:41.350
Erweitern Sie das, was Sie hier sehen, und fügen Sie Ihre eigene Testfunktionalität zu dem neuen Produktionscode hinzu.

04:41.380 --> 04:44.200
Machen Sie sich damit die Füße nass und sehen Sie, wie es für Sie läuft.

04:44.230 --> 04:46.120
Werfen wir einen Blick auf den Quellcode hier.

04:46.270 --> 04:47.620
Hier ist der Test im Spielmodus.

04:47.620 --> 04:52.090
Ich werde einen Blick auf diese drei Tests werfen, und dann über die Einrichtung sprechen, die speziell für

04:52.090 --> 04:52.900
Voreinstellungen.

04:52.900 --> 04:55.270
Hier haben wir also einen sehr einfachen Test.

04:55.300 --> 04:58.960
Wir haben das "arrange, act and assert"-Paradigma, das wir gewohnt sind zu sehen.

04:58.960 --> 05:03.070
Man beachte, dass hier arrange und act verdächtig fehlen.

05:03.070 --> 05:06.820
Und alles, was ich tue, ist zu überprüfen, dass der Feind nicht Null ist.

05:06.820 --> 05:10.210
Im nächsten Test ist das feindliche Spielobjekt nicht null.

05:10.210 --> 05:13.240
Und schließlich ist der gegnerische Rigidbody nicht null.

05:13.270 --> 05:14.620
Im Fall des Starrkörpers.

05:14.620 --> 05:20.830
Das ist ein öffentliches Feld, das ich erstellt habe, und es ist serialisiert, und ich nehme an, dass eine richtig eingerichtete Prefab

05:20.830 --> 05:25.150
würde dieses serialisierte Feld bereits deklariert und ausgefüllt haben.

05:25.150 --> 05:26.560
Es passt also alles.

05:26.560 --> 05:27.760
Es läuft also alles gut.

05:27.760 --> 05:29.800
Wie kommen wir jetzt an das Prefab hier?

05:29.800 --> 05:31.900
Beachten Sie, dass wir den Test im Spielmodus verwenden.

05:31.900 --> 05:37.840
Wie wir gesehen haben, läuft ein Spielmodus-Test in seiner eigenen dynamisch erstellten leeren Szene.

05:37.840 --> 05:41.680
Alles, was wir in dieser Szene tun wollen, müssen wir also manuell einrichten.

05:41.680 --> 05:46.000
Wir werden also die Textvorrichtungen und einige der Dinge nutzen, die wir mit dem Test machen können

05:46.000 --> 05:46.300
Halterung.

05:46.300 --> 05:53.230
Eines der Dinge, die wir hier oben machen können, ist, dass wir einen Verweis darauf setzen, wie lange wir verzögern wollen.

05:53.230 --> 05:57.340
die Prefab instanziiert werden soll, den Pfad zur feindlichen Prefab selbst.

05:57.340 --> 05:59.710
Beachten Sie, dass der Pfad dort mit assets beginnt.

05:59.710 --> 06:01.300
Das wird in einer Sekunde wichtig sein.

06:01.300 --> 06:03.520
Und dann habe ich einen Hinweis auf den privaten Feind.

06:03.550 --> 06:09.010
Zusätzlich zum Test-Attribut, das wir schon oft benutzt haben, gibt es ein Setup-Attribut, das

06:09.010 --> 06:11.860
einmal vor jeder Testmethode ausgeführt wird.

06:11.860 --> 06:19.570
Was wir hier also vor jeder Testmethode machen wollen, ist, dass wir das Asset einfach in den Pfad laden.

06:20.380 --> 06:26.560
Wir erhalten eine Referenz auf den Feind, der auf dem Spielobjekt sitzt, sobald wir es instanziieren, und dann warten wir ein

06:26.590 --> 06:31.450
drei Sekunden oder eine beliebige Zeitspanne, um zu erkennen, dass es keine drei Sekunden braucht.

06:31.450 --> 06:33.250
Es braucht wahrscheinlich ein Bild.

06:33.250 --> 06:35.590
Du kannst also damit experimentieren, was du da machst.

06:35.890 --> 06:38.800
Ich warte hier nur bis zu einer halben Sekunde, glaube ich.

06:38.830 --> 06:44.260
Der Grund, warum wir das brauchen, ist, dass ich gesehen habe, dass man, wenn man game object dot instantiate macht, muss man

06:44.260 --> 06:50.080
einen ganzen Frame warten muss, bis der awake und der start für dieses Spielobjekt aufgerufen werden.

06:50.080 --> 06:55.420
Je nachdem, was du in diesem Awake und dem Start in deinem Monobehaviour machst, musst du vielleicht

06:55.420 --> 06:56.800
ein bisschen länger warten.

06:56.800 --> 07:03.550
Ich würde vermuten, dass es ausreicht, in allen Situationen 2 oder 3 Frames zu warten.

07:03.550 --> 07:08.230
Aber hier nehme ich nur eine halbe Sekunde und du kannst damit herumspielen und sehen, ob es deinen Bedürfnissen entspricht.

07:08.230 --> 07:10.300
Hier unten verwende ich dann das Teradyne-Attribut.

07:10.300 --> 07:13.840
Dies wird einmal nach jeder der Testmethoden aufgerufen.

07:13.840 --> 07:15.970
Im Setup erstellen wir also die Prefab.

07:16.000 --> 07:17.200
Dann wird der Test ausgeführt.

07:17.200 --> 07:19.630
Und im Teardown bereinige ich ihn.

07:19.630 --> 07:26.470
Nun könnte man alternativ auch das Setup und den Teardown in jedem

07:26.470 --> 07:27.400
einzelnen Test durchführen.

07:27.400 --> 07:29.050
Wenn Sie das wollen, können Sie das tun.

07:29.080 --> 07:33.190
Aber ich nutze den Vorteil, dass ich hier einige bestehende Methoden wiederverwenden kann.

07:33.190 --> 07:36.520
Ich deklariere also nur einmal den Aufbau und einmal den Abriss.

07:36.520 --> 07:40.270
Und ich weiß, dass diese Methoden zuverlässig vor und nach jeder Testmethode aufgerufen werden.

07:40.270 --> 07:41.320
Das war's also.

07:41.320 --> 07:45.190
Werfen wir einen Blick auf das feindliche Skript selbst, um zu sehen, wie es aufgebaut ist.

07:45.190 --> 07:47.590
Der Feind ist also ein sehr einfaches Monobehaviour.

07:47.590 --> 07:52.390
Ich muss nicht wirklich etwas tun, um es testbar zu machen, sondern nur, um hier etwas Spannendes zu haben

07:52.390 --> 07:53.290
testen zu können.

07:53.290 --> 07:57.940
Ich habe ein serialisiertes Feld von rigidbody, und dann habe ich einen Test, der annimmt, dass es ausgefüllt ist.

07:57.940 --> 08:01.960
Wenn man sich den Code anschaut, kann man sehen, dass es nichts gibt, was das Feld tatsächlich ausfüllt.

08:01.960 --> 08:08.320
Aber wenn wir in Unity auf das Prefab klicken, werden wir sehen, dass das Prefab diese Assoziation herstellt.

08:08.320 --> 08:09.400
Also lass uns das jetzt überprüfen.

08:09.400 --> 08:11.740
Zurück in Unity gehen wir also nach unten.

08:11.740 --> 08:13.570
Wir schauen uns die feindliche Prefab an.

08:13.570 --> 08:17.860
Und wir können hier auf der rechten Seite sehen, dass die Vorabversion ein Feind-Skript hat.

08:17.860 --> 08:20.380
Und es hat bereits den Starrkörper deklariert.

08:20.410 --> 08:23.110
Wenn ich das irgendwie vergessen würde.

08:23.110 --> 08:29.140
Oder vielleicht macht jemand in Ihrem Team diesen Aspekt des Prefab kaputt, dann lassen Sie uns diese Tests noch einmal durchführen.

08:32.310 --> 08:35.310
Und wir können sehen, dass der Rigid Body Null ist und nicht funktioniert.

08:35.310 --> 08:41.680
Das ist also ein sehr einfaches Beispiel für ein System, das funktioniert und dann versagt.

08:41.700 --> 08:47.370
Wenn du ein Unity-Spielentwickler bist und schon einmal in einem Team gearbeitet hast, dann hast du sicher die Erfahrung gemacht

08:47.370 --> 08:51.810
dass du oder jemand, mit dem du zusammenarbeitest, versehentlich eine Vorabversion kaputt gemacht hat.

08:51.840 --> 08:53.320
Das ist ein sehr häufiger Arbeitsablauf.

08:53.340 --> 08:56.460
Im Unity-Editor siehst du vielleicht keine Fehler.

08:56.460 --> 09:01.200
Du kannst das Spiel vielleicht sogar spielen, und unter bestimmten Umständen siehst du nicht den Effekt von

09:01.230 --> 09:06.990
bis zum letzten Moment, wenn dieser bestimmte starre Körper benutzt wird oder die Funktionalität, die

09:06.990 --> 09:08.130
fehlt, aufgerufen wird.

09:08.130 --> 09:13.110
Dies ist also eine wunderbare Möglichkeit, wie jeder in Ihrem Team dem folgenden Arbeitsablauf folgen kann.

09:13.200 --> 09:19.650
Hey, jedes Mal, wenn du etwas aus Git ziehst und Änderungen an den Assets, dem Design usw. vornimmst,

09:19.680 --> 09:26.940
stellen Sie sicher, dass Sie das Test-Runner-Fenster öffnen und einfach auf "run selected" oder "run all" klicken und alle Tests ausführen.

09:26.970 --> 09:28.620
Sie werden sehen, dass alles gut läuft.

09:28.620 --> 09:34.800
Bevor du deine Arbeit wieder festlegst, mach es noch einmal und wenn du merkst, dass jemand festlegt

09:34.800 --> 09:40.710
etwas, das die Tests bestanden hat, aber etwas kaputt gemacht hat, wollen Sie einen neuen Unit-Test hinzufügen, der vielleicht testet

09:40.710 --> 09:47.760
für das Skript der fliegenden Feinde testet, oder was auch immer der fehlerhafte Teil ist, und dann haben Sie jetzt ein Legacy

09:47.760 --> 09:52.320
von ein paar weiteren Tests, die sicherstellen, dass dieser spezielle Fall nicht mehr auftritt.

09:52.320 --> 09:56.760
Man muss nicht unbedingt jedes einzelne Element der Voreinstellung im Voraus testen.

09:56.760 --> 10:01.470
Schauen Sie sich die Arbeitsabläufe Ihres Teams an und suchen Sie nach Dingen, die leicht zu finden sind.

10:01.470 --> 10:03.120
am einfachsten behoben werden können.

10:03.120 --> 10:04.950
Dann fügen Sie einige leichte Tests dafür hinzu.

10:04.980 --> 10:10.950
Es ist sehr einfach, diesen Test für ein bestimmtes Prefab auf mehrere Prefabs anzuwenden,

10:10.950 --> 10:16.650
Man könnte theoretisch ein Testskript haben, das eine große Anzahl verschiedener Prefabs testet und dabei

10:16.650 --> 10:22.200
um sicherzustellen, dass keine Null-Refs auftreten und keine Ausnahmen geworfen werden.

10:22.440 --> 10:26.340
Die Spielobjekte existieren, die Prefab kann gefunden werden.

10:26.340 --> 10:28.920
Man könnte das alles in einem machen, wenn man wollte.

10:28.950 --> 10:34.530
Was ich hier zeige, ist ein bestimmtes Skript für ein bestimmtes Prefab, und Sie können entscheiden, wie Sie

10:34.530 --> 10:35.400
skalieren.

10:35.670 --> 10:36.870
Das war's für diesen Fall.

10:36.870 --> 10:40.410
Sprechen Sie über den gemeinsamen Einsatz von Prefabs und Unit-Tests.

10:40.410 --> 10:41.190
Danke!
