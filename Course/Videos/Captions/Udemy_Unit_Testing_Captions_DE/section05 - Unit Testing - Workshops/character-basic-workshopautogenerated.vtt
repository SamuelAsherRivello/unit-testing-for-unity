WEBVTT

00:00.080 --> 00:03.050
Hallo und willkommen zu Unit Testing für Unity.

00:03.080 --> 00:04.310
Wir sind hier im Workshop.

00:04.310 --> 00:08.450
Und in diesem werden wir uns den Charakter in einer Grundform ansehen.

00:08.450 --> 00:10.700
Wir werden uns ein paar verschiedene ansehen.

00:10.730 --> 00:13.400
Wir beginnen mit den Grundlagen und gehen dann zu etwas Fortgeschrittenem über.

00:13.400 --> 00:15.080
Schauen wir uns diese Demo in Aktion an.

00:15.080 --> 00:16.520
Innerhalb des Unity-Editors.

00:16.520 --> 00:19.430
Wir werden Unity öffnen und unser Beispielprojekt öffnen.

00:19.430 --> 00:23.360
Und dann spielen wir eine oder mehrere Szenen ab, die mit dem Thema hier zu tun haben.

00:23.360 --> 00:29.270
Die Szene wird der Grundcharakter sein, und ich werde über Monobehaviour als etwas sprechen

00:29.270 --> 00:34.760
das getestet werden kann oder nicht, sowie über den Spielmodus gegenüber dem Bearbeitungsmodus, etwas, das ich bereits erwähnt habe

00:34.760 --> 00:36.020
früher in diesem Kurs erwähnt habe.

00:36.050 --> 00:37.640
Wir werden es hierher zurückbringen und darüber sprechen.

00:37.640 --> 00:39.980
Hier sind wir im Projekt und sehen uns das Grundzeichen an.

00:39.980 --> 00:41.390
Laßt uns fortfahren und die Szene starten.

00:46.760 --> 00:53.600
Während also die meisten unserer Workshops, die wir gemacht haben, eine ziemlich langweilige Szene hatten, in der absolut nichts

00:53.630 --> 00:56.420
von Interesse passiert, haben wir hier ein bisschen mehr.

00:56.450 --> 01:02.080
Wenn wir hier auf Play drücken, sehen wir einen weißen Würfel, der in der Mitte des Bildschirms erzeugt wird.

01:02.090 --> 01:04.640
Ich kann meine Pfeiltasten benutzen und mich bewegen.

01:04.640 --> 01:11.540
Dies ist zugegebenermaßen ein sehr einfaches Beispiel, aber es soll einige der komplexeren Möglichkeiten aufzeigen

01:11.540 --> 01:14.200
Aspekte des Testens in Unity.

01:14.210 --> 01:19.340
In den vorherigen Szenen haben wir uns nicht um das Rendern von Grafiken oder die Eingabe von Daten gekümmert.

01:19.580 --> 01:26.450
Wir haben im letzten Workshop über den Unterschied zwischen dem Testen verschiedener Abhängigkeiten gesprochen

01:26.450 --> 01:27.200
zusammen.

01:27.200 --> 01:32.390
Zum Beispiel eine Methode, die innen eine zweite Methode aufruft, die innen die dritte aufruft.

01:32.420 --> 01:34.100
Das sind Abhängigkeiten.

01:34.130 --> 01:40.400
Hier geht es um einen ähnlichen Aspekt, nur dass ich jedes Mal, wenn ich meine Figur bewegen will, zuerst

01:40.400 --> 01:47.360
das Eingabesystem von Unity abfragen und dann Unity's Monobehaviour transform movement benutzen.

01:47.360 --> 01:47.770
Richtig.

01:47.780 --> 01:52.460
Wir benutzen also verschiedene Abhängigkeiten oder verschiedene Klassen.

01:54.970 --> 01:58.240
Hier kann ich also die Pfeiltasten benutzen, um mich zu bewegen.

01:59.360 --> 02:00.800
Und das war's auch schon.

02:02.750 --> 02:05.690
Aber die Idee ist, dass wir ein bisschen mehr machen als vorher.

02:05.780 --> 02:08.250
Lassen Sie uns über die Auswirkungen der Tests sprechen.

02:08.270 --> 02:14.780
Hier oben im Test-Runner habe ich die Kategorie auf unser Basiszeichen gesetzt, was großartig ist.

02:14.810 --> 02:20.420
Dann kann ich die Tests für den Spielmodus und den Bearbeitungsmodus anzeigen lassen.

02:20.450 --> 02:26.720
Wir können sehen, dass wir etwas von beidem haben, aber da es sich um ein Monobehaviour handelt, werde ich

02:26.720 --> 02:28.190
mehr auf den Spielmodus konzentrieren.

02:28.220 --> 02:34.820
In jedem der Workshops habe ich mindestens einen Test im Bearbeitungsmodus und mindestens einen im Spielmodus durchgeführt

02:34.850 --> 02:37.020
Test für die jeweilige Szene.

02:37.040 --> 02:42.620
Ich habe das hier noch einmal gemacht, aber je nachdem, was man gerade testet, sollte man überlegen, ob das

02:42.620 --> 02:47.060
eher für den Bearbeitungsmodus oder eher für den Spielmodus geeignet?

02:47.090 --> 02:52.130
Es ist eine Kunst und eine Wissenschaft, wie man das angeht, und wie man seinen Code so gestaltet, dass er mehr

02:52.130 --> 02:52.760
testbar ist.

02:52.790 --> 02:59.600
Aber eine allgemeine Betrachtungsweise, die hier relevant ist, ist, dass wenn Sie Monobehaviour-Funktionalität verwenden,

02:59.600 --> 03:02.270
Das klingt eher nach einem Spielmodus-Test.

03:02.300 --> 03:08.540
Je mehr Unity-Bibliotheken, insbesondere zur Laufzeit, Sie in Ihrer Produktion verwenden, desto mehr sollten Sie darüber nachdenken

03:08.540 --> 03:10.460
darüber nachdenken, ob diese im Spielmodus getestet werden sollen.

03:10.490 --> 03:13.970
Es ist keine feste Regel, aber das ist ein guter Weg, um darüber nachzudenken.

03:14.240 --> 03:16.110
Führen wir also unsere Tests durch.

03:16.130 --> 03:18.890
Ich habe den Wiedergabemodus und werde alle ausführen.

03:22.470 --> 03:22.800
OK.

03:22.830 --> 03:25.650
Es hat ein paar Sekunden gedauert, aber wir haben sie alle.

03:25.680 --> 03:31.650
Wenn man einen Test im Wiedergabemodus durchführt, wird eine brandneue leere Szene erstellt und

03:31.650 --> 03:35.430
führt nur einen Test darin aus und zerstört diesen.

03:35.430 --> 03:42.630
Und es wird eine brandneue Szene erstellt, die garantiert, dass wir den Weltraum haben, der durch eine Szene bereitgestellt wird.

03:42.630 --> 03:49.590
Aber die Frische einer neuen Szene, die keine Abhängigkeiten oder veraltete Informationen hat, die die

03:49.590 --> 03:50.220
den Test.

03:50.220 --> 03:51.820
Das gefällt uns also.

03:51.840 --> 03:58.620
Die Dinge, die ich jetzt tue, sind das Bewegen, das Bewegen nach Schlüsselcode und das Bewegen zu einem bestimmten Ort.

03:58.620 --> 04:01.260
Schauen wir uns also diese Verschiebung zum Test an.

04:03.240 --> 04:05.580
Werfen wir zuerst einen Blick auf den Produktionscode.

04:05.580 --> 04:08.550
Wenn ich also hierher gehe und mir das Basisbeispiel ansehe.

04:10.370 --> 04:12.140
Dies ist der Produktionscode.

04:12.140 --> 04:14.330
Schauen wir uns das an, bevor ich zu den Tests komme.

04:14.330 --> 04:17.570
Hier erstelle ich also nur ein Primitiv.

04:17.600 --> 04:22.610
Man könnte sich vorstellen, dass man hier auch ein Prefab lädt, wenn man das möchte.

04:22.610 --> 04:27.620
Aber ich wollte uns langsam in die ganzen Komplexitäten von Runtime und Unity einführen.

04:27.620 --> 04:29.750
Ich verwende hier also keine Vorabversion.

04:29.750 --> 04:33.740
Ich erstelle einfach einen brandneuen Würfel von Grund auf mit einer Zeile Code.

04:33.740 --> 04:40.430
Ich gebe ihm einen Namen, nur um ihn zu organisieren, und dann füge ich die Komponente des Monobehaviour hinzu

04:40.430 --> 04:42.230
die ich tatsächlich testen möchte.

04:42.230 --> 04:48.350
Dann verschiebe ich es unter anderem zum Punkt 000 und zeige dann, dass

04:48.350 --> 04:49.910
Wert auf dem Bildschirm.

04:49.910 --> 04:52.490
Schauen wir uns also den Quellcode hier an.

04:55.160 --> 04:56.540
Hier ist das Grundzeichen.

04:56.570 --> 04:58.370
Dies erweitert das Monobehaviour.

04:58.400 --> 05:06.330
Wenn du mit Unity vertraut bist, verwendest du wahrscheinlich ständig Monobehaviours als eine gute Best Practice.

05:06.350 --> 05:09.200
Sie wollen anfangen, gewissenhaft zu denken.

05:09.200 --> 05:14.260
Wann ist es angebracht, ein Monoverhalten zu verwenden und wann kann ich etwas anderes verwenden?

05:14.270 --> 05:20.180
Als angehende Entwickler erstellen wir alles als ein Kind eines Monobehaviour, aber mit der Zeit und Erfahrung

05:20.180 --> 05:23.510
merkt man, dass die Verwendung von Monobehaviours Vor- und Nachteile hat.

05:23.510 --> 05:28.220
Einer der Nachteile ist, dass es in der Vergangenheit schwieriger war, den Weg zu testen.

05:28.220 --> 05:30.170
Unity hat diese Tests für den Spielmodus bereitgestellt.

05:30.170 --> 05:34.550
Jetzt können wir also sicher Playmode und Monobehaviours testen.

05:34.550 --> 05:37.230
Das ist großartig, aber es gibt immer noch einige Nachteile.

05:37.250 --> 05:41.930
Wiederum wird Monobehaviour auf mehr Einheitssysteme unter der Haube angewiesen sein.

05:41.930 --> 05:47.300
Und wenn wir versuchen, unseren benutzerdefinierten Code zu testen, sind wir vielleicht nicht sicher, wo ein Problem liegen könnte.

05:47.330 --> 05:49.320
Ist es unser Code oder ist es der Code von Unity?

05:49.340 --> 05:51.710
Also gibt es auch hier ein paar Abhängigkeiten.

05:51.740 --> 05:55.880
Das ist alles in Ordnung, aber es ist etwas, worüber man nachdenken sollte, wenn man seine Klassen entwirft und als

05:55.880 --> 05:57.290
Sie Ihre Tests entwerfen.

05:57.710 --> 06:00.680
Wir haben also eine Bewegungsgeschwindigkeit.

06:00.710 --> 06:02.060
Wir haben eine Bewegungsart.

06:02.060 --> 06:04.970
Das ist nur die Richtung der Pfeiltaste, die ich drücke.

06:04.970 --> 06:07.280
Dann verwenden wir das Update von Unity.

06:07.310 --> 06:10.160
Jetzt möchte ich das Ganze noch einmal überprüfen.

06:12.330 --> 06:12.810
Wirklich.

06:12.810 --> 06:18.540
Die Aktualisierungsschleife hier ist die einzige größere Monobehaviour-Funktionalität, die ich verwende.

06:18.570 --> 06:22.740
Der Rest des Codes muss nicht unbedingt in einem Monobehaviour enthalten sein.

06:22.770 --> 06:27.170
Ich benutze auch das Eingabesystem von Unity, das ist also eine zweite Abhängigkeit.

06:27.180 --> 06:30.370
Schauen wir mal, was ich in jedem Frame der Aktualisierung mache.

06:30.390 --> 06:32.940
Ich rufe diese Methode hier move by input auf.

06:32.970 --> 06:37.920
Ich prüfe, ob der Benutzer eine bestimmte Taste oder Tasten auf der Tastatur drückt.

06:37.920 --> 06:41.970
Und dann rufe ich die Bewegung nach dem Tastencode hier unten auf.

06:43.280 --> 06:49.820
Alles, was wir tun, ist zu sagen, wenn wir uns gerade nach links bewegen, dann bewegen wir uns in einem Vektor in die linke Richtung.

06:49.820 --> 06:53.420
Wenn wir uns gerade nach rechts bewegen und so weiter für oben und unten.

06:53.420 --> 06:58.460
So kann man sich also mit den vier Pfeiltasten in alle vier Richtungen bewegen.

06:58.460 --> 07:00.020
Also ein ziemlich einfacher Code.

07:00.020 --> 07:04.040
Wenn du schon einmal eine eigene Spielfigur erstellt hast, kennst du dich mit folgenden Einstellungen aus

07:04.040 --> 07:04.610
dies einzustellen.

07:07.590 --> 07:09.480
Hier unten haben wir zwei Methoden.

07:09.480 --> 07:14.850
Eine, mit der wir uns zu einem bestimmten Punkt bewegen können, und eine, mit der wir uns um eine Einheit bewegen können.

07:14.850 --> 07:17.700
Nehmen wir also an, ich möchte mich um eine Einheit nach rechts bewegen.

07:17.700 --> 07:22.110
Ich könnte mich um eine Einheit um eine Einheit um eine Einheit nach innen bewegen.

07:22.110 --> 07:27.350
Wenn ich mich direkt zu einem bestimmten Punkt im Raum bewegen möchte, wäre das die Bewegung nach.

07:27.360 --> 07:33.390
Dies sind also nicht unbedingt die einzigen Methoden, die man in einer benutzerdefinierten Zeichenklasse braucht, aber es gibt

07:33.390 --> 07:34.710
einige sehr gebräuchliche Methoden.

07:34.710 --> 07:41.460
Wir beenden diese Lektion mit dieser einfachen, funktionierenden Methode, um einige Funktionen zu testen.

07:41.460 --> 07:46.920
Wenn Sie sich den Bearbeitungsmodus oder die anderen Tests im Spielmodus ansehen wollen, nur zu

07:46.920 --> 07:47.820
und tun Sie das.

07:47.850 --> 07:49.440
Ich fahre mit dem nächsten Video fort.

07:49.440 --> 07:50.190
Danke!
