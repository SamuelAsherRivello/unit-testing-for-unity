WEBVTT

00:00.080 --> 00:03.050
Hello and welcome to Unit testing for unity.

00:03.080 --> 00:04.310
We're in the workshop here.

00:04.310 --> 00:08.450
And in this one we're going to take a look at the character in a basic form.

00:08.450 --> 00:10.700
We're going to have a few different ones we're going to look at.

00:10.730 --> 00:13.400
We'll start with the basics and move on to something more advanced.

00:13.400 --> 00:15.080
Let's take a look at this demo in action.

00:15.080 --> 00:16.520
Inside the unity editor.

00:16.520 --> 00:19.430
We're going to open up unity, open up our sample project.

00:19.430 --> 00:23.360
And then we're going to play one or more scenes related to the topic here.

00:23.360 --> 00:29.270
The scene is going to be the character basic, and I'm going to be talking about Monobehaviour as something

00:29.270 --> 00:34.760
that can or can't be tested, as well as play mode versus edit mode, something that I've mentioned

00:34.760 --> 00:36.020
earlier in the course.

00:36.050 --> 00:37.640
We'll bring it back here and talk about it.

00:37.640 --> 00:39.980
Here we are in the project looking at the character basic.

00:39.980 --> 00:41.390
Let's go ahead and run the scene.

00:46.760 --> 00:53.600
So while most of our workshops we've done already had a pretty boring scene where absolutely nothing

00:53.630 --> 00:56.420
of interest is happening here, we have a little bit more.

00:56.450 --> 01:02.080
When we hit play there, we see a cube white cube that gets made created in the center of the screen.

01:02.090 --> 01:04.640
I can use my arrow keys and move around.

01:04.640 --> 01:11.540
So while admittedly a very simple example here, this is meant to talk about some of the more complex

01:11.540 --> 01:14.200
aspects of testing inside unity.

01:14.210 --> 01:19.340
In the previous scenes, we weren't worried about rendering graphics or taking input.

01:19.580 --> 01:26.450
We did talk in the last workshop about the difference between testing several different dependencies

01:26.450 --> 01:27.200
together.

01:27.200 --> 01:32.390
For example, a method that inside calls a second method that inside calls the third.

01:32.420 --> 01:34.100
Those are dependencies.

01:34.130 --> 01:40.400
Here we're talking about a similar aspect, except every time I want to move my character, I first

01:40.400 --> 01:47.360
ask to listen to Unity's input system, then use Unity's Monobehaviour transform movement.

01:47.360 --> 01:47.770
Right.

01:47.780 --> 01:52.460
So we're we're using several different dependencies there or different classes.

01:54.970 --> 01:58.240
So here I'm able to use the arrow keys to move around.

01:59.360 --> 02:00.800
And that's pretty much it.

02:02.750 --> 02:05.690
But the idea is we're doing a bit more than before.

02:05.780 --> 02:08.250
Let's talk about the implications of testing that.

02:08.270 --> 02:14.780
So up here in the test runner, I have the category set to our character basic, which is great.

02:14.810 --> 02:20.420
Then I can toggle on to see the play mode tests as well as the edit mode tests.

02:20.450 --> 02:26.720
We can see that we've got some of both, but because there's a monobehaviour involved, I'm going to

02:26.720 --> 02:28.190
focus more on the play mode.

02:28.220 --> 02:34.820
Now, in each of the workshops, I've included at least one edit mode test and at least one play mode

02:34.850 --> 02:37.020
test for the scene at hand.

02:37.040 --> 02:42.620
I've done that again here, but depending on what you're actually testing, you want to think, is this

02:42.620 --> 02:47.060
more appropriate for edit mode or is it more appropriate for play mode?

02:47.090 --> 02:52.130
There's an art and a science to how you'd approach that, and how you would design your code to be more

02:52.130 --> 02:52.760
testable.

02:52.790 --> 02:59.600
But a general way to look at it that's relevant for here is that if you're using Monobehaviour functionality,

02:59.600 --> 03:02.270
that sounds more like a play mode test.

03:02.300 --> 03:08.540
The more unity libraries, particularly at runtime, you're using in your production, you want to think

03:08.540 --> 03:10.460
about those being play mode tests.

03:10.490 --> 03:13.970
It's not a hard rule, but that's a good way to start thinking about it.

03:14.240 --> 03:16.110
So let's run our tests here.

03:16.130 --> 03:18.890
I have the play mode and I will run all.

03:22.470 --> 03:22.800
Okay.

03:22.830 --> 03:25.650
It took a couple seconds to run there, but we've got them all.

03:25.680 --> 03:31.650
What actually happens when you're running a play mode test is it creates a brand new empty scene and

03:31.650 --> 03:35.430
runs just one test inside of it, and it destroys that.

03:35.430 --> 03:42.630
And it creates a brand new scene guaranteeing that we have the world space provided by a scene.

03:42.630 --> 03:49.590
But the freshness of a new scene that doesn't have any dependencies or stale info that might influence

03:49.590 --> 03:50.220
the test.

03:50.220 --> 03:51.820
So we like how that's set up.

03:51.840 --> 03:58.620
Now, the things that I'm doing are moving, moving by key code and moving to a particular place.

03:58.620 --> 04:01.260
So let's take a look at this move to test.

04:03.240 --> 04:05.580
Actually, let's take a look at the production code first.

04:05.580 --> 04:08.550
So if I go here and I look at the basic example.

04:10.370 --> 04:12.140
This is the production code.

04:12.140 --> 04:14.330
Let's look at that before I go into the tests.

04:14.330 --> 04:17.570
So here all I do is I create a primitive.

04:17.600 --> 04:22.610
You could imagine also loading a prefab here if you wanted to do that.

04:22.610 --> 04:27.620
But I wanted to slowly get us into all the complexities of runtime and unity.

04:27.620 --> 04:29.750
So I'm not using a prefab here.

04:29.750 --> 04:33.740
I just create a brand new cube from scratch with a line of code.

04:33.740 --> 04:40.430
I give it a name there just for organization sake, and then I add the component of the monobehaviour

04:40.430 --> 04:42.230
that I want to actually test.

04:42.230 --> 04:48.350
Then one of the things that I'm doing is just moving it to the point of 000, and then showing that

04:48.350 --> 04:49.910
value out on the screen.

04:49.910 --> 04:52.490
So let's take a look at the source code here.

04:55.160 --> 04:56.540
Here's character basic.

04:56.570 --> 04:58.370
This extends Monobehaviour.

04:58.400 --> 05:06.330
Now, if you're familiar with unity, you probably use Monobehaviours all the time as a good best practice.

05:06.350 --> 05:09.200
You want to start thinking conscientiously.

05:09.200 --> 05:14.260
When is it appropriate to use a monobehaviour and when can I use something different?

05:14.270 --> 05:20.180
As beginning developers, we create everything as a child of monobehaviour, but with time and experience

05:20.180 --> 05:23.510
you realize there's pros and cons of using monobehaviours.

05:23.510 --> 05:28.220
One of the cons is historically, it was more difficult to test along the way.

05:28.220 --> 05:30.170
Unity provided these playmode tests.

05:30.170 --> 05:34.550
So now we can certainly test Playmode and we can test Monobehaviours.

05:34.550 --> 05:37.230
So that's great, but there's still some drawbacks.

05:37.250 --> 05:41.930
Again, Monobehaviour is going to rely on more systems of unity under the hood.

05:41.930 --> 05:47.300
And when we're trying to test our custom code, we might not be sure where a problem might lie.

05:47.330 --> 05:49.320
Is it our code or is it Unity's code?

05:49.340 --> 05:51.710
So again, there's a few dependencies there.

05:51.740 --> 05:55.880
This is all okay, but it's something you want to think about as you're designing your classes and as

05:55.880 --> 05:57.290
you're designing your tests.

05:57.710 --> 06:00.680
So we've got a movement speed.

06:00.710 --> 06:02.060
We've got a movement type.

06:02.060 --> 06:04.970
This is just the direction of the arrow key that I'm pressing.

06:04.970 --> 06:07.280
Then we use the Unity's update.

06:07.310 --> 06:10.160
Now really let me double check here.

06:12.330 --> 06:12.810
Really.

06:12.810 --> 06:18.540
The update loop here is the only major monobehaviour functionality that I'm using.

06:18.570 --> 06:22.740
The rest of this code doesn't necessarily have to be in a monobehaviour.

06:22.770 --> 06:27.170
I am also using Unity's input system, so that's a second dependency.

06:27.180 --> 06:30.370
So let's see what I do every frame of update.

06:30.390 --> 06:32.940
I call this method here move by input.

06:32.970 --> 06:37.920
I check to see is the user hitting a particular key or keys on the keyboard.

06:37.920 --> 06:41.970
And then I call move by key code down here.

06:43.280 --> 06:49.820
All we do is say, if we're currently moving left, then let's move in a vector for the left direction.

06:49.820 --> 06:53.420
If we're currently moving right and etcetera for up and down.

06:53.420 --> 06:58.460
So this would allow you to move in all four of the directions using the four arrow keys.

06:58.460 --> 07:00.020
So pretty straightforward code.

07:00.020 --> 07:04.040
And if you've created your own custom character before you'd be familiar with setting something like

07:04.040 --> 07:04.610
this up.

07:07.590 --> 07:09.480
Down here, we've got two methods.

07:09.480 --> 07:14.850
One that lets us move to a particular point and one that lets us move by a unit.

07:14.850 --> 07:17.700
So let's say I wanted to move to the right one unit.

07:17.700 --> 07:22.110
I could pass in by one unit by one unit by one unit.

07:22.110 --> 07:27.350
If I want to move directly to a particular point in space, that would be the move to.

07:27.360 --> 07:33.390
So these are not necessarily the only methods you would need in a custom character class, but there's

07:33.390 --> 07:34.710
some pretty common ones.

07:34.710 --> 07:41.460
So we'll end this lesson here with just this as a basic, appropriate working way to test some functionality.

07:41.460 --> 07:46.920
If you want to take a look at the edit mode or the other tests that are here in the play mode, go ahead

07:46.920 --> 07:47.820
and do that.

07:47.850 --> 07:49.440
I'll move on to the next video.

07:49.440 --> 07:50.190
Thanks.
