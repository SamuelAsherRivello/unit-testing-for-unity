WEBVTT

00:00.080 --> 00:00.300
Hi.

00:00.320 --> 00:06.050
Das deckt eine Menge der verschiedenen Themen ab, die ich bisher im Workshop behandeln wollte, aber es gibt noch

00:06.050 --> 00:08.570
viel Platz für weitere Themen in der Zukunft.

00:08.570 --> 00:10.940
Wir haben in den bisher behandelten Workshops gesehen.

00:10.940 --> 00:17.930
Das einfachste Beispiel, um den Test Runner zu erlernen und zu sehen, wie wir Tests im Spielmodus und im Bearbeitungsmodus machen können,

00:17.960 --> 00:23.420
ein wenig über die Unterschiede zwischen Abspiel- und Bearbeitungsmodus lernen, und warum man testen sollte

00:23.420 --> 00:25.930
in dem einen oder dem anderen, oder in beiden.

00:25.940 --> 00:32.060
Dann haben wir auch einige der Optionen gesehen, die wir haben, wenn wir asynchrone Funktionalität haben, oder wenn wir

00:32.060 --> 00:34.040
von anderen Systemen abhängig sind.

00:34.040 --> 00:38.540
Was können wir tun, um diese Abhängigkeit für den Test zu reduzieren?

00:38.570 --> 00:43.760
Auf dem Weg dorthin lernen wir verschiedene Dinge über Dependency Injection und die Trennung von

00:43.760 --> 00:45.230
der Belange unseres Codes.

00:45.260 --> 00:51.290
Diese Prinzipien sind im Produktionscode sowieso nützlich, und wir fangen an, einige der Möglichkeiten zu sehen

00:51.290 --> 00:58.400
dass, wenn man seinen Code so vorbereitet, dass er besser testbar ist, wir auch Code erstellen, der gut entworfen ist

00:58.400 --> 00:59.660
für die Produktion.

00:59.660 --> 01:06.290
Die Injektion von Abhängigkeiten ermöglicht also Flexibilität, die man zur Laufzeit nutzen kann, und reduziert die Komplexität

01:06.290 --> 01:12.920
Ihrer Systeme, indem Sie bei Bedarf flexible Varianten verschiedener Abhängigkeiten einbinden.

01:12.950 --> 01:20.540
Wir haben auch gesehen, dass durch die Aufteilung eines monolithischen großen Monobehaviour in nur das, was wir brauchen, aus dem Monobehaviour

01:20.540 --> 01:27.200
und den anderen Code in eine leichtere Klasse ohne Monobehaviour verschieben, erhalten wir wieder etwas Flexibilität

01:27.200 --> 01:32.150
die in der Produktion nützlich ist und uns auch hier in der Testwelt hilft.

01:32.150 --> 01:38.780
Ich denke, einige der Herausforderungen, die wir sehen, sind, was passiert, wenn man mehrere Abhängigkeiten hat

01:38.780 --> 01:43.250
oder viele Systeme, die von einer bestimmten Methode aufgerufen werden.

01:43.610 --> 01:49.250
Das kann ein Zeichen dafür sein, dass die Methode aufgebläht ist und zu viel macht, oder es kann ein Zeichen dafür sein, dass sie

01:49.250 --> 01:51.680
eine schlanke und angemessen konzipierte Methode ist.

01:51.680 --> 01:57.350
Aber wir müssen einige zusätzliche Gedanken und Überlegungen anstellen, wenn wir diese Funktionalität testen wollen.

01:57.350 --> 01:59.600
Ich hoffe, das war hilfreich für Sie.

01:59.600 --> 02:06.680
Ich freue mich darauf, noch mehr Themen in dieser Serie zu behandeln, und sie werden wieder in über

02:06.680 --> 02:07.190
Zeit.

02:07.190 --> 02:08.300
Also nochmals vielen Dank.
