WEBVTT

00:00.110 --> 00:01.340
Die Einheitstests.

00:01.340 --> 00:02.190
Überblick.

00:02.210 --> 00:04.100
Zuerst ein wenig Kontext.

00:04.130 --> 00:11.690
Wenn Ihre Projekte mit mehr Skripten, mehr Methoden und mehr Komplexität wachsen, kann es schwierig sein, sicherzustellen

00:11.690 --> 00:14.510
dass neuer Code keinen alten Code kaputt macht.

00:14.540 --> 00:19.920
Automatisierte Tests können helfen, sicherzustellen, dass Ihr Code so funktioniert, wie Sie es erwarten.

00:19.940 --> 00:25.940
Automatisierte Tests helfen uns, indem sie herausfinden, wie und wo Fehler in einem früheren Stadium des Prozesses auftreten.

00:25.940 --> 00:31.010
Anstatt auf die viel teurere Option zu warten, dass Ihre Endbenutzer diese Fehler melden.

00:31.010 --> 00:36.210
Sie können also MVC-Architekturen ohne Testen verwenden, und Sie können Testen ohne verwenden.

00:36.230 --> 00:37.550
MVC-Architektur.

00:37.550 --> 00:40.990
Warum ist es also wichtig, über diese Themen zusammen zu sprechen?

00:41.000 --> 00:45.380
Weil die Kombination dieser beiden Technologien unglaublich leistungsfähig ist.

00:45.410 --> 00:51.800
Durch die Verwendung einer Architektur wie MVC kann sichergestellt werden, dass Ihr Code besser entkoppelt ist, dass jede Klasse

00:51.800 --> 00:55.000
einen einzigen Zweck hat und dass die Lösungen einfacher sind.

00:55.010 --> 00:57.950
All dies sind auch Merkmale für besser testbaren Code.

00:57.980 --> 01:04.610
Das Hinzufügen von Tests zu Ihrem Projekt führt zu mehr Robustheit, mehr Vertrauen und fördert einfache Lösungen,

01:04.610 --> 01:08.930
vor allem, wenn sie mit testgetriebener Entwicklung aktiviert werden, die wir besprechen werden.

01:08.960 --> 01:12.530
Wenn Sie Unit-Tests in Ihr Projekt und Ihren Arbeitsablauf integrieren, sparen Sie Zeit.

01:12.530 --> 01:15.440
Es spart Planung, Entwicklung und Wartung.

01:15.470 --> 01:21.170
Es verleiht Ihrem Code mehr Vertrauen, und mit diesem Vertrauen können Sie sich viel mehr trauen in

01:21.170 --> 01:22.370
Ihren Refactors.

01:22.370 --> 01:28.910
Stellen Sie sich vor, Sie führen alle Ihre Tests vor einem größeren Refactor durch, und danach sparen Sie Zeit und geben

01:28.910 --> 01:31.430
Sie können sich darauf verlassen, dass der Refactor gut funktioniert.

01:31.460 --> 01:33.620
Testen ist sowohl eine Kunst als auch eine Wissenschaft.

01:33.620 --> 01:38.360
Mit mehr Forschung und mehr Übung kann jeder Entwickler seine eigene Kunst entwickeln.

01:38.360 --> 01:42.980
Auch Low-Level-Tests, bei denen Dinge auf der Ebene der Einheiten getestet werden.

01:43.370 --> 01:49.040
Individuelle Methoden, sagen wir mal, und die Praktiken und die Entwicklung Ihrer Software, die sich aus

01:49.070 --> 01:55.970
die auch eine Diskussion auf höherer Ebene über architektonische Entscheidungen, Abhängigkeiten oder

01:55.970 --> 02:00.710
das Fehlen solcher Abhängigkeiten in Ihrem Code und wie gekoppelt oder entkoppelt diese Systeme sind.

02:00.740 --> 02:06.850
Dies alles ist Teil einer größeren Konversation, die dazu einlädt, eine gute Organisation in Ihre Software zu bringen.

02:06.860 --> 02:13.430
Unser erstes Ziel, vor allem wenn wir neu im Testen sind, ist es, sicherzustellen, dass eine bestimmte Methode die gewünschte Wirkung hat.

02:13.430 --> 02:14.170
Ergebnisse hat.

02:14.180 --> 02:20.960
Wenn das geschehen ist, können Sie die Methode mit unerwarteten Bedingungen und Eckfällen testen, die zu Diskussionen führen können

02:20.960 --> 02:24.230
und Analyse über die Struktur der Klasse selbst.

02:24.260 --> 02:28.070
Dann kann man sich den Zweck des Systems ansehen, in dem die Klasse angesiedelt ist.

02:28.070 --> 02:35.330
Und wie bereits erwähnt, gibt uns diese Art der Analyse die Möglichkeit und das Format, die großen

02:35.330 --> 02:37.160
Lösung zu betrachten, die wir vor uns haben.

02:37.160 --> 02:42.260
Bei Software gibt es viele verschiedene Arten von Tests, und ob Sie es wissen oder nicht, Sie sind bereits

02:42.260 --> 02:43.100
Testen.

02:43.130 --> 02:46.820
Einige der häufigsten Testarten sind der Rauchtest.

02:46.850 --> 02:49.910
Dies ist ein eher beiläufiger Test: Funktioniert es?

02:49.910 --> 02:50.630
Für mich?

02:50.630 --> 02:55.280
Und für viele von uns ist dies vielleicht die einzige Art von Projekttests, die wir durchführen.

02:55.900 --> 03:02.920
Jedes Mal, wenn Sie einen neuen Code erstellen, führen Sie die Anwendung wie ein Benutzer aus oder spielen das Spiel wie ein Spieler und Sie

03:02.920 --> 03:08.210
sehen, ob dieser bestimmte Pfad durch die Anwendung oder das Spiel so funktioniert, wie ich es erwarte?

03:08.230 --> 03:14.110
Dann gibt es noch die Benutzertests, bei denen man regelmäßig, vielleicht nach einem wöchentlichen Build, einige Benutzer einlädt

03:14.110 --> 03:16.210
oder Spieler einladen, das Spiel auszuprobieren.

03:16.240 --> 03:21.760
Hier geht es nicht nur darum, ob es Fehler hat, sondern ob es die Erwartungen der Benutzer erfüllt.

03:21.760 --> 03:22.970
Macht es Spaß zu spielen?

03:22.990 --> 03:23.710
Solche Dinge.

03:23.710 --> 03:30.220
Und mit einem Unit-Test schaut man sich einen sehr kleinen Teil der Erfahrung an, vielleicht nur einen einzigen

03:30.220 --> 03:37.000
Methodenaufruf oder eine kleine Reihe von Aufrufen, während die Systeme zusammenarbeiten, und man fragt sich, ob es so funktioniert

03:37.000 --> 03:37.960
es funktionieren soll?

03:37.990 --> 03:43.180
Wie ich bereits erwähnt habe, führen wir bereits Smoke-Tests durch, um Projekte grundsätzlich anzugehen.

03:43.180 --> 03:45.280
Stellen wir uns also ein einfaches Beispiel vor.

03:45.280 --> 03:50.170
Wenn wir eine Klick-die-Schaltfläche-App hätten, die eine Schaltfläche hat, und wenn man darauf klickt, gewinnt man.

03:50.200 --> 03:52.630
Wir könnten etwas Code dazu hinzufügen.

03:52.630 --> 03:54.910
Kompiliere und führe das Erlebnis aus.

03:54.940 --> 03:59.500
Klicke auf den einen Button und sieh nach, ob der Sieg-Text angezeigt wird, wenn du gewonnen hast.

03:59.530 --> 04:05.110
Das wäre ein Rauchtest, und du könntest das an den Benutzer weitergeben und sehen, ob es bei ihm funktioniert.

04:05.260 --> 04:11.340
In beiden Fällen handelt es sich um einen ziemlich teuren Test, der den Code nur sehr eingeschränkt nutzt

04:11.350 --> 04:11.710
hier.

04:11.710 --> 04:17.470
In diesem einfachen Beispiel mag es so aussehen, als könnten wir alle Anwendungsfälle erfassen, aber stellen Sie sich ein größeres Spiel vor

04:17.470 --> 04:19.900
mit Kernschleifen und Metaschleifen.

04:20.050 --> 04:24.370
Man kann sich nicht auf den Entwickler oder den Benutzer und die Benutzertests verlassen.

04:24.400 --> 04:30.070
Testen aller Schaltflächen, aller Funktionen, aller Eingaben und aller möglichen Ergebnisse.

04:30.070 --> 04:36.430
Wenn sie richtig durchgeführt werden, können Unit-Tests mehr Wege durch den Code schneller erfassen, und Sie

04:36.430 --> 04:39.730
kann diese Testreihe automatisch häufiger ausgeführt werden.

04:39.730 --> 04:45.790
Im Laufe der Zeit bauen Sie eine Liste von permanenten Tests auf, die bereit sind, ausgeführt zu werden, so dass Sie wissen, dass neue

04:45.790 --> 04:47.930
Code keine alten Funktionen zerstört.

04:47.950 --> 04:54.340
Einige Teams arbeiten nach den Prinzipien der agilen Entwicklung, was einen Teil des Kalenders einschließt, der

04:54.340 --> 04:55.030
ein Sprint.

04:55.030 --> 05:01.540
Zum Beispiel verpflichtet sich das Team alle zwei Wochen, jede Stunde, jeden Tag, jede Woche neue Funktionen hinzuzufügen,

05:01.540 --> 05:02.420
oder Sprint.

05:02.440 --> 05:07.510
Das Team kann die automatisierten Tests erneut durchführen, eine gute Gelegenheit, um Fehler zu finden.

05:07.510 --> 05:09.790
Wie führen wir diese Tests nun genau durch?

05:09.790 --> 05:13.600
Nun, Unity hat Testunterstützung im Unity-Editor.

05:13.630 --> 05:19.510
Es gibt ein spezielles Fenster, das man öffnen kann und in dem man die Tests jederzeit manuell ausführen kann.

05:19.540 --> 05:21.100
Das ist ein guter Startpunkt.

05:21.130 --> 05:25.750
Natürlich ist es auch möglich, dies zu automatisieren, und es wird für größere Projekte empfohlen.

05:25.750 --> 05:31.690
Es gibt Möglichkeiten, dies mit Ihrer Versionskontrolle zu verbinden, so dass jedes Mal, wenn Sie eine Übergabe oder eine Übergabe an eine

05:31.690 --> 05:34.360
bestimmten Zweig, diese Tests erneut ausgeführt werden können.

05:34.600 --> 05:39.020
Unity selbst bietet einige Dienste an, darunter Unity Cloud build.

05:39.040 --> 05:45.040
Dies imitiert das Ausführen dieser Tests und das Erstellen deines Spiels, aber auf einem Server, der dies automatisch tut

05:45.040 --> 05:47.800
einmal am Tag oder wie oft es sinnvoll ist.

05:47.800 --> 05:53.620
In der allgemeinen Unity-Entwicklung sind wir mit zwei verschiedenen Modi innerhalb der Unity-Erfahrung vertraut.

05:53.770 --> 05:56.770
Bevor wir den Abspielknopf drücken, sind wir im Bearbeitungsmodus.

05:56.770 --> 05:58.210
Sobald wir auf Play drücken.

05:58.210 --> 06:01.420
Bis die Szene stoppt, sind wir im Abspielmodus.

06:01.480 --> 06:05.650
Mit Unity Testing kann man in jedem dieser beiden Modi testen.

06:05.650 --> 06:07.870
Dann gibt es verschiedene Möglichkeiten, das zu tun.

06:08.260 --> 06:13.480
Einige der Testideen, die man hier hätte, wären, eine Methode aufzurufen und zu sehen, ob sie einem die

06:13.480 --> 06:14.580
erwartete Ergebnis liefert.

06:14.590 --> 06:20.470
Nehmen wir an, wir haben eine mathematische Systemklasse mit einer Additionsmethode, und man gibt einfach bekannte Parameter ein und

06:20.470 --> 06:22.150
sehen, ob es mit dem bekannten Ergebnis übereinstimmt.

06:22.150 --> 06:27.070
Man kann auch Tests haben, die spezielle Fragen zur Funktionalität des Editors stellen.

06:27.100 --> 06:33.100
Ist das Editor-Fenster in der richtigen Größe aufgetaucht, oder unsere Spielobjekte, oder die Kamera in der richtigen Größe?

06:33.100 --> 06:35.350
Position, bevor die Szene beginnt?

06:35.350 --> 06:40.900
Das Testen im Bearbeitungsmodus ist ein guter Anfang, wenn es möglich ist, also machen Sie das standardmäßig.

06:40.900 --> 06:46.930
Das Testen im Wiedergabemodus ist unglaublich nützlich, aber es bringt die zusätzliche Komplexität des Laufzeitcodes mit sich.

06:47.540 --> 06:47.990
hier.

06:47.990 --> 06:53.330
Man testet nicht nur, wie eine bestimmte Methode ein Ergebnis zurückgibt, sondern man testet das innerhalb des größeren

06:53.330 --> 06:57.020
Lebenszyklus von Spielobjekten und anderen Unity-Konzepten.

06:57.070 --> 07:03.200
Und wenn es hier ist, kann man Code testen, der sich auf awake, start, update, etcetera verlässt, Dinge, die nur

07:03.200 --> 07:04.400
zur Laufzeit ausgeführt werden.

07:04.400 --> 07:11.210
Einige Testideen sind hier, um zu sehen, ob ein Prefab, sobald es instanziiert ist, seine Startmethode richtig ausführt

07:11.210 --> 07:12.620
ohne irgendwelche Ausnahmen.

07:12.620 --> 07:14.780
Sie können den Code im Laufe der Zeit testen.

07:15.460 --> 07:19.150
Wird diese Schleife nach ein paar Sekunden korrekt ausgeführt?

07:19.180 --> 07:21.820
Sie können physikalische Interaktionen zur Laufzeit prüfen.

07:21.820 --> 07:28.720
Wie viele Sprünge kann ein Ball in Ihrem 3D-Spiel machen, bevor er aufhört, den Sprungkraftfaktor zu testen?

07:28.750 --> 07:30.310
Ein bisschen mehr Kontext hier.

07:30.310 --> 07:36.830
In der Vergangenheit bot Unity keine in den Editor integrierten Tests über das Test-Runner-Fenster an.

07:36.850 --> 07:37.330
Das werden wir sehen.

07:37.360 --> 07:43.570
In den vielen Jahren, die seit der Einführung von Unity vergangen sind, wurde diese Funktionalität nach und nach hinzugefügt und erweitert als

07:43.570 --> 07:45.100
der neuesten Version von Unity.

07:45.130 --> 07:50.500
Wir haben alles, was wir brauchen, um die von uns gewünschten Tests auf die von uns gewünschte Weise durchzuführen.

07:50.500 --> 07:55.900
Es gab noch nie einen besseren Zeitpunkt, um Unit-Tests in Ihre Arbeitsabläufe einzubauen, und gemeinsam werden wir sehen, wie

07:55.900 --> 07:56.770
das zu tun.

07:57.160 --> 07:57.970
Vielen Dank!
