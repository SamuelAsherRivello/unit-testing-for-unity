WEBVTT

00:00.020 --> 00:01.220
Testgesteuerte Entwicklung.

00:01.220 --> 00:04.790
Hier ist ein Beispiel für eine Testklasse mit einer Testmethode.

00:04.790 --> 00:08.330
In diesem Kurs haben wir bereits gesehen, wie man einen bestehenden Test ausführt.

00:08.360 --> 00:11.080
Wir haben gesehen, wie man neue Tests von Grund auf erstellt.

00:11.090 --> 00:17.450
Testgetriebene Entwicklung, oder TDD, ist die Praxis, Tests hinzuzufügen, bevor Sie Ihren Produktionscode hinzufügen.

00:17.450 --> 00:21.180
Für einige, besonders für diejenigen, die neu im Testen sind, kann dies seltsam erscheinen.

00:21.200 --> 00:26.300
Wir werden mehr über diese Technik erfahren und feststellen, dass man testgetriebene Entwicklung mit traditioneller Entwicklung mischen kann

00:26.330 --> 00:29.360
Testen mischen können, wie Sie es für Ihre eigenen Arbeitsabläufe wünschen.

00:29.390 --> 00:36.500
TDD erstellt Tests, die spezifizieren und validieren, was der Code tun wird, sobald er erstellt ist.

00:36.950 --> 00:38.120
Hier ist der Arbeitsablauf.

00:38.150 --> 00:39.560
Sie erstellen einen neuen Test.

00:39.590 --> 00:44.120
Sie fügen gerade genug Implementierung hinzu, damit der Code kompiliert werden kann.

00:44.120 --> 00:50.180
Da wir gerade genug Produktionscode hinzugefügt haben, damit dieser Code kompiliert werden kann, vielleicht sogar mit einer leeren

00:50.210 --> 00:51.260
Implementierung.

00:51.260 --> 00:53.900
Wir führen den Test aus und er schlägt fehl.

00:54.260 --> 01:00.290
Das ist zu erwarten, und es ist eigentlich ein sehr guter Anfang, wenn man zuerst einen fehlgeschlagenen Test sieht.

01:00.290 --> 01:05.960
Wenn wir mehr Vertrauen haben, dass der Test, sobald er bestanden ist, tatsächlich etwas bedeutet, können wir ihn umgestalten

01:05.960 --> 01:09.310
Ihren Produktionscode, bis der Code besteht, und machen dann weiter.

01:09.330 --> 01:15.860
TDD ist nicht einfach die Reihenfolge, dass man zuerst testet und dann den Produktionscode schreibt.

01:15.860 --> 01:19.060
Es ist auch eine Art, über Ihre Projekte nachzudenken.

01:19.070 --> 01:24.080
Manches davon muss man wirklich üben, um die Ergebnisse zu spüren.

01:24.080 --> 01:30.980
Aber mit zunehmender TDD-Erfahrung stelle ich fest, dass man über den neuen Code anders denkt, man ist

01:30.980 --> 01:37.370
fokussierter in der Entwicklung, man erstellt mehr atomaren Code, der nur eine Sache tut.

01:37.370 --> 01:42.020
Und wenn Sie Ihren Testcode bestehen, ist er aussagekräftiger.

01:42.050 --> 01:46.280
Man kann diesen Ablauf auch so betrachten, dass man einen fehlgeschlagenen Test schreibt.

01:46.280 --> 01:51.530
Sie bringen den Test zum Bestehen und überarbeiten dann Ihren Code, um alle anderen Ziele zu erreichen.

01:51.530 --> 01:54.710
Sie haben Optimierung, Codierungsstandards.

01:54.710 --> 01:55.490
et cetera.

01:55.940 --> 01:57.060
Und dann wiederholen Sie.

01:57.080 --> 01:58.490
Schauen wir uns das mal in Aktion an.

01:58.490 --> 02:01.210
Wir öffnen ein Unity-Projekt, das bereits einen Test hat.

02:01.220 --> 02:08.690
Wir benutzen TDD, um einen neuen Test hinzuzufügen, erstellen gerade genug Produktionscode, um ihn zu kompilieren, und sehen einen fehlgeschlagenen

02:08.690 --> 02:12.050
Ergebnis, und dann refaktorisieren, bis wir ein passables Ergebnis haben.

02:12.820 --> 02:16.090
Hier sind wir in einem ziemlich leeren Unity-Projekt.

02:16.090 --> 02:22.450
Ich habe sichergestellt, dass das Testframework bereits im Paketmanager hinzugefügt wurde, wie zuvor gezeigt, und

02:22.450 --> 02:25.390
Ich habe einen Test kopiert, mit dem wir beginnen können.

02:25.420 --> 02:28.250
Schauen wir uns diesen Test hier im Bearbeitungsmodus an.

02:28.270 --> 02:33.660
Ich habe einen Test, der die Add-Methode einer einfachen mathematischen Klasse abdeckt.

02:33.670 --> 02:35.720
Führen wir den Test aus, den er besteht.

02:35.740 --> 02:37.120
Werfen wir einen Blick auf den Code.

02:37.120 --> 02:41.300
Und hier sehen wir den einen Test, den wir schon von früher in der Präsentation kennen.

02:41.320 --> 02:45.160
Führen wir nun, wie hier besprochen, eine testgetriebene Entwicklung durch.

02:45.190 --> 02:51.280
Die Idee ist, dass wir, wenn wir die Funktionalität des mathematischen Systems erweitern wollen, einige Ansätze haben.

02:51.310 --> 02:57.010
Entweder wir erstellen den Produktionscode ohne jegliche Tests und danach.

02:57.930 --> 03:01.260
Und danach fügen wir vielleicht Tests hinzu, oder vielleicht auch nicht.

03:02.310 --> 03:08.400
Bei der testgetriebenen Entwicklung werden wir jedoch zuerst testen, bevor wir etwas in die Produktion einbringen

03:08.400 --> 03:08.970
Code.

03:09.730 --> 03:10.930
Schauen wir mal, wie das funktioniert.

03:10.930 --> 03:12.340
Ich stelle mir vor, dass ich etwas erschaffe.

03:12.910 --> 03:16.600
Stellen wir uns vor, das mathematische System braucht eine Subtraktionsmethode.

03:17.830 --> 03:22.150
Diese Subtraktionsmethode gibt es noch nicht, wie wir sehen werden, wenn wir uns den Quellcode ansehen.

03:22.950 --> 03:24.780
Aber lasst uns trotzdem einen Test dafür machen.

03:25.650 --> 03:28.980
Ich beginne mit dem Hinzufügen des Testattributs.

03:29.190 --> 03:33.030
Ich benenne die Methode mit dem, was getestet werden soll.

03:33.060 --> 03:39.990
Was ist das erwartete Ergebnis und in welcher Situation erwarte ich für subtract, das Ergebnis wäre fünf.

03:40.020 --> 03:45.000
Wenn ich zehn und fünf eingebe, ist zehn minus fünf gleich fünf.

03:45.030 --> 03:48.870
Um den Test einzurichten, instanziiere ich eine neue Kopie meines mathematischen Systems.

03:49.080 --> 03:52.120
Ich erhalte das Ergebnis, indem ich die Methode subtract aufrufe.

03:52.140 --> 03:56.730
Der rote Text hier zeigt an, dass mein Code-Editor weiß, dass es keine Subtraktionsmethode gibt.

03:56.730 --> 04:01.200
Und schließlich erwarten wir, dass unsere Methode einen Wert von fünf zurückgibt.

04:01.230 --> 04:04.980
Da ich dies aus dem früheren Beispiel kopiert und eingefügt habe, steht hier 15.

04:05.010 --> 04:06.060
Ich werde das jetzt ändern.

04:06.090 --> 04:08.070
Jetzt prüft es die richtige Annahme.

04:08.670 --> 04:13.050
Jetzt wissen wir, dass dies nicht kompiliert werden kann, aber wir speichern und kehren zu Unity zurück.

04:13.080 --> 04:19.530
Zwei Dinge sind zu beachten: Erstens zeigt das Konsolenfenster korrekt an, dass ein Compilerfehler vorliegt, und

04:19.530 --> 04:24.150
zweitens sehen wir im Test-Runner-Fenster noch nicht unsere neue Methode.

04:24.180 --> 04:26.520
Dies sind gute Dinge, die man bei TDD beachten sollte.

04:26.550 --> 04:30.810
Der nächste Schritt ist, gerade so viel Code zu machen, dass er kompiliert werden kann.

04:30.840 --> 04:34.570
Es ist sehr wichtig, dass wir die Implementierung in diesem Stadium nicht abschließen.

04:34.590 --> 04:36.780
Hier ist der Quellcode für unser mathematisches System.

04:36.780 --> 04:41.920
Hier ist die einfachste Implementierung, die ich machen kann, um den Code zu kompilieren.

04:41.940 --> 04:45.610
Beachten Sie, dass ich die richtige Implementierung nicht fertiggestellt habe.

04:45.630 --> 04:52.480
In diesem Beispiel scheint es trivial zu sein, weil wir wissen, dass wir nur a und b subtrahieren müssen.

04:52.500 --> 04:58.320
In der testgetriebenen Entwicklung wäre die Implementierung einer bestimmten Methode jedoch normalerweise komplexer

04:58.320 --> 04:59.400
und nimmt mehr Zeit in Anspruch.

04:59.430 --> 05:03.390
Unabhängig davon hören wir hier immer auf, wenn wir genug zum Kompilieren haben.

05:04.090 --> 05:05.250
Schauen wir uns den Test an.

05:05.260 --> 05:07.840
Unser Code-Editor wird nicht mehr richtig angezeigt.

05:07.840 --> 05:09.010
Subtrahieren und rot.

05:09.460 --> 05:11.260
Speichern wir und prüfen wir die Einheit.

05:11.290 --> 05:13.600
Jetzt sehen wir keine Konsolenfehler mehr.

05:13.630 --> 05:14.170
Großartig.

05:14.170 --> 05:15.400
Alles wird kompiliert.

05:15.400 --> 05:19.210
Und jetzt zeigt unser Test-Runner-Fenster die neue Testmethode richtig an.

05:19.210 --> 05:20.290
Lassen wir alle Tests laufen.

05:20.290 --> 05:26.320
Sie können die Tests als fehlgeschlagen betrachten, weil eine oder mehrere Testmethoden fehlgeschlagen sind.

05:26.320 --> 05:32.290
Wenn wir die fehlgeschlagene Methode auswählen, sehen wir eine kleine Eingabe und eine kleine Ausgabe

05:32.320 --> 05:34.120
Text, der zeigt, warum es fehlgeschlagen ist.

05:34.240 --> 05:38.410
Er erwartet fünf, aber stattdessen gibt er null zurück.

05:38.410 --> 05:40.420
Warum haben wir uns das hier angetan?

05:40.420 --> 05:46.600
Es mag trivial erscheinen, aber es ist eine wichtige Unterscheidung, dass wir einen Test erstellen, von dem wir glauben, dass er das richtige Ergebnis liefert.

05:46.600 --> 05:49.120
Funktionalität testet, und wir sehen ihn zuerst fehlschlagen.

05:49.120 --> 05:55.420
Das gibt uns eine gute Grundlage, um zu wissen, wann eine korrekte Implementierung mit Sicherheit bestanden ist.

05:55.420 --> 05:57.040
Fügen wir die richtige Implementierung hinzu.

05:57.040 --> 06:02.050
Hier nehmen wir an, dass der erste eingehende Parameter größer ist als der zweite, und wir geben einfach zurück

06:02.050 --> 06:04.080
und wir geben einfach a minus b zurück.

06:04.090 --> 06:05.560
Speichern wir den Test und führen ihn aus.

06:07.440 --> 06:12.480
Jetzt läuft der Test gut und wir haben unser erstes Beispiel für testgesteuerte Entwicklung abgeschlossen.

06:12.480 --> 06:13.410
Das war's.

06:13.800 --> 06:20.580
Aus eigener Erfahrung weiß ich, dass ich Zeit und Übung mit dem Testen brauchte, um wirklich ein Gefühl für die

06:20.580 --> 06:21.390
Vorteile zu spüren.

06:21.420 --> 06:29.820
Wir haben einen kurzen Überblick über Unit-Tests, das Erstellen von Unit-Tests und testgetriebene Entwicklung erhalten,

06:30.420 --> 06:35.070
Ich hoffe, Sie erkennen nun einige der Vorteile, die für Sie von Vorteil sein könnten.

06:35.100 --> 06:39.360
Kombinieren Sie, was Sie hier über das Testen mit der MVC-Architektur gelernt haben.

06:39.390 --> 06:47.340
Sie haben die Werkzeuge, um Projekte zu erstellen, die modularer, skalierbarer, optimierter, robuster und zuverlässiger sind.

06:47.370 --> 06:52.440
Die Kombination aus Testen und guter Architektur ist wirklich leistungsstark.

06:52.470 --> 06:53.430
Danke!
