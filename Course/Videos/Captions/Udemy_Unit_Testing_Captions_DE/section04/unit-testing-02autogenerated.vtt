WEBVTT

00:00.050 --> 00:03.640
Einrichten des Fensters des Testläufers und der Testklassen.

00:03.650 --> 00:07.250
Der Quellcode für das Testframework ist über den Paketmanager verfügbar.

00:07.250 --> 00:10.800
Sie können die Paketsuche für das Testframework hinzufügen.

00:10.820 --> 00:15.530
Importieren Sie das Testframework und optional das Code Coverage Tooling.

00:15.530 --> 00:21.110
Das Unity-Testframework enthält alle Bibliotheken, die zum Testen Ihres C-Sharp-Codes benötigt werden, jetzt als einzelne

00:21.110 --> 00:21.770
oder im Team.

00:21.770 --> 00:26.540
Wenn Sie neu im Testen sind, müssen Sie nicht Ihren gesamten Code auf einmal testen.

00:26.540 --> 00:32.450
Sie können langsam, mit der Zeit, anfangen zu testen, je mehr von Ihrem Code mit Tests abgedeckt wird, desto besser

00:32.450 --> 00:34.020
Sie werden mehr Vertrauen haben.

00:34.040 --> 00:36.320
Einige Möglichkeiten, wie Sie es in Ihr Team integrieren können.

00:36.320 --> 00:37.640
Das ist einfach und schön.

00:37.820 --> 00:44.540
Fügen Sie Tests nur für neue Funktionen hinzu, oder fügen Sie Tests für Schlüsselsysteme vor einem größeren Refactoring hinzu.

00:44.540 --> 00:48.650
Und ein guter Anfang ist das Testen während der Fehlerbehebung.

00:48.650 --> 00:55.010
Wenn ein Benutzer einen Fehler meldet, repliziert man zuerst die Existenz des Fehlers mit einem fehlgeschlagenen Test.

00:55.040 --> 00:57.790
Dann korrigiert man den Code und der Test ist erfolgreich.

00:57.800 --> 01:03.260
Sie können diesen Test als Vermächtnis hinterlassen, so dass Sie sicher sein können, dass der Fehler in Zukunft nicht wieder auftritt.

01:03.290 --> 01:08.840
Das Konzept der Codeabdeckung bezieht sich darauf, wie viel Ihrer Codebasis durch Tests abgedeckt ist.

01:08.930 --> 01:16.250
Wenn Sie eine Klasse und drei Methoden in Ihrem gesamten Projekt haben, und alle drei haben Tests,

01:16.250 --> 01:18.290
dann haben Sie eine 100%ige Abdeckung.

01:18.290 --> 01:23.480
Im Allgemeinen gilt: Je höher die Abdeckung, desto besser können Sie das Codeabdeckungsfenster öffnen,

01:23.480 --> 01:30.440
Ihre Tests ausführen und Sie erhalten zuverlässige Ergebnisse, die Ihnen nicht nur den Prozentsatz pro Klasse und System zeigen,

01:30.440 --> 01:36.830
sondern auch innerhalb jeder Klasse eine zeilenweise Anzeige, welche Methoden abgedeckt sind und welche nicht.

01:37.130 --> 01:38.300
Das ist sehr nützlich.

01:38.300 --> 01:43.670
Sie können nachverfolgen, wie viel von Ihrem Code getestet wird, Sie können alle Schwachstellen finden, die Sie während Ihrer

01:43.670 --> 01:48.710
testen und auch die zunehmende Abdeckung im Laufe der Zeit überwachen.

01:48.710 --> 01:52.390
Wenn diese Bibliotheken installiert sind, können Sie Ihren ersten Test erstellen.

01:52.400 --> 01:58.730
Öffnen Sie das Test Runner Fenster, erstellen Sie einen Testordner in Ihren Assets, erstellen Sie Ihre erste Klasse und Ihre

01:58.730 --> 02:03.890
erste Methode in dieser Klasse. Diese Tests werden dann im Test Runner Fenster angezeigt, wo

02:03.890 --> 02:06.350
Sie können auf Ausführen klicken und sehen, wie sie ausgeführt werden.

02:06.350 --> 02:09.080
Hier ist ein Beispiel für eine Testklasse mit einer Testmethode.

02:09.110 --> 02:11.780
Beachten Sie, dass es wie ganz normales C sharp aussieht.

02:11.780 --> 02:16.850
Das Testattribut in den eckigen Klammern ist die geheime Soße.

02:16.850 --> 02:22.220
Hier sucht das System nach allen Methoden, die mit diesem Attribut gekennzeichnet sind, um sie als Test zu betrachten.

02:22.220 --> 02:26.600
Wie ich bereits erwähnt habe, ist Testen eine Kunstform, und es gibt viele verschiedene Möglichkeiten, sie anzugehen.

02:26.630 --> 02:35.210
Eine gute Methode, die ich verwende, ist, jede Methode in drei Abschnitte zu unterteilen: arrange, act und assert.

02:35.240 --> 02:39.800
In arrange führt man eine oder mehrere Zeilen aus, die zum Einrichten des Tests erforderlich sind.

02:39.800 --> 02:45.650
Im act-Teil führen Sie alles aus, was mit dem Test zu tun hat, und dann

02:45.650 --> 02:46.400
führen Sie die Behauptung aus.

02:46.430 --> 02:49.430
Behaupten bedeutet, dass man annimmt, dass etwas wahr ist.

02:49.430 --> 02:52.280
Das Test-Framework besteht also aus der Assert-Bibliothek.

02:52.280 --> 02:56.450
Stellen Sie sich vor, wir haben ein benutzerdefiniertes mathematisches System, mit dem Sie zwei Zahlen addieren können.

02:56.450 --> 03:01.430
Wir könnten behaupten, dass die Summe von fünf plus zehn gleich 15 ist.

03:01.430 --> 03:03.860
Und wir würden das als einen erfolgreichen Test betrachten.

03:03.890 --> 03:06.110
Wir führen ihn durch und sehen, dass er erfolgreich ist.

03:06.110 --> 03:07.520
Schauen wir uns das in Aktion an.

03:07.520 --> 03:10.520
Ich werde ein Unity-Projekt öffnen, das einen Test bereithält.

03:10.550 --> 03:13.940
Wir schauen uns an, wie es funktioniert und führen den Test aus.

03:14.880 --> 03:17.520
Hier sind wir in einem leeren Unity-Projekt.

03:17.520 --> 03:20.290
Ich beginne mit dem Einrichten des Test-Frameworks.

03:20.340 --> 03:22.260
Ich öffne also den Paketmanager.

03:26.800 --> 03:30.830
Der Paketmanager zeigt an, welche Pakete bereits installiert sind.

03:30.850 --> 03:36.610
Es ist möglich, dass das Projekt, mit dem Sie beginnen, bereits das Testframework enthält.

03:37.190 --> 03:39.960
Wenn das nicht der Fall ist, können Sie es hier selbst hinzufügen.

03:39.980 --> 03:44.720
Suchen Sie in der Unity Registry nach test framework und installieren Sie die neueste Version.

03:44.750 --> 03:51.650
Als nächstes suchen Sie in der Unity Registry nach Code Coverage für optionale Zusatzfunktionen und installieren diese.

03:51.980 --> 03:54.320
Code Coverage hat einige optionale Beispiele.

03:54.320 --> 03:55.790
Ich werde sie hier nicht installieren.

03:56.590 --> 04:02.020
Wenn wir uns nun die Pakete im Projekt ansehen, sehen wir sowohl das Testframework als auch optional

04:02.020 --> 04:04.020
Sie sich entschieden haben, es zu installieren, Codierungsabdeckung.

04:04.030 --> 04:07.210
Jetzt ist dieses Projekt vollständig kompatibel für Unit-Tests.

04:08.940 --> 04:11.520
Um loszulegen, öffnen wir das Test-Runner-Fenster.

04:11.970 --> 04:14.220
Das Fenster des Testläufers hat zwei Registerkarten.

04:14.250 --> 04:16.230
Bearbeitungsmodus und Abspielmodus.

04:16.440 --> 04:21.810
Da wir keine Tests hinzugefügt haben, ist das Fenster sehr hilfreich und bietet einige klickbare Erstellungsoptionen

04:21.810 --> 04:24.270
um Tests für uns in einer späteren Demo zu erstellen.

04:24.300 --> 04:26.670
Ich werde zeigen, wie man Tests von Grund auf erstellt.

04:26.880 --> 04:30.180
Für den Moment füge ich einfach einen ein, den ich bereits vorbereitet habe.

04:31.010 --> 04:37.790
Der hier gezeigte Test wurde aus dem Mini-Max-Beispielprojekt für den Kurs eingefügt, um uns die Konzentration zu erleichtern.

04:37.790 --> 04:40.310
Ich habe alles außer dem Test, den wir uns ansehen wollen, entfernt.

04:40.310 --> 04:45.050
Schauen wir uns das Test Runner-Fenster an, beginnend mit dem Bearbeitungsmodus hier auf der Registerkarte Bearbeitungsmodus.

04:45.050 --> 04:49.520
Standardmäßig sind alle Tests im Projekt hier auf der Registerkarte Bearbeitungsmodus aufgelistet.

04:49.520 --> 04:55.700
Standardmäßig werden hier alle Tests angezeigt, die sich irgendwo im Ordner assets und packages befinden.

04:55.700 --> 04:59.690
Sie können nach Kategorien filtern, um nur einige der Tests zu sehen.

04:59.690 --> 05:04.760
Wir haben hier nicht viele Tests, aber nur zur Demonstration wähle ich die Kategorie für unsere Beispiele.

05:04.760 --> 05:08.600
Jetzt zeigt das Fenster eine Hierarchie aller Tests, geordnet nach Namespace.

05:08.600 --> 05:15.380
Wenn ich alle unteren Ebenen aufklappe, sehe ich die Testklasse und dann eine Testmethode darunter.

05:15.380 --> 05:18.500
Wir können alle Tests ausführen und sehen, dass sie bestehen.

05:18.500 --> 05:22.010
Wir können einen einzelnen Test auswählen und den ausgewählten ausführen.

05:22.010 --> 05:24.140
Ob der Test besteht oder nicht.

05:24.140 --> 05:27.470
Über ein Rechtsklick-Menü können wir den Quellcode einfach aufrufen.

05:30.070 --> 05:31.810
Hier ist der komplette Testcode.

05:32.230 --> 05:34.990
Dies ist derselbe, den wir bereits in der Präsentation gesehen haben.

05:34.990 --> 05:36.280
Lassen Sie uns die Highlights durchgehen.

05:36.280 --> 05:40.900
Wir haben ein optionales Kategorie-Attribut, das uns hilft, unsere Tests zu organisieren.

05:41.110 --> 05:43.000
Das Dropdown, das ich gezeigt habe.

05:43.240 --> 05:43.960
Filter.

05:43.960 --> 05:47.860
Basierend auf diesem Wert können Sie viele Testklassen haben, die in der gleichen Kategorie sind.

05:47.890 --> 05:50.830
Sie können viele Testklassen haben, die in der gleichen Kategorie sind.

05:50.830 --> 05:52.330
Dann haben wir das Attribut test.

05:52.330 --> 05:57.100
Es teilt dem Testframework mit, dass es sich bei dieser Methode um eine Testmethode handelt.

05:57.820 --> 06:00.590
Ohne diese Angabe wird die Methode nicht im Fenster des Testläufers angezeigt.

06:00.610 --> 06:05.770
Dann verwenden wir das bekannte, aber optionale Paradigma von arrange, act und assert.

06:05.800 --> 06:10.060
Dies ist nur eine Methode, die ich als Konvention benutze, um meine Testlogik zu organisieren.

06:10.060 --> 06:14.710
Wenn ich meine Tests benenne, wähle ich einen Namen, der sich nach dem Inhalt des Tests richtet.

06:14.740 --> 06:17.560
Was ist die Erwartung und was ist die Situation?

06:17.560 --> 06:23.890
Hier teste ich also die Additionsmethode, dass das Ergebnis 15 sein wird, wenn ich fünf und zehn als Operanden übergebe.

06:23.920 --> 06:25.780
Wechseln wir in den Spielmodus.

06:25.810 --> 06:30.970
Die Registerkarte "Spielmodus" sieht sehr ähnlich aus, und es sieht so aus, als ob sie genau denselben Test anzeigt, aber es ist

06:30.970 --> 06:31.280
nicht.

06:31.300 --> 06:32.230
Ich werde die Quelle öffnen.

06:32.230 --> 06:34.240
Hier ist der Quellcode für einen Test im Spielmodus.

06:34.240 --> 06:35.470
Was ist der Unterschied?

06:35.500 --> 06:40.240
Der Hauptunterschied liegt darin, wo er im Projektfenster zu finden ist.

06:40.270 --> 06:41.500
Das werde ich gleich zeigen.

06:41.500 --> 06:47.470
Ein optionaler Unterschied, den ich gewählt habe, ist, dass ich für meine Tests im Spielmodus die Klasse mit Spielmodus anhänge

06:47.500 --> 06:51.530
test, während ich im Editor-Modus einfach test anhänge.

06:51.550 --> 06:52.870
Das hilft mir beim Organisieren.

06:52.900 --> 06:56.560
Hier teste ich zu Demonstrationszwecken genau dasselbe Verhalten.

06:56.560 --> 06:58.870
Einmal im Bearbeitungsmodus und einmal im Wiedergabemodus.

06:58.870 --> 07:01.150
Das ist für Sie wahrscheinlich nicht notwendig.

07:01.180 --> 07:08.170
Testen Sie stattdessen standardmäßig im Bearbeitungsmodus und verwenden Sie die Tests im Wiedergabemodus nur, wenn Sie die Wiedergabe erfassen müssen

07:08.170 --> 07:13.480
Ereignisse im Spielmodus, wie z.B. Start Awake oder Spielobjektfunktionalität.

07:13.510 --> 07:14.860
Kollisionserkennung.

07:14.860 --> 07:16.840
Andere Dinge, die nur zur Laufzeit passieren.

07:16.840 --> 07:21.040
Wie im Kurs besprochen, verwende ich dieselbe Namenskonvention für Methoden, die wir zuvor gesehen haben.

07:21.040 --> 07:22.060
Notieren wir uns zwei.

07:22.150 --> 07:23.920
Beachten wir zwei wesentliche Unterschiede.

07:23.920 --> 07:29.230
Hier verwenden wir ein Unity-Test-Attribut und nicht ein Test-Attribut, wie wir es zuvor gesehen haben.

07:29.230 --> 07:34.300
Und zusätzlich zu arrange, act und assert gibt es ein optionales await-Paradigma.

07:34.300 --> 07:41.050
Dies wird hier nur benutzt, um die Tatsache zu demonstrieren, dass während Tests im Bearbeitungsmodus synchron ausgeführt werden, play

07:41.050 --> 07:44.590
Tests im Spielmodus asynchron ausgeführt werden können.

07:44.590 --> 07:49.750
Wenn Sie also Code haben, der asynchrone Tests erfordert, ist der Play-Modus eine gute Option.

07:49.750 --> 07:52.470
Werfen wir einen Blick auf das Projektfenster, um die Organisation zu sehen.

07:52.480 --> 07:57.940
Der Test für den Bearbeitungsmodus befindet sich in einem Editor-Ordner und der Test für den Wiedergabemodus in einem Laufzeitordner

07:57.940 --> 07:58.330
Ordner.

07:58.330 --> 08:03.490
Dieser Unterschied, zusammen mit den Unterschieden in den Assembly-Definitionsdateien.

08:03.520 --> 08:09.760
Anhand dieser Tests kann das System erkennen, dass es sich bei einem um einen Editor-Test und bei einem um einen Spielmodus-Test handelt.

08:09.790 --> 08:11.220
Ich führe den Test für den Spielmodus durch.

08:11.230 --> 08:13.300
Zum Schluss führe ich den Spielmodustest aus.

08:13.330 --> 08:16.870
Das Fenster des Testläufers verhält sich bis auf eine Ausnahme gleich.

08:16.900 --> 08:18.730
Weil es sich um Tests im Spielmodus handelt.

08:18.730 --> 08:25.570
Unity wird eine anonyme Szene erstellen, den Test isoliert ausführen und dann die Szene zerstören.

08:25.570 --> 08:29.620
Während dies alles ziemlich schnell geschieht, werden Sie es hier als ich bemerken.

08:29.620 --> 08:35.890
Und wenn ich auf run all drücke, anstatt alle Tests in einer Millisekunde laufen zu lassen, zum Beispiel, wie die Bearbeitung

08:35.890 --> 08:39.490
Modus hier tun kann, dauert es mehrere Millisekunden bis zur Ausführung.

08:39.490 --> 08:46.090
Hier haben wir die Möglichkeit, einen laufenden Test zu sehen, das Fenster des Testläufers zu sehen und die Grundlagen zu erkennen.

08:46.120 --> 08:48.970
Als nächstes wollen wir uns ansehen, wie wir unsere eigenen Tests erstellen.
