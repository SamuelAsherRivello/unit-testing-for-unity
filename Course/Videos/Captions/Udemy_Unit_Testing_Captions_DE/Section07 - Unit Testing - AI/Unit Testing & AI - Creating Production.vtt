WEBVTT

00:00.110 --> 00:06.330
Hallo und willkommen zu Artificial Intelligence for Production Code, der KI in Unity integriert.

00:06.350 --> 00:09.350
Spieleentwicklung kann die Entwicklung und das Testen rationalisieren.

00:09.350 --> 00:11.180
Einige der Vorteile sind hier aufgelistet.

00:11.180 --> 00:15.710
In diesem Video werden wir uns mit der Codegenerierung befassen.

00:15.740 --> 00:22.430
Wenn man in der Lage ist, den Code zu analysieren und Designvorschläge für neue Systemoptimierungen zu machen, wird der Code effizienter,

00:22.430 --> 00:25.430
bessere Leistung und spart Entwicklungszeit.

00:25.430 --> 00:27.550
Es gibt viele Werkzeuge, die Sie für diesen Schritt verwenden können.

00:27.560 --> 00:32.330
Die beiden, die ich hier vorstellen werde, sind ChatGPT und GitHub Copilot.

00:32.540 --> 00:40.520
Ich verwende ChatGPT im Allgemeinen, um größere Fragen zu stellen, um mehr Codebeispiele und Antworten zu erhalten, während

00:40.520 --> 00:47.450
ich GitHub Copilot benutze, wenn ich eine Zeile, eine Methode, etwas Kleineres im Kontext einer bestimmten

00:47.450 --> 00:48.470
Seite des Codes brauche.

00:48.860 --> 00:51.380
Ich entwickle meine eigene Praxis weiter.

00:51.380 --> 00:55.970
Ich werde ein wenig zeigen, wie beide funktionieren, und Sie können selbst entscheiden, welcher Arbeitsablauf am besten zu Ihnen passt.

00:55.970 --> 00:56.780
für Sie Sinn macht.

00:56.810 --> 00:59.360
Eines der Werkzeuge, die wir verwenden können, ist OpenAI.

00:59.390 --> 01:05.240
Wie ich bereits erwähnt habe, können Sie hier auf der Website auf die Schaltfläche "ChatGPT ausprobieren" klicken und wir öffnen die

01:05.240 --> 01:05.510
Chat.

01:05.510 --> 01:13.550
GPT Ich bin ein zahlender Benutzer, und das ist eine monatliche Abonnementgebühr, um ChatGPT plus, einige der Funktionen zu erhalten

01:13.550 --> 01:19.430
die Sie vielleicht sehen, werden in der kostenlosen Version nicht verwendet, aber Sie können natürlich auch mit der kostenlosen Version weiterarbeiten

01:19.430 --> 01:20.300
und es ausprobieren.

01:20.300 --> 01:23.330
Das andere Tool, das ich zeigen werde, ist GitHub Copilot.

01:23.330 --> 01:27.350
Dies wird normalerweise in Ihrem Code-Editor aktiviert.

01:27.350 --> 01:33.110
Ich verwende Writer, aber Sie können Visual Studio, Visual Studio Code oder andere Tools verwenden, und es weiß über

01:33.110 --> 01:36.740
die Seite des Codes, in der Sie sich befinden, und kann Ihnen bessere kontextbezogene Antworten geben.

01:36.740 --> 01:41.390
Ich würde vorschlagen, eine oder beide dieser Softwareprogramme auszuprobieren, um zu sehen, ob Ihnen der Ablauf gefällt.

01:41.420 --> 01:47.510
Ich denke, dass diese Tools mit der Zeit immer ausgereifter werden, und auch der Preis wird sinken

01:47.510 --> 01:50.870
oder es wird eine kostenlose Stufe für die meisten dieser Produkte eingeführt werden.

01:50.870 --> 01:51.620
Eventuell.

01:51.620 --> 01:58.160
Wenn ich ChatGPT im Browser öffne, erhalte ich dieses Bild, und ich kann mit dem Gespräch beginnen

01:58.160 --> 01:59.210
mit einer KI.

01:59.210 --> 02:03.680
Wenn ich ein ganz anderes Gespräch führen möchte, öffne ich einen anderen Chat.

02:03.710 --> 02:07.910
ChatGPT weiß nur über die Unterhaltung Bescheid, die man in einem bestimmten Chat führt.

02:07.910 --> 02:13.370
Wenn ich also hier ein paar Begriffe einführe und dann einen separaten Chat öffne, weiß es nichts von der

02:13.370 --> 02:14.660
Konzepte, über die ich gesprochen habe.

02:14.660 --> 02:18.410
Im Allgemeinen lasse ich also für jeden der Hauptbereiche einen Chat offen.

02:18.410 --> 02:22.310
Wir wollen mit einer Eingabeaufforderung beginnen, die etwa so lautet.

02:22.490 --> 02:28.340
Ich werde sagen, verhalte dich wie ein Unity-Spieleentwicklungsexperte und sag mir dies oder das.

02:28.760 --> 02:34.760
Also habe ich beschlossen, eine Klasse namens Product Manager zu erstellen, die es erlaubt, ein Produkt hinzuzufügen, ein Produkt zu entfernen

02:34.760 --> 02:36.020
und Produkte abrufen.

02:36.020 --> 02:39.290
Verwende eine Liste oder ein Wörterbuch, um die Liste der Produkte zu verwalten.

02:39.290 --> 02:44.750
Diese Liste fängt leer an, so dass du ihr nur diese Information geben kannst und sie weiß, dass es sich um

02:44.750 --> 02:46.670
ein Experte für Unity-Spieleentwicklung.

02:46.700 --> 02:50.240
Es wird daraus schließen, dass es dir C-sharp Informationen geben muss.

02:50.240 --> 02:51.950
Schauen wir uns also das Ergebnis an.

02:51.950 --> 02:53.120
Wir haben zwei vollständige Antworten erhalten.

02:53.120 --> 02:54.500
Schauen wir uns an, was wir hier haben.

02:54.800 --> 02:59.420
GPT sagt, dass man in Unity normalerweise C-sharp verwenden würde, um eine solche Klasse zu erstellen.

02:59.420 --> 02:59.810
Sehr gut.

02:59.810 --> 03:00.940
Es ist auf dem richtigen Weg.

03:00.950 --> 03:06.500
Hier ist ein Beispiel für die Implementierung eines Produktmanagers, der eine Liste zur Verwaltung der Produkte verwendet.

03:06.770 --> 03:10.010
Dies setzt voraus, dass Sie eine Produktklasse an anderer Stelle definiert haben.

03:10.010 --> 03:14.180
Es fügte hinzu, dass ich das nicht unbedingt wollte oder brauchte, aber ich liebe den Vorschlag.

03:14.180 --> 03:21.680
Zuerst wird also definiert, was ein Produkt ist, damit es das Wort Produkt und die allgemeine Softwareanwendung kennt

03:21.680 --> 03:22.970
Verwendungen eines Produkts.

03:22.970 --> 03:29.690
Es könnte einen Namen oder eine ID haben, und da es auf andere Eigenschaften hinweist, hat es den Konstruktor

03:29.690 --> 03:32.240
eingerichtet und wir könnten sogar noch weitere Dinge hinzufügen.

03:32.270 --> 03:35.930
Jetzt kann ich das in Unity kopieren und einfügen und wir können loslegen.

03:35.930 --> 03:37.970
Als Nächstes wollen wir sehen, welchen anderen Code es uns gibt.

03:37.970 --> 03:41.120
Hier ist der Produktmanager, der eine Liste der Produkte enthält.

03:41.150 --> 03:45.830
Er kennt den Unterschied zwischen privat und öffentlich und weiß, wie wir das wahrscheinlich verwalten wollen.

03:45.830 --> 03:53.030
Und im Allgemeinen gehe ich davon aus, dass wir an diesem Punkt, an dem wir ChatGPT für Code verwenden, etwa ein Jahr nach Einführung der Technologie

03:53.030 --> 03:55.910
dass der Code im Allgemeinen auf Anhieb kompiliert werden kann.

03:55.910 --> 03:57.830
Gelegentlich gibt es ein Problem damit.

03:57.830 --> 04:03.260
Insbesondere kann es etwas in Cis richtig machen, aber es weiß nichts über die Einheit oder so etwas wie

04:03.260 --> 04:03.650
das.

04:03.650 --> 04:08.420
Aber wenn du weißt, wonach du suchst, und es immer in Unity einfügst und es ausprobierst, wirst du

04:08.420 --> 04:13.160
ziemlich schnell ein Gefühl dafür bekommen, dass es ungefähr 9,599% richtig ist.

04:14.110 --> 04:17.210
Hier haben wir das Produkt hinzufügen, Produkt entfernen, usw.

04:17.230 --> 04:20.030
Schauen wir uns unser Unity-Setup an, und dann fügen wir das hier ein.

04:20.050 --> 04:25.420
Hier sind wir also in Unity und ich habe bereits einen schönen Ordner eingerichtet, in dem ich meine Arbeit machen kann.

04:25.420 --> 04:29.500
In den Workshops habe ich hier einen I-Ordner.

04:29.500 --> 04:33.070
Und darin habe ich schon ein paar ziemlich leere Klassen.

04:33.100 --> 04:37.120
Für unser KI-Beispiel, das KI-Beispielskript ist hier.

04:37.120 --> 04:38.950
Schauen wir uns den Quellcode dafür an.

04:38.980 --> 04:40.540
Hier ist das KI-Beispiel.

04:40.540 --> 04:45.250
Und wie der Kommentar schon sagt, ist es bereit für einen Produktmanager, der hier hineingeworfen wird.

04:45.250 --> 04:47.410
Aber es hat eine ziemlich leere Einrichtung.

04:48.580 --> 04:55.420
Dann habe ich hier den Test Runner, der die Kategorie AI anzeigt, und wir haben einige verschiedene AI-Tests

04:55.420 --> 04:55.870
hier.

04:55.900 --> 04:57.480
Einfach einen leeren Test einrichten.

04:57.490 --> 05:02.500
Wenn wir uns den Quellcode für den AI-Test ansehen, ist er ziemlich leer.

05:02.500 --> 05:03.550
Sieht so aus.

05:07.570 --> 05:11.170
Und wenn wir uns den Test für den Spielmodus I ansehen, ist er auch ziemlich leer.

05:11.500 --> 05:15.380
Und schließlich haben wir hier eine Produktmanager-Klasse, die bereit für den Code ist, der hereinkommt.

05:15.400 --> 05:21.130
Ich gebe hier ein etwas konstruiertes Beispiel, bei dem ich bereits weiß, dass ich einen Produktmanager will, aber

05:21.130 --> 05:24.520
Ich habe nicht viel anderes, von dem es abhängt oder mit dem es sprechen muss.

05:24.550 --> 05:27.010
Es wird also einfach für uns sein, es zu integrieren.

05:27.040 --> 05:31.690
Man könnte sich vorstellen, dass man ein bestehendes Spiel mit hunderten von Klassen hat und man möchte

05:31.690 --> 05:32.920
ein neues System hinzufügen.

05:32.920 --> 05:36.610
Es wird nicht alles über Ihr bestehendes Projekt wissen, also werden Sie es erklären müssen, um

05:36.610 --> 05:36.890
es.

05:36.910 --> 05:40.740
Es ist also zugegebenermaßen ein einfacheres Beispiel, wenn man bei Null anfängt.

05:40.750 --> 05:45.640
Aber eine Sache, die ich erwähnen möchte, ist, dass ich hier so etwas wie den Namensraum habe.

05:45.640 --> 05:52.090
Und wenn ich mit ChatGPT interagiere, werde ich wahrscheinlich von ChatGPT in Unity einfügen.

05:52.120 --> 05:53.260
Benutze es ein bisschen.

05:53.260 --> 05:58.510
Vielleicht ändere ich den Code hier, und dann kopiere ich ihn und füge ihn wieder in ChatGPT ein.

05:58.510 --> 06:04.180
ChatGPT weiß nichts von meinem Code hier, also muss ich den Chat immer in diesem separaten Bereich weiterlaufen lassen

06:04.180 --> 06:05.080
Unterhaltung.

06:05.080 --> 06:11.830
Eines der Dinge, die ich gelernt habe, ist, dass ich bestimmte Abschnitte nicht von Hand einfügen möchte aus

06:11.830 --> 06:14.860
ChatGPT in meinen Code einfügen und bestimmte Abschnitte wieder zurück.

06:14.860 --> 06:19.000
Also nur als Beispiel, ich habe diesen Namensraum bereits deklariert.

06:19.000 --> 06:19.630
Und hier.

06:19.630 --> 06:24.460
Ich gehe also zurück in ChatGPT und stelle fest, dass es keine Namespaces hat.

06:24.460 --> 06:27.370
Also werde ich sagen, gute Arbeit.

06:28.890 --> 06:34.170
Bitte integrieren Sie diesen Code in Ihr Beispiel.

06:35.240 --> 06:36.900
Und ich werde das einfach dort einfügen.

06:36.920 --> 06:38.600
Schauen wir mal, was es hier gemacht hat.

06:38.600 --> 06:44.390
Es sagte, dass die Produktmanager-Klasse in den angegebenen Namespace und die Struktur integriert werden soll.

06:44.390 --> 06:48.580
Ich kann also sehen, dass es dies und das hinzugefügt hat.

06:48.590 --> 06:55.340
Das ist nur ein kleiner Hack, den ich für nützlich halte, damit ich das nicht jedes Mal manuell neu hinzufügen muss

06:55.340 --> 06:56.660
wenn ich eine Frage stelle.

06:56.660 --> 06:59.210
Ich denke, im Laufe dieser Übung werden Sie sehen, warum.

06:59.240 --> 07:02.960
Ich werde also den Code komplett kopieren und in Unity einfügen.

07:03.080 --> 07:03.680
Da haben wir's.

07:03.680 --> 07:08.540
Es ist eingefügt und ich sehe keine Fehler bei der Kompilierung.

07:08.540 --> 07:09.080
Lass uns einchecken.

07:09.080 --> 07:09.620
Einigkeit.

07:09.650 --> 07:11.270
Unity hat neu kompiliert.

07:11.270 --> 07:12.440
Alles sieht gut aus.

07:12.440 --> 07:19.220
Nun, bevor wir irgendwelche Tests durchführen, lassen wir das I-Beispiel laufen und lassen es ein einfaches Beispiel ausführen

07:19.220 --> 07:20.840
für einige der Funktionen.

07:20.840 --> 07:28.040
Ich werde also das gesamte Skript kopieren und sagen, okay, wiederhole diesen Code nicht.

07:29.340 --> 07:33.930
Ich erstelle eine neue Seite mit Code für eine neue Klasse.

07:34.080 --> 07:37.770
Verwenden Sie dies als Inspiration.

07:37.920 --> 07:40.020
Aktualisiere das Erwachen.

07:40.640 --> 07:45.830
Mit einer einfachen Demo von Product Manager.

07:45.830 --> 07:47.070
Schauen wir uns die Antwort an.

07:47.090 --> 07:52.100
Sicherlich, um eine neue Klasse zu erstellen, die die Verwendung von Product Manager in der awake demonstriert.

07:52.130 --> 07:53.390
Hier ist das Beispiel.

07:53.420 --> 07:55.150
Werfen wir einen Blick auf den Quellcode.

07:55.160 --> 07:59.800
Wir können sehen, dass der Klassenname, der Kommentar und der Namespace beibehalten wurden, was mir gefällt.

07:59.810 --> 08:03.010
Der Teil hier, den ich verwenden wollte, wurde beibehalten.

08:03.020 --> 08:07.550
Ich habe dieses Attribut hier eingefügt, damit es bei den Tests nicht durcheinander kommt.

08:07.550 --> 08:09.980
Und dann führe ich das Erwachen hier aus.

08:10.070 --> 08:10.810
Sieht gut aus.

08:10.820 --> 08:14.820
Jetzt kopieren wir das einfach in unser Unity-Projekt und sehen, wie es funktioniert.

08:14.840 --> 08:16.480
Okay, ich habe es eingefügt.

08:16.490 --> 08:17.900
Ich sehe hier keine Fehler.

08:17.900 --> 08:18.440
Prüfen wir das mal nach.

08:18.440 --> 08:18.980
Einigkeit.

08:19.010 --> 08:19.460
Einigkeit.

08:19.460 --> 08:20.150
Neu kompiliert.

08:20.160 --> 08:21.650
Sieht aus, als ob alles gut funktioniert.

08:21.650 --> 08:23.750
Hier ist das Beispiel bereits in der Szene.

08:23.750 --> 08:24.830
Lasst uns weitermachen und loslegen.

08:24.860 --> 08:29.090
Meine Konsole zeigt die Produkt-ID eins, zwei und drei.

08:29.120 --> 08:30.680
Werfen wir einen Blick auf den Quellcode.

08:30.680 --> 08:32.860
Schauen wir uns also an, was wir hier tun.

08:32.870 --> 08:36.190
Wir haben einen Produktmanager, der instanziiert wird.

08:36.200 --> 08:37.700
Wir fügen drei Produkte hinzu.

08:37.700 --> 08:39.320
Wir rufen die Funktion get products auf.

08:39.320 --> 08:40.730
Und dann spucken wir sie aus.

08:40.760 --> 08:46.910
Dies ist ein einfaches Beispiel, das etwas in einem ziemlich leeren Projekt tut.

08:46.910 --> 08:52.520
Wir sind uns also einig, dass es wahrscheinlich einfacher zu integrieren ist als etwas viel später in einem größeren, komplexeren Projekt

08:52.520 --> 08:53.090
Produkt.

08:53.090 --> 08:55.190
Aber sehen Sie, wie erstaunlich das ist.

08:55.220 --> 08:59.450
Es konnte mir den Produktmanager und ein Demo-Beispiel dazu liefern.

08:59.450 --> 09:06.320
Das war's für diese Demonstration, die zeigt, wie künstliche Intelligenz, insbesondere ChatGPT,

09:06.320 --> 09:12.140
In einem zukünftigen Video werden wir uns ansehen, wie künstliche Intelligenz helfen kann, neue Produktionscodes hinzuzufügen.

09:12.140 --> 09:15.140
uns helfen kann, Unit-Tests auf diesem Produktionscode zu erstellen.

09:15.710 --> 09:16.490
Vielen Dank!
