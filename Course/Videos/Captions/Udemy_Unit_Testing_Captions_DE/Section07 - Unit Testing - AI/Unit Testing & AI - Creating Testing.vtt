WEBVTT

00:00.410 --> 00:03.080
Hallo und willkommen bei Artificial Intelligence.

00:03.080 --> 00:07.700
Hier verwenden wir künstliche Intelligenz, um uns bei der Erstellung von Unit-Testing-Code zu helfen.

00:07.700 --> 00:12.530
Der Einsatz von künstlicher Intelligenz in der Spieleentwicklung kann die Entwicklung und das Testen rationalisieren.

00:12.530 --> 00:17.480
Einige der Vorteile sind hier aufgeführt, und wir werden uns auf automatisierte Tests konzentrieren.

00:17.780 --> 00:23.060
KI kann Ihre Fehler schnell identifizieren und beheben und die Zeit für die Testerstellung reduzieren.

00:23.060 --> 00:28.580
Der traditionelle Ansatz ohne KI wäre, den Produktionscode zu erstellen.

00:28.580 --> 00:34.040
Und dann, wenn man Unit-Tests einführt, diese Tests manuell zu erstellen, während man arbeitet.

00:34.070 --> 00:40.430
Wir haben im vorigen Video gesehen, wie KI uns helfen kann, unseren Produktionscode für einige oder alle Teile einer

00:40.430 --> 00:41.060
Spielsystems.

00:41.060 --> 00:47.000
Schauen wir uns nun an, wie KI uns helfen kann, den Prozess der Erstellung unserer Unit-Tests zu automatisieren.

00:47.000 --> 00:52.160
Wir haben einen bestehenden GPT-Chat geöffnet, der zeigt, wie wir den Produktionscode erstellt haben.

00:52.160 --> 00:58.070
Jetzt ist es sehr wichtig, dass ich in genau diesem Chat weitermache, wenn ich die nächsten Fragen stelle

00:58.070 --> 00:59.450
über Unit-Tests.

01:00.370 --> 01:06.670
Wenn ich hier zum Beispiel einen ganz neuen Chat erstellen wollte, müsste ich den Kontext wieder einführen,

01:06.670 --> 01:12.190
vielleicht sagen, hey, kannst du mir Unit-Tests für diese Klasse erstellen und dann die Klasse einfügen oder

01:12.190 --> 01:13.440
Klassen einfügen, die verwandt sind?

01:13.450 --> 01:16.030
Aber da wir hier schon einen Kontext haben, werde ich das hier verwenden.

01:16.030 --> 01:23.680
Im vorherigen Abschnitt habe ich ein Beispiel für die Verwendung einer Produktmanager-Klasse erstellt, indem ich

01:23.680 --> 01:24.820
einige Produkte hinzuzufügen.

01:24.820 --> 01:31.390
Du könntest dir vorstellen, dass dies ein Produkt ist, das in einem Spielladen verkauft wird, oder ein NPC-Charakter, der einen Laden hat

01:31.390 --> 01:35.590
der dir vielleicht Gegenstände gibt oder sie in dein Inventar legt, so etwas in der Art.

01:35.590 --> 01:40.870
Und darüber, im selben Chat, haben wir den Ich erstelle uns den Produktmanager selbst.

01:40.870 --> 01:44.490
Der Produktmanager hat also ein I erstellt und das Beispiel darüber.

01:44.500 --> 01:46.680
Bitten wir ihn nun, uns einige Tests zu geben.

01:46.690 --> 01:51.880
Ich werde einen Test für den Bearbeitungsmodus einfügen, den ich bereits habe, damit er den Namensraum kennt

01:51.880 --> 01:56.200
und die von mir gewünschte Benennung, und dann bitte ich es, diesen mit relevanten Tests zu füllen.

01:56.200 --> 01:57.700
Schauen wir mal, wie es hier läuft.

01:57.700 --> 02:02.080
Innerhalb von unity habe ich einen I-Test und einen Playmode-Test.

02:02.110 --> 02:04.660
Lass uns einfach den Editiermodus-Test hier machen.

02:04.660 --> 02:05.740
Hier ist es also.

02:05.740 --> 02:09.610
Hier können wir sehen, dass es einen Test namens "Mein Test" gibt.

02:09.640 --> 02:11.620
Wir öffnen den Quellcode und sehen ihn hier.

02:11.620 --> 02:13.480
Er hat den Namespace, den ich mag.

02:13.480 --> 02:16.090
Es hat Verwendungen, ich nehme an, die Kategorie.

02:16.090 --> 02:21.640
Anstatt ChatGPT zu bitten, uns etwas von Grund auf neu zu erstellen, gebe ich ihm dies

02:21.640 --> 02:22.180
hier.

02:24.160 --> 02:26.620
Ich denke, ich werde die Namensgebung hier loswerden.

02:27.370 --> 02:29.290
Damit ich diesen Teil nicht vorschlage.

02:29.320 --> 02:32.710
Hier in ChatGPT werde ich sagen, großartig.

02:32.740 --> 02:40.150
Jetzt möchte ich Unit-Tests über der Produktmanager-Klasse durchführen.

02:40.600 --> 02:49.540
Erstellen Sie eine neue Antwort mit einer Testklasse mit einer oder mehreren Testmethoden.

02:52.090 --> 02:54.490
Beginnen Sie mit diesem Code.

02:55.490 --> 02:57.050
Werfen wir einen Blick auf die Antwort.

02:57.050 --> 03:02.630
Um Unit-Tests für die Klasse Product Manager zu erstellen, können Sie ein beliebiges Unit-Test-Framework verwenden

03:02.630 --> 03:02.780
für.

03:02.990 --> 03:03.500
Netz.

03:03.530 --> 03:05.930
Nachfolgend ein Beispiel für die Testklasse.

03:07.070 --> 03:13.730
Wir können sehen, dass der Namespace, die Kommentare und der Name der Kategorie test verwendet werden, alles Dinge, die ich angegeben habe

03:13.730 --> 03:14.060
es.

03:14.090 --> 03:16.850
Dann macht es den Rest von alleine.

03:16.880 --> 03:19.880
Eine Sache, die mir auffällt, ist, dass es eine erstellt.

03:20.900 --> 03:26.270
Es wird hier eine Variable erstellt, die im Setup aufgefüllt und vielleicht später wieder abgebaut wird.

03:26.270 --> 03:27.800
Eigentlich wird sie nicht abgebaut.

03:28.100 --> 03:33.470
Hier wird in jedem der Tests das Arrange, Act und Assert verwendet, was geschieht

03:33.470 --> 03:35.090
meiner besonderen Vorliebe entspricht.

03:35.090 --> 03:41.390
Ich finde es gut, dass es nur eine allgemeine Lösung ist, die auf der Popularität basiert, wenn irgendwie

03:41.390 --> 03:45.140
Wenn ich eine andere Lösung haben wollte, konnte ich sie anweisen.

03:45.140 --> 03:46.550
Aber das gefällt mir bis jetzt.

03:46.550 --> 03:52.970
Es richtet also das Testprodukt ein, fügt das Produkt hinzu und sorgt dann dafür, dass das Produkt zurückkommt

03:52.970 --> 03:54.410
dieses bestimmte Produkt.

03:54.410 --> 03:55.760
Das sieht also gut aus.

03:55.760 --> 03:57.740
Dann testet es, wie man ein Produkt entfernt.

03:57.740 --> 04:01.100
Es wird also ein Produkt erstellt und hinzugefügt.

04:01.100 --> 04:06.170
Dann entfernen Sie es und stellen sicher, dass es tatsächlich funktioniert.

04:06.170 --> 04:11.540
Und dass es das Produkt nicht so drin hat.

04:11.570 --> 04:13.790
Produkte holen, gibt alle Produkte zurück.

04:13.790 --> 04:16.130
Es macht also zwei und weiß zwei.

04:16.130 --> 04:21.230
Das wäre ein guter Schritt für mich, um das in Unity einzufügen und sicherzustellen, dass es funktioniert.

04:21.230 --> 04:22.280
Ich werde das tun.

04:22.280 --> 04:27.800
Und dann werde ich zurückkommen und überlegen, ob es einen weiteren Test gibt, den man hinzufügen könnte, oder ob man etwas umgestalten kann

04:27.800 --> 04:30.500
am Code, die wir machen könnten, um ein bisschen mehr damit zu spielen?

04:30.500 --> 04:31.820
Aber ich mag, wohin das führt.

04:31.820 --> 04:33.200
Fügen wir das also in Unity ein.

04:33.230 --> 04:37.820
Speichere es in Unity und es sieht so aus, als ob es kompiliert wird und in Unity sieht es so aus, als ob es läuft.

04:37.820 --> 04:38.990
Lasst uns den Test ausführen.

04:40.910 --> 04:42.200
Alle Tests sind erfolgreich.

04:42.230 --> 04:43.010
Jetzt.

04:43.730 --> 04:45.590
Die Namen der Tests, die er uns gegeben hat.

04:45.590 --> 04:45.890
Sehr gut.

04:45.890 --> 04:51.110
Es passt nicht zu meinem Stil und ich kann an dieser Stelle entscheiden, ob ich das, was mir

04:51.110 --> 04:52.730
oder einen Unterschied vorschlagen.

04:52.730 --> 04:58.040
Um mit der Idee zu spielen, schlage ich vor, ein etwas anderes Benennungsschema zu verwenden.

04:58.040 --> 05:01.610
Aber ich liebe den Test, den ich bekommen habe, und ich liebe es, dass sie alle bestehen.

05:01.610 --> 05:03.530
Bis jetzt läuft es also wirklich gut.

05:03.530 --> 05:08.390
Gehen wir zurück und spielen einfach mit der Idee, einen kleinen Vorschlag zu machen und sehen, wie es weitergeht

05:08.390 --> 05:08.780
Zeit.

05:08.780 --> 05:11.900
Sagen wir ihm also, was gut funktioniert.

05:11.900 --> 05:16.960
Das funktioniert und kompiliert und alle Tests bestehen.

05:16.970 --> 05:25.790
Allerdings gefällt mir die Benennung der Testmethoden nicht, also bitte das Format von add product ändern.

05:25.790 --> 05:28.880
Produkte zur Liste hinzufügen in ein neues Format wie Produkt hinzufügen.

05:28.910 --> 05:32.510
Produkte erhalten enthält Produkt, wenn Produkt hinzugefügt.

05:33.080 --> 05:38.930
Im Allgemeinen möchte ich so etwas wie die zu testende Methode das erwartete Ergebnis, und dann, wenn

05:38.930 --> 05:43.970
diese bestimmte Sache passiert, wird die Benennung manchmal etwas lang, wie hier gezeigt.

05:43.970 --> 05:45.650
Manchmal ist es nicht ganz so klar.

05:45.650 --> 05:47.240
Es kommt wirklich auf den Kontext an.

05:47.240 --> 05:52.100
Aber was ich hier zeige, ist, dass ich das meiste von dem, was ChatGPT mir gegeben hat, mag.

05:52.100 --> 05:53.990
Aber ich möchte eine Änderung vorschlagen.

05:53.990 --> 05:57.200
Spielen wir also mit dieser Änderung und sehen, welches Ergebnis wir erhalten.

05:57.230 --> 05:58.520
Werfen wir einen Blick auf das Ergebnis.

05:58.520 --> 06:01.040
Es sagt, dass die Umbenennung gut aussieht.

06:01.070 --> 06:06.110
Es wird erwähnt, dass es Methode, Name, Bedingung und erwartetes Ergebnis ableitet.

06:06.230 --> 06:09.530
Ich denke, erst das erwartete Ergebnis, dann die Bedingung.

06:09.530 --> 06:11.660
Aber schauen wir uns die Ergebnisse hier an.

06:11.660 --> 06:14.270
Ich gebe zu, dass dies wieder ziemlich lang ist.

06:14.270 --> 06:18.170
Aber add product get products enthält das Produkt.

06:18.170 --> 06:20.480
Wenn das Produkt hinzugefügt wird, toll.

06:20.510 --> 06:21.710
Hier ist ein noch längeres Beispiel.

06:21.710 --> 06:23.240
Das Produkt nicht erhalten.

06:23.270 --> 06:28.100
Nun könnte man argumentieren, dass dies nicht das beste Benennungsschema ist, da ich diesen langen Namen hier sehe,

06:28.100 --> 06:32.690
Ich denke, hey, vielleicht ist es kein gutes Schema, aber wir haben gesehen, dass wir in der Lage sind, zurück zu kommen

06:32.690 --> 06:37.790
und hin und her und geben ein paar Vorschläge und sehen, dass ChatGPT gut funktioniert.

06:37.790 --> 06:41.300
Also kopieren wir das in die Unity und sehen, wie es funktioniert.

06:41.300 --> 06:42.110
Hier sind wir also.

06:42.110 --> 06:42.800
Es ist in Unity.

06:42.800 --> 06:43.520
Es ist kompiliert.

06:43.520 --> 06:44.810
Und lass die Tests laufen.

06:47.350 --> 06:48.850
Und alles sieht gut aus.

06:48.850 --> 06:54.490
Wir haben also einen fantastischen Anwendungsfall von künstlicher Intelligenz gesehen, nicht nur um den Produktionscode so

06:54.490 --> 06:59.200
wie wir es in der vorherigen Lektion getan haben, sondern auch um neue Unit-Tests auf diesem Produktionscode zu erstellen.

06:59.200 --> 07:05.440
Hier, zumindest in unserer einfachen Demo, haben wir gesehen, dass Unity den Code jedes Mal ohne Probleme kompiliert hat,

07:05.440 --> 07:07.350
und alle unsere Tests haben bestanden.

07:07.360 --> 07:11.110
Wenn du feststellst, dass der Code nicht kompiliert werden kann, kannst du das ChatGPT mitteilen.

07:11.410 --> 07:16.720
Hey, das war ziemlich gut, aber ich habe diesen Fehler und du würdest helfen, es zu erziehen und dir

07:16.720 --> 07:17.590
eine bessere Antwort geben.

07:17.590 --> 07:19.000
Das brauchten wir hier nicht zu tun.

07:19.000 --> 07:24.460
Auch wenn einige oder alle Tests fehlgeschlagen sind, könnten Sie der Einheit sagen, dass ich im Allgemeinen nicht sehe, dass die

07:24.460 --> 07:26.350
Tests fehlschlagen, aber es ist möglich.

07:26.350 --> 07:27.490
Das war's also hier.

07:27.490 --> 07:31.000
Wir haben einen fantastischen Anwendungsfall für KI in Unit-Tests gesehen.

07:31.030 --> 07:31.750
Vielen Dank!
