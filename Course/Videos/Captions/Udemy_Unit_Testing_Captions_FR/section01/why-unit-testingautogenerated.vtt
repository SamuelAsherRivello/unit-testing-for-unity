WEBVTT

00:02.840 --> 00:04.730
So why do unit testing?

00:04.880 --> 00:06.200
I like to start with this quote.

00:06.200 --> 00:07.050
I'll read it here.

00:07.070 --> 00:14.150
Every decision we make, be it technology, process, or people, can be viewed as a form of investment.

00:14.510 --> 00:19.040
These investments come with a cost and we trust that they'll pay off.

00:19.250 --> 00:24.950
So if you're already familiar with game development and you're able to get some of the functionality

00:24.950 --> 00:29.480
you have in your mind into the projects and share them with the players who are playing your game,

00:29.480 --> 00:32.520
it may not be quite clear what the value of unit testing is.

00:32.540 --> 00:38.060
Unit testing should be first and foremost thought of as an optional activity that you can add on top

00:38.060 --> 00:39.640
of to your production code.

00:39.650 --> 00:47.210
In one way, your end users never see that functionality, but the idea and the benefits that come from

00:47.210 --> 00:53.960
unit testing, particularly test driven development, we hope will give us a payoff for that investment.

00:53.990 --> 01:01.010
We will have classes and systems that operate more dependably, that are more robust, but that are

01:01.010 --> 01:08.330
less error prone and will allow you to add more features for your users at a more rapid and confident

01:08.330 --> 01:11.670
pace, with unit testing as one of your skills.

01:11.690 --> 01:15.190
Now, in this world of unit testing, there's so many different terms.

01:15.200 --> 01:18.320
Some of the ones that we see on here, I'll just read a couple of them.

01:18.320 --> 01:23.660
Composition and abstraction, referring to the way that your classes and your architectures can fit

01:23.660 --> 01:24.470
together.

01:24.710 --> 01:29.120
Classes and methods just being object oriented programming fundamentals.

01:29.120 --> 01:34.630
Then things like mock and assertion and range act and assert as well.

01:34.640 --> 01:37.850
These are things that are refer specifically to unit testing.

01:37.850 --> 01:42.500
We're going to be covering kind of in an informal way, all of the terms that we see here.

01:42.500 --> 01:44.810
We'll probably be covering them now in the latter.

01:44.810 --> 01:46.040
Professional development.

01:46.040 --> 01:52.010
When you start out as a game developer inside unity, learning the unity tool, learning the theory

01:52.010 --> 01:56.840
behind unity and of course the C-sharp coding, you notice that you're graduating.

01:56.840 --> 02:01.700
The concepts are getting more and more complex as you go through these different topics.

02:01.730 --> 02:06.050
Things like classes in OOP, which are things you learn early in development.

02:06.050 --> 02:13.340
Later in your career, you'll focus more on getting your projects to be more modular, reusable, adding

02:13.370 --> 02:18.800
testing, which is the core here, and then talking largely about the architecture of your projects.

02:18.830 --> 02:25.460
A sign of a well architected project is one that when you're adding that 101st feature, it doesn't

02:25.460 --> 02:26.900
break everything else you've got.

02:26.930 --> 02:33.050
Now, here we see one possible path of a junior developer moving through a career.

02:33.050 --> 02:38.600
And it's particularly interesting that the skills that we're talking about here are really what moves

02:38.600 --> 02:42.890
you from a beginning developer to a junior to a senior.

02:42.890 --> 02:49.070
It's really these types of practical knowledge that you're adding to your skill set that will help you

02:49.070 --> 02:55.040
get a promotion within your current role, or find new roles and opportunities to contribute in other

02:55.040 --> 02:55.790
teams.

02:55.820 --> 03:02.030
Now, not every team uses unit testing in the programming world, and I think particularly in game development,

03:02.030 --> 03:07.670
you don't find it as often as you do with some other programming platforms and paradigms, but it is

03:07.670 --> 03:08.870
just as important here.

03:08.870 --> 03:11.150
Let's look at why unit testing is important.

03:11.150 --> 03:12.460
I'll read along here.

03:12.470 --> 03:19.100
As your project grows with more scripts, classes, and methods, it becomes difficult for you to ensure

03:19.100 --> 03:23.810
that a change in one part of your code doesn't break something somewhere else.

03:23.900 --> 03:28.850
Automated testing helps you check that your code is functioning as expected.

03:29.150 --> 03:35.870
Testing saves time by finding where and when problems occur as soon as they're introduced in development,

03:35.870 --> 03:42.290
rather than relying on manual testing, or even the more expensive waiting for your end users, your

03:42.290 --> 03:47.030
game players to report a bug, let's talk a little bit about the value of finding your errors early.

03:47.030 --> 03:54.410
Now, many of us as developers think that the game development process is all about adding new features

03:54.410 --> 03:59.540
and feeling like the faster you add them, the more value you offer to your end users.

03:59.570 --> 04:05.300
Now, while that is a fun way to start a project, we all know the results that come from adding features

04:05.300 --> 04:13.160
too fast early in development, especially on top of a code base that is not well designed, well architected

04:13.160 --> 04:14.210
or well tested.

04:14.210 --> 04:21.620
What research in the game development industry shows is something of the 80 over 20 rule that 80% of

04:21.620 --> 04:25.250
development bugs come from just 20% of your features.

04:25.250 --> 04:29.780
Core complexity often sits in a narrow corner of the codebase.

04:29.780 --> 04:36.080
Project, organization, or a lack thereof can cause tremendous reoccurring issues.

04:36.110 --> 04:42.050
You end up fighting those same old fires again and again, because you don't have the design and the

04:42.050 --> 04:46.070
testing to prove that that area is confidently developed.

04:47.120 --> 04:49.770
80% of the dev time is coding maintenance.

04:49.790 --> 04:55.190
Now that is a scary thing to hear, but this is what we see on large code base.

04:55.220 --> 05:01.100
Imagine shipping a game in six months and supporting it for 1 or 2 years more while you're doing bug

05:01.100 --> 05:03.210
fixes and adding new features.

05:03.230 --> 05:05.800
That's an example of a very simple game.

05:05.810 --> 05:12.020
Even in that process, we find that 80% of the time that you spend in a developer is not adding those

05:12.020 --> 05:12.890
new features.

05:12.890 --> 05:20.030
It's narrowing down and finding bugs in old systems and doing refactors as the first six months.

05:20.060 --> 05:24.050
Architecture may not fit the second six months of architecture.

05:24.080 --> 05:29.300
Your project is going to grow and your team is going to learn, so you're going to be making changes

05:29.300 --> 05:30.150
along the way.

05:30.170 --> 05:31.430
No problems there.

05:31.460 --> 05:33.950
These changes are often called refactoring.

05:33.950 --> 05:39.860
Refactoring is making your code more efficient and offering the same value to your end consumers.

05:39.890 --> 05:45.530
Every refactor allows you to have a new starting point to add even new features on top.

05:45.530 --> 05:52.460
So what we see here is that by establishing good practices of doing testing, that's going to help that

05:52.460 --> 05:56.450
code maintenance, it's going to help that 80% where we do spend a lot of our time.

05:56.450 --> 06:02.480
And as I alluded to earlier, let's take a look here that the cost of software bugs increases over time.

06:02.480 --> 06:08.420
Now, this particular slice of research shows that if you're having conversation with a colleague about

06:08.420 --> 06:13.250
a game feature, and one of you points out something that may be a problem, they're fixing it in,

06:13.280 --> 06:15.420
that conversation is super cheap.

06:15.440 --> 06:22.340
Let's call that the one x amount of time and effort very low as you go through and you implement that

06:22.340 --> 06:28.430
project, finding that same bug after you've coded, it is more difficult to find and more difficult

06:28.430 --> 06:30.860
to fix and make sure you fix it.

06:30.860 --> 06:36.860
Well, then once you do your testing, you pass this on to your customers to test and then you ship

06:36.860 --> 06:38.400
it to your end game players.

06:38.420 --> 06:41.000
Imagine a game player finding that same issue.

06:41.030 --> 06:44.330
They're going to have to be disappointed about it.

06:44.330 --> 06:47.510
Perhaps that affects negatively how they think of the game.

06:47.510 --> 06:50.060
They may you may even lose them as a game player.

06:50.060 --> 06:55.400
But if they're a vocal person and you have a good channel for customer support and they send that in,

06:55.430 --> 07:00.950
it goes into your bug ticketing system, eventually gets assigned, eventually gets fixed, maybe it

07:00.950 --> 07:06.950
is or isn't fixed properly, and then you ship that update out to end users, hoping that that user's

07:06.980 --> 07:08.270
needs have been addressed.

07:08.300 --> 07:09.590
It's much more expensive.

07:09.590 --> 07:10.210
At the end.

07:10.220 --> 07:15.480
We'll see that unit testing allows for us to, first of all, design our software better.

07:15.500 --> 07:22.550
Second of all, put tests into your project so that these automated tests will find that bug earlier.

07:22.550 --> 07:28.130
Perhaps in the integration stage, as we're seeing here, it's not as good as fixing it in that first

07:28.130 --> 07:32.240
conversation, but it's a much better than waiting for the project to be released.

07:32.480 --> 07:38.090
So some of the best practices that are highlighted here are creating maintainable code, increasing

07:38.090 --> 07:44.150
the automation and testing you have in your code, catching your bugs early and often, and fixing those

07:44.150 --> 07:46.490
bugs before you add new features.
