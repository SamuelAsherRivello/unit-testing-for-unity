WEBVTT

00:03.320 --> 00:08.780
Récapitulons quelques-uns des avantages que nous avons vus jusqu'à présent dans cette partie théorique sur les tests unitaires.

00:08.780 --> 00:11.940
Les avantages sont donc d'ajouter de la confiance à votre code.

00:11.960 --> 00:12.830
Qu'est-ce que cela signifie ?

00:12.830 --> 00:19.070
Cela signifie que lorsque votre équipe réfléchit à cette base de code, elle a davantage l'impression que cette 101e

00:19.070 --> 00:21.080
ne cassera pas les choses.

00:21.110 --> 00:26.060
Lorsqu'il y a un manque de confiance, on est un peu timide pour ajouter des fonctionnalités, en particulier dans certains domaines.

00:26.060 --> 00:32.300
de la base de code où l'on sait que les choses sont maintenues ensemble de manière assez lâche et qu'une nouvelle ligne de code pourrait

00:32.330 --> 00:33.320
casser quelque chose.

00:33.320 --> 00:36.080
Cela permet également des remaniements plus audacieux.

00:36.080 --> 00:41.270
Maintenant, par exemple, si vous allez remanier un système particulier dans votre jeu et que vous avez

00:41.270 --> 00:46.040
pas de test, le processus consisterait à jouer le jeu et à demander à votre équipe de le jouer.

00:46.070 --> 00:49.880
Faites tout le travail de refactorisation, puis jouez à nouveau votre jeu.

00:49.910 --> 00:53.690
Le problème de ce test manuel est qu'il prend plus de temps.

00:53.690 --> 00:59.960
Il est plus difficile de s'assurer que les tests avant et après le remaniement sont identiques, et les tests

00:59.960 --> 01:02.450
les mêmes domaines.

01:02.990 --> 01:10.340
Ainsi, en disposant de tests unitaires couvrant ces systèmes avant le remaniement, vous êtes en mesure d'exécuter les tests,

01:10.370 --> 01:14.960
voir que tout passe, que l'automatisation que vous avez mise en place fonctionne bien.

01:14.960 --> 01:18.350
Ensuite, exécutez exactement les mêmes tests après le remaniement.

01:18.380 --> 01:21.650
Il se peut que vous découvriez en cours de route que certains tests échouent.

01:21.650 --> 01:23.390
Vous êtes en mesure d'apporter quelques modifications.

01:23.390 --> 01:24.380
Le test est réussi.

01:24.380 --> 01:30.860
Vous pouvez même ajouter de nouveaux tests parce que le refactor en a besoin, et votre code se trouve alors dans une situation encore plus favorable.

01:30.860 --> 01:34.130
meilleure place avec plus de confiance dans le code après ce remaniement.

01:34.310 --> 01:36.170
Cela permet également de gagner du temps.

01:36.170 --> 01:41.480
Au début des tests unitaires, vous aurez l'impression qu'il s'agit d'un supplément, peut-être même d'un...

01:41.480 --> 01:45.950
Cela semble un peu inutile dans certains systèmes, mais nous allons nous étendre sur ce point.

01:45.950 --> 01:51.650
Nous allons travailler sur ce point et voir comment et quand vous voulez ajouter vos tests unitaires.

01:51.680 --> 01:56.810
Chaque développeur trouvera son propre style et, en tant qu'équipe, vous voudrez vous réunir et établir des règles de base pour les tests unitaires.

01:56.810 --> 01:59.000
bonnes pratiques que vous pourrez tous suivre.

01:59.980 --> 02:04.720
Les résultats ici, vous aurez plus de confiance et de robustesse dans votre base de code, comme je l'ai mentionné,

02:04.720 --> 02:10.450
et l'effet sur votre base de code n'est pas simplement qu'il s'agit du même vieux code avec des tests.

02:10.480 --> 02:15.040
C'est que la nature même des tests influencera la façon dont vous concevez votre code.

02:15.070 --> 02:22.360
Pour créer un code testable, les choses doivent fonctionner en unités ou en classes plus petites avec moins de code,

02:22.360 --> 02:27.550
et cela nous encourage à avoir un objectif unique pour chaque classe et chaque méthode, ce qui est une bonne pratique de conception.

02:27.550 --> 02:30.010
Nous verrons cela dans la section sur la conception des logiciels.

02:30.010 --> 02:34.630
Cela encourage également des solutions plus simples, en particulier lorsque nous parlons de développement piloté par les tests.

02:34.660 --> 02:41.290
Le fait d'avoir des tests automatisés, c'est-à-dire des tests unitaires qui font partie de votre base de code et qui sont automatiquement

02:41.290 --> 02:47.760
automatiquement appelés et réessayés périodiquement, c'est ce qui va vraiment vous donner le meilleur avantage ici.

02:47.770 --> 02:54.100
Maintenant, certaines équipes vont utiliser les tests unitaires dans unity, ce qui va être l'objet de notre discussion.

02:54.100 --> 02:54.550
ici.

02:54.550 --> 03:02.230
Vous pouvez également utiliser cette compétence et faire en sorte que votre repo git ou tout autre système de contrôle de version exécute automatiquement

03:02.230 --> 03:09.280
ces tests à des moments clés, par exemple tous les jours ou toutes les nuits, ou à chaque fois que votre équipe s'engage dans un certain projet.

03:09.280 --> 03:11.260
branche, il exécutera à nouveau le test.

03:11.260 --> 03:17.110
Il existe donc des moyens élégants d'augmenter la fréquence à laquelle ce test est appelé, et alors seulement

03:17.110 --> 03:20.020
fusionner votre code que si tous les tests sont réussis.
