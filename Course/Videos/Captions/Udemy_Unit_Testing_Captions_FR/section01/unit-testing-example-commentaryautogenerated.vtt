WEBVTT

00:02.920 --> 00:07.120
Prenons un peu de recul et examinons rapidement un exemple fondamental.

00:07.120 --> 00:09.100
Il ne s'agit donc pas d'un test unitaire.

00:09.100 --> 00:16.270
Et ceci représente une classe d'unité, quelque chose que je considérerais comme du code de production, c'est-à-dire pas du code de test.

00:16.270 --> 00:19.990
Il s'agit ici d'un jeu de mathématiques.

00:19.990 --> 00:23.890
C'est une classe très simple de mon système mathématique qui fait deux choses.

00:23.890 --> 00:26.140
Elle peut additionner et soustraire.

00:26.140 --> 00:27.820
Nous avons donc la méthode add.

00:27.820 --> 00:31.300
Remarquez que je passe un entier a et b.

00:31.300 --> 00:33.970
Je les additionne et je renvoie cette valeur.

00:33.970 --> 00:40.540
Maintenant, si cela était utilisé dans votre jeu et que vous vouliez être sûr que cela fonctionne fidèlement, vous n'auriez qu'à

00:40.540 --> 00:48.640
jouer votre jeu et vous espéreriez qu'une opération d'ajout réussie vous donne à l'écran,

00:48.640 --> 00:50.500
des résultats faciles à juger.

00:50.500 --> 00:52.210
Mais ce n'est pas toujours le cas.

00:52.210 --> 00:59.470
Peut-être que cela ajoute A et B et C par accident, et vous ne remarquez peut-être pas que votre système de notation

00:59.470 --> 01:05.470
passe de 1 à 2 puis à 4 en faisant de mauvais calculs, et que vous ne vous en rendez pas compte.

01:05.500 --> 01:11.920
L'avantage d'ajouter un test d'unité est que vous pouvez tester plus de situations que vous n'en rencontrerez jamais.

01:11.920 --> 01:15.370
en tant que joueur, et de le faire de manière plus systématique.

01:15.370 --> 01:18.400
Jetons un coup d'œil rapide à notre tout premier test unitaire.

01:18.400 --> 01:21.850
Il s'agit d'un test unitaire sur ce système.

01:22.870 --> 01:25.540
Il s'agit donc d'une classe distincte.

01:25.540 --> 01:31.060
Et en plaçant la base de code ici, nous voyons un certain endroit dans votre projet.

01:31.060 --> 01:36.600
Et en marquant la méthode comme la flèche le montre avec test, unity la traitera un peu différemment.

01:36.610 --> 01:42.880
Cette méthode n'a pas besoin d'être appelée depuis votre code de production, mais regardez comme c'est facile à faire à l'intérieur.

01:42.880 --> 01:43.570
dans le corps.

01:43.570 --> 01:49.960
Nous voyons ici que nous utilisons la méthodologie arrange, act et assert, et nous allons approfondir cette méthodologie

01:49.960 --> 01:50.380
ici.

01:50.380 --> 01:53.950
Il s'agit d'une approche facultative qui vous aide simplement à organiser vos idées.

01:53.950 --> 01:56.380
Nous commençons donc par créer une instance de la classe.

01:56.380 --> 01:59.020
Ensuite, nous appelons une méthode sur cette classe.

01:59.020 --> 02:04.990
Ensuite, nous affirmons ou nous supposons que le résultat attendu sera celui-là.

02:05.020 --> 02:12.010
Ce test passe si l'assertion est correcte et échoue si l'assertion est incorrecte.

02:12.040 --> 02:18.820
Maintenant, il peut sembler idiot de passer cinq et dix et de vérifier qu'il tourne à 15, parce que, encore une fois, notre implémentation

02:18.820 --> 02:20.110
est très simple.

02:20.110 --> 02:26.080
Mais il s'agit là d'idées fondamentales qui, lorsque nous les appliquerons à des classes encore plus grandes, seront

02:26.080 --> 02:26.800
important.

02:26.920 --> 02:28.900
Voilà pour l'aperçu du cours.

02:28.900 --> 02:31.240
Réfléchissons à ce que nous avons appris ici.

02:31.240 --> 02:35.980
Nous avons un peu parlé de l'importance des tests unitaires dans un projet.

02:35.980 --> 02:39.640
J'ai fait allusion à la raison pour laquelle les tests unitaires sont assez rares dans le développement de jeux.

02:39.670 --> 02:45.490
L'une des raisons est qu'en tant que développeurs de jeux, nous adorons ajouter de nouvelles fonctionnalités, et cela semble un peu

02:45.490 --> 02:48.070
de nous ralentir.

02:48.070 --> 02:53.500
Mais lorsque nous avons examiné la règle des 80 sur 20, nous avons constaté, vous savez, nous avons été assez surpris de voir qu'en fait

02:53.500 --> 02:59.800
la majeure partie de notre vie de développeurs de jeux est consacrée à la correction et à la maintenance des fonctionnalités existantes, et non à l'ajout de nouvelles fonctionnalités.

02:59.800 --> 03:00.490
nouvelles.

03:00.490 --> 03:07.420
En reconnaissant cela et en constatant que les tests unitaires nous aideront à créer ces nouvelles fonctionnalités, ainsi qu'à

03:07.420 --> 03:13.630
nous donner beaucoup plus de confiance dans les 80 % de maintenance que nous consacrons à notre projet.

03:13.630 --> 03:19.210
En tant que développeur de jeux, vous en tirerez facilement profit, et c'est une compétence merveilleuse à acquérir.

03:19.210 --> 03:20.500
Commençons donc.
