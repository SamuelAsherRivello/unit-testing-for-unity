WEBVTT

00:00.260 --> 00:02.360
Bonjour et bienvenue à Unit Testing for unity.

00:02.390 --> 00:06.020
Nous allons examiner mon chargeur de données en version avancée.

00:06.020 --> 00:12.170
Pour voir cette démo en action, nous allons ouvrir unity Download et utiliser le projet d'exemple Source pour

00:12.170 --> 00:12.920
ce cours.

00:12.920 --> 00:15.020
Nous allons examiner une scène clé.

00:15.020 --> 00:17.210
Il s'agit du chargeur My Data avancé.

00:17.210 --> 00:23.210
Parmi les concepts dont je vais parler ici, il y a l'injection de dépendances comme nous le voyons et le substitut de fin.

00:23.210 --> 00:29.150
Nous voici à l'intérieur de l'unité, j'ai cette scène pour le chargeur My Data avancé et prêt à partir ici.

00:29.150 --> 00:34.070
Nous allons donc lancer cette scène pour un grand nombre de scènes de l'atelier.

00:34.070 --> 00:38.840
L'exécution de la scène de production n'est pas la chose la plus intéressante, mais je vous encourage toujours à le faire.

00:38.840 --> 00:39.890
comme point de départ.

00:39.890 --> 00:46.310
Nous voyons ici un simple journal de console qui indique que la longueur des données chargées est la suivante.

00:46.340 --> 00:50.120
Cette valeur n'est pas très importante, mais vous pouvez creuser dans cette classe d'exemple si vous voulez jeter un coup d'oeil

00:50.120 --> 00:50.480
à ce sujet.

00:50.480 --> 00:52.160
Exécutons le test.

00:54.550 --> 00:58.090
Ici, ma catégorie est définie sur mon chargeur de données avancé.

00:58.090 --> 01:02.320
Nous ne voyons donc que le test lié à cette catégorie et uniquement en mode édition.

01:02.350 --> 01:06.490
Il y a aussi un test en mode lecture que vous pouvez consulter à votre guise, mais je pense que le mode édition

01:06.490 --> 01:07.630
est plus intéressant.

01:07.630 --> 01:09.490
Je vais donc faire un run all.

01:15.130 --> 01:19.450
Et là, nous voyons que nous avons deux tests et qu'ils passent tous les deux avec un contrôle vert, ce qui est très bien.

01:19.480 --> 01:24.510
Regardons à la fois le load async et le mock load async et regardons comment ils fonctionnent.

01:24.520 --> 01:26.260
Nous voici donc dans l'exemple de code.

01:26.260 --> 01:31.060
Si vous avez suivi la dernière vidéo, et j'espère que c'est le cas, nous avons passé en revue la méthode que nous recherchons

01:31.060 --> 01:38.920
ici, qui utilise un appel réel à un serveur web, charge les données et vérifie leur valeur.

01:38.920 --> 01:42.370
Cela ressemble beaucoup à ce que serait le cas d'utilisation en production ?

01:42.370 --> 01:44.830
Mais nous avons déjà parlé de certains problèmes.

01:44.860 --> 01:49.030
Est-ce que je teste mon code ou est-ce que je teste le service Web Unity qui se trouve en dessous ?

01:49.180 --> 01:50.140
Je teste ça ?

01:50.140 --> 01:53.140
Ou est-ce que je teste le back-end de github.com ?

01:53.140 --> 02:00.010
Et s'il s'agit d'un serveur stable, vous voulez concentrer vos tests sur votre propre code personnalisé et avoir au moins

02:00.010 --> 02:01.810
et le moins de dépendances possible.

02:01.810 --> 02:03.990
Il y a donc quelques problèmes.

02:04.000 --> 02:09.910
La première chose que j'ai faite quand je me suis penché sur la question, c'est de penser à l'injection de dépendances.

02:09.910 --> 02:16.510
Disons qu'en production, je veux avoir une façon d'appeler ceci et que cela soit implémenté, que

02:16.510 --> 02:18.340
en utilisant le service web Unity.

02:18.370 --> 02:22.690
Ensuite, pour les tests, j'ai peut-être besoin d'une deuxième approche.

02:22.720 --> 02:29.800
Maintenant, vous pourriez avoir un drapeau dans votre base de code qui dit quelque chose comme "debug" est égal à "true" ou "production", "debug" est égal à "true" ou "production".

02:29.800 --> 02:30.700
est égal à faux ?

02:30.700 --> 02:35.260
Et dans votre code de production, faites certaines choses en mode test et d'autres non.

02:35.290 --> 02:39.850
Je vois beaucoup de cela dans les bases de code, mais ce n'est généralement pas une bonne pratique.

02:39.850 --> 02:45.790
Vous polluez votre code de production avec des choses qui ne sont destinées qu'aux tests, ce n'est donc pas très approprié.

02:45.820 --> 02:47.200
C'est une meilleure solution.

02:47.200 --> 02:49.810
Voyons ce que nous faisons bien.

02:49.810 --> 02:55.600
Dans l'exemple de base précédent, je n'avais pas de concept de service réseau, et je ne l'ai pas non plus transmis.

02:55.600 --> 02:56.110
ici.

02:56.140 --> 02:59.440
Nous l'avons simplement créé et il a toujours fonctionné d'une seule manière.

02:59.440 --> 03:03.670
Mais l'injection de dépendance ici, c'est moi qui décide.

03:03.670 --> 03:07.080
Voici une façon personnalisée de fonctionner.

03:07.090 --> 03:11.290
Voici une partie de la logique que je pourrais modifier de différentes manières.

03:11.290 --> 03:13.930
Je le déclare ici en une ligne, puis je le passe.

03:13.930 --> 03:17.440
On peut donc imaginer avoir plusieurs services réseau différents.

03:17.440 --> 03:22.000
Je pourrais en avoir un pour les tests, un autre pour la production, un autre qui écrirait simplement à

03:22.000 --> 03:26.560
un disque local, un qui est approprié pour un serveur backend particulier.

03:26.560 --> 03:27.370
ET cetera.

03:27.400 --> 03:30.070
Il existe également des cas d'utilisation en production.

03:30.070 --> 03:31.980
Cette idée d'injection de dépendance.

03:31.990 --> 03:34.270
Maintenant, pourquoi l'appelons-nous injection de dépendance.

03:34.270 --> 03:43.960
C'est parce qu'au lieu que mon chargeur de données avancé fasse toujours une seule chose, je passe des informations qui décident

03:43.960 --> 03:45.490
comment il va fonctionner.

03:45.490 --> 03:52.000
Ainsi, au lieu que la classe elle-même sache tout, je passe une dépendance dans ce cas à

03:52.000 --> 03:54.160
le service Unity Web Request Network.

03:54.160 --> 04:00.340
Voyons donc comment cela est structuré, puis nous verrons pourquoi c'est utile pour nous.

04:00.340 --> 04:01.180
nos tests.

04:01.300 --> 04:05.050
Voici donc le code source complet de My Data loader advanced.

04:05.080 --> 04:07.330
Maintenant, deux choses sur lesquelles je veux me concentrer ici.

04:07.330 --> 04:11.420
La première est que dans son constructeur, je passe cette dépendance.

04:11.440 --> 04:18.970
Maintenant, l'injection de dépendances et comment créer des classes flexibles à partir de ce concept d'injection de dépendances

04:18.970 --> 04:21.580
sont vraiment en dehors du champ d'application de ce cours.

04:21.610 --> 04:24.130
C'est une très bonne chose pour vous d'aller voir.

04:24.130 --> 04:30.640
Vous pourriez googler quelque chose comme D I pour unity ou dependency injection pour unity, ou même dependency

04:30.640 --> 04:35.320
dans la programmation orientée objet, et voir un peu plus de ces concepts généraux.

04:35.320 --> 04:41.040
Mais en supposant que vous avez une certaine familiarité, en particulier compte tenu de mon explication, je viens de donner là,

04:41.050 --> 04:42.340
allons de l'avant.

04:42.370 --> 04:49.720
Maintenant que je passe cela comme une dépendance ici et que je le stocke, alors à chaque fois que j'appelle notre fonctionnalité de base

04:49.750 --> 04:56.470
de load async, ce que je fais c'est que je dis, ok, quand je suis prêt à charger async, il suffit de dire à mon service réseau

04:56.470 --> 04:57.630
de charger async.

04:57.640 --> 05:04.930
Maintenant, vous pouvez imaginer si j'ai passé un service réseau qui effectue un chargement asynchrone pour un serveur dorsal

05:04.930 --> 05:06.700
d'une technologie particulière.

05:06.730 --> 05:08.320
C'est ce que fait cette ligne.

05:08.550 --> 05:14.800
Si je passe quelque chose d'autre qui fait une écriture sur le disque ou une lecture à partir du disque comme un type différent

05:14.800 --> 05:17.890
de service réseau, c'est cette ligne qui changerait vraiment.

05:17.890 --> 05:24.010
Ainsi, je n'ai pas besoin d'avoir 2 ou 3 versions différentes de mon chargeur de données avancé ici.

05:24.010 --> 05:29.040
Au lieu de cela, je passe une implémentation personnalisée qui gère ce détail particulier d'une manière unique.

05:29.050 --> 05:33.030
C'est un moyen très puissant de rendre votre code plus flexible.

05:33.040 --> 05:41.290
Maintenant que nous avons parlé du passage d'une dépendance et de la façon dont elle est capable d'envelopper la fonctionnalité

05:41.290 --> 05:44.560
ici, regardons quelle est la source de cette dépendance particulière.

05:44.560 --> 05:49.150
Ici, dans le même fichier de classe, j'ai deux ou trois choses à dire.

05:49.150 --> 05:51.490
Premièrement, j'ai créé une interface.

05:51.610 --> 05:59.140
Cette interface ici du service de réseau I déclare d'accord, toute personne qui veut être considérée comme un service viable.

05:59.140 --> 06:04.900
dépendance viable à passer ici doit avoir une ou plusieurs méthodes disponibles.

06:04.900 --> 06:09.820
Et dans ce cas, il suffit d'avoir le chargement asynchrone et de prendre une chaîne d'URL.

06:09.850 --> 06:10.620
C'est tout.

06:10.630 --> 06:14.530
Maintenant, si vous n'êtes pas trop familier avec les interfaces.

06:14.820 --> 06:16.440
Allez voir les interfaces.

06:16.440 --> 06:22.200
Vous pouvez regarder quelque chose comme les interfaces par rapport aux classes en C-sharp ou en unity, et vous verrez beaucoup de choses.

06:22.200 --> 06:23.040
d'exemples.

06:23.040 --> 06:29.850
Mais une distinction importante ici est que l'interface définit ce qu'est l'API publique, mais elle ne le fait pas.

06:29.850 --> 06:31.920
se préoccupe pas de l'implémentation.

06:31.980 --> 06:35.430
L'implémentation est déclarée ici dans une classe publique.

06:35.460 --> 06:37.590
Les classes vous sont probablement plus familières.

06:37.920 --> 06:42.480
Et ce que nous faisons ici, c'est que nous implémentons une saveur particulière de cette classe.

06:42.480 --> 06:48.240
Dans cette version particulière, le service réseau devrait vous sembler très familier, si vous vous reportez à la vidéo précédente.

06:48.270 --> 06:50.640
Il s'agit exactement de la même implémentation.

06:50.910 --> 06:58.020
Nous utilisons simplement unity web request, puis nous appliquons la méthodologie d'envoi des requêtes web.

06:58.020 --> 07:03.420
Maintenant que nous avons regardé le code source, nous pouvons voir, ok, nous créons simplement

07:03.420 --> 07:06.150
une classe personnalisée qui gère un peu de la fonctionnalité.

07:06.150 --> 07:08.430
Et nous passons cette classe personnalisée ici.

07:08.430 --> 07:12.920
Mais nous avons maintenant une classe avancée my data loader qui est beaucoup plus flexible.

07:12.930 --> 07:17.600
Maintenant, pourquoi l'injection de dépendances est-elle pertinente dans le monde des tests ?

07:17.610 --> 07:23.280
Eh bien, nous avons un merveilleux utilitaire que nous pouvons utiliser dans unity pour nos tests unitaires.

07:23.280 --> 07:28.710
Il s'agit d'une bibliothèque appelée N substitute qui a été incluse dans le projet d'exemple.

07:28.710 --> 07:31.890
Jetons un coup d'œil à une autre méthode de test, juste en dessous de l'autre.

07:31.890 --> 07:35.790
Cette méthode va utiliser ce que l'on appelle un simulacre de classe.

07:35.790 --> 07:41.190
Nous avons donc ici une création très similaire du chargeur My Data avancé.

07:41.190 --> 07:46.980
Et au lieu de passer la version de la requête web unity, nous allons faire quelque chose qui ressemble beaucoup à la version de la requête web unity.

07:47.010 --> 07:47.760
étrange ici.

07:47.760 --> 07:50.820
Nous allons utiliser la bibliothèque de substitution.

07:50.820 --> 07:58.170
Et ce que nous allons faire ici, c'est que nous allons dire hey on the fly dans ces deux lignes, allez créer

07:58.170 --> 08:02.910
une classe qui peut gérer la fonctionnalité dont j'ai besoin.

08:02.910 --> 08:09.900
Mais comme il s'agit d'une classe fictive, elle ne doit pas nécessairement appeler le serveur.

08:09.900 --> 08:15.330
Ce qu'elle va faire à la place, c'est, à des moments clés, nous renvoyer une valeur prévisible.

08:15.330 --> 08:24.570
Souvenez-vous, notre flux ici est que le test dit au chargeur de données d'aller charger une URL à l'intérieur des données

08:24.570 --> 08:28.650
Le chargeur de données dit au service réseau de charger une URL.

08:28.680 --> 08:35.340
Cette dernière étape prend une demi-seconde, se charge sur le serveur et renvoie l'URL.

08:35.370 --> 08:36.780
une chaîne de caractères.

08:36.780 --> 08:41.670
Tout ce dont j'ai besoin dans une situation fictive, c'est de ne pas appeler de serveur.

08:41.670 --> 08:45.240
Quand j'appelle ceci, vous me renvoyez une chaîne de caractères.

08:45.240 --> 08:54.630
Donc je dis ici avec ce langage que je veux qu'à chaque fois que j'appelle load async et que je passe n'importe quelle chaîne de caractères

08:54.630 --> 08:59.370
pour l'URL, alors je retourne le mot "mocked data".

08:59.640 --> 09:05.970
Ensuite, je pourrais m'assurer que j'obtiens le résultat escompté, au lieu de vérifier

09:05.970 --> 09:09.930
qu'il y a doctype dans le retour comme je l'ai fait précédemment.

09:09.930 --> 09:13.650
Je peux vérifier les données fictives ici.

09:13.650 --> 09:22.290
Ce que nous voyons ici est un exemple très simple, et il peut ne pas sembler utile, mais imaginez dans un

09:22.290 --> 09:29.460
exemple plus complexe où nous ne nous contenterions pas de charger des données, mais où nous les chargerions, les lirions, les écririons, les transformerions, etc.

09:29.460 --> 09:32.730
les données, en faisant pas mal de choses, peut-être 5 ou 6 méthodes différentes.

09:32.760 --> 09:39.060
Toutes ces méthodes pourraient pointer vers des systèmes très différents, mais lorsque nous voulons vraiment tester uniquement les

09:39.060 --> 09:48.210
nous voulons passer des capacités simulées pour ces autres systèmes afin qu'ils soient juste temporaires.

09:48.210 --> 09:52.130
ignorées afin que nous puissions nous concentrer sur ce que nous avons à portée de main ici.

09:52.140 --> 09:54.360
Voyons maintenant ce qui se passerait.

09:54.360 --> 09:56.850
J'appelle donc le chargement asynchrone.

09:56.850 --> 10:03.960
Ce qui va se passer, c'est que ce système interne va renvoyer la valeur prédite.

10:03.960 --> 10:08.130
Et le chargeur de données va alors appeler Chargé.

10:08.130 --> 10:14.070
Et sa valeur de résultat sera celle que nous attendons.

10:14.070 --> 10:18.210
Exécutons cette commande dans l'éditeur unity.

10:18.210 --> 10:19.680
Nous allons donc cliquer sur run all ici.

10:22.010 --> 10:23.380
Et cela fonctionne assez rapidement.

10:23.390 --> 10:29.180
Comparons même si je lance simplement load async qui appelle en fait un serveur.

10:33.100 --> 10:34.120
C'était rapide.

10:34.150 --> 10:38.620
Ensuite, si j'appelle le mock load async qui n'appelle aucun serveur.

10:42.510 --> 10:47.720
Ce n'est peut-être pas évident dans la vidéo, mais il est beaucoup plus rapide d'appeler le MOC.

10:47.730 --> 10:53.060
Et c'est logique, car nous n'appelons pas un serveur et n'attendons pas de résultat.

10:53.070 --> 10:56.550
Ce n'est donc pas seulement pour gagner quelques secondes.

10:56.580 --> 11:00.180
C'est encore une fois pour nous permettre de nous concentrer sur la conception de nos tests.

11:00.210 --> 11:02.670
Que voulons-nous réellement tester ?

11:02.670 --> 11:04.830
Et ensuite, nous voulons l'isoler.

11:04.830 --> 11:09.060
Nous ne testons donc pas une classe Unity Web Services.

11:09.090 --> 11:11.580
Nous ne testons pas un back-end GitHub.

11:11.610 --> 11:15.390
Tester plusieurs systèmes ensemble s'appelle un test d'intégration.

11:15.390 --> 11:17.460
C'est un type de test approprié.

11:17.460 --> 11:21.570
Mais il ne correspond pas à ce dont nous parlons ici, à savoir les tests unitaires.

11:21.570 --> 11:26.340
Encore une fois, il s'agit de réduire au maximum les dépendances et les lignes de code.

11:26.340 --> 11:27.360
On peut y réfléchir.

11:27.360 --> 11:35.790
Voilà, nous avons vu comment utiliser la bibliothèque de substitution et comment faire un mock pour

11:35.790 --> 11:37.620
un appel au serveur dorsal.

11:37.620 --> 11:38.460
Merci donc.
