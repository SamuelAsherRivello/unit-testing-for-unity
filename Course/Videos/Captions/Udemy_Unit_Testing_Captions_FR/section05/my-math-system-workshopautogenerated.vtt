WEBVTT

00:00.110 --> 00:00.980
Bonjour et bienvenue.

00:00.980 --> 00:07.040
Dans cet atelier, nous allons jeter un coup d'œil sur le système My Math, en pénétrant dans ce qui est un système assez complexe.

00:07.070 --> 00:11.300
un exemple assez simple, qui nous permettra de nous familiariser à nouveau avec les bases des tests unitaires.

00:11.300 --> 00:14.720
Dans cette démo, vous pouvez utiliser le projet Core Sample pour nous suivre.

00:14.720 --> 00:19.520
Nous allons ouvrir l'éditeur unity, ouvrir le projet core sample, et ensuite nous allons

00:19.520 --> 00:21.140
ouvrir et jouer quelques scènes ici.

00:21.140 --> 00:26.360
Nous allons examiner le système My Math ainsi que le test qui le sous-tend, et nous allons faire un récapitulatif

00:26.390 --> 00:31.970
des tests unitaires, en parlant simplement des concepts de base que je vois là et que je pense à mentionner.

00:31.970 --> 00:38.450
Nous parlerons également des valeurs paramétrées, qui sont un moyen intermédiaire d'approcher les tests unitaires.

00:38.450 --> 00:38.960
tests.

00:38.960 --> 00:42.620
Et c'est une bonne compétence supplémentaire à acquérir lorsque vous abordez les tests unitaires.

00:42.620 --> 00:43.640
Plongeons dans le vif du sujet.

00:43.850 --> 00:48.410
Ici, je suis dans l'éditeur unity et j'ai ouvert mon exemple de système mathématique.

00:48.410 --> 00:51.050
Jouons la scène elle-même.

00:51.080 --> 00:54.710
Parfois, dans ces ateliers, la scène est plus excitante.

00:54.710 --> 00:56.300
Celle-ci n'est pas si passionnante.

00:56.300 --> 01:01.730
Nous allons appuyer sur play dans la fenêtre du bas, nous voyons un texte simple qui nous aide.

01:01.730 --> 01:07.040
nous aider à comprendre que nous sommes dans la démo de test unitaire, et nous allons juste jouer la scène et voir la console.

01:07.040 --> 01:08.510
Regardons donc la console.

01:08.600 --> 01:11.210
La console indique que cette scène n'a pas d'interface utilisateur.

01:11.630 --> 01:14.510
Voyons la console unity, nous sommes ici dans la console.

01:14.510 --> 01:15.140
Vraiment.

01:15.140 --> 01:19.880
Cela va juste nous montrer une valeur qui a été crachée après une opération réussie.

01:19.880 --> 01:25.370
Dans un code de production réel, cette scène serait beaucoup plus intéressante.

01:25.370 --> 01:30.590
Peut-être que le menu du jeu ou le jeu se déroule ici.

01:30.860 --> 01:35.810
Il s'agit d'une scène assez maigre où il n'y a pas grand-chose à voir, mais on peut imaginer que cela pourrait

01:35.810 --> 01:36.200
être.

01:36.770 --> 01:41.960
Il n'est pas particulièrement important qu'il y ait une scène d'exécution pour les besoins du test.

01:41.960 --> 01:47.600
Je veux juste parler souvent de l'équilibre entre le code de production qui fait son travail de production et le code de test.

01:47.600 --> 01:48.200
chose.

01:48.200 --> 01:51.560
Et ici, le code de test fait son travail de test.

01:51.560 --> 01:57.380
Le code de production, nous l'expérimentons toujours en appuyant sur play sur une scène unity comme celle-ci.

01:57.380 --> 02:00.860
Pour effectuer nos tests unitaires, nous procédons différemment.

02:00.860 --> 02:04.040
Ce que nous faisons ici, c'est que nous regardons la fenêtre du programme de test.

02:04.580 --> 02:08.420
Nous explorons la catégorie correspondant à ce que nous voulons examiner ici.

02:08.420 --> 02:10.550
Nous nous contentons de regarder le système my math.

02:11.630 --> 02:14.090
Ensuite, nous cliquons sur "Voyons voir".

02:14.090 --> 02:15.350
Effectuons la tâche en mode édition.

02:15.470 --> 02:19.850
Exécutons tout ici et tous les tests s'exécutent comme ça.

02:19.880 --> 02:22.120
Maintenant, la scène n'a pas été exécutée.

02:22.130 --> 02:28.490
Il s'exécute en quelque sorte à l'écart, dans son propre petit univers, en exécutant ces tests à l'intérieur d'un fichier

02:28.490 --> 02:29.360
mode édition.

02:29.360 --> 02:32.860
Donc, les tests en mode édition, en parlant un peu de la différence.

02:32.870 --> 02:38.090
Les tests en mode édition s'exécutent en mode édition, ce qui, dans unity, correspond à deux modes principaux.

02:38.090 --> 02:43.700
En gros, du moment où vous appuyez sur le bouton de lecture au moment où vous appuyez sur le bouton de lecture, c'est-à-dire

02:43.700 --> 02:44.360
mode lecture.

02:44.390 --> 02:47.990
C'est généralement là que l'utilisateur fait l'expérience de l'unité de jeu.

02:48.680 --> 02:53.240
Chaque fois que nous ne sommes pas dans ce mode, nous sommes en mode édition, assis ici, nous sommes en mode édition.

02:53.270 --> 02:59.330
Ces tests sont exécutés en mode édition parce qu'ils n'ont pas nécessairement besoin de toute la complexité d'une exécution.

02:59.330 --> 02:59.870
scène.

02:59.870 --> 03:05.180
Cela nous permet d'avoir une petite zone isolée plus simple où ces codes s'exécutent.

03:05.180 --> 03:10.850
Parfois, vous avez besoin des commodités des comportements monoblocs et de la fonctionnalité d'exécution.

03:10.850 --> 03:14.750
C'est là que le mode lecture entre en jeu.

03:14.750 --> 03:17.330
Et ici, nous avons également quelques tests de mode de jeu.

03:17.330 --> 03:22.550
Chaque fois que je clique sur l'une de ces cases à cocher, nous obtenons des listes légèrement différentes.

03:22.580 --> 03:23.810
de ce qui est disponible.

03:23.810 --> 03:26.240
Ici, en mode lecture, je vais appuyer sur run all.

03:27.020 --> 03:34.670
Et ici, nous créons une toute nouvelle scène, en lançant une scène d'exécution juste pour la démo.

03:34.670 --> 03:36.380
avec n'importe quel code de test que j'ai.

03:36.380 --> 03:39.920
Et nous ramène ensuite à la scène d'origine dans laquelle nous nous trouvions.

03:39.920 --> 03:44.180
Si nous n'avions pas sauvegardé la scène, le logiciel nous inviterait à lancer un mode de lecture.

03:44.210 --> 03:44.660
test.

03:44.690 --> 03:46.430
Nous allons quitter temporairement votre scène.

03:46.460 --> 03:48.110
Voulez-vous d'abord sauvegarder votre scène ?

03:48.110 --> 03:50.570
En général, c'est une bonne idée, alors faites attention.

03:50.600 --> 03:52.370
Regardons maintenant le code source.

03:52.400 --> 03:56.060
Examinons d'abord le code de production de l'exécution.

03:56.060 --> 03:58.850
Nous allons donc ouvrir l'exemple du système My Math.

03:58.880 --> 04:05.810
Chacun de ces ateliers a, en général, un objet de jeu avec un script d'exemple qui démarre.

04:05.810 --> 04:06.620
le tout.

04:06.620 --> 04:12.560
En regardant cela, nous sommes dans l'éditeur de code et nous pouvons voir l'ensemble de mon système mathématique.

04:12.560 --> 04:13.250
exemple.

04:13.250 --> 04:18.740
Il s'agit d'un monobehaviour, car je veux que le code soit placé sur un objet de jeu.

04:18.740 --> 04:20.230
Et ensuite à l'intérieur de l'éveil.

04:20.240 --> 04:23.450
Ici, je vais simuler du code de production.

04:23.450 --> 04:29.210
Maintenant, c'est très simple, il n'y a pas grand-chose, et ça ressemble un peu au test que nous allons faire.

04:29.210 --> 04:34.850
parce que je crée la classe à partir de zéro, puis j'appelle une méthode, et ensuite je montre que la classe n'a pas été créée.

04:34.850 --> 04:35.600
les résultats.

04:35.600 --> 04:41.390
Mais il est important de savoir que dans un exemple de production, dans un vrai projet de jeu, cet équivalent serait

04:41.390 --> 04:46.640
serait de nombreuses classes et toutes les scènes et tous les préfabriqués et toute la complexité que vous auriez généralement

04:46.640 --> 04:47.600
dans votre projet.

04:47.600 --> 04:50.300
Mais ici, j'ai délibérément opté pour un projet très dépouillé.

04:50.300 --> 04:51.980
Remarquez donc ce que nous faisons ici.

04:51.980 --> 04:53.960
Nous créons le système my math.

04:53.990 --> 04:58.820
Nous prenons quelques ints et les remplissons avec les valeurs cinq et dix.

04:58.820 --> 05:01.010
Nous appelons ensuite le système my Math.

05:01.010 --> 05:03.620
Et nous passons les valeurs cinq et dix ensemble.

05:03.620 --> 05:05.570
Nous affichons ensuite le résultat.

05:05.570 --> 05:07.100
Continuons donc à faire cela.

05:07.100 --> 05:08.540
J'appuie sur play.

05:12.600 --> 05:16.600
Et ici, dans la fenêtre de la console, nous voyons que le résultat est 15.

05:16.620 --> 05:22.290
J'aime la simplicité de cet exemple de codage, parce qu'il nous permet de commencer à penser à un monde

05:22.290 --> 05:27.570
où les tests unitaires n'existeraient pas, comment pourrais-je m'assurer que ce code est fonctionnel ?

05:27.600 --> 05:34.620
Eh bien, peut-être que ce code de mon système mathématique est utilisé dans de très nombreux endroits de votre jeu, et que vous avez simplement

05:34.620 --> 05:40.020
chaque fois que vous voulez voir et valider que ce système fonctionne bien, vous jouez simplement au jeu et

05:40.020 --> 05:44.160
votre jeu peut durer quelques minutes ou plusieurs heures.

05:44.160 --> 05:50.220
Et ce système particulier en cours de test pourrait être utilisé dans de nombreux endroits différents, en fonction de la durée du jeu.

05:50.220 --> 05:53.400
du comportement, des données et des situations de l'utilisateur.

05:53.400 --> 05:55.740
Le moment de la journée est peut-être important.

05:55.740 --> 06:01.020
Il est donc difficile de savoir si j'ai vraiment testé l'application de manière isolée.

06:01.020 --> 06:09.570
Si je voulais faire une validation, je pourrais copier ceci ici, le coller

06:09.570 --> 06:10.440
ici.

06:12.790 --> 06:15.290
Et appeler ceci ici et tester.

06:15.310 --> 06:16.840
Et si c'était six ?

06:16.840 --> 06:18.700
Et si c'était 11 ?

06:20.790 --> 06:22.410
A à, B à.

06:27.060 --> 06:33.060
Je ne teste donc pas un test unitaire, mais je valide simplement deux exemples différents.

06:33.060 --> 06:35.820
Donc je fais celui-ci en premier et je fais celui-là en second.

06:35.850 --> 06:42.840
C'est ce qu'on appelle les tests d'utilisateur, les tests de jeu ou les tests d'intégration.

06:42.840 --> 06:43.980
code de production.

06:43.980 --> 06:50.760
Et je l'essaie juste en tant qu'utilisateur, en espérant que je lui demande accidentellement de faire un tas de choses différentes.

06:50.790 --> 06:53.690
opérations différentes, et de voir qu'aucune n'échoue.

06:53.700 --> 06:57.870
Mais vous pouvez imaginer que ce que je fais ici, c'est ajouter des choses que je ne veux pas vraiment pour la fin...

06:57.870 --> 06:59.190
l'expérience de l'utilisateur final.

06:59.190 --> 07:05.700
J'essaie juste de me donner un peu plus de confiance dans mon propre code en appelant une fonctionnalité

07:05.700 --> 07:06.960
supplémentaires.

07:06.990 --> 07:13.590
Vous pouvez également définir un booléen quelque part dans votre projet qui dit que le mode de débogage est vrai, et ensuite

07:13.590 --> 07:15.330
tout au long de votre code de production.

07:15.330 --> 07:18.810
Si c'est le cas, vous ferez un peu plus de tests.

07:18.810 --> 07:20.220
Ce n'est pas si mal.

07:20.220 --> 07:25.200
Dans certaines situations, cela peut certainement vous aider, mais voyons à quel point la situation s'est améliorée

07:25.200 --> 07:25.770
peut être.

07:25.770 --> 07:29.010
Si au lieu de faire cela, j'exécute des tests unitaires.

07:29.010 --> 07:31.860
Voici donc où se trouve le code de ce projet.

07:31.860 --> 07:36.060
Dans ce projet, nous avons le système My Math, l'exemple du système My Math que nous avons étudié.

07:36.750 --> 07:42.630
La structure de ce système et la façon dont il fonctionne ensemble ont été abordées plus tôt dans le cours.

07:42.630 --> 07:47.430
Mais nous avons un test d'éditeur et un test d'exécution dont nous allons parler.

07:47.430 --> 07:54.030
Encore une fois, tout test d'éditeur va exécuter un mode d'édition, et c'est généralement idéal pour les choses qui n'ont pas de

07:54.030 --> 07:57.360
utiliser des classes spécifiques à l'unité comme Monobehaviour.

07:57.390 --> 08:02.520
Monobehaviour est conçu uniquement pour fonctionner de manière optimale en mode jeu.

08:02.520 --> 08:04.470
Donc ici, ce n'est pas trop approprié.

08:04.470 --> 08:04.950
Donc.

08:04.950 --> 08:07.860
Mais pour des tests simples comme celui que nous avons ici, c'est très bien.

08:07.890 --> 08:12.630
La zone d'exécution ici, où nous avons le test du mode lecture, serait un endroit idéal.

08:12.630 --> 08:18.180
Pour chacun de ces ateliers, j'en fais un pour que vous puissiez voir les différences.

08:18.180 --> 08:23.040
Mais il est important de penser que dans certaines situations, en fonction de ce que vous testez, probablement

08:23.040 --> 08:27.060
un test unitaire en mode édition est probablement plus approprié dans cette situation.

08:27.060 --> 08:31.680
C'est certainement le cas plus tard lorsque nous parlons de se déplacer avec l'entrée et de faire quelque chose avec

08:31.680 --> 08:37.800
physique, peut-être que le test du mode de jeu est nécessaire à ce moment-là, parce que l'entrée et la physique sont vraiment conçues

08:37.800 --> 08:39.270
comme des expériences de mode de jeu.

08:39.270 --> 08:41.700
Il est donc important de connaître cette distinction.

08:41.700 --> 08:43.080
Et j'en parlerai ici et là.

08:43.320 --> 08:45.840
Voyons donc le test "Mon système mathématique".

08:49.240 --> 08:52.210
Et voyons comment il est organisé.

08:53.800 --> 08:59.050
Ici, vous remarquerez que le test "My Math system" comporte quelques éléments différents.

09:04.440 --> 09:06.270
Il comporte plusieurs méthodes différentes.

09:06.420 --> 09:10.560
Chacun des noms que nous voyons ici sont les noms des méthodes de test.

09:10.560 --> 09:12.180
Commençons par le premier.

09:12.570 --> 09:18.030
La convention que j'aime utiliser est suivie ici, et nous y reviendrons dans le code que je mets généralement

09:18.030 --> 09:23.520
d'abord, quelle méthode testons-nous, qu'attendons-nous et ensuite quelle est la situation.

09:23.520 --> 09:26.490
Ici, nous testons la méthode add.

09:26.490 --> 09:31.140
Nous nous attendons à ce que le résultat soit 15 lorsque nous passons cinq et dix.

09:31.380 --> 09:36.840
Un raccourci intéressant consiste à double-cliquer sur les tests en cours d'exécution pour les relancer.

09:37.890 --> 09:39.600
Ensuite, je peux faire un clic droit sur le test.

09:41.550 --> 09:42.420
Désolé, j'étais en mode lecture.

09:42.960 --> 09:44.910
Double-cliquez dessus et il s'exécute à nouveau.

09:44.940 --> 09:45.390
Très bien.

09:45.390 --> 09:46.290
Toujours vert.

09:46.290 --> 09:49.650
Et je peux cliquer dessus avec le bouton droit de la souris et choisir open source code.

09:50.810 --> 09:54.860
C'est un moyen facile d'accéder à la bonne classe et à la bonne méthode.

09:54.890 --> 09:57.380
Voici à nouveau le nom de la méthode que nous avons vue.

09:57.410 --> 10:00.920
Encore une fois, le résultat de l'addition est 15 quand cinq et dix.

10:00.950 --> 10:07.130
La raison pour laquelle cela est important est que si vous avez beaucoup de classes de test avec beaucoup de méthodes de test,

10:07.130 --> 10:14.660
et j'espère que c'est le cas dans votre projet, afin de savoir qui dans le programme de test est qui dans le code

10:14.660 --> 10:17.670
Ici, c'est bien d'avoir un nom cohérent.

10:17.690 --> 10:22.960
Ici, nous appliquons la méthodologie arrange, act et assert.

10:22.970 --> 10:23.780
Dans l'arrangement.

10:23.780 --> 10:28.370
Nous allons commencer par créer une nouvelle instance de ce que nous voulons tester.

10:28.370 --> 10:32.490
De cette façon, nous savons qu'elle n'est pas restée inactive et qu'elle ne contient pas de vieilles données.

10:32.510 --> 10:33.850
C'est toujours une bonne pratique.

10:33.860 --> 10:35.540
Ensuite, nous allons agir en conséquence.

10:35.540 --> 10:39.200
C'est comme, quelle est la seule méthode si vous pouvez vous en sortir ?

10:39.200 --> 10:41.750
Peut-être deux méthodes qui font vraiment les tests.

10:41.750 --> 10:43.220
Mais une seule méthode est idéale.

10:43.250 --> 10:45.740
Ici, on additionne cinq et dix.

10:45.740 --> 10:49.720
Et dans l'assert, nous allons utiliser ce langage d'assert.

10:49.730 --> 10:56.720
La classe assert a une certaine structure qui permet de dire que j'affirme que quelque chose est quelque chose.

10:56.720 --> 11:01.730
Vous pouvez consulter la documentation sur cette classe pour voir les différentes façons de la formater.

11:01.730 --> 11:07.840
Mais j'utilise souvent is equal to ou is true ou is false.

11:07.850 --> 11:10.730
Ce sont donc des exemples que vous verrez assez souvent ici.

11:11.060 --> 11:15.980
Lorsque j'exécute ce code, parce qu'il s'exécute correctement, il ajoute cinq et dix pour obtenir 15.

11:16.010 --> 11:16.760
C'est tout.

11:16.790 --> 11:18.070
Nous sommes en mesure de le faire.

11:18.080 --> 11:21.710
Maintenant, souvenez-vous de l'exemple que j'ai donné dans le code de production.

11:21.710 --> 11:30.710
Et si vous vouliez tester 5 et 10, puis 6 et 11, puis 7 et 12 ou autre chose ?

11:30.710 --> 11:31.760
combinaisons ?

11:31.760 --> 11:38.570
Plus vous progressez dans les tests, plus vous vous rendez compte du nombre de tests dont vous avez réellement besoin pour assurer une couverture adéquate.

11:38.600 --> 11:44.240
Il y a beaucoup d'art et de science autour du nombre minimum de tests que vous pouvez fournir pour assurer une couverture adéquate.

11:44.240 --> 11:47.800
maximiser votre impact et la couverture du code que vous avez.

11:47.810 --> 11:53.090
L'une des choses dont je voulais parler dans le cadre de cet atelier particulier est ce que l'on appelle les

11:53.090 --> 11:54.890
les tests paramétrés.

11:54.890 --> 12:01.520
Ainsi, au lieu de copier celui-ci, de le coller ci-dessous et d'ajuster les valeurs pour obtenir un total de six

12:01.520 --> 12:08.840
et 11 ou 0 et 10 négatif, nous pouvons demander à unity d'effectuer le même test, mais en passant par des valeurs différentes.

12:08.840 --> 12:09.590
valeurs.

12:09.590 --> 12:11.810
Il y a beaucoup d'options différentes ici.

12:11.810 --> 12:13.400
Je n'en montre qu'une.

12:13.400 --> 12:15.890
Mais jetons un coup d'œil en bas.

12:16.790 --> 12:23.150
Nous disons, et ensemble, que nous supposons que le résultat est correct lorsque ces valeurs.

12:23.150 --> 12:28.670
Donc les noms de méthode un peu plus vague parce que c'est paramétré, je ne sais pas forcément.

12:28.700 --> 12:31.490
Est-ce que ça va tester cinq et dix, c'est 15.

12:31.520 --> 12:37.340
Remarquez qu'au lieu de ce que j'ai fait précédemment, c'est-à-dire déclarer cinq et dix.

12:37.370 --> 12:42.950
Dans le corps de la méthode, j'utilise ce langage particulier, j'utilise quelque chose appelé value source.

12:42.950 --> 12:44.300
Et je la passe ensuite.

12:44.300 --> 12:50.180
Ce que fait unity, c'est qu'il remplit ce premier passage de valeurs ici.

12:50.180 --> 12:51.800
Disons que c'est cinq.

12:51.830 --> 12:54.380
Puis il saisit une autre source de valeur ici.

12:54.410 --> 13:01.070
Disons que l'un est dix et qu'il suppose qu'il s'agit de cinq plus dix additionnés.

13:01.070 --> 13:06.020
Ainsi, à chaque fois qu'il s'exécute, il va faire l'équivalent du dernier test que nous avons vu.

13:06.020 --> 13:12.110
Mais au lieu d'être codé sur un seul ensemble de valeurs, il va les mélanger et en montrer une variété

13:12.110 --> 13:12.620
d'entre elles.

13:12.620 --> 13:15.520
Là encore, il existe de nombreuses possibilités de mise en forme.

13:15.520 --> 13:19.730
Vous pouvez donc consulter la documentation sur les tests paramétrés dans unity.

13:19.730 --> 13:21.980
Mais regardons mon cas spécifique ici.

13:22.010 --> 13:24.410
Ces sources de valeurs sont les valeurs A et b.

13:24.410 --> 13:27.860
Elles font simplement référence à deux tableaux que j'ai ici.

13:27.860 --> 13:34.040
Et ce qu'il va faire, c'est qu'il va tester un et un, négatif deux et

13:34.040 --> 13:36.620
négatif deux, négatif trois et négatif trois et les transmettre.

13:36.650 --> 13:43.130
Vous pouvez les organiser comme vous le souhaitez et tester différents scénarios en faisant sept, 11

13:43.130 --> 13:43.730
et 12.

13:43.760 --> 13:45.260
Vous testez tout ce que vous voulez.

13:45.290 --> 13:48.080
Maintenant, vous n'avez plus besoin de tester des quantités infinies.

13:48.080 --> 13:50.510
C'est là que l'art et la science entrent en jeu.

13:50.510 --> 13:57.020
Dans certains cas, il peut être utile de tester quelques valeurs négatives (zéro) et quelques valeurs positives.

13:57.050 --> 14:01.880
Peut-être que ce que vous faites n'est pas basé sur les mathématiques et que vous voulez y réfléchir d'une autre manière, mais ce que vous faites...

14:01.880 --> 14:04.460
recherche ce que l'on appelle des cas d'espèce.

14:04.460 --> 14:10.310
Par exemple, si vous utilisez une méthode de division et que vous voulez la tester mathématiquement, il y a

14:10.310 --> 14:12.800
un défi concernant la division par zéro.

14:12.800 --> 14:17.030
Il faut donc s'assurer que l'on passe bien zéro et que l'on gère cela avec élégance.

14:17.030 --> 14:22.100
Vous devez vraiment connaître le domaine spécifique dans lequel se trouve votre code de production, afin de savoir comment

14:22.100 --> 14:22.790
le tester.

14:22.790 --> 14:27.080
Mais voici quelques exemples positifs et négatifs et des choses comme ça.

14:28.230 --> 14:31.010
Voyons ce que cela donne dans l'éditeur d'unité.

14:31.020 --> 14:32.730
Remarquez ce qui se passe ici.

14:32.730 --> 14:38.040
Il exécute en fait 49 tests basés sur toutes les combinaisons que nous avons ici.

14:38.040 --> 14:41.930
Il vous indique donc les valeurs et les transmet.

14:41.940 --> 14:43.490
C'est vraiment bien.

14:43.500 --> 14:50.490
En regardant cette sortie, vous pourriez vous rendre compte qu'il est important pour moi de tester 100

14:50.490 --> 14:51.860
et -100.

14:51.870 --> 14:52.410
Très bien.

14:52.410 --> 14:58.950
Il suffit ensuite de revenir en arrière et d'ajouter ces valeurs d'échantillonnage si vous voulez faire d'autres choses au lieu de vous contenter d'une valeur absolue.

14:58.950 --> 14:59.700
liste codée.

14:59.700 --> 15:03.600
Si vous souhaitez sélectionner des valeurs aléatoires, vous disposez de nombreuses autres options.

15:03.600 --> 15:06.240
Encore une fois, faites des recherches sur les tests paramétrés.

15:06.420 --> 15:10.950
Vous pouvez également vous pencher sur le test du mode de jeu si vous le souhaitez, mais comme celui-ci sera plus intéressant

15:10.950 --> 15:15.060
dans d'autres exemples, nous allons passer à autre chose et conclure cet atelier.

15:15.060 --> 15:15.900
Nous vous remercions.
