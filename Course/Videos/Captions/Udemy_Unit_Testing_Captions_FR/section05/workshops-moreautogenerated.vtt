WEBVTT

00:00.080 --> 00:00.300
Hi.

00:00.320 --> 00:06.050
Cela couvre une grande partie des différents sujets que je voulais aborder dans l'atelier jusqu'à présent.

00:06.050 --> 00:08.570
beaucoup de place pour d'autres sujets à l'avenir.

00:08.570 --> 00:10.940
Nous avons vu dans les ateliers couverts jusqu'à présent.

00:10.940 --> 00:17.930
Cet exemple le plus simple nous permet d'apprendre à utiliser le gestionnaire de tests, de voir comment nous pouvons faire des tests en mode lecture, des tests en mode édition,

00:17.960 --> 00:23.420
apprendre un peu sur les différences entre le mode lecture et le mode édition, et pourquoi vous voudriez tester

00:23.420 --> 00:25.930
dans l'un ou l'autre, ou dans les deux.

00:25.940 --> 00:32.060
Nous avons également vu quelques-unes des options dont nous disposons lorsque nous avons une fonctionnalité asynchrone, ou lorsque nous sommes en train de tester une fonctionnalité asynchrone, ou lorsque nous sommes en train de tester une fonctionnalité asynchrone.

00:32.060 --> 00:34.040
dépendons d'autres systèmes.

00:34.040 --> 00:38.540
Que pourrions-nous faire pour réduire cette dépendance dans l'intérêt du test ?

00:38.570 --> 00:43.760
En cours de route, nous apprenons différentes choses sur l'injection de dépendances et la séparation

00:43.760 --> 00:45.230
les préoccupations de notre code.

00:45.260 --> 00:51.290
Ces principes sont de toute façon utiles dans le code de production, et nous commençons à voir certaines des façons dont le code de production peut être utilisé.

00:51.290 --> 00:58.400
que lorsque vous préparez votre code pour qu'il soit plus testable, nous créons également un code qui est bien conçu.

00:58.400 --> 00:59.660
pour la production.

00:59.660 --> 01:06.290
L'injection de dépendances offre donc une flexibilité que l'on peut utiliser au moment de l'exécution, ce qui réduit la complexité.

01:06.290 --> 01:12.920
de vos systèmes en passant des variétés flexibles de différentes dépendances lorsque vous en avez besoin.

01:12.950 --> 01:20.540
Nous avons également constaté qu'en séparant un grand comportement monolithique en ce dont nous avons besoin du comportement monolithique, il est possible d'améliorer la qualité du système.

01:20.540 --> 01:27.200
et en déplaçant le reste du code dans une classe plus légère sans monobehaviour, nous obtenons à nouveau une certaine flexibilité.

01:27.200 --> 01:32.150
qui est utile en production et qui nous aide également dans le monde des tests.

01:32.150 --> 01:38.780
Je pense qu'en général, certains des défis que nous voyons sont ce qui se passe lorsque vous avez des dépendances multiples

01:38.780 --> 01:43.250
ou de nombreux systèmes appelés à partir d'une méthode particulière.

01:43.610 --> 01:49.250
Cela peut être le signe que cette méthode est surchargée et qu'elle en fait trop, ou bien qu'elle est

01:49.250 --> 01:51.680
une méthode allégée et bien conçue.

01:51.680 --> 01:57.350
Mais nous devons avoir quelques réflexions et considérations supplémentaires lorsque nous testons cette fonctionnalité.

01:57.350 --> 01:59.600
J'espère que cela vous a été utile.

01:59.600 --> 02:06.680
J'ai hâte d'aborder d'autres sujets dans cette série, et ils seront ajoutés au fur et à mesure.

02:06.680 --> 02:07.190
temps.

02:07.190 --> 02:08.300
Merci encore.
