WEBVTT

00:00.080 --> 00:03.050
Bonjour et bienvenue à Unit testing for unity.

00:03.080 --> 00:04.310
Nous sommes dans l'atelier.

00:04.310 --> 00:08.450
Et dans celui-ci, nous allons examiner le caractère dans sa forme de base.

00:08.450 --> 00:10.700
Nous allons en examiner plusieurs.

00:10.730 --> 00:13.400
Nous commencerons par les bases, puis nous passerons à quelque chose de plus avancé.

00:13.400 --> 00:15.080
Jetons un coup d'œil à cette démo en action.

00:15.080 --> 00:16.520
A l'intérieur de l'éditeur unity.

00:16.520 --> 00:19.430
Nous allons ouvrir unity, ouvrir notre projet d'exemple.

00:19.430 --> 00:23.360
Nous allons ensuite jouer une ou plusieurs scènes en rapport avec le sujet traité ici.

00:23.360 --> 00:29.270
La scène sera le personnage de base, et je parlerai du Monobehaviour comme étant quelque chose de

00:29.270 --> 00:34.760
qui peut ou ne peut pas être testé, ainsi que du mode de jeu par rapport au mode d'édition, quelque chose que j'ai déjà mentionné.

00:34.760 --> 00:36.020
plus tôt dans le cours.

00:36.050 --> 00:37.640
Nous en reparlerons ici.

00:37.640 --> 00:39.980
Nous voici dans le projet en train de regarder le caractère basic.

00:39.980 --> 00:41.390
Exécutons la scène.

00:46.760 --> 00:53.600
Alors que la plupart des ateliers que nous avons réalisés comportaient déjà une scène assez ennuyeuse dans laquelle il n'y avait absolument rien

00:53.630 --> 00:56.420
d'intérêt ne se passe ici, nous avons un peu plus.

00:56.450 --> 01:02.080
Lorsque nous appuyons sur play, nous voyons un cube blanc qui se crée au centre de l'écran.

01:02.090 --> 01:04.640
Je peux utiliser les touches fléchées pour me déplacer.

01:04.640 --> 01:11.540
Bien qu'il s'agisse d'un exemple très simple, il s'agit ici de parler de certains des aspects les plus complexes de l'utilisation d'un ordinateur.

01:11.540 --> 01:14.200
aspects plus complexes des tests dans unity.

01:14.210 --> 01:19.340
Dans les scènes précédentes, nous ne nous sommes pas préoccupés du rendu des graphiques ou de la prise en compte des données.

01:19.580 --> 01:26.450
Lors du dernier atelier, nous avons parlé de la différence entre tester plusieurs dépendances différentes

01:26.450 --> 01:27.200
ensemble.

01:27.200 --> 01:32.390
Par exemple, une méthode qui appelle à l'intérieur une deuxième méthode qui appelle à l'intérieur la troisième.

01:32.420 --> 01:34.100
Ce sont des dépendances.

01:34.130 --> 01:40.400
Ici, nous parlons d'un aspect similaire, sauf qu'à chaque fois que je veux déplacer mon personnage, je commence par

01:40.400 --> 01:47.360
demander à écouter le système d'entrée de Unity, puis utiliser le mouvement de transformation Monobehaviour de Unity.

01:47.360 --> 01:47.770
C'est vrai.

01:47.780 --> 01:52.460
Nous utilisons donc plusieurs dépendances ou classes différentes.

01:54.970 --> 01:58.240
Ici, je peux utiliser les touches fléchées pour me déplacer.

01:59.360 --> 02:00.800
Et c'est à peu près tout.

02:02.750 --> 02:05.690
Mais l'idée est d'en faire un peu plus qu'avant.

02:05.780 --> 02:08.250
Parlons des implications de ce test.

02:08.270 --> 02:14.780
Ici, dans le programme de test, la catégorie est réglée sur notre caractère de base, ce qui est très bien.

02:14.810 --> 02:20.420
Ensuite, je peux basculer pour voir les tests en mode jeu et en mode édition.

02:20.450 --> 02:26.720
Nous pouvons voir que nous avons un peu des deux, mais parce qu'il y a un monobehaviour impliqué, je vais

02:26.720 --> 02:28.190
me concentrer davantage sur le mode de jeu.

02:28.220 --> 02:34.820
Dans chacun des ateliers, j'ai inclus au moins un test en mode édition et au moins un test en mode lecture.

02:34.850 --> 02:37.020
pour la scène en question.

02:37.040 --> 02:42.620
Je l'ai refait ici, mais en fonction de ce que vous testez réellement, vous devez vous demander si c'est cela

02:42.620 --> 02:47.060
plus approprié pour le mode édition ou plus approprié pour le mode lecture ?

02:47.090 --> 02:52.130
Il y a un art et une science dans la manière d'aborder cela, et dans la manière de concevoir votre code pour qu'il soit plus

02:52.130 --> 02:52.760
testable.

02:52.790 --> 02:59.600
Mais une façon générale de voir les choses, qui est pertinente ici, est que si vous utilisez la fonctionnalité Monobehaviour,

02:59.600 --> 03:02.270
cela ressemble plus à un test de mode de jeu.

03:02.300 --> 03:08.540
Plus vous utilisez de bibliothèques unity, en particulier au moment de l'exécution, dans votre production, plus vous devez réfléchir à ce qui suit

03:08.540 --> 03:10.460
à ce qu'elles soient des tests en mode lecture.

03:10.490 --> 03:13.970
Ce n'est pas une règle absolue, mais c'est une bonne façon de commencer à y réfléchir.

03:14.240 --> 03:16.110
Lançons donc nos tests.

03:16.130 --> 03:18.890
J'ai le mode lecture et je vais tous les exécuter.

03:22.470 --> 03:22.800
Je suis en mode lecture et je lance tous les tests.

03:22.830 --> 03:25.650
L'exécution a pris quelques secondes, mais nous les avons tous.

03:25.680 --> 03:31.650
Ce qui se passe en fait lorsque vous exécutez un test en mode lecture, c'est qu'il crée une toute nouvelle scène vide et

03:31.650 --> 03:35.430
exécute un seul test à l'intérieur, et le détruit.

03:35.430 --> 03:42.630
Et il crée une toute nouvelle scène garantissant que nous disposons de l'espace mondial fourni par une scène.

03:42.630 --> 03:49.590
Mais la fraîcheur d'une nouvelle scène qui n'a pas de dépendances ou d'informations périmées susceptibles d'influencer

03:49.590 --> 03:50.220
le test.

03:50.220 --> 03:51.820
Nous aimons donc la façon dont cela est mis en place.

03:51.840 --> 03:58.620
Maintenant, les choses que je fais sont le déplacement, le déplacement par code clé et le déplacement vers un endroit particulier.

03:58.620 --> 04:01.260
Jetons un coup d'œil à ce déplacement vers le test.

04:03.240 --> 04:05.580
En fait, regardons d'abord le code de production.

04:05.580 --> 04:08.550
Donc si je vais ici et que je regarde l'exemple de base.

04:10.370 --> 04:12.140
Voici le code de production.

04:12.140 --> 04:14.330
Regardons-le avant de passer aux tests.

04:14.330 --> 04:17.570
Ici, tout ce que je fais, c'est créer une primitive.

04:17.600 --> 04:22.610
On peut aussi imaginer charger un prefab ici si on veut le faire.

04:22.610 --> 04:27.620
Mais je voulais nous faire entrer lentement dans toutes les complexités du runtime et de unity.

04:27.620 --> 04:29.750
Je n'utilise donc pas de préfabriqué ici.

04:29.750 --> 04:33.740
Je crée un tout nouveau cube à partir de zéro avec une ligne de code.

04:33.740 --> 04:40.430
Je lui donne un nom pour des raisons d'organisation, puis j'ajoute le composant du monobehaviour

04:40.430 --> 04:42.230
que je veux tester.

04:42.230 --> 04:48.350
L'une des choses que je fais est de le déplacer jusqu'au point 000, puis de montrer que

04:48.350 --> 04:49.910
sur l'écran.

04:49.910 --> 04:52.490
Jetons un coup d'œil au code source.

04:55.160 --> 04:56.540
Voici le caractère de base.

04:56.570 --> 04:58.370
Ceci étend Monobehaviour.

04:58.400 --> 05:06.330
Maintenant, si vous êtes familier avec unity, vous utilisez probablement les Monobehaviours tout le temps comme une bonne pratique.

05:06.350 --> 05:09.200
Vous voulez commencer à penser consciencieusement.

05:09.200 --> 05:14.260
Quand est-il approprié d'utiliser un comportement unique et quand puis-je utiliser quelque chose de différent ?

05:14.270 --> 05:20.180
En tant que développeurs débutants, nous créons tout comme un enfant de monobehaviour, mais avec le temps et l'expérience

05:20.180 --> 05:23.510
on se rend compte qu'il y a des avantages et des inconvénients à utiliser des monobehaviours.

05:23.510 --> 05:28.220
L'un des inconvénients est que, historiquement, il était plus difficile d'effectuer des tests en cours de route.

05:28.220 --> 05:30.170
Unity a fourni ces tests de mode de jeu.

05:30.170 --> 05:34.550
Nous pouvons donc maintenant tester Playmode et Monobehaviours.

05:34.550 --> 05:37.230
C'est très bien, mais il y a encore quelques inconvénients.

05:37.250 --> 05:41.930
Encore une fois, Monobehaviour va s'appuyer sur plus de systèmes d'unité sous le capot.

05:41.930 --> 05:47.300
Et lorsque nous essayons de tester notre code personnalisé, nous pouvons ne pas être sûrs de l'origine du problème.

05:47.330 --> 05:49.320
Est-ce notre code ou celui d'Unity ?

05:49.340 --> 05:51.710
Encore une fois, il y a quelques dépendances.

05:51.740 --> 05:55.880
Ce n'est pas grave, mais c'est une chose à laquelle vous devez penser lorsque vous concevez vos classes et que vous avez l'intention de les utiliser.

05:55.880 --> 05:57.290
vous concevez vos tests.

05:57.710 --> 06:00.680
Nous avons donc une vitesse de déplacement.

06:00.710 --> 06:02.060
Nous avons un type de mouvement.

06:02.060 --> 06:04.970
Il s'agit simplement de la direction de la touche fléchée sur laquelle j'appuie.

06:04.970 --> 06:07.280
Ensuite, nous utilisons la mise à jour de Unity.

06:07.310 --> 06:10.160
Maintenant, laissez-moi vraiment vérifier ici.

06:12.330 --> 06:12.810
C'est vrai.

06:12.810 --> 06:18.540
La boucle de mise à jour est la seule fonctionnalité majeure du monobehaviour que j'utilise.

06:18.570 --> 06:22.740
Le reste du code n'a pas nécessairement besoin d'être dans un monobehaviour.

06:22.770 --> 06:27.170
J'utilise aussi le système d'entrée de Unity, donc c'est une deuxième dépendance.

06:27.180 --> 06:30.370
Voyons ce que je fais à chaque image de la mise à jour.

06:30.390 --> 06:32.940
J'appelle cette méthode ici move by input.

06:32.970 --> 06:37.920
Je vérifie si l'utilisateur appuie sur une ou plusieurs touches du clavier.

06:37.920 --> 06:41.970
Ensuite, j'appelle le déplacement par code de touche ici.

06:43.280 --> 06:49.820
Tout ce que nous faisons, c'est dire, si nous nous déplaçons actuellement vers la gauche, alors déplaçons-nous dans un vecteur pour la direction gauche.

06:49.820 --> 06:53.420
Si nous nous déplaçons actuellement vers la droite, et ainsi de suite pour le haut et le bas.

06:53.420 --> 06:58.460
Cela vous permet donc de vous déplacer dans les quatre directions à l'aide des quatre touches fléchées.

06:58.460 --> 07:00.020
Un code assez simple.

07:00.020 --> 07:04.040
Si vous avez déjà créé votre propre personnage personnalisé, vous savez que vous devez définir quelque chose comme

07:04.040 --> 07:04.610
ceci.

07:07.590 --> 07:09.480
Ici, nous avons deux méthodes.

07:09.480 --> 07:14.850
L'une nous permet de nous déplacer vers un point particulier et l'autre de nous déplacer d'une unité.

07:14.850 --> 07:17.700
Supposons que je veuille me déplacer d'une unité vers la droite.

07:17.700 --> 07:22.110
Je pourrais passer d'une unité à l'autre, d'une unité à l'autre.

07:22.110 --> 07:27.350
Si je veux me déplacer directement vers un point particulier de l'espace, ce sera le déplacement vers.

07:27.360 --> 07:33.390
Ce ne sont pas nécessairement les seules méthodes dont vous auriez besoin dans une classe de personnage personnalisée, mais il y a aussi

07:33.390 --> 07:34.710
quelques méthodes assez courantes.

07:34.710 --> 07:41.460
Nous terminerons donc cette leçon avec ceci comme moyen de base, approprié, pour tester certaines fonctionnalités.

07:41.460 --> 07:46.920
Si vous voulez jeter un coup d'œil au mode édition ou aux autres tests qui sont ici en mode lecture, allez-y.

07:46.920 --> 07:47.820
et faites-le.

07:47.850 --> 07:49.440
Je passe à la vidéo suivante.

07:49.440 --> 07:50.190
Merci.
