WEBVTT

00:00.050 --> 00:02.970
Bonjour et bienvenue à l'intégration continue avec unity.

00:02.990 --> 00:08.600
Ceci fait partie de l'apprentissage des tests unitaires et des façons dont les tests unitaires peuvent s'intégrer dans vos flux de travail.

00:08.630 --> 00:14.510
Dans cette section, nous ferons une brève introduction du sujet, puis nous nous pencherons sur Unity Cloud build.

00:14.510 --> 00:21.530
comme un moyen de mettre en place une intégration et un déploiement continus pour vos projets Unity.

00:21.560 --> 00:28.550
Comme nous l'avons vu dans le cycle de vie du développement logiciel pour la création de jeux, unity est utilisé de manière prédominante

00:28.550 --> 00:31.970
dans les phases de développement, de test et de déploiement.

00:32.000 --> 00:36.650
Lorsque nous parlons de tests unitaires, nous les ajoutons aux étapes cinq et six.

00:36.650 --> 00:41.180
Et lorsque nous parlons d'intégration et de déploiement continus, nous cherchons vraiment à

00:41.180 --> 00:47.770
à ces trois étapes afin d'automatiser nos tests et de les intégrer à nos flux de production.

00:47.780 --> 00:51.360
Qu'est-ce que l'intégration et le déploiement continus ?

00:51.380 --> 00:59.120
L'intégration et le déploiement continus, comme on les appelle, réduisent les erreurs de code et les défauts, ce qui les rend essentiels à tout flux de travail DevOps.

00:59.450 --> 01:06.530
Les opérations de développement sont généralement l'étape finale ou les étapes où votre projet est testé,

01:06.560 --> 01:10.580
la mise en ligne et l'ajout de nouvelles mises à jour à l'expérience en direct.

01:10.610 --> 01:17.510
Le CD CI implique des pratiques d'intégration fréquente de vos modifications de code, d'intégration automatique de ces modifications et de mise à jour du code.

01:17.510 --> 01:20.930
code, puis de mettre à disposition des utilisateurs finaux des builds.

01:20.930 --> 01:25.730
Si vous faites tout cela ensemble, vous effectuez le processus complet de CI CD.

01:25.730 --> 01:30.590
Mais vous pouvez aussi faire l'un ou l'autre ou vous concentrer sur des domaines clés du flux de travail.

01:30.590 --> 01:30.860
Maintenant.

01:30.890 --> 01:37.940
CI CD n'est pas propre à Unity, et au cours des années de développement professionnel d'Unity et de son utilisation

01:37.940 --> 01:45.650
dans l'industrie, de plus en plus de tiers ont ajouté des outils pour vous donner l'intégration continue et le contrôle de la qualité.

01:45.650 --> 01:47.960
déploiement continu au sein d'unity.

01:47.990 --> 01:55.220
Certaines des technologies utilisées sont GitHub et GitLab pour conserver le code ou le stocker à l'endroit où il est stocké.

01:55.220 --> 02:00.170
en ligne, et le contrôle de version, mais il y a d'autres opérations que l'on peut utiliser pour cela.

02:00.170 --> 02:02.480
Mais il y a aussi d'autres technologies.

02:02.480 --> 02:11.480
Et puis des outils comme circle CI ou game CI, code Magic bamboo, Unity Cloud Build, Jenkins.

02:11.510 --> 02:17.300
Il s'agit de technologies qui s'appuient sur l'endroit où votre code est contrôlé par version, et qui sont capables de

02:17.300 --> 02:21.590
de brancher les bons déclencheurs pour provoquer les bonnes actions pour le flux de travail.

02:21.620 --> 02:26.690
Les deux éléments les plus pertinents pour cette vidéo, parce que c'est ce que j'ai utilisé, sont les suivants

02:26.720 --> 02:32.600
GitHub pour héberger le repo que nous allons construire dans Unity Cloud, construire comme l'outil qui va faire le

02:32.600 --> 02:33.770
la construction et les tests.

02:33.770 --> 02:39.980
Nous avons donc mentionné que CI CD combine les pratiques d'intégration continue et de livraison continue.

02:39.980 --> 02:44.810
L'intégration consiste donc à mettre votre nouveau code en production.

02:44.810 --> 02:49.250
Il s'agit de le tester, de le construire et de l'intégrer dans le code.

02:49.370 --> 02:54.740
La livraison continue ou le déploiement continu, comme on l'appelle aussi.

02:54.740 --> 02:58.310
Cela automatise la livraison de ce code à la cible de construction.

02:58.310 --> 02:59.380
Ceci est donc différent.

02:59.390 --> 03:02.900
Il ne s'agit pas simplement de mettre votre code dans le projet, c'est de l'IC.

03:03.140 --> 03:05.990
Il s'agit de le mettre entre les mains des utilisateurs finaux.

03:05.990 --> 03:07.490
C'est donc le CD.

03:07.550 --> 03:13.280
Jusqu'à ce stade du cours, nous avons vu que les tests unitaires sont incroyablement utiles pour aider à façonner le produit.

03:13.280 --> 03:18.290
la façon dont notre code mûrit et certainement la façon dont nous maintenons et déboguons ce code.

03:18.290 --> 03:20.720
Et nous avons effectué les tests manuellement.

03:20.720 --> 03:26.450
Cela signifie que même si nous créons des tests automatisés, nous jouons l'expérience d'exécution comme suit

03:26.450 --> 03:27.950
utilisateur et recherchons les bogues.

03:27.950 --> 03:30.980
De cette façon, il n'y a qu'une seule façon de tester manuellement.

03:30.980 --> 03:36.470
Et l'autre chose que nous faisons, c'est de cliquer manuellement sur le bouton dans le Test Runner d'Unity.

03:36.470 --> 03:38.330
pour exécuter ces tests.

03:38.330 --> 03:40.850
Jetons donc un coup d'œil à quelques points du manuel.

03:40.880 --> 03:46.520
Tout d'abord, nous ne garantissons aucun processus automatisé et nous ne pouvons donc garantir aucun résultat.

03:46.550 --> 03:51.530
Il est moins fiable et plus sujet aux erreurs qu'une alternative automatisée.

03:51.620 --> 03