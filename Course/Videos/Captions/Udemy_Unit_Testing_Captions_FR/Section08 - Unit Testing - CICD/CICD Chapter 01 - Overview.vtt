WEBVTT

00:00:00.050 --> 00:00:02.970
Bonjour et bienvenue dans l'intégration continue avec Unity.

00:00:02.990 --> 00:00:08.600
Cela fait partie de l'apprentissage des tests unitaires et de la manière dont les tests unitaires peuvent s'intégrer dans vos flux de travail.

00:00:08.630 --> 00:00:14.510
Dans cette section, nous ferons une brève introduction du sujet, puis nous examinerons la version Unity Cloud.

00:00:14.510 --> 00:00:21.530
comme un moyen de mettre en place une intégration continue et un déploiement continu pour vos projets Unity.

00:00:21.560 --> 00:00:28.550
Comme nous l'avons vu dans le cycle de vie du développement logiciel pour la création de jeux, l'unité est principalement utilisée

00:00:28.550 --> 00:00:31.970
dans les phases de développement, de test et de déploiement.

00:00:32.000 --> 00:00:36.650
Lorsque nous parlons de faire des tests unitaires, nous l'ajoutons ici aux étapes cinq et six.

00:00:36.650 --> 00:00:41.180
Et lorsque nous parlons d'intégration continue et de déploiement continu, nous recherchons vraiment

00:00:41.180 --> 00:00:47.770
à ces trois étapes afin d'automatiser nos tests et de les intégrer à nos flux de production.

00:00:47.780 --> 00:00:51.360
Alors, qu’est-ce que l’intégration continue et le déploiement continu ?

00:00:51.380 --> 00:00:59.120
CI CD, comme on l'appelle, réduit les erreurs et les défauts de code, ce qui le rend crucial pour chaque flux de travail DevOps.

00:00:59.450 --> 00:01:06.530
Les opérations de développement constituent généralement la ou les étapes finales au cours desquelles votre projet est testé,

00:01:06.560 --> 00:01:10.580
mise en ligne et ajout de nouvelles mises à jour à l'expérience en direct.

00:01:10.610 --> 00:01:17.510
CI CD implique des pratiques d'intégration fréquente de vos modifications de code, en les intégrant automatiquement

00:01:17.510 --> 00:01:20.930
code, puis publiez les versions à vos utilisateurs finaux.

00:01:20.930 --> 00:01:25.730
Donc, si vous faites tout cela ensemble, vous effectuez le processus complet de CI CD.

00:01:25.730 --> 00:01:30.590
Mais vous pouvez également faire l’un ou l’autre ou vous concentrer vous-même sur les domaines clés du flux de travail.

00:01:30.590 --> 00:01:30.860
Maintenant.

00:01:30.890 --> 00:01:37.940
CI CD n'est pas propre à Unity, et au cours des années de développement professionnel et d'utilisation de Unity

00:01:37.940 --> 00:01:45.650
dans l'industrie, de plus en plus de tiers ont ajouté des outils pour vous offrir une intégration continue et

00:01:45.650 --> 00:01:47.960
déploiement continu au sein de l’unité.

00:01:47.990 --> 00:01:55.220
Certaines des technologies utilisées sont GitHub et GitLab pour conserver le code ou pour stocker le code là où

00:01:55.220 --> 00:02:00.170
vous l'avez en ligne et contrôlez les versions, mais vous pouvez également utiliser d'autres opérations pour cela.

00:02:00.170 --> 00:02:02.480
Mais il existe également d’autres technologies.

00:02:02.480 --> 00:02:11.480
Et puis des outils comme circle CI ou game CI, code Magic Bamboo, Unity Cloud Build, Jenkins.

00:02:11.510 --> 00:02:17.300
Il s'agit de technologies construites là où votre code est contrôlé en version et pouvant

00:02:17.300 --> 00:02:21.590
pour brancher les bons déclencheurs pour provoquer les bonnes actions pour le flux de travail.

00:02:21.620 --> 00:02:26.690
Cela a du sens pour vous deux qui sont les plus pertinents pour cette vidéo, car c'est ce que j'ai utilisé, c'est

00:02:26.720 --> 00:02:32.600
GitHub pour héberger le dépôt que nous allons créer dans Unity Cloud, construit comme l'outil qui fera le

00:02:32.600 --> 00:02:33.770
la construction et les tests.

00:02:33.770 --> 00:02:39.980
Nous avons donc mentionné que CI CD combine les pratiques d'intégration continue et de livraison continue.

00:02:39.980 --> 00:02:44.810
L'intégration consiste donc à mettre votre nouveau code en production.

00:02:44.810 --> 00:02:49.250
Cela inclut le tester, le construire et l’intégrer dans le code.

00:02:49.370 --> 00:02:54.740
La livraison continue ou déploiement continu, comme on l'appelle aussi.

00:02:54.740 --> 00:02:58.310
Cela automatise la livraison de ce code à la cible de build.

00:02:58.310 --> 00:02:59.380
Donc c'est différent.

00:02:59.390 --> 00:03:02.900
Il ne s'agit pas seulement de mettre votre code dans le projet, c'est CI.

00:03:03.140 --> 00:03:05.990
Cela le met entre les mains de vos utilisateurs finaux.

00:03:05.990 --> 00:03:07.490
Voilà donc le CD.

00:03:07.550 --> 00:03:13.280
Jusqu'à ce point du cours, nous avons vu que les tests unitaires sont incroyablement utiles pour aider à façonner

00:03:13.280 --> 00:03:18.290
comment notre code mûrit et certainement comment nous maintenons et débogueons ce code.

00:03:18.290 --> 00:03:20.720
Et nous avons effectué les tests manuellement.

00:03:20.720 --> 00:03:26.450
Cela signifie donc que même si nous créons des tests automatisés, soit nous jouons l'expérience d'exécution comme

00:03:26.450 --> 00:03:27.950
un utilisateur et recherchez les bugs.

00:03:27.950 --> 00:03:30.980
De cette façon, il existe une façon de tester manuellement.

00:03:30.980 --> 00:03:36.470
Et l'autre chose que nous faisons est de cliquer manuellement sur le bouton dans Unity Test Runner.

00:03:36.470 --> 00:03:38.330
fenêtre pour exécuter ces tests.

00:03:38.330 --> 00:03:40.850
Jetons donc un coup d'œil à quelques puces du manuel.

00:03:40.880 --> 00:03:46.520
Tout d’abord, nous ne garantissons pas qu’un processus automatisé se déroule et nous ne pouvons donc garantir aucun résultat.

00:03:46.550 --> 00:03:51.530
Il est moins fiable et plus sujet aux erreurs qu’une alternative automatisée.

00:03:51.620 --> 00:03:57.530
Ces tâches répétitives, exécutez-les vous-même de temps en temps, en vous rappelant de le faire, en regardant

00:03:57.530 --> 00:03:59.840
avec diligence aux résultats qui demandent de l'énergie.

00:03:59.840 --> 00:04:02.120
Et ces tâches répétitives peuvent s’avérer ennuyeuses.

00:04:02.120 --> 00:04:05.930
Et lorsque les choses sont ennuyeuses, les développeurs peuvent les ignorer ou les faire moins fréquemment.

00:04:05.930 --> 00:04:11.690
Et enfin, si nous oublions de tester, nous n'avons pas de bon statut actualisé sur l'état d'avancement de notre projet.

00:04:11.690 --> 00:04:12.110
faire.

00:04:12.110 --> 00:04:18.350
Cependant, si nous prenons toutes les meilleures pratiques dont nous disposons dans la mise en place de ces tests, et que nous automatisons également

00:04:18.350 --> 00:04:24.140
l'exécution de ces tâches et même la livraison de notre code à nos utilisateurs finaux, nous pouvons profiter

00:04:24.140 --> 00:04:25.430
de plus d'avantages.

00:04:25.610 --> 00:04:29.150
Par exemple, nous avons ici un processus répétitif fiable.

00:04:29.150 --> 00:04:35.990
Lorsque nous avons une configuration automatique du CI CD, nous avons des commentaires rapides et pertinents que nous pouvons choisir et nous verrons

00:04:36.020 --> 00:04:37.670
ce qui déclenche chaque build.

00:04:37.670 --> 00:04:43.670
Mais si nous voulons le faire pour chaque commit dans un dépôt git, alors chaque fois que nous effectuons un commit dans un dépôt git,

00:04:43.700 --> 00:04:48.620
le test est exécuté, la version est vérifiée et nous en sommes informés.

00:04:48.620 --> 00:04:51.920
Vous pourrez donc le faire plus ou moins fréquemment selon vos besoins.

00:04:51.950 --> 00:04:54.740
Cela vous donne plus de confiance dans votre code, donc il y a moins de risques.

00:04:54.740 --> 00:04:57.980
Ainsi, lorsque vous vous lancez dans la refactorisation de systèmes ou lorsque vous ajoutez de nouvelles fonctionnalités.

00:04:57.980 --> 00:04:59.780
Et enfin en en avoir un.

00:05:00.340 --> 00:05:04.630
Des builds accessibles à tous, puis une automatisation par-dessus.

00:05:04.630 --> 00:05:10.870
Nous avons une base de confiance et de sécurité dans notre base de code qui nous permet de

00:05:10.870 --> 00:05:12.360
collaborer avec les autres.

00:05:12.370 --> 00:05:18.340
Nous pourrons savoir qui contribue à maintenir la stabilité du projet, ce qui est incroyablement

00:05:18.340 --> 00:05:22.060
une information efficace à avoir lorsque vous travaillez en équipe.

00:05:22.060 --> 00:05:29.800
Donc, en prenant du recul ici, en regardant d'une manière visuelle, l'intégration continue est la fusion du code, le

00:05:29.800 --> 00:05:31.240
le code est construit.

00:05:31.270 --> 00:05:36.010
Ensuite, lors de la livraison continue, nous vérifions que nos tests ont réussi.

00:05:36.040 --> 00:05:42.910
Ensuite, nous le déplaçons vers un environnement de test, qui n'est pas encore prêt pour les utilisateurs finaux.

00:05:42.910 --> 00:05:44.020
mais presque là.

00:05:44.020 --> 00:05:48.400
Et nous nous assurons que le processus fonctionne vraiment bien avant de le déployer auprès des utilisateurs finaux.

00:05:48.430 --> 00:05:55.930
Désormais, vous pouvez effectuer des tests automatisés et fournir automatiquement les résultats de ces tests, indépendamment de votre disponibilité.

00:05:55.930 --> 00:06:01.750
tout flux particulier dans la façon dont vous programmez votre code dans le contrôle de version.

00:06:01.750 --> 00:06:08.920
Mais juste pour parler ici de l’alignement et des connexions potentiels, cela montre ce qui pourrait être différent.

00:06:08.920 --> 00:06:10.690
s'engage sur différentes branches.

00:06:10.690 --> 00:06:16.240
Dans le contrôle de version, j'utilise git, alors faisons comme si j'utilisais git ici et que j'ai un main ou un master

00:06:16.240 --> 00:06:17.110
succursale là-bas.

00:06:17.110 --> 00:06:21.580
Et puis je fais tout mon travail de développement sur une deuxième branche développeur.

00:06:21.580 --> 00:06:28.420
Et puis à chaque fois que je veux créer une nouvelle fonctionnalité, je bifurque du développement, je lui donne un nom

00:06:28.420 --> 00:06:35.420
comme disons fonctionnalité, menu principal, bouton rapide, puis j'allais ajouter ce menu principal, quitter

00:06:35.440 --> 00:06:41.770
et assurez-vous que cette branche ne parle que des modifications requises pour cette fonctionnalité particulière.

00:06:41.890 --> 00:06:45.310
Disons que j'avais la fonctionnalité numéro un en bas.

00:06:45.310 --> 00:06:46.510
Je l'avais fini.

00:06:46.540 --> 00:06:52.570
Voici quelques-uns des endroits potentiels où nous pourrions exécuter le processus automatisé CI CD.

00:06:52.570 --> 00:06:58.330
Tout d'abord, en commençant par le bas, chaque fois que je m'engage dans ma branche de fonctionnalités de développement,

00:06:58.330 --> 00:07:04.450
Je pourrais lancer une construction automatisée pour m'assurer que tous les tests sont exécutés et que tout fonctionne

00:07:04.450 --> 00:07:05.560
particulièrement bien.

00:07:05.560 --> 00:07:06.730
C'est le numéro un.

00:07:06.760 --> 00:07:13.210
Ensuite, je pourrais revenir à une fonctionnalité plus large à l'étape numéro deux, et au fur et à mesure que je la fusionnerai avec celle-ci

00:07:13.210 --> 00:07:18.940
branche de développement, je souhaite faire un test de build automatisé, atteignant potentiellement toutes les différentes cibles

00:07:18.940 --> 00:07:19.750
plates-formes.

00:07:19.750 --> 00:07:26.290
Cela signifie que le test automatisé peut être exécuté dans l'éditeur Unity sous iOS, Android, sur l'appareil,

00:07:26.290 --> 00:07:27.040
pas sur l'appareil.

00:07:27.040 --> 00:07:28.780
Vous avez là de nombreuses options différentes.

00:07:29.500 --> 00:07:35.350
Enfin, lorsque cette branche se développe, elle est prête et dispose de toutes les dernières fonctionnalités, et

00:07:35.350 --> 00:07:38.980
nous voulons tester comment cela fonctionnerait sur la branche master.

00:07:38.980 --> 00:07:46.480
Nous avons le numéro trois là où, avant d'aller le confier à la ligne supérieure, il y a le principal ou le

00:07:46.480 --> 00:07:53.620
branche principale, ce que je pourrais faire est de fusionner la branche principale pour développer, puis m'assurer que

00:07:53.620 --> 00:07:59.320
tout fonctionne bien sur la branche développement et seulement si cela fonctionne bien, alors je m'engage à

00:07:59.320 --> 00:08:00.520
la branche principale ou principale.

00:08:01.220 --> 00:08:07.160
Vous pouvez donc voir qu'il n'est pas nécessaire de suivre ces étapes dans un ordre particulier, mais vous pouvez

00:08:07.160 --> 00:08:11.440
bénéficiez d'une aide aux tests autant ou aussi peu que vous le souhaitez tout au long de ce flux de travail.

00:08:11.450 --> 00:08:15.440
Un autre récapitulatif de haut niveau juste pour voir ces informations de différentes manières.

00:08:15.440 --> 00:08:21.350
Il s'agit spécifiquement des instructions de construction d'Unity Cloud ici, mais je pense que les étapes indiquées sont de haut niveau

00:08:21.350 --> 00:08:21.850
assez.

00:08:21.860 --> 00:08:24.290
C'est également vrai pour la plupart des concurrents.

00:08:24.320 --> 00:08:27.830
La première chose que vous souhaitez faire est de configurer l’automatisation de votre build.

00:08:27.830 --> 00:08:32.810
Vous pointez donc l’automatisation de la construction vers le contrôle de version où se trouve votre code.

00:08:32.810 --> 00:08:38.090
Dans mon cas, il s'agirait de connecter la version Unity Cloud et de la connecter à GitHub où j'ai un

00:08:38.090 --> 00:08:39.440
dépôt pour le projet.

00:08:39.470 --> 00:08:42.080
Ensuite, vous décidez quel déclencheur utiliser.

00:08:42.110 --> 00:08:49.490
Il s'agit peut-être de valider une modification de votre projet sur une branche spécifique, ou de fusionner à partir d'une branche.

00:08:49.490 --> 00:08:53.240
dans une autre branche, ou vous pouvez définir différentes règles de votre choix.

00:08:53.270 --> 00:08:59.990
L'idée ici est de ne pas l'exécuter manuellement, mais plutôt d'inclure une partie de votre processus de développement

00:08:59.990 --> 00:09:01.610
se déclenche automatiquement.

00:09:01.610 --> 00:09:03.140
Ce serait donc le numéro deux ici.

00:09:03.170 --> 00:09:09.260
Puis numéro trois sur un déclencheur lorsque vous publiez le code, lorsque vous validez le code, lorsque vous fusionnez

00:09:09.260 --> 00:09:13.100
le code, quoi que vous décidiez, la build est automatiquement créée.

00:09:13.100 --> 00:09:16.700
Et c’est à la troisième étape que le test serait également exécuté.

00:09:16.700 --> 00:09:21.980
Et puis enfin, l'équipe est informée lorsque le projet a été déployé.

00:09:21.980 --> 00:09:29.660
Donc, dans cet exemple de flux, nous venons de voir à chacun de ces moments, celui qui le souhaite pouvait s'abonner à

00:09:29.660 --> 00:09:34.490
un e-mail indiquant que cette branche de fonctionnalités a été fusionnée avec celle-ci.

00:09:34.490 --> 00:09:39.020
Ce n'est pas vraiment mon domaine d'expertise, donc je n'y écouterai aucune notification.

00:09:39.020 --> 00:09:46.310
Mais tous les développeurs voudraient peut-être être informés via le système de tout ce qui y est fusionné.

00:09:46.310 --> 00:09:52.820
branche principale ou principale finale, et avoir ce système CI CD à ces étapes clés va confirmer

00:09:52.820 --> 00:09:58.700
que vos tests unitaires réussissent tous, qu'aucun d'entre eux n'échoue, et que tout cela fonctionne avec succès que votre projet

00:09:58.700 --> 00:09:59.510
construit.

00:09:59.510 --> 00:10:04.940
Vous pouvez imaginer qu'il existe des scénarios même dans lesquels les tests réussissent tous, mais peut-être que la version ne réussit pas.

00:10:04.940 --> 00:10:05.510
travail.

00:10:05.510 --> 00:10:12.080
Peut-être qu'il y a du code qui est cassé ou un actif qui est cassé et qui n'a pas de couverture de test

00:10:12.080 --> 00:10:12.530
encore.

00:10:12.530 --> 00:10:18.470
Et le simple fait que le projet génère une erreur pendant le processus de construction est un élément très solide.

00:10:18.470 --> 00:10:19.910
informations de débogage à avoir.

00:10:19.940 --> 00:10:25.370
Vous connaîtrez également l'heure, la date et la succursale à l'origine du problème, ce qui vous aidera à vous concentrer sur l'endroit où

00:10:25.370 --> 00:10:27.320
où chercher pour résoudre le problème.

00:10:27.320 --> 00:10:29.900
Et puis finalement, le projet se déploierait avec succès.

00:10:29.900 --> 00:10:35.870
Nous avons donc vu que le CI CD est important pour que nous puissions savoir que le projet s'est construit, mais c'est

00:10:35.870 --> 00:10:38.900
combinaison particulièrement puissante avec les tests unitaires.

00:10:38.900 --> 00:10:44.570
Donc non seulement il a été construit, mais il a été construit avec tous les tests réussis et un récapitulatif des tests unitaires, puisque c'est

00:10:44.570 --> 00:10:46.160
le sujet de tout le cours.

00:10:46.190 --> 00:10:52.370
À mesure que votre projet se développe avec davantage de scripts, de classes et de méthodes, il devient difficile de garantir que

00:10:52.370 --> 00:10:56.360
un changement dans une partie de votre code ne casse pas les choses ailleurs.

00:10:56.390 --> 00:11:00.950
Les tests automatisés vous aident à vérifier que votre code fonctionne comme prévu.

00:11:00.980 --> 00:11:07.130
Les tests vous font gagner du temps en découvrant quand et où les problèmes surviennent dès leur introduction,

00:11:07.130 --> 00:11:14.240
plutôt que d'attendre les tests manuels des utilisateurs, cela devient beaucoup plus cher à mesure que vous le découvrez tard.

00:11:14.240 --> 00:11:14.930
ces bugs.

00:11:14.930 --> 00:11:16.460
Avoir ce système est donc une très bonne chose.

00:11:16.460 --> 00:11:21.400
Et nous nous souvenons de quelque chose d’assez contre-intuitif : la règle des 8020.

00:11:21.410 --> 00:11:29.300
C'est que 80 % du temps, nous travaillons à corriger des bugs et à maintenir notre base de code existante, et

00:11:29.300 --> 00:11:33.740
20 % du temps est celui où nous ajoutons de nouvelles fonctionnalités et de nouvelles fonctionnalités.

00:11:33.770 --> 00:11:38.900
Nous pensons souvent que la majeure partie de notre journée est consacrée à l'ajout de nouvelles fonctionnalités, c'est donc là que nous voulons placer

00:11:38.900 --> 00:11:40.370
notre énergie mentale.

00:11:40.370 --> 00:11:49.250
Cependant, la recherche nous montre qu'avoir de bonnes pratiques de tests unitaires, de bons tests automatisés,

00:11:49.280 --> 00:11:56.210
avoir un système CI CD, cela a un impact considérable et améliore l'efficacité de vos 80 %.

00:11:56.210 --> 00:12:01.550
Il s'agit donc vraiment de déterminer où vous pouvez avoir le plus d'impact en modifiant votre flux de travail.

00:12:01.550 --> 00:12:09.190
Donc, avant de regarder un exemple de création du CD ci lui-même, récapitulons ici le type de classe le plus simple.

00:12:09.200 --> 00:12:14.180
Imaginez que nous ayons un système mathématique qui effectue des additions et des soustractions.

00:12:16.120 --> 00:12:23.620
Ensuite, nous avons ici un test unitaire, qui est un fichier séparé et une classe distincte utilisant l'attribut test

00:12:23.620 --> 00:12:24.070
ici.

00:12:24.100 --> 00:12:30.640
Cela récupérera une instance de la dernière classe que nous avons vue, la créera et testera une unité ou une méthode particulière.

00:12:30.640 --> 00:12:38.530
de celui-ci, en se méfiant des entrées et sorties involontaires de ce système, et en vérifiant que le

00:12:38.530 --> 00:12:40.810
le résultat affirmé est celui que nous obtenons.

00:12:40.840 --> 00:12:45.550
Maintenant, dans le cas d'Unity Cloud Build, lorsque vous avez configuré des tests comme celui-ci dans votre projet et

00:12:45.550 --> 00:12:52.120
vous avez le projet lui-même configuré dans le système CI CD, vous pouvez vous attendre à pouvoir le faire manuellement

00:12:52.120 --> 00:12:57.700
ou exécutez automatiquement ces builds en visitant Unity Cloud Build dans ce cas, qui est un site Web

00:12:57.730 --> 00:12:58.420
outil.

00:12:58.450 --> 00:13:01.750
Vous voyez que la version est conçue pour la plate-forme cible ?

00:13:01.750 --> 00:13:04.780
Dans ce cas, nous testons le bureau Windows 64 bits.

00:13:04.810 --> 00:13:09.850
Nous voyons que tous les tests du mode édition réussissent et que tous les tests du mode lecture réussissent.

00:13:09.880 --> 00:13:14.320
Tout cela se produit automatiquement en fonction du déclencheur que vous avez décidé.

00:13:14.320 --> 00:13:16.530
C’est donc incroyablement utile.

00:13:16.540 --> 00:13:20.230
Ensuite, les membres de l'équipe intéressés peuvent recevoir un e-mail.

00:13:20.230 --> 00:13:26.080
Il y a un petit extrait d'un e-mail qui montre simplement, hé, quelqu'un de l'équipe a fait une construction.

00:13:26.110 --> 00:13:30.610
La construction a été déclenchée parce que cette branche a été fusionnée avec cette branche ou quoi que ce soit.

00:13:30.640 --> 00:13:32.340
Et voici les résultats.

00:13:32.350 --> 00:13:35.820
Ils peuvent vous permettre de cliquer sur une page Web ou de la résumer dans l'e-mail.

00:13:35.830 --> 00:13:42.940
Maintenant, ce sujet CI CD, ainsi que les bases des tests unitaires, leurs principes fondamentaux, les sujets avancés

00:13:42.940 --> 00:13:48.880
ainsi que parler de fonctions pures et gérer des ateliers individuels sur certains sujets avancés

00:13:48.880 --> 00:13:51.310
comme des scènes, des préfabriqués et des réglables.

00:13:51.310 --> 00:13:55.450
Tout cela fait partie de ce cours ici, vous pouvez consulter le lien ci-dessous.

00:13:55.450 --> 00:13:59.920
Si vous n'êtes pas encore dans le cours, consultez les bandes-annonces.

00:13:59.920 --> 00:14:02.800
Inscrivez-vous au cours et commencez votre apprentissage dès aujourd'hui.

00:14:02.800 --> 00:14:07.330
Et si vous êtes déjà étudiant du cours et que vous trouvez cette vidéo à l'intérieur du cours lui-même,

00:14:07.330 --> 00:14:11.260
merci d'être étudiant et j'ai hâte de vous voir également dans les prochains cours.

00:14:11.260 --> 00:14:17.620
Donc, dans l’ensemble, ce que nous avons pu constater, c’est que les tests unitaires en eux-mêmes constituent un énorme défi.

00:14:17.620 --> 00:14:24.550
outil puissant qui vous aide à être plus efficace dans les domaines de développement dans lesquels vous dépensez

00:14:24.550 --> 00:14:25.850
beaucoup de temps.

00:14:25.870 --> 00:14:33.160
N'oubliez pas que 80 % de l'effort global de développement est consacré à la maintenance et au débogage des systèmes existants.

00:14:33.160 --> 00:14:39.040
Donc, puisque nous reconnaissons l'ampleur d'un domaine de notre vie, c'est génial que nous disposions d'outils comme

00:14:39.040 --> 00:14:46.960
Tests unitaires et CI CD avec des outils comme Unity Cloud Build ou d'autres outils communautaires pour pouvoir

00:14:46.960 --> 00:14:53.890
donnez-nous tous ces avantages et automatisez la livraison de ces résultats de tests, des résultats de build et

00:14:53.890 --> 00:14:56.200
la livraison des constructions elles-mêmes.