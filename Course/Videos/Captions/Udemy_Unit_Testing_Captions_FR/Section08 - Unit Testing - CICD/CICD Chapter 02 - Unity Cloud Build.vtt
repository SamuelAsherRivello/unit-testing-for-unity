WEBVTT

00:00:00.020 --> 00:00:02.750
Bonjour et bienvenue dans les tests unitaires pour l'unité.

00:00:02.780 --> 00:00:10.010
Ici, nous allons parler d'Unity Cloud Build comme moyen populaire de faire une intégration continue et une

00:00:10.010 --> 00:00:11.270
déploiement avec unité.

00:00:11.300 --> 00:00:17.480
Nous avons donc constaté les énormes avantages des tests unitaires et de la mise en place d'un processus automatisé pour effectuer

00:00:17.480 --> 00:00:18.620
ces tests unitaires.

00:00:18.650 --> 00:00:23.640
L'une de ces options populaires que vous pouvez utiliser est la version Cloud de Unity.

00:00:23.660 --> 00:00:25.820
Ceci est offert par l’unité elle-même.

00:00:25.850 --> 00:00:31.040
Il existe également de nombreuses alternatives tierces ou communautaires à ce que je vais vous montrer.

00:00:31.070 --> 00:00:37.820
Parce que la construction du cloud est spécifique à l'unité, construite par l'unité, et cela fonctionne assez facilement.

00:00:37.820 --> 00:00:43.280
Je vais me concentrer là-dessus ici, mais la plupart des étapes que vous voyez ici seraient très similaires.

00:00:43.280 --> 00:00:45.560
dans la mise en place d'outils compétitifs.

00:00:45.560 --> 00:00:49.100
Ainsi, Unity Cloud Build offre une automatisation de la construction Unity.

00:00:49.100 --> 00:00:55.750
Créer des jeux de qualité signifie disposer d'un pipeline de CD CI prêt à être testé et publié fréquemment.

00:00:55.760 --> 00:01:00.440
Automatisez votre pipeline de build dans le cloud et poursuivez le développement avec unité.

00:01:00.440 --> 00:01:01.460
Construisez l’automatisation.

00:01:01.460 --> 00:01:03.530
Donc, dans cette vidéo, nous passerons en revue tout le processus.

00:01:03.530 --> 00:01:07.880
Mais Unity Cloud Build est un logiciel Web en tant que service.

00:01:07.910 --> 00:01:12.710
Cela coûte cher, mais il existe un niveau de départ gratuit que nous utiliserons aujourd'hui.

00:01:12.740 --> 00:01:17.870
Les entreprises qui ont beaucoup de constructions à réaliser et qui souhaitent minimiser le temps d'attente de leur bâtiment le feraient

00:01:17.870 --> 00:01:23.480
être mieux adapté aux niveaux payants pour ce service ou trouver une alternative.

00:01:23.870 --> 00:01:27.350
Une fois que vous utilisez la version Unity Cloud, elle est basée sur le Web.

00:01:27.350 --> 00:01:30.710
Comme je l'ai mentionné, vous ouvrez l'historique de construction et cliquez sur construire.

00:01:30.710 --> 00:01:36.350
Si vous souhaitez effectuer un test manuellement, ou si vous pouvez planifier ces builds, vous pouvez les avoir, par exemple,

00:01:36.350 --> 00:01:42.260
cela se produit uniquement sur votre branche principale, mais cela se produit tous les soirs à 1 heure du matin et cela se créera automatiquement

00:01:42.260 --> 00:01:43.310
une fois par jour en plus.

00:01:43.340 --> 00:01:45.190
Vous pouvez également configurer un déclencheur.

00:01:45.200 --> 00:01:52.220
Vous pouvez également configurer des déclencheurs pour qu'ils se construisent automatiquement en fonction de certains critères, comme lorsque

00:01:52.220 --> 00:01:56.540
le code est validé d'une branche à une autre, exécutez-le automatiquement.

00:01:56.540 --> 00:01:57.920
Vous avez donc quelques options.

00:01:57.920 --> 00:02:02.570
Et une fois que vous avez lancé cette build, manuellement ou automatiquement, vous et tous les membres de votre

00:02:02.570 --> 00:02:08.300
l'équipe qui le souhaite recevra un e-mail confirmant les builds réussis, les builds échoués ou quel que soit le niveau

00:02:08.300 --> 00:02:09.200
d'informations que vous souhaitez.

00:02:09.230 --> 00:02:10.940
Voyons une démo de cela en action.

00:02:10.940 --> 00:02:17.180
Maintenant, j'ai déjà parcouru et créé un projet, testé pour m'assurer qu'il fonctionne bien avec Unity.

00:02:17.180 --> 00:02:17.600
Nuage.

00:02:17.600 --> 00:02:19.310
Construisez et terminez cela.

00:02:19.310 --> 00:02:22.550
J'ai fait une partie de ce travail pour comprendre comment fonctionne le système.

00:02:22.550 --> 00:02:25.990
Et aussi pour prendre quelques-unes des captures d'écran que nous avons vues ici dans cette présentation.

00:02:26.000 --> 00:02:32.750
Cependant, ce que je vais faire, c'est simplement recommencer le processus à partir de zéro afin que vous puissiez voir chaque étape impliquée.

00:02:32.780 --> 00:02:38.150
Maintenant, je ne vais pas créer le projet lui-même, mais je ferai toute l'automatisation en plus de cela.

00:02:38.150 --> 00:02:44.780
Voici donc notre projet Unity qui contient déjà les tests unitaires ajoutés et tous les différents exemples de scènes.

00:02:44.780 --> 00:02:49.760
C'est le seul projet de ce cours et il est lié dans la section ressources du cours.

00:02:49.760 --> 00:02:55.460
Nous pouvons trouver cela ici sur GitHub juste pour explorer la page pour confirmer qu'elle est bien prête.

00:02:55.460 --> 00:02:57.170
Et je vais l'ouvrir à l'intérieur de l'unité.

00:02:57.170 --> 00:02:59.390
Nous voici dans le projet inside unity.

00:02:59.420 --> 00:03:01.430
Nous pouvons voir ici dans l'Inspecteur.

00:03:01.430 --> 00:03:07.070
Nous avons quelques liens sur lesquels nous pouvons cliquer vers différentes zones du projet pour commencer à voir

00:03:07.070 --> 00:03:12.290
certains des exemples, ainsi qu'en cliquant sur le lien du cours et de l'exemple de projet lui-même.

00:03:12.380 --> 00:03:15.830
Nous pouvons également tester que tous les tests unitaires réussissent dans le testeur.

00:03:15.830 --> 00:03:16.850
Alors faisons ça.

00:03:19.000 --> 00:03:21.610
Vous pouvez voir les 148 tests réussir.

00:03:21.760 --> 00:03:27.340
Une autre chose que je veux faire est d'aller dans les paramètres de construction, et si ce n'est pas déjà fait, je veux

00:03:27.340 --> 00:03:33.280
pour ajouter cela, conservez cette scène dans les paramètres de build pour Cloud Build, et je m'assurerai de la valider

00:03:33.280 --> 00:03:34.030
au dépôt.

00:03:34.060 --> 00:03:37.900
Désormais, chacun de ces processus de construction fonctionne de manière très différente.

00:03:37.930 --> 00:03:45.670
Unity Cloud Build souhaite créer au moins une scène pour qu'elle soit considérée comme une version réussie

00:03:45.670 --> 00:03:46.660
processus.

00:03:46.660 --> 00:03:49.060
C'est pourquoi il faut une scène là-dedans.

00:03:49.060 --> 00:03:52.540
Et cette scène est assez simple, assez vide.

00:03:52.570 --> 00:03:56.530
C'est juste là pour tester des fonctionnalités très minimales.

00:03:56.560 --> 00:04:02.410
Vous pourriez également avoir une scène plus impliquée si vous le souhaitez, et que ce soit le seul test à construire,

00:04:02.410 --> 00:04:08.620
mais je suppose que ma couverture de tests unitaires en mode édition et en mode lecture le fait pour moi.

00:04:08.620 --> 00:04:12.410
J'ai donc une scène de test assez vide dans laquelle j'y glisse.

00:04:12.430 --> 00:04:14.550
Ici, nous voyons le Unity Hub ouvert.

00:04:14.560 --> 00:04:19.780
Généralement, nous sommes connectés, mais je me suis volontairement déconnecté pour pouvoir créer un tout nouveau compte.

00:04:19.810 --> 00:04:24.550
Si vous avez déjà créé un compte à utiliser dans Unity, vous pouvez ignorer cette étape.

00:04:24.550 --> 00:04:26.310
Je montre juste qu'il est complet.

00:04:26.320 --> 00:04:30.820
Vous n’avez rien d’unique à faire ici, en particulier la création de cloud pour l’instant.

00:04:30.910 --> 00:04:33.690
Donc ce que je vais faire ici, c'est créer un compte.

00:04:33.700 --> 00:04:40.000
Ensuite, une fois la configuration la plus élémentaire terminée, j'irai sur Cloud unity.com.

00:04:40.000 --> 00:04:43.240
Et c'est là que je dois effectuer une configuration supplémentaire.

00:04:43.240 --> 00:04:47.500
Pour que mon projet que j'ai montré sur GitHub soit construit automatiquement.

00:04:47.950 --> 00:04:51.970
Maintenant, j'ai déjà fait ces étapes, mais je vais les refaire à partir de zéro pour que nous puissions tout voir

00:04:51.970 --> 00:04:52.300
ici.

00:04:52.300 --> 00:04:57.990
Je vais donc accéder aux projets ici dans la barre latérale, puis cliquer sur Nouveau pour récupérer un nouveau projet.

00:04:58.000 --> 00:05:06.010
J'appellerai cela des tests unitaires pour l'unité deux car j'en ai déjà un que j'ai utilisé.

00:05:06.040 --> 00:05:08.520
Est-ce que cela ciblera les enfants de moins de 13 ans ?

00:05:08.530 --> 00:05:09.520
Non, ce ne sera pas le cas.

00:05:14.670 --> 00:05:15.480
D'accord.

00:05:15.720 --> 00:05:17.290
Examinons donc certains de ces détails.

00:05:17.310 --> 00:05:25.470
Nous avons le nom du projet, une icône, un identifiant de projet, la clé de licence Google pour les achats intégrés n'est pas là

00:05:25.470 --> 00:05:26.060
encore.

00:05:26.070 --> 00:05:32.730
Ce tableau de bord que nous voyons propose toutes sortes de fonctionnalités différentes offertes par Unity à partir de ses services.

00:05:32.760 --> 00:05:34.950
Nous n’avons pas besoin de faire tout cela ici.

00:05:35.040 --> 00:05:35.310
D'accord.

00:05:35.340 --> 00:05:38.460
Maintenant que ce projet est mis en place, nous allons passer aux opérations de développement ici.

00:05:41.900 --> 00:05:44.420
L’une des choses que nous pouvons faire est de créer une automatisation.

00:05:44.420 --> 00:05:46.640
Nous allons passer aux paramètres d'automatisation de la construction.

00:05:46.760 --> 00:05:49.790
Nous voici donc avec les paramètres d'automatisation de la construction.

00:05:49.910 --> 00:05:52.760
Nous pouvons voir quelques informations générales ici.

00:06:00.250 --> 00:06:00.760
Ouais.

00:06:01.480 --> 00:06:03.370
Je vais aller au contrôle de source.

00:06:05.470 --> 00:06:09.010
Le contrôle de source a une liste déroulante, nous pouvons choisir Git Hub.

00:06:09.140 --> 00:06:09.430
D'accord.

00:06:09.460 --> 00:06:13.660
Cela nous dit donc que nous avons besoin d'un jeton d'accès personnel de git.

00:06:13.690 --> 00:06:14.020
D'accord.

00:06:14.020 --> 00:06:19.490
Ce que nous devons faire est de connecter ici notre compte de facturation Unity Cloud à notre compte GitHub.

00:06:19.510 --> 00:06:26.950
De cette façon, le processus de construction sait où se trouve notre code et peut écouter certains événements, comme

00:06:26.950 --> 00:06:32.480
lorsque le code a été mis à jour ou fusionné, etc., afin d'autoriser l'autorisation de construction d'Unity Cloud.

00:06:32.500 --> 00:06:38.220
Nous allons entrer dans les paramètres ici et nous récupérerons un jeton d'accès personnel sur notre GitHub.

00:06:38.230 --> 00:06:42.180
Cela dit donc crée et fournit votre jeton d'accès personnel GitHub.

00:06:42.190 --> 00:06:46.960
Vous devrez sélectionner la portée de l’organisation de lecture du dépôt.

00:06:50.800 --> 00:06:55.330
Vous aurez donc besoin d'un compte GitHub partout où se trouve le dépôt.

00:06:55.360 --> 00:06:57.760
Il n'est pas nécessaire que ce soit le dépôt que j'ai créé ici.

00:06:57.760 --> 00:07:02.590
Vous pouvez l'exécuter vous-même, mais pour obtenir ce jeton d'accès personnel, c'est quelque chose

00:07:02.590 --> 00:07:04.270
spécifique à votre compte.

00:07:04.300 --> 00:07:06.910
Rien à voir avec moi en tant qu'instructeur ici.

00:07:07.030 --> 00:07:12.010
Nous pouvons donc monter ici jusqu'au profil et descendre dans les paramètres.

00:07:16.450 --> 00:07:20.320
Ensuite, ici, sur le côté, nous allons dans les paramètres du développeur.

00:07:30.250 --> 00:07:33.580
Ensuite sous les jetons d’accès personnels, on peut passer au classique.

00:07:35.260 --> 00:07:38.000
J'en ai déjà un que j'ai créé récemment.

00:07:38.020 --> 00:07:42.130
Celui-ci est une organisation de lecture de projet et un dépôt.

00:07:42.460 --> 00:07:45.460
Je vais générer un nouveau jeton, je vais donc lui donner un nom.

00:07:45.460 --> 00:07:51.040
Ce sera le jeton de build Unity Cloud.

00:07:54.200 --> 00:07:56.480
Je ne lui donnerai aucune date d'expiration.

00:07:56.480 --> 00:07:58.910
Alors ici, je vais choisir le repo.

00:07:59.120 --> 00:08:03.860
Je vais choisir lire, lire et lire sur quelques-uns de ces paramètres.

00:08:04.760 --> 00:08:07.250
Tout cela n’est peut-être pas nécessaire.

00:08:07.250 --> 00:08:08.450
Peut-être pourriez-vous en faire moins.

00:08:08.450 --> 00:08:09.530
Mais je vais faire ça.

00:08:13.200 --> 00:08:13.530
D'accord.

00:08:13.560 --> 00:08:15.780
Ensuite, nous copions la valeur à partir de là.

00:08:22.760 --> 00:08:25.490
On colle la valeur et on autorise.

00:08:32.850 --> 00:08:33.750
Choisissez mon unité.

00:08:33.750 --> 00:08:35.040
Test d'unité.

00:08:36.210 --> 00:08:38.670
Regardons maintenant les configurations ici.

00:08:40.080 --> 00:08:47.070
Nous ferons une configuration rapide de la cible et nous choisirons Windows 64.

00:08:47.580 --> 00:08:55.290
Désormais, si votre projet final est joué par des utilisateurs d'appareils cibles particuliers comme Android, iOS,

00:08:55.320 --> 00:08:59.520
etcetera, vous voudrez peut-être faire des builds pour tous ces éléments dès le début.

00:08:59.550 --> 00:09:02.850
Ici, nous pouvons voir que nous avons beaucoup de choses différentes à sélectionner.

00:09:02.880 --> 00:09:08.760
En règle générale, il y a le moins de frictions pour faire fonctionner une version Windows sur une machine Windows, donc

00:09:08.760 --> 00:09:09.930
Je viens de choisir celui-là.

00:09:16.830 --> 00:09:17.160
Ici.

00:09:17.160 --> 00:09:19.260
Nous choisirons la branche que nous voulons construire.

00:09:19.290 --> 00:09:22.350
Maintenant, nous voyons ici le chemin du sous-dossier du projet.

00:09:22.350 --> 00:09:23.550
Et c'est facultatif.

00:09:23.550 --> 00:09:30.030
Mais il indique que si vos actifs et paramètres de projet ne se trouvent pas dans le dossier racine de votre dépôt, nous vous recommandons

00:09:30.030 --> 00:09:31.740
en saisissant le chemin du dossier.

00:09:31.770 --> 00:09:34.230
Jetons un coup d'œil à mon projet ici.

00:09:34.260 --> 00:09:43.380
Maintenant, voici le repo et ma convention est que mon projet Unity est toujours sous un repo slash unity slash

00:09:43.410 --> 00:09:44.750
actifs, par exemple.

00:09:44.760 --> 00:09:49.200
Je trouve que sur les projets plus importants, il est toujours utile d'avoir cette séparation.

00:09:49.200 --> 00:09:53.070
Alors, tous les projets de toutes tailles, est-ce que je commence de cette façon ?

00:09:53.160 --> 00:09:58.660
Dans ce dossier Unity, nous pouvons voir les actifs, packages et paramètres de projet familiers.

00:09:58.680 --> 00:10:02.040
Désormais, ces trois dossiers se trouvent immédiatement à votre racine.

00:10:02.070 --> 00:10:07.860
Vous n'avez besoin d'aucune configuration personnalisée, mais si ces trois dossiers ne se trouvent pas à votre racine, alors vous

00:10:07.860 --> 00:10:10.500
il faut déterminer exactement d'où ils viennent.

00:10:12.180 --> 00:10:15.570
Donc, dans mon cas, il s’agit simplement d’une barre oblique unitaire.

00:10:16.780 --> 00:10:19.140
Ensuite, nous pouvons parler de la version Unity.

00:10:19.150 --> 00:10:26.290
Maintenant, je trouve que détecter automatiquement la version Unity est probablement une bonne idée pour qu'elle puisse construire

00:10:26.290 --> 00:10:31.250
une basée sur la dernière version qui a été insérée dans le dépôt.

00:10:31.270 --> 00:10:37.720
Cependant, je soupçonne que cela ne fonctionne pas pour moi à cause de mon chemin, je vais donc activer la détection automatique

00:10:37.750 --> 00:10:38.560
désactivé.

00:10:39.530 --> 00:10:48.530
Et je dirai de toujours utiliser la dernière version 2022 car c'est sur cela que mon projet est construit et je le ferai

00:10:48.530 --> 00:10:50.900
utilisez un serveur Windows ici.

00:10:51.870 --> 00:10:57.570
Je ne fais aucune build sur iOS ou Android, je n'ai donc pas besoin de profiter de la configuration supplémentaire

00:10:57.570 --> 00:10:57.930
là.

00:10:57.930 --> 00:11:00.690
Mais la version Xcode pour iOS est ici.

00:11:00.690 --> 00:11:04.170
Par exemple, vous pouvez ignorer une grande partie de ces éléments lors de la configuration.

00:11:05.060 --> 00:11:10.720
Maintenant qu'il poursuit la configuration du build, cela me permet de choisir un ordinateur plus ou moins puissant.

00:11:10.730 --> 00:11:14.060
Je ne cherche pas à faire de builds payants ici.

00:11:14.090 --> 00:11:18.590
Ceci n’est pas destiné à un cas d’utilisation réel, donc je ne vais pas y réfléchir trop profondément.

00:11:18.590 --> 00:11:24.440
Je vais simplement utiliser le niveau gratuit éligible, puis je pourrai choisir ici comme l'une de mes captures d'écran mentionnées.

00:11:24.440 --> 00:11:29.300
Créez ou configurez automatiquement un calendrier de construction répétitif.

00:11:30.300 --> 00:11:30.820
Mhm.

00:11:31.200 --> 00:11:35.880
Disons que je voulais faire une construction automatique lorsque votre référentiel est mis à jour.

00:11:37.090 --> 00:11:39.300
Ensuite, nous allons enregistrer cette configuration.

00:11:45.430 --> 00:11:47.230
D'accord, nous l'avons là.

00:11:50.480 --> 00:11:55.580
Maintenant, en continuant avec les paramètres de l'automatisation de la construction, nous pouvons voir que sous la mise en cache, nous pouvons avoir

00:11:55.580 --> 00:11:56.660
ne pas mettre en cache.

00:11:57.290 --> 00:12:01.280
Cachez uniquement la bibliothèque ou mettez en cache l’intégralité du projet.

00:12:01.430 --> 00:12:09.890
Si nous ne choisissons pas de cache, chaque build prendra plus de temps, mais il y aura moins de risques d'erreur.

00:12:09.890 --> 00:12:13.230
car il n'utilise aucun fichier de cache plus ancien.

00:12:13.250 --> 00:12:20.750
Si je mets en cache uniquement le répertoire de la bibliothèque, la toute première version n'en bénéficiera pas car elle a d'abord été

00:12:20.750 --> 00:12:27.800
doit construire le projet et le mettre en cache, mais chaque projet construit après sera plus rapide que

00:12:27.800 --> 00:12:32.900
le premier car il n’est pas nécessaire de le reconstruire à chaque fois.

00:12:33.020 --> 00:12:39.260
L'un des dangers de cette procédure est que cela pourrait potentiellement utiliser d'anciens fichiers et donner un

00:12:39.260 --> 00:12:44.240
mauvais résultat, mais en général, nous comprenons simplement ce risque comme étant possible.

00:12:44.240 --> 00:12:47.660
Et mon approche serait de mettre en cache le répertoire de la bibliothèque.

00:12:47.660 --> 00:12:57.230
Et si jamais vous ne savez pas pourquoi le projet ne parvient pas à se construire ou pourquoi les tests réussissent dans votre région

00:12:57.230 --> 00:13:01.520
éditeur Unity, mais ils ne sont pas transmis dans la version cloud, alors peut-être que je désactiverais le cache dans

00:13:01.520 --> 00:13:02.720
cette situation.

00:13:03.390 --> 00:13:04.890
Donc ici, j'utiliserai uniquement de l'argent liquide.

00:13:04.890 --> 00:13:05.640
Bibliothèque.

00:13:09.610 --> 00:13:11.500
Puis ici sous construire la consommation.

00:13:11.500 --> 00:13:16.490
Étant donné que ces versions font partie d’un scénario potentiellement payant au fur et à mesure.

00:13:16.510 --> 00:13:18.130
Jetez un œil à ces informations.

00:13:18.160 --> 00:13:24.250
Vous souhaitez ajouter toutes sortes de limites à la rapidité avec laquelle vos builds peuvent être construits, pour vous épargner du monde réel

00:13:24.250 --> 00:13:24.700
argent.

00:13:24.730 --> 00:13:30.220
Ici, dans les configurations de build, nous pouvons voir qu'il y a certaines options que nous souhaitons examiner pour les tests.

00:13:30.400 --> 00:13:34.210
Donc, si je fais défiler vers le bas, nous voyons le résultat de la construction.

00:13:34.240 --> 00:13:44.080
Nous voyons la section de mise en cache que nous avons vue précédemment, certains paramètres de dépendance spécifiques, des hooks de script et

00:13:44.080 --> 00:13:44.620
plus.

00:13:45.130 --> 00:13:50.110
La chose importante que nous voulons atteindre ici pour nos besoins est d'exécuter les tests.

00:13:50.110 --> 00:13:54.310
Nous exécuterons les tests du mode édition et le test du mode lecture.

00:13:54.340 --> 00:14:01.840
Nous voulons marquer l'échec de la construction si le test échoue, afin de ne transmettre et de livrer que le code qui

00:14:01.840 --> 00:14:03.820
a réussi tous nos tests.

00:14:04.000 --> 00:14:08.080
Il se peut que vous vous retrouviez dans une situation où un test connu échoue.

00:14:08.080 --> 00:14:11.020
Vous savez pourquoi cela échoue et vous envisagez de le réparer.

00:14:11.020 --> 00:14:17.590
Vous pouvez donc choisir d'avoir des tests qui échouent, et non d'échouer l'ensemble de la construction dans ces moments-là.

00:14:17.590 --> 00:14:21.160
Donc, avoir votre configuration ressemble à ceci est probablement le meilleur.

00:14:21.190 --> 00:14:28.420
Maintenant, lorsque je vais sur la page Historique des builds ici, cela me permet de construire localement et de télécharger la build ici.

00:14:28.420 --> 00:14:36.040
afin que vous puissiez le distribuer ou laisser le développement ou le déploiement continu prendre le relais.

00:14:36.550 --> 00:14:42.040
Ou vous pouvez effectuer la construction ici automatiquement, ce qui, je pense, est probablement beaucoup plus probable le cas d'utilisation.

00:14:42.040 --> 00:14:48.100
N'oubliez donc pas que j'ai choisi de construire automatiquement chaque fois que la branche principale est mise à jour.

00:14:48.100 --> 00:14:49.840
Cela se ferait donc automatiquement.

00:14:49.840 --> 00:14:56.530
J'aurais pu faire une construction automatique tous les soirs à 1 heure du matin, quels que soient les changements.

00:14:56.560 --> 00:14:57.640
Vous pouvez toujours faire celui-là.

00:14:57.640 --> 00:14:59.410
Alors allons-y et faisons une construction maintenant.

00:15:19.390 --> 00:15:24.040
Et ici, nous pouvons voir les résultats d’une construction réussie.

00:15:24.070 --> 00:15:27.840
Désormais, vous serez généralement averti par e-mail.

00:15:27.850 --> 00:15:30.610
Il y a des paramètres de configuration ici où vous pouvez le faire.

00:15:30.610 --> 00:15:35.890
Vous pouvez donc continuer votre journée sans vraiment penser à ce que fait le serveur de build.

00:15:35.890 --> 00:15:42.130
Et ce n’est que lorsque vous recevez un e-mail confirmant l’échec d’un test ou d’une build que vous réagissez.

00:15:42.880 --> 00:15:48.010
Au cours d'une semaine donnée, vous vous attendez à ce que la majeure partie du trafic entrant provienne de cette notification.

00:15:48.010 --> 00:15:52.390
système pour confirmer que oui, une autre version a fonctionné et qu'elle a bien fonctionné.

00:15:54.760 --> 00:15:59.830
En faisant simplement défiler la page vers le bas, nous pouvons voir un aperçu du journal complet, ce qui sera utile.

00:15:59.830 --> 00:16:01.060
si vous avez des problèmes.

00:16:01.060 --> 00:16:06.880
Vous devez déboguer le journal compact, qui affichera uniquement les erreurs les plus pertinentes.

00:16:07.990 --> 00:16:09.610
Et il y a aussi plus d'informations.

00:16:09.610 --> 00:16:15.550
Vous pouvez voir de nombreux rapports différents sur la façon dont cela s'est passé, puis concernant les tests, vous pouvez voir lesquels

00:16:15.550 --> 00:16:21.520
les tests ont réussi et si certains n'ont pas réussi, vous seriez en mesure de creuser et de comprendre comment les faire fonctionner.

00:16:21.520 --> 00:16:29.620
Eh bien, un flux de travail, si vous voyez une notification défaillante, ce que je ferais, c'est planifier le temps d'ouverture

00:16:29.620 --> 00:16:32.140
cette version particulière du projet.

00:16:32.140 --> 00:16:36.330
Partout dans le contrôle de version, il se trouve, peut-être en fusionnant du code.

00:16:36.340 --> 00:16:42.370
Je l'ouvrirais localement, puis j'exécuterais le test depuis l'intérieur de l'unité, étant capable de déboguer

00:16:42.370 --> 00:16:42.790
eux.

00:16:43.270 --> 00:16:49.930
Voilà donc tout ici pour configurer Unity Cloud Build pour automatiser une build cloud de votre projet, soit

00:16:49.960 --> 00:16:56.170
selon un calendrier régulier déclenché par des événements particuliers, ou en le faisant manuellement dans le tableau de bord.

00:16:56.170 --> 00:17:01.780
Dans tous ces scénarios, nous obtenons un bel historique de toutes nos constructions dans le passé.

00:17:01.780 --> 00:17:08.500
Donc, avoir ce système automatisé mis en place, et avoir, espérons-le, des messages plutôt réussis à venir,

00:17:08.530 --> 00:17:14.740
vous donne juste assez d'informations sur quand et où la base de code est cassée pour que vous puissiez y accéder et que vous puissiez

00:17:14.740 --> 00:17:16.060
résoudre tous les problèmes.

00:17:16.150 --> 00:17:18.310
C'est tout pour configurer Unity Cloud Build.

00:17:18.310 --> 00:17:19.060
Merci.