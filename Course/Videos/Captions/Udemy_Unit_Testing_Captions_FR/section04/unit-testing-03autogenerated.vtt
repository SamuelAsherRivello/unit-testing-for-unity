WEBVTT

00:00.020 --> 00:03.440
Création des tests unitaires, classe de test et méthodes de test.

00:03.440 --> 00:07.100
Voici le code d'une classe de test contenant une méthode de test.

00:07.100 --> 00:12.370
A l'intérieur, nous suivons le paradigme optionnel de arrange, act et assert.

00:12.380 --> 00:14.870
C'est la convention que j'utilise pour tous mes tests.

00:14.870 --> 00:18.980
Nous avons donc vu à quoi ressemble un test et comment exécuter un test existant.

00:19.010 --> 00:20.620
Maintenant, créons notre propre test.

00:20.630 --> 00:22.550
Nous allons ouvrir un projet vide.

00:22.580 --> 00:29.690
Ouvrons la fenêtre Test Runner, créons un dossier de test, une classe de test et une méthode à l'intérieur de ce test.

00:29.720 --> 00:31.610
Nous allons ensuite exécuter le test et voir le résultat.

00:31.610 --> 00:33.920
Nous voici dans un projet relativement vide.

00:33.920 --> 00:37.310
J'ai déjà ajouté le framework de test unity.

00:37.310 --> 00:39.470
Ouvrons la fenêtre d'exécution des tests.

00:39.470 --> 00:46.370
Puisque le projet n'a pas de tests en mode édition ni en mode lecture, chacun de ces onglets offre quelques options

00:46.370 --> 00:47.540
pour nous aider à démarrer.

00:47.540 --> 00:53.480
Tout d'abord, nous allons créer un dossier d'assemblage de test en mode édition en cliquant sur le bouton qui crée un nouveau dossier.

00:53.480 --> 00:59.930
dans notre fenêtre de projet, y compris une configuration d'assemblage pour tester les assemblages unity et la définition de l'assemblage

00:59.930 --> 01:07.220
Le fichier de définition d'assemblage n'entre pas dans le cadre de ce cours, mais en bref, il signale à unity que les choses qui se trouvent dans ce fichier de définition d'assemblage ne sont pas des assemblages.

01:07.220 --> 01:11.630
dossier donné doivent être compilées, doivent être compilées d'une manière unique.

01:11.630 --> 01:16.310
Maintenant que le dossier de l'assemblage de test est configuré, nous pouvons créer notre première classe de test.

01:16.310 --> 01:21.290
Chacune de ces étapes peut être réalisée manuellement sans utiliser la fenêtre, mais je vais continuer en cliquant sur le bouton

01:21.290 --> 01:26.390
bouton suivant ici pour créer un script de test dans le dossier actuel de la fenêtre de projet, qui crée

01:26.420 --> 01:29.460
une nouvelle classe de test et nous donne deux méthodes de test.

01:29.480 --> 01:32.350
Remarquez que tout s'affiche dans la fenêtre du programme de test.

01:32.360 --> 01:33.770
Je vais exécuter tous ces tests.

01:33.770 --> 01:35.040
Tous les tests sont réussis.

01:35.060 --> 01:37.160
Jetons un coup d'oeil au code généré.

01:37.160 --> 01:41.990
À ce stade, vous êtes libre de renommer la classe et ces méthodes comme bon vous semble.

01:41.990 --> 01:45.530
Et bien sûr de faire des copier-coller pour ajouter d'autres méthodes à l'intérieur de la classe.

01:45.530 --> 01:50.840
Il n'y a pas de limite au nombre de méthodes de test que vous pouvez avoir dans une classe de test, mais en général vous utilisez

01:50.840 --> 01:57.890
la classe pour organiser certains sujets, peut-être une classe de test pour chaque classe de production, et ensuite une classe de test pour chaque classe de production, et ensuite une classe de test pour chaque classe de production.

01:57.890 --> 02:00.440
méthode de test pour chaque méthode.

02:00.440 --> 02:03.290
En production, vous voulez tester quelque chose comme ça.

02:03.290 --> 02:07.010
Ces commentaires sont générés automatiquement par unity et sont très utiles.

02:07.520 --> 02:10.310
Je vais passer en revue les points saillants en utilisant le test.

02:10.640 --> 02:15.740
L'utilisation de l'attribut test nous permet d'effectuer un test normal en mode édition.

02:15.740 --> 02:22.100
L'utilisation de l'attribut unity test nous permet d'exécuter un test sur plusieurs images.

02:22.100 --> 02:26.630
J'ai déjà mentionné que l'utilisation de unity test est plus adaptée au mode lecture.

02:26.660 --> 02:31.160
Vous avez beaucoup plus d'options sur le type de fonctionnalité asynchrone que vous pouvez faire ici.

02:31.160 --> 02:38.060
C'est en effet possible ici, et comme le suggère le commentaire, vous pouvez utiliser yield return null pour sauter une frame.

02:38.060 --> 02:42.920
Par exemple, faire le setup, puis attendre une frame et faire le test.

02:42.920 --> 02:43.910
Quelque chose comme ça.

02:43.910 --> 02:46.220
Par exemple, le code d'installation.

02:46.220 --> 02:47.660
Attente d'une image.

02:48.220 --> 02:52.240
Et ensuite faire l'assertion, quelque chose comme ça ici, dans l'unité.

02:52.240 --> 02:54.580
Je vais tabuler sur le.

02:55.200 --> 02:57.720
Play mode et suivre les mêmes étapes.

02:57.720 --> 03:03.870
Tout d'abord, nous allons créer un dossier d'assemblage de test de mode de jeu, puis je vais créer un script de test.

03:03.870 --> 03:04.710
Dans ce dossier.

03:04.710 --> 03:09.840
Nous pouvons voir dans le programme d'exécution des tests que nous avons une classe de test qui contient deux méthodes de test.

03:10.350 --> 03:13.250
Je lance tous les tests et nous voyons que tout passe.

03:13.260 --> 03:15.230
Jetons un coup d'œil au code généré.

03:15.240 --> 03:21.870
Le code généré ici est en fait identique en mode lecture et en mode édition.

03:21.900 --> 03:24.120
Les points de départ sont très similaires.

03:24.120 --> 03:25.050
C'est tout.

03:26.390 --> 03:31.910
Nous commençons à voir qu'avec la fenêtre du test runner et juste un peu de C dièse ajouté, nous pouvons

03:31.910 --> 03:35.110
pouvons faire plus de choses avec nos projets unity que nous ne l'avons fait auparavant.

03:35.120 --> 03:40.490
Si vous êtes novice en matière de tests unitaires, vous êtes familier avec l'utilisation de unity pour créer du code d'exécution.

03:40.490 --> 03:42.740
Mais tester du code est quelque chose de différent.

03:43.300 --> 03:46.660
Les utilisateurs finaux n'en font jamais l'expérience directe.

03:47.110 --> 03:52.200
Ce code ne s'exécute qu'en mode test et n'est même pas intégré à votre version finale.

03:52.210 --> 03:58.790
Nous commençons à considérer les tests comme une petite fenêtre sur des moments précis d'une application plus vaste.

03:58.810 --> 04:02.930
Tester en se concentrant sur un point précis pour s'assurer d'obtenir des résultats cohérents.

04:02.950 --> 04:08.200
Jusqu'à présent, nous avons surtout parlé de l'ajout de nouveaux tests au code existant.

04:08.230 --> 04:13.300
Ensuite, nous allons voir comment ajouter des tests pendant que nous développons du code avec le développement piloté par les tests.

04:13.330 --> 04:14.110
Merci de votre compréhension.
