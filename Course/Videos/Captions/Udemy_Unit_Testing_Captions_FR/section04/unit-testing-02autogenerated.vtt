WEBVTT

00:00.050 --> 00:03.640
Mise en place de la fenêtre du test runner et des classes de test.

00:03.650 --> 00:07.250
Le code source du cadre de test est disponible via le gestionnaire de paquets.

00:07.250 --> 00:10.800
Vous pouvez ajouter la recherche de paquets pour le cadre de test.

00:10.820 --> 00:15.530
Importer le cadre de test et éventuellement l'outil de couverture de code.

00:15.530 --> 00:21.110
Le cadre de test unity comprend toutes les bibliothèques nécessaires pour tester votre code C-sharp maintenant en tant qu'individu.

00:21.110 --> 00:21.770
ou en équipe.

00:21.770 --> 00:26.540
Si vous êtes novice en matière de tests, vous n'avez pas besoin de tester tout votre code en même temps.

00:26.540 --> 00:32.450
Vous pouvez commencer à tester lentement, au fil du temps. Plus votre code est couvert par des tests, mieux c'est.

00:32.450 --> 00:34.020
vous serez plus confiant.

00:34.040 --> 00:36.320
Quelques façons de l'intégrer dans votre équipe.

00:36.320 --> 00:37.640
C'est facile et agréable.

00:37.820 --> 00:44.540
N'ajoutez-vous des tests que pour les nouvelles fonctionnalités, ou ajoutez des tests aux systèmes clés avant une refonte majeure.

00:44.540 --> 00:48.650
Une bonne façon de commencer est de tester uniquement pendant les corrections de bogues.

00:48.650 --> 00:55.010
Si un utilisateur signale un bogue, vous devez d'abord reproduire l'existence du bogue à l'aide d'un test qui échoue.

00:55.040 --> 00:57.790
Ensuite, vous corrigez le code et le test passe.

00:57.800 --> 01:03.260
Vous pouvez laisser ce test en héritage, afin d'être sûr que ce bogue ne reviendra pas à l'avenir.

01:03.290 --> 01:08.840
Le concept de couverture du code fait référence à la proportion de votre base de code couverte par des tests.

01:08.930 --> 01:16.250
Si vous avez une classe et trois méthodes dans l'ensemble de votre projet, et que toutes les trois ont des tests,

01:16.250 --> 01:18.290
alors vous avez une couverture de 100%.

01:18.290 --> 01:23.480
D'une manière générale, plus la couverture est élevée, plus vous pouvez ouvrir la fenêtre de couverture du code,

01:23.480 --> 01:30.440
exécuter vos tests et vous obtenez des résultats robustes qui vous montrent non seulement le pourcentage par classe et par système,

01:30.440 --> 01:36.830
mais à l'intérieur de chaque classe, vous obtenez une lecture ligne par ligne des méthodes qui ont une couverture et de celles qui n'en ont pas.

01:37.130 --> 01:38.300
C'est très utile.

01:38.300 --> 01:43.670
Vous pouvez suivre la proportion de votre code qui est testée, localiser les vulnérabilités que vous avez au cours de vos tests.

01:43.670 --> 01:48.710
processus de test et surveiller l'augmentation de la couverture au fil du temps.

01:48.710 --> 01:52.390
Une fois ces bibliothèques installées, vous pouvez créer votre premier test.

01:52.400 --> 01:58.730
Ouvrez la fenêtre Test Runner, créez un dossier test dans vos assets, créez votre première classe et votre

01:58.730 --> 02:03.890
première méthode de cette classe, ces tests apparaîtront dans la fenêtre du Test Runner à l'endroit suivant

02:03.890 --> 02:06.350
vous pouvez cliquer sur run et les voir s'exécuter.

02:06.350 --> 02:09.080
Voici un exemple de classe de test avec une méthode de test.

02:09.110 --> 02:11.780
Remarquez que cela ressemble à du C sharp tout à fait normal.

02:11.780 --> 02:16.850
L'attribut de test indiqué entre crochets est la sauce secrète.

02:16.850 --> 02:22.220
Ici, le système recherche toutes les méthodes marquées de cet attribut pour les considérer comme des tests.

02:22.220 --> 02:26.600
Comme je l'ai mentionné, les tests sont une forme d'art et il existe de nombreuses façons différentes de les aborder.

02:26.630 --> 02:35.210
Un bon moyen que j'utilise est de diviser chaque méthode en trois sections : arranger, agir et affirmer.

02:35.240 --> 02:39.800
Dans arrange, vous faites une ou plusieurs lignes nécessaires à la mise en place du test.

02:39.800 --> 02:45.650
Dans la partie act, vous exécutez tout ce qui est spécifiquement lié au test, puis vous

02:45.650 --> 02:46.400
l'assert.

02:46.430 --> 02:49.430
Affirmer signifie supposer que quelque chose est vrai.

02:49.430 --> 02:52.280
Le cadre de test est donc fourni par la bibliothèque assert.

02:52.280 --> 02:56.450
Imaginons que nous ayons un système mathématique personnalisé permettant d'additionner deux nombres.

02:56.450 --> 03:01.430
Nous pourrions affirmer que la somme de cinq plus dix est égale à 15.

03:01.430 --> 03:03.860
Et nous considérerions qu'il s'agit d'un test réussi.

03:03.890 --> 03:06.110
Nous l'exécutons et constatons qu'il est réussi.

03:06.110 --> 03:07.520
Voyons cela en action.

03:07.520 --> 03:10.520
J'ouvre un projet unity dont le test est prêt.

03:10.550 --> 03:13.940
Nous allons voir comment cela fonctionne et lancer le test.

03:14.880 --> 03:17.520
Nous voici dans un projet unity vide.

03:17.520 --> 03:20.290
Je vais commencer par mettre en place le cadre de test.

03:20.340 --> 03:22.260
Je vais donc ouvrir le gestionnaire de paquets.

03:26.800 --> 03:30.830
Le gestionnaire de paquets indique les paquets déjà installés.

03:30.850 --> 03:36.610
Il est possible que le projet avec lequel vous commencez ait déjà ajouté le cadre de test.

03:37.190 --> 03:39.960
Mais si ce n'est pas le cas, voici comment l'ajouter vous-même.

03:39.980 --> 03:44.720
Recherchez le framework de test dans le registre Unity et installez la dernière version.

03:44.750 --> 03:51.650
Ensuite, pour les fonctionnalités supplémentaires optionnelles, recherchez dans le registre Unity la couverture du code et installez-la.

03:51.980 --> 03:54.320
Code coverage a quelques échantillons optionnels.

03:54.320 --> 03:55.790
Je ne les installerai pas ici.

03:56.590 --> 04:02.020
En examinant les paquets que nous avons dans le projet, nous voyons à la fois le cadre de test et, optionnellement, if

04:02.020 --> 04:04.020
vous avez choisi de l'installer, la couverture de codage.

04:04.030 --> 04:07.210
Maintenant, ce projet est entièrement compatible avec les tests unitaires.

04:08.940 --> 04:11.520
Pour commencer, nous allons ouvrir la fenêtre du programme de test.

04:11.970 --> 04:14.220
La fenêtre du programme d'essai comporte deux onglets.

04:14.250 --> 04:16.230
Le mode édition et le mode lecture.

04:16.440 --> 04:21.810
Comme nous n'avons pas ajouté de tests, la fenêtre est très utile et offre des options de création cliquables

04:21.810 --> 04:24.270
pour créer des tests pour nous dans une démo ultérieure.

04:24.300 --> 04:26.670
Je vais vous montrer comment créer des tests à partir de zéro.

04:26.880 --> 04:30.180
Pour l'instant, je vais en coller un que j'ai déjà préparé.

04:31.010 --> 04:37.790
Le test présenté ici a été collé à partir de l'exemple de projet mini Max pour le cours afin de nous aider à nous concentrer.

04:37.790 --> 04:40.310
J'ai supprimé tout ce qui n'est pas le test que nous voulons examiner.

04:40.310 --> 04:45.050
Explorons la fenêtre Test Runner, en commençant par le mode d'édition ici dans l'onglet Edit Mode.

04:45.050 --> 04:49.520
Par défaut, tous les tests du projet sont listés dans l'onglet Edit Mode.

04:49.520 --> 04:55.700
Par défaut, tous les tests disponibles dans les dossiers assets et packages sont affichés.

04:55.700 --> 04:59.690
Vous pouvez filtrer par catégorie pour ne voir que certains tests.

04:59.690 --> 05:04.760
Nous n'avons pas beaucoup de tests ici, mais pour les besoins de la démonstration, je vais choisir la catégorie pour nos échantillons.

05:04.760 --> 05:08.600
La fenêtre affiche maintenant une hiérarchie de tous les tests organisés par espace de noms.

05:08.600 --> 05:15.380
Lorsque je développe tous les niveaux inférieurs, je vois la classe de test et une méthode de test en dessous.

05:15.380 --> 05:18.500
Nous pouvons exécuter tous les tests et voir qu'ils passent.

05:18.500 --> 05:22.010
Nous pouvons sélectionner un test individuel et l'exécuter.

05:22.010 --> 05:24.140
Si le test réussit ou échoue.

05:24.140 --> 05:27.470
Nous disposons d'un moyen facile d'accéder au code source grâce à un menu de clic droit.

05:30.070 --> 05:31.810
Voici le code de test complet.

05:32.230 --> 05:34.990
C'est le même que celui que nous avons vu plus tôt dans la présentation.

05:34.990 --> 05:36.280
Passons en revue les points saillants.

05:36.280 --> 05:40.900
Nous disposons d'un attribut de catégorie facultatif qui nous aide à organiser nos tests.

05:41.110 --> 05:43.000
La liste déroulante que j'ai montrée.

05:43.240 --> 05:43.960
Les filtres.

05:43.960 --> 05:47.860
En fonction de cette valeur, vous pouvez avoir plusieurs classes de test dans la même catégorie.

05:47.890 --> 05:50.830
Vous pouvez avoir plusieurs classes de test dans la même catégorie.

05:50.830 --> 05:52.330
Nous avons ensuite l'attribut test.

05:52.330 --> 05:57.100
C'est ce qui indique au cadre de test que cette méthode est en fait une méthode de test.

05:57.820 --> 06:00.590
Sans cela, la méthode n'apparaîtra pas dans la fenêtre du test runner.

06:00.610 --> 06:05.770
Ensuite, nous utilisons le paradigme familier mais optionnel de arrange, act et assert.

06:05.800 --> 06:10.060
Il s'agit simplement d'une convention que j'utilise pour organiser ma logique de test.

06:10.060 --> 06:14.710
De même, lorsque je nomme mes tests, je choisis de les nommer en fonction de ce qui fait l'objet du test.

06:14.740 --> 06:17.560
Quelle est l'attente et quelle est la situation ?

06:17.560 --> 06:23.890
Ici, je teste la méthode add pour savoir si le résultat sera 15 lorsque je passe cinq et dix comme opérandes.

06:23.920 --> 06:25.780
Passons en mode lecture.

06:25.810 --> 06:30.970
L'onglet du mode lecture est très similaire, et il semble qu'il affiche exactement le même test, mais il s'agit de

06:30.970 --> 06:31.280
et non.

06:31.300 --> 06:32.230
Je vais ouvrir la source.

06:32.230 --> 06:34.240
Voici le code source d'un test en mode lecture.

06:34.240 --> 06:35.470
En quoi est-ce différent ?

06:35.500 --> 06:40.240
La principale différence réside dans l'emplacement du code dans la fenêtre du projet.

06:40.270 --> 06:41.500
Je le montrerai dans un instant.

06:41.500 --> 06:47.470
Une différence optionnelle que j'ai choisie est que pour mes tests en mode lecture, j'ajoute la classe avec mode lecture

06:47.500 --> 06:51.530
test, alors qu'en mode éditeur, j'ajoute simplement test.

06:51.550 --> 06:52.870
Cela me permet de m'organiser.

06:52.900 --> 06:56.560
Maintenant, ici pour la démo, je teste exactement le même comportement.

06:56.560 --> 06:58.870
Une fois en mode édition et une fois en mode lecture.

06:58.870 --> 07:01.150
Ce n'est probablement pas nécessaire pour vous.

07:01.180 --> 07:08.170
Vous pouvez plutôt tester par défaut en mode édition et n'utiliser le mode lecture que lorsque vous avez besoin de capturer la lecture.

07:08.170 --> 07:13.480
tels que Start Awake ou la fonctionnalité de l'objet Game.

07:13.510 --> 07:14.860
Détection des collisions.

07:14.860 --> 07:16.840
Autres choses qui ne se produisent qu'au moment de l'exécution.

07:16.840 --> 07:21.040
Comme nous l'avons vu dans le cours, j'utilise la même convention de nommage des méthodes que précédemment.

07:21.040 --> 07:22.060
Notons-en deux.

07:22.150 --> 07:23.920
Notons deux différences essentielles.

07:23.920 --> 07:29.230
Nous utilisons ici un attribut de test d'unité, et non un attribut de test comme nous l'avons vu précédemment.

07:29.230 --> 07:34.300
Et en plus de arrange, act et assert, il y a un paradigme await optionnel.

07:34.300 --> 07:41.050
Ce paradigme est utilisé ici pour démontrer que les tests en mode édition s'exécutent de manière synchrone, alors que les tests en mode lecture s'exécutent de manière synchrone.

07:41.050 --> 07:44.590
peuvent s'exécuter de manière asynchrone.

07:44.590 --> 07:49.750
Si vous avez du code qui nécessite des tests asynchrones, le mode lecture est une excellente option.

07:49.750 --> 07:52.470
Jetons un coup d'œil à la fenêtre du projet pour voir l'organisation.

07:52.480 --> 07:57.940
Remarquez que le test en mode édition se trouve dans un dossier éditeur, et que le test en mode lecture se trouve dans un dossier exécution.

07:57.940 --> 07:58.330
dossier.

07:58.330 --> 08:03.490
Cette différence, ainsi que les différences dans les fichiers de définition de l'assemblage.

08:03.520 --> 08:09.760
À côté de ces tests, le système sait que l'un est un test d'éditeur et l'autre un test de mode de lecture.

08:09.790 --> 08:11.220
Je lance le test du mode lecture.

08:11.230 --> 08:13.300
Enfin, je lance le test de mode de jeu.

08:13.330 --> 08:16.870
La fenêtre d'exécution du test se comporte de la même manière, à une exception près.

08:16.900 --> 08:18.730
Parce qu'il s'agit de tests en mode lecture.

08:18.730 --> 08:25.570
Unity va créer une scène anonyme, exécuter le test en isolation, puis détruire la scène.

08:25.570 --> 08:29.620
Bien que tout cela se passe assez rapidement, vous remarquerez que cela se passe ici comme je l'ai fait.

08:29.620 --> 08:35.890
De plus, lorsque j'appuie sur run all au lieu d'exécuter tous les tests en une milliseconde, par exemple, comme l'indique l'édition

08:35.890 --> 08:39.490
peut faire ici, il faut plusieurs millisecondes pour l'exécuter.

08:39.490 --> 08:46.090
Nous avons ici l'occasion de voir un test s'exécuter, de voir la fenêtre du lanceur de test et de voir les bases.

08:46.120 --> 08:48.970
Ensuite, voyons comment créer nos propres tests.
