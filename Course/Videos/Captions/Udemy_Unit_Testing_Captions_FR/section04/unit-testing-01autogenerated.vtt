WEBVTT

00:00.110 --> 00:01.340
Les tests unitaires.

00:01.340 --> 00:02.190
Vue d'ensemble.

00:02.210 --> 00:04.100
Tout d'abord, un peu de contexte.

00:04.130 --> 00:11.690
Au fur et à mesure que vos projets s'enrichissent de scripts, de méthodes et de complexité, il peut s'avérer difficile d'assurer la sécurité de vos projets.

00:11.690 --> 00:14.510
que le nouveau code ne casse pas l'ancien.

00:14.540 --> 00:19.920
Les tests automatisés peuvent vous aider à vous assurer que votre code fonctionne comme vous le souhaitez.

00:19.940 --> 00:25.940
Les tests automatisés nous aident à découvrir comment et où les bogues se produisent plus tôt dans le processus.

00:25.940 --> 00:31.010
Au lieu d'attendre que les utilisateurs finaux signalent ces bogues, ce qui est beaucoup plus coûteux.

00:31.010 --> 00:36.210
Vous pouvez donc utiliser des architectures MVC sans tests, et vous pouvez utiliser des tests sans...

00:36.230 --> 00:37.550
architecture MVC.

00:37.550 --> 00:40.990
Pourquoi est-il important de parler de ces sujets ensemble ?

00:41.000 --> 00:45.380
Parce que la combinaison de ces deux technologies est incroyablement puissante.

00:45.410 --> 00:51.800
L'utilisation d'une architecture comme MVC permet de s'assurer que votre code est plus découplé, que chaque classe

00:51.800 --> 00:55.000
a un but unique et que les solutions sont plus simples.

00:55.010 --> 00:57.950
Tous ces éléments sont également des caractéristiques d'un code plus facile à tester.

00:57.980 --> 01:04.610
L'ajout de tests à votre projet le rendra plus robuste, plus confiant et encouragera les solutions simples,

01:04.610 --> 01:08.930
surtout lorsqu'ils sont associés au développement piloté par les tests, dont nous allons parler.

01:08.960 --> 01:12.530
L'ajout de tests unitaires à votre projet et à votre flux de travail vous fera gagner du temps.

01:12.530 --> 01:15.440
Cela permet de gagner du temps au niveau de la planification, du développement et de la maintenance.

01:15.470 --> 01:21.170
Il ajoute plus de confiance à votre code, et avec cette confiance, vous pouvez avoir beaucoup plus d'audace dans vos projets.

01:21.170 --> 01:22.370
vos Refactors.

01:22.370 --> 01:28.910
Pensez à exécuter tous vos tests avant un remaniement majeur, puis après, ce qui vous permet de gagner du temps et de donner à votre équipe une plus grande confiance.

01:28.910 --> 01:31.430
que le remaniement a bien fonctionné.

01:31.460 --> 01:33.620
Les tests sont à la fois un art et une science.

01:33.620 --> 01:38.360
Avec davantage de recherche et de pratique, chaque développeur peut développer son propre art.

01:38.360 --> 01:42.980
Il y a aussi les tests de bas niveau, c'est-à-dire les tests au niveau de l'unité.

01:43.370 --> 01:49.040
Les méthodes individuelles, disons, et les pratiques et l'évolution de votre logiciel qui proviendront de

01:49.070 --> 01:55.970
Cela encourage également les discussions à un niveau plus élevé sur les choix architecturaux, les dépendances ou l'évolution du logiciel.

01:55.970 --> 02:00.710
l'absence de celles-ci dans votre code et le degré de couplage ou de découplage de ces systèmes.

02:00.740 --> 02:06.850
Tout cela fait partie d'une conversation plus large qui invite à apporter une bonne organisation à votre logiciel.

02:06.860 --> 02:13.430
Notre premier objectif, surtout lorsque nous sommes novices en matière de tests, est de nous assurer qu'une méthode spécifique possède les caractéristiques souhaitées.

02:13.430 --> 02:14.170
résultats souhaités.

02:14.180 --> 02:20.960
Une fois que c'est fait, vous pouvez maintenant la tester dans des conditions inattendues et des cas particuliers qui peuvent donner lieu à des discussions.

02:20.960 --> 02:24.230
et l'analyse de la structure de la classe elle-même.

02:24.260 --> 02:28.070
Vous pouvez ensuite examiner l'objectif du système dans lequel s'inscrit cette classe.

02:28.070 --> 02:35.330
Et comme je l'ai mentionné, ce type d'analyse nous donne l'occasion et la possibilité d'examiner les grandes catégories d'utilisateurs.

02:35.330 --> 02:37.160
solution à grande échelle que nous avons devant nous.

02:37.160 --> 02:42.260
Dans le domaine des logiciels, il existe de nombreux types de tests et, que vous le sachiez ou non, vous êtes déjà en train de tester des logiciels.

02:42.260 --> 02:43.100
en train de faire des tests.

02:43.130 --> 02:46.820
Parmi les types de tests les plus courants, citons le test de fumée.

02:46.850 --> 02:49.910
Il s'agit d'un test plutôt décontracté qui consiste à se demander si le produit fonctionne.

02:49.910 --> 02:50.630
Pour moi ?

02:50.630 --> 02:55.280
Et pour beaucoup d'entre nous, c'est peut-être le seul type de test de projet que nous faisons.

02:55.900 --> 03:02.920
Chaque fois que vous créez un nouveau code, vous exécutez l'application comme un utilisateur, ou vous jouez au jeu comme un joueur, et vous

03:02.920 --> 03:08.210
voyez si ce chemin particulier à travers l'application ou le jeu fonctionne comme je l'attends ?

03:08.230 --> 03:14.110
Ensuite, il y a les tests utilisateurs, où périodiquement, peut-être après une construction hebdomadaire, vous invitez quelques utilisateurs à participer à un test.

03:14.110 --> 03:16.210
ou des joueurs à essayer le jeu.

03:16.240 --> 03:21.760
Il ne s'agit pas seulement de savoir s'il y a des bogues, mais s'il répond aux attentes de l'utilisateur.

03:21.760 --> 03:22.970
Est-il agréable à jouer ?

03:22.990 --> 03:23.710
Ce genre de choses.

03:23.710 --> 03:30.220
Dans le cas d'un test unitaire, vous examinez une toute petite partie de l'expérience, peut-être un seul

03:30.220 --> 03:37.000
appel de méthode ou une petite série d'appels au fur et à mesure que les systèmes fonctionnent ensemble et vous vous demandez si cela fonctionne comme prévu.

03:37.000 --> 03:37.960
comme il est prévu qu'il fonctionne ?

03:37.990 --> 03:43.180
Comme je l'ai mentionné, nous effectuons déjà des tests de fumée en tant que méthode fondamentale d'approche des projets.

03:43.180 --> 03:45.280
Imaginons un exemple simple.

03:45.280 --> 03:50.170
Si nous avions une application " cliquez sur le bouton " qui a un bouton, et quand vous cliquez dessus, vous gagnez.

03:50.200 --> 03:52.630
Nous pourrions y ajouter du code.

03:52.630 --> 03:54.910
Compilez et exécutez l'expérience.

03:54.940 --> 03:59.500
Cliquez sur le bouton 1 et voyez si le texte de la victoire s'affiche.

03:59.530 --> 04:05.110
Il s'agirait d'un test de fumée, que vous pourriez transmettre à l'utilisateur pour voir si cela fonctionne pour lui.

04:05.260 --> 04:11.340
Dans les deux cas, il s'agit d'un test assez coûteux et d'une utilisation très restreinte du code.

04:11.350 --> 04:11.710
ici.

04:11.710 --> 04:17.470
Dans cet exemple simple, il peut sembler que nous pouvons capturer tous les cas d'utilisation, mais imaginez un jeu plus grand

04:17.470 --> 04:19.900
avec des boucles principales et des méta-boucles.

04:20.050 --> 04:24.370
Vous ne pouvez pas compter sur le développeur ou l'utilisateur, ni sur le test de l'utilisateur.

04:24.400 --> 04:30.070
Tester tous les boutons, toutes les fonctionnalités, toutes les entrées et tous les résultats potentiels.

04:30.070 --> 04:36.430
Lorsqu'ils sont effectués correctement, les tests unitaires permettent d'identifier plus rapidement un plus grand nombre de chemins dans le code, et vous pouvez ainsi

04:36.430 --> 04:39.730
pouvez exécuter cette suite de tests automatiquement plus fréquemment.

04:39.730 --> 04:45.790
Au fil du temps, vous établissez une liste de tests permanents prêts à être exécutés.

04:45.790 --> 04:47.930
code ne casse aucune ancienne fonctionnalité.

04:47.950 --> 04:54.340
Certaines équipes fonctionnent selon les principes du développement agile, ce qui inclut une partie de votre calendrier appelée

04:54.340 --> 04:55.030
un sprint.

04:55.030 --> 05:01.540
Par exemple, toutes les deux semaines, l'équipe s'engage à ajouter de nouvelles fonctionnalités chaque heure, chaque jour, chaque semaine,

05:01.540 --> 05:02.420
ou sprint.

05:02.440 --> 05:07.510
L'équipe peut à nouveau exécuter ces tests automatisés, c'est une excellente occasion de détecter les bogues.

05:07.510 --> 05:09.790
Comment exécutons-nous ces tests exactement ?

05:09.790 --> 05:13.600
Eh bien, unity dispose d'un support de test dans l'éditeur unity.

05:13.630 --> 05:19.510
Il y a une fenêtre dédiée que vous pouvez ouvrir et exécuter manuellement ces tests quand vous le souhaitez.

05:19.540 --> 05:21.100
C'est un bon point de départ.

05:21.130 --> 05:25.750
Bien sûr, l'automatisation est également possible et recommandée pour les projets plus importants.

05:25.750 --> 05:31.690
Il y a des moyens de lier cela à votre contrôle de version, de sorte que chaque fois que vous faites un commit ou que vous faites un commit vers un fichier

05:31.690 --> 05:34.360
certaine branche, ces tests peuvent être exécutés à nouveau.

05:34.600 --> 05:39.020
Unity lui-même offre certains services, notamment Unity Cloud build.

05:39.040 --> 05:45.040
Cela imite l'exécution de ces tests et la construction de votre jeu, mais sur un serveur qui le fait automatiquement

05:45.040 --> 05:47.800
une fois par jour ou à n'importe quelle fréquence.

05:47.800 --> 05:53.620
En ce qui concerne le développement général d'unity, nous connaissons deux modes différents à l'intérieur de l'expérience unity.

05:53.770 --> 05:56.770
Avant d'appuyer sur le bouton de lecture, nous sommes en mode édition.

05:56.770 --> 05:58.210
Une fois que nous avons appuyé sur le bouton de lecture.

05:58.210 --> 06:01.420
Jusqu'à ce que la scène s'arrête, nous sommes en mode lecture.

06:01.480 --> 06:05.650
Avec unity testing, vous pouvez tester dans l'un ou l'autre de ces deux modes.

06:05.650 --> 06:07.870
Il y a ensuite plusieurs façons d'aborder la question.

06:08.260 --> 06:13.480
Certaines des idées de test que vous pourriez avoir ici seraient d'appeler une méthode et de voir si elle vous donne la

06:13.480 --> 06:14.580
résultat attendu.

06:14.590 --> 06:20.470
Supposons que nous ayons une classe de système mathématique avec une méthode d'ajout, et qu'il suffise de passer des paramètres connus pour obtenir le résultat attendu.

06:20.470 --> 06:22.150
voir s'il correspond au résultat connu.

06:22.150 --> 06:27.070
Vous pouvez également avoir des tests qui posent des questions spécifiques sur les fonctionnalités de l'éditeur.

06:27.100 --> 06:33.100
La fenêtre de l'éditeur s'est-elle affichée à la bonne taille ou nos objets de jeu, ou la caméra à la bonne taille ?

06:33.100 --> 06:35.350
avant le début de la scène ?

06:35.350 --> 06:40.900
Faire des tests en mode édition lorsque vous le pouvez est un excellent point de départ, c'est donc ce que nous faisons par défaut.

06:40.900 --> 06:46.930
Les tests en mode lecture sont incroyablement utiles, mais ils s'accompagnent de la complexité supplémentaire du code d'exécution.

06:47.540 --> 06:47.990
Ici.

06:47.990 --> 06:53.330
Vous testez non seulement le fait qu'une certaine méthode renvoie un résultat, mais vous testez également ce résultat dans le cadre plus large de l'application.

06:53.330 --> 06:57.020
cycle de vie des objets du jeu et d'autres concepts de l'unité.

06:57.070 --> 07:03.200
Et si c'est le cas, vous pouvez tester le code qui s'appuie sur awake, start, update, etcetera, des choses qui ne peuvent être testées qu'à l'aide d'un logiciel de test.

07:03.200 --> 07:04.400
exécuter au moment de l'exécution.

07:04.400 --> 07:11.210
Quelques idées de tests ici sont de voir si un prefab, une fois instancié, exécute sa méthode de démarrage correctement

07:11.210 --> 07:12.620
sans aucune exception.

07:12.620 --> 07:14.780
Vous pouvez tester le code dans le temps.

07:15.460 --> 07:19.150
Cette boucle s'exécute-t-elle correctement après quelques secondes ?

07:19.180 --> 07:21.820
Vous pouvez vérifier les interactions physiques en cours d'exécution.

07:21.820 --> 07:28.720
Combien de rebonds une balle aura-t-elle dans votre jeu 3D avant qu'elle ne cesse de tester le facteur de rebond ?

07:28.750 --> 07:30.310
Un peu plus de contexte ici.

07:30.310 --> 07:36.830
Historiquement, unity n'offrait pas de tests intégrés à l'éditeur à l'aide de la fenêtre d'exécution des tests.

07:36.850 --> 07:37.330
Nous verrons bien.

07:37.360 --> 07:43.570
Au cours des nombreuses années qui se sont écoulées depuis le lancement d'unity, cette fonctionnalité a été lentement ajoutée et élargie au fur et à mesure que l'on s'approchait de la fin de l'année.

07:43.570 --> 07:45.100
de la dernière version d'unity.

07:45.130 --> 07:50.500
Nous avons tout ce qu'il faut pour exécuter les types de tests que nous voulons de la manière dont nous le voulons.

07:50.500 --> 07:55.900
Il n'y a jamais eu de meilleur moment pour ajouter des tests unitaires à votre flux de travail, et nous allons voir ensemble comment...

07:55.900 --> 07:56.770
de le faire.

07:57.160 --> 07:57.970
Merci à tous.
