WEBVTT

00:00.530 --> 00:02.180
La structure de l'unité.

00:02.210 --> 00:05.090
Ce cours est divisé en différentes pistes d'apprentissage.

00:05.120 --> 00:10.670
En théorie, nous prendrons du recul et examinerons certains des principes fondamentaux de la conception de logiciels et de jeux.

00:10.670 --> 00:16.970
En ce qui concerne l'éditeur, nous nous intéresserons à unity, l'outil d'édition lui-même, qui est ce que nous, en tant que développeurs

00:16.970 --> 00:19.070
ouvrons et utilisons comme logiciel.

00:19.070 --> 00:24.350
Dans les sections consacrées au code, nous étudierons le langage de programmation C sharp et la façon dont il s'applique au jeu unity.

00:24.350 --> 00:25.100
développement.

00:25.160 --> 00:26.840
Commençons par la théorie.

00:26.870 --> 00:34.100
Le cycle de vie du développement d'un logiciel comprend de nombreuses étapes, nous menant d'une idée à un produit fini.

00:34.100 --> 00:40.400
Il comprend l'analyse des besoins, la planification du projet, la conception du concept, etc.

00:40.400 --> 00:43.640
au développement, aux tests et au déploiement.

00:43.640 --> 00:51.080
Bien que unity soit un outil puissant à toutes ces étapes, nous nous concentrons sur l'utilisation de unity dans le développement,

00:51.110 --> 00:55.280
de développement, de test et de déploiement dans le monde d'unity.

00:55.280 --> 00:57.590
Les concepts sont structurés comme suit.

00:57.590 --> 01:01.040
Au sein d'un projet, vous disposez d'une ou plusieurs scènes.

01:01.490 --> 01:06.500
Chaque scène contient des objets de jeu auxquels sont attachés des composants.

01:06.500 --> 01:14.030
Ces composants peuvent gérer des éléments tels que le moteur de rendu de maillage, le corps rigide audio Collider pour la physique,

01:14.030 --> 01:17.450
les systèmes de particules et, bien sûr, les scripts personnalisés.

01:17.450 --> 01:21.920
L'objet de jeu est une pièce fondamentale du puzzle dans unity.

01:21.920 --> 01:28.880
Il s'agit de tout ce qui est visuel et non visuel, sur lequel nous accrochons nos composants personnalisés et le système d'exploitation d'Unity.

01:28.880 --> 01:30.380
d'Unity.

01:30.410 --> 01:33.650
Prenons l'exemple de cette capture d'écran de jeu.

01:34.230 --> 01:39.780
Nous avons ici une scène de jeu qui est décomposée en plusieurs préfabriqués différents.

01:39.780 --> 01:45.990
Vous pouvez considérer un prefab comme un objet de jeu comportant un ou plusieurs composants stockés en vue de leur réutilisation.

01:45.990 --> 01:51.450
Par exemple, nous voyons ici plusieurs pièces de monnaie, chacune ayant une position et une rotation uniques.

01:51.450 --> 01:58.230
Cependant, la pièce possède également certaines caractéristiques communes, comme la détection des collisions,

01:58.500 --> 02:05.520
Ces caractéristiques communes sont conservées dans le préfabriqué lors de l'organisation du projet et de la création de la pièce.

02:05.520 --> 02:07.260
décider de la structure.

02:07.890 --> 02:14.010
Les équipes choisissent souvent entre les scènes et les préfabriqués pour l'organisation de haut niveau.

02:14.040 --> 02:20.010
Le GameObject est le concept fondamental de toute scène, et bien qu'il puisse y avoir de nombreux composants différents

02:20.040 --> 02:23.940
sur un objet de jeu, le composant de transformation est toujours présent.

02:23.970 --> 02:30.180
Le composant de transformation stocke et manipule les aspects de la position de l'objet dans le monde.

02:30.180 --> 02:34.650
Que l'objet soit graphique ou non, il possède un objet de transformation.

02:34.680 --> 02:38.580
Le code que nous utilisons est le langage d'instructions du logiciel.

02:38.580 --> 02:43.350
Les racines historiques d'Unity sont liées au projet mono.

02:43.380 --> 02:45.600
Il s'agissait d'une version open source du logiciel.

02:45.900 --> 02:47.130
Net.

02:47.160 --> 02:53.760
Vous verrez encore le terme mono utilisé un peu à travers l'API unity, y compris le comportement mono.

02:53.760 --> 02:59.610
Alors que dans le passé, unity proposait plusieurs langages de programmation différents, C sharp est le seul langage de programmation.

02:59.610 --> 03:03.810
maintenant, et bien que unity supporte C-sharp, il ne dépend pas du langage C-sharp.

03:04.020 --> 03:11.250
Net, la version de C-sharp d'Unity est assez robuste et propose un grand nombre de données, de concepts et d'objets différents.

03:11.250 --> 03:12.270
de données, de concepts et de structures.

03:12.270 --> 03:20.130
Les principaux espaces de noms que nous utilisons dans unity sont le moteur unity pour le code d'exécution, l'éditeur unity pour le code d'exécution, et l'éditeur unity pour le code d'exécution.

03:20.130 --> 03:27.630
l'éditeur unity pour le code d'édition, et l'espace de noms system, qui inclut un grand nombre de fonctionnalités différentes qui ne sont pas spécifiques à l'espace de noms unity.

03:27.630 --> 03:32.140
spécifiquement liées à l'unité, mais très utiles, y compris les mathématiques, les bibliothèques, etc.

03:32.160 --> 03:36.540
Voici un exemple de script personnalisé en C sharp à utiliser dans unity.

03:36.570 --> 03:39.150
En commençant par le haut, nous voyons des déclarations d'utilisation.

03:39.150 --> 03:43.920
Celles-ci apportent les espaces de noms que nous devons utiliser dans ce fichier de classe particulier.

03:44.400 --> 03:50.850
Nous voyons ensuite un espace de noms qui nous aide à déclarer et à organiser l'emplacement de ce code dans notre projet.

03:50.880 --> 03:55.710
Ensuite, nous déclarons la classe publique ou l'interface qui définit ce type.

03:55.710 --> 03:59.070
Remarquez que nous étendons ou héritons de Monobehaviour.

03:59.100 --> 04:04.550
À partir de cette portée, nous pouvons accéder à toutes les fonctionnalités de Monobehaviour.

04:04.560 --> 04:07.230
Quelques caractéristiques spécifiques de unity à noter ici.

04:07.260 --> 04:11.400
La possibilité de sérialiser un champ en utilisant l'attribut de champ sérialisé.

04:11.400 --> 04:18.240
Cet attribut peut prendre une valeur publique ou privée et la restituer dans l'inspecteur Unity, de sorte que, pendant que le champ est sérialisé, il est possible de l'afficher dans la fenêtre de l'inspecteur Unity.

04:18.240 --> 04:21.470
le jeu se déroule en direct, nous pouvons modifier ce paramètre.

04:21.480 --> 04:24.630
Cela facilite le prototypage et la conception du jeu.

04:24.630 --> 04:28.350
Le comportement du moniteur s'accompagne de nombreux événements clés que vous pouvez exploiter.

04:28.380 --> 04:35.790
En nommant l'une de vos méthodes awake, vous capturez l'événement du premier réveil de l'objet dans l'environnement

04:35.790 --> 04:36.360
monde.

04:36.360 --> 04:37.950
Cela ne se produit qu'une seule fois.

04:38.340 --> 04:40.830
Ensuite, la méthode start est appelée ici.

04:40.830 --> 04:46.140
Il est bon d'établir d'éventuelles dépendances avec d'autres objets, puis la méthode update est appelée à chaque fois.

04:46.140 --> 04:47.400
trame suivante.

04:47.400 --> 04:52.170
Il s'agit d'un endroit idéal pour la logique d'entrée et la mise à jour des graphiques.

04:52.680 --> 04:58.590
Il ne s'agit là que de quelques-uns des événements ou des substitutions de méthodes dont vous pouvez tirer parti, mais il ne fait aucun doute que ces événements et ces substitutions de méthodes sont les plus importants.

04:58.590 --> 05:00.000
sont parmi les plus importants.

05:00.030 --> 05:00.870
Merci de votre compréhension.
