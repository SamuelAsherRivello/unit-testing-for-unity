WEBVTT

00:00.380 --> 00:02.620
Fonctions pures et vue d'ensemble.

00:02.630 --> 00:06.290
Qu'est-ce qu'une fonction pure, également connue sous le nom de méthode pure ?

00:06.290 --> 00:10.250
Et pourquoi est-elle pertinente dans le cadre du processus de test unitaire ?

00:10.280 --> 00:18.320
Une fonction pure peut être considérée comme une fonction qui a moins d'effets et de dépendances sur d'autres systèmes non liés.

00:18.440 --> 00:24.020
Par sans rapport, j'entends sans rapport direct avec le code dans le corps de la fonction elle-même.

00:24.440 --> 00:31.580
On peut voir ici, en lisant l'écran, que les valeurs de retour sont identiques pour des fonctions identiques.

00:31.580 --> 00:37.850
ce qui signifie que si vous passez une valeur en tant qu'argument, vous obtiendrez toujours la même valeur de retour.

00:37.850 --> 00:41.650
même résultat, et deuxièmement, qu'il n'y a pas d'effets secondaires.

00:41.660 --> 00:50.030
Les effets secondaires sont des résultats indirects ou d'autres systèmes qui sont affectés lors de l'exécution d'un programme donné.

00:50.030 --> 00:50.770
méthode.

00:50.780 --> 00:57.800
Ainsi, plus une fonction est pure, plus elle est isolée et indépendante.

00:57.800 --> 01:03.200
Dans l'exemple de code inclus dans le projet d'exemple, vous verrez quelque chose de similaire à ceci dans la section

01:03.230 --> 01:04.490
base de code C-sharp.

01:04.850 --> 01:07.640
Ici, j'ai mis quelques couleurs pour que nous puissions l'observer.

01:07.640 --> 01:15.650
Imaginons que nous ayons une classe personnalisée appelée Mon système, et qu'une méthode à l'intérieur de cette classe s'appelle

01:15.650 --> 01:16.910
Convertir la valeur.

01:16.940 --> 01:23.810
Remarquez que je passe deux arguments et ces deux valeurs, et seulement ces deux valeurs sont

01:23.810 --> 01:26.630
les entrées directes qui affectent l'opération.

01:26.660 --> 01:34.670
Il n'y a pas de troisième système public statique privé statique non lié que nous voyons en bleu ici.

01:34.670 --> 01:36.140
C'est très simple.

01:36.140 --> 01:38.960
Maintenant, vous pourriez avoir beaucoup plus de lignes de code ici.

01:38.960 --> 01:41.840
Ce n'est pas seulement sa brièveté qui le rend pur.

01:41.840 --> 01:48.860
C'est qu'on voit que le résultat dépend des arguments et seulement de ces arguments.

01:48.860 --> 01:56.930
Donc c'est très pur quand on parle des sorties ou des effets secondaires ici on voit qu'il n'y a pas d'autre

01:56.930 --> 01:58.610
valeurs ne sont définies ici.

01:58.880 --> 02:02.840
Si nous définissons des valeurs temporaires, c'est normal dans une fonction pure.

02:02.840 --> 02:09.620
Mais si nous devions définir des valeurs à l'intérieur du bleu ici sur des systèmes non liés ou sur des variables statiques

02:09.620 --> 02:15.620
qui ont une durée de vie au-delà de cette méthode, ce serait des choses qui la rendraient moins pure.

02:15.620 --> 02:20.840
Nous allons maintenant examiner d'autres diapositives, nous pencher sur la théorie et passer à l'étape suivante.

02:20.840 --> 02:21.440
le code.

02:21.440 --> 02:27.470
Au fur et à mesure que j'introduis et renforce ces concepts, nous allons tous apprendre un peu plus de l'appréciation.

02:27.470 --> 02:29.330
de ce que signifie être une fonction pure.

02:29.330 --> 02:33.140
Voici donc une explication encore plus approfondie.

02:33.140 --> 02:34.310
Je vais la lire à haute voix.

02:34.400 --> 02:41.450
Une fonction pure est généralement plus facile à déboguer, à maintenir et à tester à l'unité pour les raisons suivantes

02:41.450 --> 02:41.930
premièrement.

02:41.930 --> 02:43.670
Il n'a pas d'effets secondaires.

02:43.670 --> 02:49.010
Cela signifie que le comportement est prévisible et cohérent uniquement sur la base de cette entrée.

02:49.010 --> 02:52.640
Comme nous l'avons vu dans l'exemple, il est déterministe.

02:52.640 --> 02:57.140
Cela signifie qu'à partir d'une certaine entrée, nous produisons toujours la même sortie.

02:57.170 --> 03:00.250
Cela signifie qu'il n'y a pas d'autres valeurs qui ne soient pas liées.

03:00.260 --> 03:02.060
Il n'y a pas de hasard.

03:02.060 --> 03:07.400
Si nous transmettons les valeurs trois et dix, nous obtiendrons toujours la valeur 30.

03:07.430 --> 03:13.610
Dans l'exemple précédent, une fonction pure s'exécute également de manière isolée, il n'est donc pas nécessaire de mettre en place et d'exécuter une fonction pure.

03:13.610 --> 03:15.620
gérer les dépendances externes.

03:15.620 --> 03:19.790
Il pourrait s'agir d'un grand nombre d'exemples différents, mais certains d'entre eux concernent les bases de données.

03:19.790 --> 03:27.080
Système de fichiers, ressources réseau, autres classes créées et utilisées par le système.

03:27.080 --> 03:32.600
Une autre raison pour laquelle il est si facile de déboguer et de maintenir les tests unitaires est qu'il y a plus de simplicité dans les tests unitaires.

03:32.600 --> 03:33.530
des tests unitaires.

03:33.530 --> 03:37.610
Vous êtes en mesure de fournir les entrées et d'affirmer les sorties spécifiques.

03:37.610 --> 03:42.560
Il y a moins d'éléments à créer autour du test lui-même.

03:42.560 --> 03:45.080
Enfin, il est modulaire et réutilisable.

03:45.080 --> 03:51.950
Le code qui est une fonction pure et qui est basé sur des fonctions pures a tendance à être plus autonome et portable,

03:51.950 --> 03:56.170
et facilite la réutilisation de la même fonctionnalité dans des contextes différents.

03:56.180 --> 04:01.910
Au fur et à mesure que nous avançons, nous parlons de fonctions pures, comme le thème du cours dans son ensemble,

04:01.910 --> 04:08.690
Je dirais que lorsque votre code est plus facilement testable, c'est bon pour le processus de test, mais plus

04:08.690 --> 04:12.890
largement que le code est simplement mieux conçu.

04:12.890 --> 04:20.450
Ainsi, même si nous ne devions pas tester notre code, si notre code n'a pas d'effet secondaire, est plus déterministe, est

04:20.450 --> 04:28.010
plus isolé, plus modulaire et plus réutilisable, c'est bénéfique pour le code de production lui-même.

04:28.010 --> 04:36.110
Nous constatons donc un flux et un reflux entre les avantages d'une chose testable à l'unité, ainsi que les avantages

04:36.110 --> 04:37.370
d'un code de production.

04:37.370 --> 04:41.120
Si c'est ce qu'est une fonction pure, qu'est-ce qu'une fonction non pure ?

04:41.120 --> 04:44.410
Eh bien, c'est simplement une fonction qui n'est pas aussi pure.

04:44.420 --> 04:49.190
Ce n'est pas non plus une fonction pure à 100 %, une fonction non pure à 100 %.

04:49.190 --> 04:53.780
Lorsque nous parlons d'une fonction donnée, nous pouvons évaluer son niveau de pureté.

04:53.780 --> 04:55.520
Cela peut se situer quelque part au milieu.

04:55.520 --> 04:59.660
L'un des principaux critères d'une fonction non pure est qu'elle possède.

04:59.820 --> 05:03.450
Des entrées indirectes, ce qui signifie qu'il existe une sorte d'état partagé.

05:03.570 --> 05:10.740
Peut-être que nous passons une valeur et qu'il opère sur cette valeur, en plus d'utiliser d'autres dépendances qui sont impures.

05:10.740 --> 05:13.140
et d'avoir des sorties indirectes.

05:13.170 --> 05:14.700
Rappelez-vous notre exemple simple.

05:14.700 --> 05:16.200
Nous en examinerons un autre bientôt.

05:16.200 --> 05:18.940
Il s'agit simplement de multiplier deux nombres et de les retourner.

05:18.960 --> 05:26.460
Il ne fixait aucune valeur de système sans rapport qui resterait stagnante comme une sorte de valeur partagée.

05:26.460 --> 05:26.820
état.

05:27.030 --> 05:33.930
Mais ici, dans le cas d'une fonction non pure, elle peut avoir l'une ou les deux idées d'entrées indirectes

05:33.960 --> 05:35.040
de sorties indirectes.

05:35.040 --> 05:36.690
Voici un exemple très simple.

05:36.690 --> 05:38.430
Cet exemple se trouve également dans le projet d'exemple.

05:38.430 --> 05:41.670
Et voici un exemple de système non pur.

05:41.760 --> 05:43.800
C'est donc un peu différent.

05:43.830 --> 05:47.460
Nous effectuons en quelque sorte la même opération de multiplication.

05:47.460 --> 05:50.490
Mais remarquez ici la méthode de conversion de la valeur.

05:50.490 --> 05:53.910
Elle ne prend pas tous les arguments dont elle a besoin.

05:53.910 --> 05:59.180
Elle prend une valeur et la multiplie par une valeur système existante.

05:59.190 --> 06:03.000
Il s'agit donc d'un exemple d'entrée indirecte.

06:03.030 --> 06:09.210
Le multiplicateur existe avant l'appel de la méthode convert value.

06:09.210 --> 06:13.890
C'est donc la partie entrée indirecte d'une fonction impure.

06:13.920 --> 06:18.840
L'autre partie dont nous avons parlé est la sortie indirecte.

06:18.840 --> 06:20.760
Nous n'en voyons pas d'exemple.

06:20.790 --> 06:24.270
Il n'y a pas d'état modifié qui persiste.

06:24.300 --> 06:26.310
Nous renvoyons une simple valeur.

06:26.310 --> 06:29.100
Et le fait de renvoyer une valeur n'est pas pris en compte.

06:29.100 --> 06:32.640
Nous avons donc une entrée indirecte mais pas de sortie indirecte.

06:32.640 --> 06:35.880
Mais le fait d'avoir toujours l'un de ces éléments ici le rend impur.

06:35.880 --> 06:38.610
Que faisons-nous donc avec ces fonctions non pures ?

06:38.610 --> 06:44.250
Nous avons laissé entendre que les fonctions pures sont plus faciles à tester et présentent de nombreux avantages dans le code de production.

06:44.250 --> 06:45.360
l'utilisation du code de production.

06:45.360 --> 06:50.330
Si nous n'avons pas de fonction pure, que pouvons-nous faire ?

06:50.340 --> 06:56.010
Eh bien, parmi les choses que nous pourrions faire, nous pourrions certainement la laisser seule, la laisser comme impure.

06:56.010 --> 06:57.720
Et c'est souvent ce que nous allons faire.

06:57.720 --> 07:03.570
Mais parfois, lorsque nous envisageons de réaliser les tests unitaires de quelque chose, nous pouvons être encouragés à

07:03.570 --> 07:07.800
à faire un peu de refactoring pour aider ce système à devenir un peu plus pur.

07:07.800 --> 07:13.380
Nous ne pouvons peut-être pas l'atteindre à 100 %, mais il s'agit encore une fois de parler de l'art.

07:13.410 --> 07:18.150
C'est à vous de décider du degré de pureté et d'impureté de votre code.

07:18.180 --> 07:23.580
Maintenant, certains développeurs pourraient théoriquement aborder la question en voulant que tout soit pur tout le temps...

07:23.580 --> 07:24.210
temps.

07:24.510 --> 07:25.620
C'est une approche.

07:25.650 --> 07:29.250
Une autre consiste à créer du code comme vous en aviez l'habitude.

07:29.250 --> 07:32.550
Et s'il s'avère qu'il est impur, vous le laissez impur.

07:32.550 --> 07:38.010
Ce que je veux vous inviter à faire, c'est masser un peu les idées, et être à l'aise pour jouer avec

07:38.010 --> 07:42.810
quelque part au milieu où vous pouvez prendre quelque chose de non pur et le rendre un peu plus pur.

07:42.810 --> 07:47.580
Reconnaître les avantages pour vos tests unitaires ainsi que les avantages pour votre code de production.

07:47.580 --> 07:49.290
Voyons donc ce que nous pouvons faire ici.

07:49.290 --> 07:51.990
Nous pourrions éliminer certains effets secondaires.

07:52.110 --> 07:56.700
Nous pourrions éliminer l'état partagé similaire aux effets secondaires.

07:56.730 --> 07:59.580
Nous pourrions éliminer les dépendances utilisées.

07:59.730 --> 08:04.350
Et nous pouvons nous inviter à avoir une assertion par test.

08:04.380 --> 08:12.270
Cela va nous aider à comprendre que si un test n'affirme qu'une seule chose, alors notre code doit

08:12.270 --> 08:15.270
être assez simple pour répondre à cette assertion.

08:15.360 --> 08:17.640
Nous allons donc jouer un peu avec cela lorsque nous examinerons le code.

08:17.640 --> 08:19.050
Comment pouvons-nous procéder ?

08:19.050 --> 08:23.700
Eh bien, nous pouvons effectuer une partie du remaniement du code de production, en suivant les étapes que nous avons vues dans la section

08:23.700 --> 08:24.630
diapositive précédente.

08:24.630 --> 08:29.730
Par ailleurs, je souhaite introduire un nouveau concept de double test dans la section suivante.

08:29.760 --> 08:30.570
Je vous remercie.
