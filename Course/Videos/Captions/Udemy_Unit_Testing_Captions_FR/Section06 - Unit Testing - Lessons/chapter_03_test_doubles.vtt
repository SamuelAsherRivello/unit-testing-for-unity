WEBVTT

00:00.050 --> 00:02.900
Parlons ici des doubles de test.

00:02.910 --> 00:03.970
Je vais en donner un aperçu.

00:03.980 --> 00:07.940
Commençons par parler de quelques types de tests unitaires.

00:07.940 --> 00:12.020
Il s'agit d'une façon très large et abstraite de considérer vos tests unitaires.

00:12.230 --> 00:13.460
Je vais le lire ici.

00:13.580 --> 00:21.260
Un test unitaire peut être considéré comme solitaire, lorsque le système testé n'a pas de dépendances,

00:21.290 --> 00:26.990
soit sociable, lorsque le système testé a effectivement des dépendances.

00:27.140 --> 00:34.220
Quelque chose de solitaire est un peu plus pur si vous vous souvenez de la leçon sur les fonctions pures, alors que quelque chose de

00:34.220 --> 00:36.200
sociable est plus impur.

00:36.230 --> 00:37.220
Voyons cela.

00:37.220 --> 00:44.150
Dans ce diagramme, imaginons que nous ayons du code de production et que nous voulions mettre quelques tests unitaires solitaires

00:44.150 --> 00:47.780
sur eux maintenant parce que solitaire n'a pas de dépendances.

00:47.810 --> 00:55.150
Remarquez que notre premier test va directement à une et une seule classe dans le code de production.

00:55.160 --> 01:01.970
Et nous avons un autre test solitaire qui teste quelque chose sur une autre classe particulière.

01:01.970 --> 01:06.080
Il s'agit là d'une approche plus solitaire, plus pure.

01:06.080 --> 01:10.280
Comparons maintenant cela à un test d'unité sociable que nous voyons ci-dessous.

01:10.310 --> 01:16.760
Un test sociable peut tester un système qui en lui-même