WEBVTT

00:00.140 --> 00:01.400
Conception du logiciel.

00:01.400 --> 00:02.360
Vue d'ensemble.

00:02.510 --> 00:05.980
Commençons par la théorie des principes de conception.

00:06.020 --> 00:10.620
Les développeurs chevronnés peuvent donner l'impression que c'est facile, mais un code propre n'est pas écrit par hasard.

00:10.640 --> 00:17.330
La création de bons projets repose sur l'utilisation de principes solides, de bons flux de travail et de modèles productifs.

00:17.330 --> 00:18.540
dans votre processus.

00:18.560 --> 00:21.300
Tout d'abord, parlons des principes de conception.

00:21.320 --> 00:24.920
Il s'agit des philosophies qui conduisent à un développement logiciel productif.

00:24.920 --> 00:32.420
Les avantages sont une planification plus rapide, une communication claire et une concentration pendant le développement.

00:32.570 --> 00:37.310
L'histoire de l'informatique regorge de ces principes de conception.

00:37.340 --> 00:39.750
Je vais passer en revue quelques-uns des plus populaires.

00:39.770 --> 00:46.070
C'est une excellente occasion pour vous de faire vos propres recherches sur ceux qui vous sont inconnus, et pour

00:46.070 --> 00:49.280
d'approfondir celles qui vous sont familières.

00:49.280 --> 00:56.150
Commençons par les principes de solidité, où chaque lettre de solidité correspond à un principe de conception.

00:56.330 --> 01:04.430
Le principe de responsabilité unique est le souhait général que chacune de vos classes et structures soit

01:04.430 --> 01:05.990
ne fasse qu'une seule chose.

01:05.990 --> 01:13.910
Le principe ouvert-fermé signifie que chaque classe doit être ouverte à l'extension, mais fermée à la modification.

01:13.910 --> 01:19.160
La programmation orientée objet fait appel à l'héritage et aux interfaces.

01:19.160 --> 01:27.740
Le principe de substitution de Liskov stipule que tout sous-type doit pouvoir être transformé en parent.

01:27.770 --> 01:28.100
type.

01:28.100 --> 01:35.900
Une ségrégation des interfaces signifie que nous ne devons pas appliquer à un type donné plus d'interfaces que nécessaire.

01:35.900 --> 01:41.870
Enfin, l'inversion des dépendances indique que lorsqu'on a affaire à un code élevé et à un code faible dans un système d'information, il est préférable de ne pas appliquer plus d'interfaces qu'il n'en faut.

01:41.870 --> 01:49.190
un système, le code de haut niveau ne doit pas dépendre des implémentations concrètes du code de bas niveau.

01:49.190 --> 01:52.760
Il devrait plutôt utiliser quelque chose comme des interfaces pour l'abstraire.

01:52.760 --> 01:55.060
Parmi les autres concepts populaires, citons

01:55.070 --> 01:56.360
Ne vous répétez pas.

01:56.360 --> 02:02.840
Il s'agit d'un rappel que nous utilisons en tant que développeurs, à savoir que si vous vous retrouvez à copier-coller du code littéral

02:02.840 --> 02:08.780
ou des concepts, il peut y avoir une approche systématique qui nous aide à réutiliser ce code plus efficacement.

02:08.810 --> 02:15.500
Keep it simple nous rappelle qu'il ne faut pas trop compliquer nos solutions et que vous n'en aurez pas besoin.

02:15.500 --> 02:19.460
Nous rappelle qu'il ne faut pas construire aujourd'hui les solutions de demain.

02:20.150 --> 02:21.800
Dans le cadre d'un développement itératif.

02:21.800 --> 02:27.980
Nous voulons résoudre les défis qui se présentent à nous maintenant avec des principes solides et non pas concevoir quelque chose qui

02:27.980 --> 02:30.080
est nécessairement à l'épreuve du temps.

02:30.110 --> 02:36.500
Souvent, nous ne savons pas de quoi l'avenir sera fait, et concevoir pour demain est une complication inutile.

02:36.500 --> 02:42.800
Le simple fait de mettre en pratique les principes énoncés ici et de les appliquer à votre projet vous permettra automatiquement d'atteindre les objectifs suivants

02:42.800 --> 02:49.080
plus d'évolutivité, de maintenabilité et de qualité de vie en tant que développeur.

02:49.100 --> 02:54.800
Lorsque nous réfléchissons à ces principes de conception logicielle dans cette section particulière, nous partons d'un point de vue élevé.

02:54.800 --> 03:00.570
théoriques qui peuvent être plus universels sur les différentes plates-formes de programmation.

03:00.590 --> 03:06.470
Ensuite, nous nous pencherons sur les rouages de l'application, en particulier au sein d'unity.

03:06.470 --> 03:12.920
Mais vous remarquerez cette différence entre ce que nous disons à haut niveau et ce que nous faisons concrètement à bas niveau.

03:12.920 --> 03:18.920
Et grâce à cela, vous pouvez développer votre propre style personnel en déterminant lesquels de ces principes ont un impact sur votre vie.

03:18.920 --> 03:20.930
vie professionnelle quotidienne plus que d'autres.

03:20.960 --> 03:26.510
Nous finirons également par reconnaître certains de ces principes dans les architectures que nous utilisons, et

03:26.510 --> 03:29.990
finalement le code que nous faisons ensemble dans les sections de codage.

03:30.020 --> 03:31.160
C'est tout pour l'instant.

03:31.160 --> 03:31.910
Je vous remercie.
