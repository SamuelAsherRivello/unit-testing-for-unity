WEBVTT

00:00.110 --> 00:06.330
Bonjour et bienvenue à l'Intelligence Artificielle pour le Code de Production incorporant l'IA dans l'unité.

00:06.350 --> 00:09.350
Le développement de jeux peut rationaliser le développement et les tests.

00:09.350 --> 00:11.180
Certains des avantages sont énumérés ici.

00:11.180 --> 00:15.710
Dans cette vidéo, nous allons parler de la génération de code.

00:15.740 --> 00:22.430
La capacité d'analyser et de suggérer la conception de nouveaux systèmes d'optimisation rend votre code plus efficace,

00:22.430 --> 00:25.430
de meilleures performances et de gagner du temps de développement.

00:25.430 --> 00:27.550
Il existe de nombreux outils que vous pouvez utiliser pour cette étape.

00:27.560 --> 00:32.330
Les deux que je vais vous présenter sont ChatGPT et GitHub Copilot.

00:32.540 --> 00:40.520
J'utilise généralement ChatGPT pour poser des questions plus importantes, me donner plus d'échantillons de code et de réponses, alors que

00:40.520 --> 00:47.450
J'utilise le copilote GitHub lorsque j'ai besoin d'une ligne, d'une méthode, de quelque chose de plus petit dans le contexte d'un projet donné.

00:47.450 --> 00:48.470
page de code donnée.

00:48.860 --> 00:51.380
Je continue à faire évoluer ma propre pratique.

00:51.380 --> 00:55.970
Je vais vous montrer un peu comment les deux fonctionnent, et vous pourrez décider par vous-même du flux de travail qui vous convient le mieux.

00:55.970 --> 00:56.780
sens pour vous.

00:56.810 --> 00:59.360
L'un des outils que nous pouvons utiliser est OpenAI.

00:59.390 --> 01:05.240
Comme je l'ai mentionné, vous pouvez cliquer sur le bouton " try ChatGPT " sur le site Web et nous ouvrirons la page d'accueil de l'OpenAI.

01:05.240 --> 01:05.510
chat.

01:05.510 --> 01:13.550
GPT Je suis un utilisateur payant, et il s'agit d'un abonnement mensuel pour obtenir ChatGPT plus, certaines des fonctionnalités

01:13.550 --> 01:19.430
que vous pourriez voir ne sont pas utilisées dans la version gratuite, mais vous pouvez certainement suivre en utilisant la version gratuite

01:19.430 --> 01:20.300
et la vérifier.

01:20.300 --> 01:23.330
L'autre outil que je vais vous présenter est GitHub Copilot.

01:23.330 --> 01:27.350
Cet outil est généralement activé dans votre éditeur de code.

01:27.350 --> 01:33.110
J'utilise writer, mais vous pouvez utiliser Visual Studio, Visual Studio Code ou d'autres outils.

01:33.110 --> 01:36.740
la page de code dans laquelle vous vous trouvez et peut vous donner de meilleures réponses contextuelles.

01:36.740 --> 01:41.390
Je vous suggère d'essayer l'un de ces logiciels ou les deux pour voir si vous aimez le flux.

01:41.420 --> 01:47.510
Je pense qu'avec le temps, ces outils vont évoluer, évoluer rapidement, et que leur prix va baisser.

01:47.510 --> 01:50.870
ou un niveau gratuit sera introduit pour la plupart de ces produits.

01:50.870 --> 01:51.620
En fin de compte.

01:51.620 --> 01:58.160
Lorsque j'ouvre ChatGPT dans le navigateur, j'obtiens cette expérience et je peux commencer la conversation

01:58.160 --> 01:59.210
avec une IA.

01:59.210 --> 02:03.680
Si je veux avoir une conversation complètement séparée, j'ouvre un autre chat.

02:03.710 --> 02:07.910
ChatGPT ne connaît que la conversation que vous avez dans un chat donné.

02:07.910 --> 02:13.370
Ainsi, si j'introduis ici quelques concepts et que j'ouvre ensuite une discussion séparée, il ne connaîtra aucun des concepts de la discussion.

02:13.370 --> 02:14.660
concepts dont j'ai parlé.

02:14.660 --> 02:18.410
En général, je laisse donc un chat ouvert pour chacun des principaux domaines.

02:18.410 --> 02:22.310
Ce que nous voulons faire, c'est commencer par une invite qui dit quelque chose comme ceci.

02:22.490 --> 02:28.340
Je dirai, agissez comme un expert en développement de jeux unity et dites-moi ceci ou cela.

02:28.760 --> 02:34.760
J'ai donc décidé de créer une classe appelée Product Manager qui permet d'ajouter un produit, d'en supprimer un.

02:34.760 --> 02:36.020
et d'obtenir des produits.

02:36.020 --> 02:39.290
Utilisez une liste ou un dictionnaire pour gérer la liste des produits.

02:39.290 --> 02:44.750
Cette liste commence par être vide, vous pouvez donc lui donner juste cette information et elle sait qu'elle sera

02:44.750 --> 02:46.670
un expert en développement de jeux unity.

02:46.700 --> 02:50.240
Il en déduira qu'il doit vous donner des informations C-sharp.

02:50.240 --> 02:51.950
Voyons donc le résultat.

02:51.950 --> 02:53.120
Nous avons obtenu deux réponses complètes.

02:53.120 --> 02:54.500
Voyons ce que nous avons obtenu.

02:54.800 --> 02:59.420
GPT dit que dans unity, vous utiliseriez typiquement C-sharp pour créer une telle classe.

02:59.420 --> 02:59.810
Très bien.

02:59.810 --> 03:00.940
C'est sur la bonne voie.

03:00.950 --> 03:06.500
Voici un exemple de mise en œuvre d'un gestionnaire de produits utilisant une liste pour gérer les produits.

03:06.770 --> 03:10.010
Cela suppose que vous disposiez d'une classe de produits définie ailleurs.

03:10.010 --> 03:14.180
J'ai ajouté que je n'en avais pas nécessairement envie ou besoin, mais j'aime la suggestion.

03:14.180 --> 03:21.680
Il définit d'abord ce qu'est un produit, de sorte qu'il connaît le mot produit et l'application logicielle générale.

03:21.680 --> 03:22.970
d'un produit.

03:22.970 --> 03:29.690
Il peut avoir un nom ou un identifiant, et comme il fait allusion à d'autres propriétés, il dispose du constructeur

03:29.690 --> 03:32.240
et nous pourrions même y ajouter d'autres choses.

03:32.270 --> 03:35.930
Maintenant, je peux copier et coller ceci dans unity et nous pouvons commencer.

03:35.930 --> 03:37.970
Voyons maintenant les autres codes qu'il nous donne.

03:37.970 --> 03:41.120
Voici le gestionnaire de produits qui contient la liste des produits.

03:41.150 --> 03:45.830
Il connaît la différence entre privé et public, et la façon dont nous voulons probablement gérer cela.

03:45.830 --> 03:53.030
Et en général, à ce stade de l'utilisation de ce ChatGPT pour le code, environ un an après le début de la technologie, je suppose que

03:53.030 --> 03:55.910
généralement que le code va se compiler dès le départ.

03:55.910 --> 03:57.830
Il y a parfois un problème.

03:57.830 --> 04:03.260
En particulier, il peut obtenir quelque chose de correct dans le Do dièse, mais ne pas savoir ce qu'est l'unité ou quelque chose comme

04:03.260 --> 04:03.650
cela.

04:03.650 --> 04:08.420
Mais si vous savez ce que vous cherchez et que vous le collez toujours dans unity et que vous l'essayez, vous pourrez

04:08.420 --> 04:13.160
vous aurez rapidement l'impression que c'est correct à 9,599%.

04:14.110 --> 04:17.210
Nous avons ici les fonctions d'ajout de produit, de suppression de produit, etc.

04:17.230 --> 04:20.030
Jetons un coup d'œil à notre configuration unity et collons ceci.

04:20.050 --> 04:25.420
Nous voici donc à l'intérieur de unity. J'ai déjà un joli dossier dans lequel je peux travailler.

04:25.420 --> 04:29.500
À l'intérieur des ateliers, j'ai donc un dossier I.

04:29.500 --> 04:33.070
Et à l'intérieur, j'ai déjà des classes assez vides.

04:33.100 --> 04:37.120
Pour notre exemple d'IA, le script d'exemple d'IA est ici.

04:37.120 --> 04:38.950
Jetons un coup d'œil au code source de ce script.

04:38.980 --> 04:40.540
Voici l'exemple d'IA.

04:40.540 --> 04:45.250
Et comme le dit le commentaire, il est prêt à accueillir un chef de produit.

04:45.250 --> 04:47.410
Mais la configuration est plutôt vide.

04:48.580 --> 04:55.420
Ensuite, j'ai le test runner ici qui montre la catégorie de l'IA, et nous avons quelques tests d'IA différents

04:55.420 --> 04:55.870
ici.

04:55.900 --> 04:57.480
Mettez en place un test vide.

04:57.490 --> 05:02.500
Si nous jetons un coup d'œil au code source du test d'IA, il est plutôt vide.

05:02.500 --> 05:03.550
Cela ressemble à cela.

05:07.570 --> 05:11.170
Et si nous regardons le test du mode I play, il est également assez vide.

05:11.500 --> 05:15.380
Enfin, nous avons ici une classe de gestionnaire de produit qui est prête à recevoir le code.

05:15.400 --> 05:21.130
Je donne ici un exemple quelque peu artificiel dans lequel je sais déjà que je veux un gestionnaire de produit, mais

05:21.130 --> 05:24.520
Je n'ai pas grand-chose d'autre dont il dépend ou avec qui il doit parler.

05:24.550 --> 05:27.010
Il sera donc facile pour nous de l'intégrer.

05:27.040 --> 05:31.690
Vous pouvez imaginer que vous avez un jeu existant avec des centaines de classes existantes, et que vous voulez

05:31.690 --> 05:32.920
ajouter un nouveau système.

05:32.920 --> 05:36.610
Il ne va pas tout savoir de votre projet existant, vous allez donc devoir l'expliquer à

05:36.610 --> 05:36.890
l'expliquer.

05:36.910 --> 05:40.740
Il s'agit donc d'un exemple certes plus simple, mais qui part de zéro.

05:40.750 --> 05:45.640
Mais une chose que je veux mentionner, c'est que j'ai quelque chose comme l'espace de noms ici.

05:45.640 --> 05:52.090
Et probablement lorsque j'interagis avec ChatGPT, je vais coller de ChatGPT à unity.

05:52.120 --> 05:53.260
Je l'utiliserai un peu.

05:53.260 --> 05:58.510
Il se peut que je modifie le code ici, puis je vais copier et coller à nouveau dans ChatGPT.

05:58.510 --> 06:04.180
ChatGPT n'est pas au courant de mon code ici, donc je dois toujours maintenir le chat dans cette fenêtre séparée.

06:04.180 --> 06:05.080
conversation séparée.

06:05.080 --> 06:11.830
L'une des choses que j'ai apprises, c'est que je ne veux pas avoir à coller manuellement certaines sections de

06:11.830 --> 06:14.860
ChatGPT dans mon code et certaines sections en retour.

06:14.860 --> 06:19.000
Pour l'exemple, j'ai déjà déclaré cet espace de noms.

06:19.000 --> 06:19.630
Et ici.

06:19.630 --> 06:24.460
Je vais donc revenir dans ChatGPT et constater qu'il n'a pas d'espace de noms.

06:24.460 --> 06:27.370
Je vais donc dire "bon travail".

06:28.890 --> 06:34.170
Veuillez intégrer ce code dans votre exemple.

06:35.240 --> 06:36.900
Et je vais juste coller cela ici.

06:36.920 --> 06:38.600
Voyons ce que cela a donné.

06:38.600 --> 06:44.390
Il dit certainement d'intégrer la classe du gestionnaire de produit dans l'espace de noms et la structure fournis.

06:44.390 --> 06:48.580
Je vois donc qu'il a ajouté ceci et qu'il a ajouté cela.

06:48.590 --> 06:55.340
C'est juste une petite astuce que je trouve utile, pour que je n'aie pas à ré-ajouter manuellement ceci à chaque fois que j'ai besoin de le faire.

06:55.340 --> 06:56.660
chaque fois que je pose une question.

06:56.660 --> 06:59.210
Je pense qu'au cours de cet exercice, vous comprendrez pourquoi.

06:59.240 --> 07:02.960
Je vais donc copier complètement le code et le coller dans unity.

07:03.080 --> 07:03.680
Et voilà.

07:03.680 --> 07:08.540
C'est collé et je ne vois pas d'erreur de compilation.

07:08.540 --> 07:09.080
Vérifions l'entrée.

07:09.080 --> 07:09.620
Unité.

07:09.650 --> 07:11.270
Unity a recompilé.

07:11.270 --> 07:12.440
Tout se passe bien.

07:12.440 --> 07:19.220
Maintenant, avant de faire des tests, regardons l'exemple I ici et faisons-lui exécuter un exemple simple

07:19.220 --> 07:20.840
de certaines fonctionnalités.

07:20.840 --> 07:28.040
Je vais donc copier l'intégralité de ce script et je vais lui dire de ne pas répéter ce code.

07:29.340 --> 07:33.930
Je crée une nouvelle page de code pour une nouvelle classe.

07:34.080 --> 07:37.770
Inspirez-vous de ceci.

07:37.920 --> 07:40.020
Mettez à jour l'éveil.

07:40.640 --> 07:45.830
Avec une simple démonstration de Product Manager.

07:45.830 --> 07:47.070
Voyons la réponse ici.

07:47.090 --> 07:52.100
Certainement pour créer une nouvelle classe qui démontre l'utilisation de Product Manager dans l'éveil.

07:52.130 --> 07:53.390
Voici l'exemple.

07:53.420 --> 07:55.150
Jetons un coup d'œil au code source.

07:55.160 --> 07:59.800
On voit qu'il a gardé le nom de la classe, le commentaire, l'espace de noms que j'aime bien.

07:59.810 --> 08:03.010
Il a gardé cette partie que je voulais utiliser.

08:03.020 --> 08:07.550
J'ai mis cet attribut ici pour qu'il ne soit pas confondu lors des tests.

08:07.550 --> 08:09.980
Puis j'exécute l'éveil ici.

08:10.070 --> 08:10.810
Ça a l'air bien.

08:10.820 --> 08:14.820
Copions maintenant cela dans notre projet unity et voyons comment cela fonctionne.

08:14.840 --> 08:16.480
Ok, je l'ai collé.

08:16.490 --> 08:17.900
Je ne vois pas d'erreur ici.

08:17.900 --> 08:18.440
Vérifions.

08:18.440 --> 08:18.980
Unité.

08:19.010 --> 08:19.460
Unité.

08:19.460 --> 08:20.150
Recompilé.

08:20.160 --> 08:21.650
Il semble que tout fonctionne bien.

08:21.650 --> 08:23.750
Voici l'exemple déjà présent dans la scène.

08:23.750 --> 08:24.830
Exécutons-le.

08:24.860 --> 08:29.090
Ma console affiche les ID de produits un, deux et trois.

08:29.120 --> 08:30.680
Jetons un coup d'œil au code source.

08:30.680 --> 08:32.860
Passons en revue ce que nous faisons ici.

08:32.870 --> 08:36.190
Nous avons un gestionnaire de produit qui est instancié.

08:36.200 --> 08:37.700
Nous ajoutons trois produits.

08:37.700 --> 08:39.320
Nous appelons la fonction get products.

08:39.320 --> 08:40.730
Puis nous les recrachons.

08:40.760 --> 08:46.910
Il s'agit d'un exemple simple qui fait quelque chose dans un projet assez vide.

08:46.910 --> 08:52.520
Nous sommes donc d'accord sur le fait qu'il est probablement plus facile à intégrer que quelque chose de beaucoup plus tardif dans un projet plus grand et plus complexe.

08:52.520 --> 08:53.090
plus complexe.

08:53.090 --> 08:55.190
Mais regardez comme c'est génial.

08:55.220 --> 08:59.450
Il a été capable de me donner le chef de produit et un exemple de démonstration en plus.

08:59.450 --> 09:06.320
C'est tout pour cette démonstration qui montre comment l'intelligence artificielle, en particulier ChatGPT, peut

09:06.320 --> 09:12.140
nous donner la possibilité d'ajouter un nouveau code de production dans une prochaine vidéo, nous verrons comment l'intelligence artificielle peut aider à améliorer la qualité de la vie.

09:12.140 --> 09:15.140
à créer des tests unitaires au-dessus de ce code de production.

09:15.710 --> 09:16.490
Merci à tous.
