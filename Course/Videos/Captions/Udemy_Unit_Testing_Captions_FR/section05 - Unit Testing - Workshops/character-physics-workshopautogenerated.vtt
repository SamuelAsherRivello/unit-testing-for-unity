WEBVTT

00:00.050 --> 00:02.240
Bonjour et bienvenue à Unit Testing for unity.

00:02.270 --> 00:05.270
Voici notre atelier consacré à la physique des personnages.

00:05.300 --> 00:11.750
Dans les ateliers précédents, nous sommes lentement passés d'un exemple de personnage très simple, se déplaçant à l'aide d'une flèche...

00:11.750 --> 00:17.600
à l'exemple avancé séparant les préoccupations monobéhavioristes et non monobéhavioristes.

00:17.600 --> 00:22.580
Et ici, dans cet exemple, nous allons parler de ce qui se passe si nous dépendons d'un autre système d'unité.

00:22.580 --> 00:23.540
comme la physique.

00:23.540 --> 00:29.360
Et lorsque nous utilisons la physique dans cet exemple particulier, notre mouvement devient plus flou.

00:29.360 --> 00:33.500
Cela signifie que je ne clique pas à gauche et qu'il se met immédiatement en position.

00:33.500 --> 00:35.570
Il se déplace lentement au fil du temps.

00:35.570 --> 00:39.740
Comment pourrions-nous tester la valeur qui change lentement au fil du temps ?

00:39.740 --> 00:42.860
Nous allons donc aborder quelques-unes de ces questions dans le code source.

00:42.860 --> 00:47.930
Pour jeter un coup d'œil à cette démo, nous ouvrons notre éditeur unity et le projet d'exemple.

00:47.930 --> 00:50.660
La scène ici va être la scène physique du personnage.

00:50.660 --> 00:54.330
L'une des choses que nous allons étudier est la manière de tester ces valeurs floues.

00:54.350 --> 01:01.280
Pour moi, les valeurs floues sont des valeurs qui ne changent pas nécessairement de façon instantanée de

01:01.280 --> 01:02.270
A à B.

01:02.270 --> 01:09.500
Elles s'animent lentement dans le temps, comme la position d'un objet ou un score qui se décompte progressivement.

01:09.560 --> 01:14.720
Il s'agit là de domaines dans lesquels vous souhaiteriez pouvoir tester quelque chose au fil du temps, et nous disposons d'une approche facile à mettre en œuvre.

01:14.720 --> 01:15.860
pour le faire.

01:15.860 --> 01:20.360
Ce n'est pas la seule façon de résoudre le problème, mais je pense qu'elle nous aide à apprendre en cours de route.

01:20.360 --> 01:21.410
Jetons donc un coup d'œil.

01:21.410 --> 01:23.060
Nous voici donc dans le projet unity.

01:23.060 --> 01:25.580
Nous avons ouvert l'exemple de physique des personnages.

01:25.580 --> 01:27.140
Exécutons la scène.

01:33.260 --> 01:36.170
Ici, je peux me déplacer à l'aide des touches fléchées.

01:40.030 --> 01:45.610
Et dans les exemples précédents de l'atelier, nous avons vu qu'il cliquait sur chaque clic que je faisais sur la gauche

01:45.610 --> 01:51.040
la position changeait instantanément, mais ici, le mouvement est plus fluide.

01:51.670 --> 01:56.890
Je peux toujours utiliser toutes les touches fléchées pour diriger les différents trafics dans la direction souhaitée, mais l'idée est la suivante

01:56.890 --> 02:00.670
de se déplacer lentement au fil du temps est vraiment la nouvelle situation actuelle.

02:00.670 --> 02:06.430
Il y a de nombreuses façons de faire cela dans unity, mais j'ai choisi d'utiliser le système de physique pour en parler.

02:06.430 --> 02:11.530
un peu de ce qui se passe si nous avons plus de systèmes unity impliqués.

02:11.530 --> 02:13.570
Vous vous souvenez de ce que nous avons étiré ?

02:13.600 --> 02:20.770
L'idée est que, dans un monde idéal, les tests unitaires testent le moins possible de lignes de code.

02:20.770 --> 02:24.400
dépendance, le moins de lignes de code possible à la fois.

02:24.400 --> 02:28.240
Mais bien souvent, notre code de production n'est pas aussi simpliste.

02:28.240 --> 02:30.160
Nous dépendons de différentes choses.

02:30.160 --> 02:35.620
Ainsi, avec le chargeur My Data et les exemples de caractères précédents, nous avons vu quelques-unes des façons de

02:35.650 --> 02:37.750
gérer ces différentes dépendances.

02:37.780 --> 02:40.900
Voici un autre exemple un peu plus complexe que les autres.

02:40.930 --> 02:42.880
Jetons un coup d'œil au code de production.

02:42.880 --> 02:45.760
Nous allons donc examiner l'exemple de la physique des personnages.

02:47.240 --> 02:48.440
Nous l'ouvrons ?

02:49.860 --> 02:53.160
Et ici, nous créons une primitive de personnage.

02:53.970 --> 03:02.490
Ici, nous créons d'abord l'objet de jeu avec le cube en apparence pour la primitive, puis nous ajoutons

03:02.490 --> 03:06.120
le composant du monobehaviour physique du personnage.

03:06.120 --> 03:09.690
Ensuite, nous avons une classe de physique des personnages distincte que nous prenons en compte.

03:09.690 --> 03:15.360
Nous nous séparons donc déjà d'une classe monolithique de comportement unique en deux classes.

03:15.360 --> 03:21.000
C'est donc un bon moyen de rendre notre code plus simpliste et de ne faire qu'une seule chose à la fois.

03:21.000 --> 03:28.260
Nous avons vu dans l'exemple précédent que la plupart des fonctionnalités du Monobehaviour dont nous avions besoin se résumaient à la mise à jour.

03:28.260 --> 03:30.330
C'est la seule chose dont nous devions vraiment nous occuper.

03:30.330 --> 03:35.760
En déplaçant tous les éléments non liés à la mise à jour dans la seconde classe, nous disposons d'un outil plus facile à utiliser.

03:35.760 --> 03:36.360
test.

03:39.080 --> 03:42.210
Dans cet exemple simple, nous nous déplaçons vers une position particulière.

03:42.230 --> 03:46.340
Exécutons maintenant les tests et jetons un coup d'œil au code de production.

03:46.370 --> 03:49.130
Voyons maintenant l'exécution de la sélection.

03:51.190 --> 03:52.480
Tout fonctionne ici.

03:52.500 --> 03:53.500
Tout passe.

03:53.520 --> 03:55.290
Il ne reste plus que le test du mode lecture.

03:55.290 --> 03:59.760
Mais nous avons aussi des tests en mode édition si vous voulez creuser et jeter un coup d'œil à nouveau, parce que nous sommes en train de faire des tests en mode édition.

03:59.760 --> 04:01.600
nous avons affaire à des comportements monoblocs.

04:01.620 --> 04:03.990
Il semble plus approprié d'utiliser un mode de jeu.

04:03.990 --> 04:05.610
C'est donc l'approche que j'ai adoptée ici.

04:05.610 --> 04:09.090
Mais c'est à vous et à votre projet de décider quels systèmes vous voulez tester.

04:09.120 --> 04:10.860
Mode édition et ceux que vous voulez tester.

04:10.890 --> 04:11.430
Mode lecture.

04:18.220 --> 04:23.620
Maintenant que nous avons vu ces tests, jetons un coup d'œil rapide au code source de la classe.

04:23.620 --> 04:25.300
Ensuite, nous regarderons certains des tests qui se trouvent au-dessus.

04:25.330 --> 04:25.510
Nous sommes d'accord.

04:25.510 --> 04:27.380
Nous voici donc dans la physique des caractères.

04:27.400 --> 04:31.520
Nous allons voir que c'est assez similaire au personnage avancé que nous avons vu la dernière fois.

04:31.540 --> 04:35.470
Une fois encore, nous avons séparé la classe Monobehaviour et la classe non monobehaviour.

04:35.470 --> 04:39.250
Voici donc la classe non monobehaviour qui effectue la majeure partie du travail.

04:39.280 --> 04:45.460
Remarquez qu'à l'intérieur de son constructeur, elle prend une référence au Monobehaviour et la stocke, puis

04:45.460 --> 04:50.320
passe également dans le Monobehaviour une référence à cette classe ici.

04:50.320 --> 04:54.550
C'est ainsi qu'il peut appeler le move by à chaque fois qu'il effectue une mise à jour.

04:54.580 --> 04:56.620
Il y a différentes façons d'organiser cela.

04:56.620 --> 05:00.460
Vous pourriez même supprimer la dépendance codée en dur que nous avons l'un envers l'autre ici.

05:00.460 --> 05:04.000
Mais pour des raisons de simplicité dans cet exemple, c'est tout à fait approprié.

05:04.360 --> 05:05.410
En descendant dans le code.

05:05.410 --> 05:08.470
Encore une fois, c'est comme le code avancé dans la plupart des cas.

05:08.500 --> 05:11.290
Je voudrais signaler les endroits où la physique est utilisée.

05:11.290 --> 05:19.540
Donc ici dans le mouvement, au lieu de simplement se déplacer par la position codée en dur sur une instance Taneous update,

05:19.570 --> 05:22.960
nous allons utiliser la position de déplacement ici.

05:22.960 --> 05:28.510
Et puis sous Add force, qui est une nouvelle méthode que j'ai créée et qui va se déplacer en se basant sur la physique

05:28.510 --> 05:29.200
forces.

05:29.200 --> 05:33.250
Imaginons qu'il s'agisse d'un bloc et que nous le poussions d'un côté.

05:33.250 --> 05:39.010
En se basant sur la friction, la masse et la gravité, on sait qu'il y a une sorte de conséquence qui tend vers le haut.

05:39.010 --> 05:41.890
à être une réaction plus floue ici en utilisant la force ajoutée.

05:41.890 --> 05:48.220
Et nous nous déplaçons en ajoutant une force ici, en haut du même fichier de classe, nous voyons le monobehaviour physique

05:48.220 --> 05:49.240
est déclaré.

05:49.240 --> 05:55.210
C'est assez familier dans la mesure où le même caractère avancé que nous avons vu dans le dernier atelier est assez similaire,

05:55.210 --> 05:58.000
mais nous avons ici un corps rigide que nous stockons.

05:58.000 --> 06:04.630
Lorsque cette classe se réveille, nous attachons le corps rigide, puis nous définissons la physique.

06:04.630 --> 06:05.320
valeurs.

06:05.320 --> 06:12.070
Donc, si nous pensons à une sorte de récapitulation au lieu d'avoir un comportement unique qui fait toute la physique

06:12.070 --> 06:16.840
et le mouvement ensemble, nous avons séparé le monobehaviour du non-monobehaviour.

06:16.870 --> 06:23.130
Ensuite, à l'intérieur du monobehaviour, nous réalisons la boucle de mise à jour et nous nous occupons également de certains aspects physiques.

06:23.140 --> 06:29.200
Ensuite, à partir de l'autre, le non-monobehaviour, nous sommes capables de nous déplacer comme nous le voulons et de prendre en compte l'entrée du personnage,

06:29.200 --> 06:31.110
donc de saisir des données au clavier et des choses comme ça.

06:31.120 --> 06:35.560
Il s'agit donc d'une bonne séparation qui nous permet d'aller de l'avant avec ce dont nous avons besoin.

06:36.740 --> 06:40.430
Laissez-moi réfléchir à voix haute si je souhaite mentionner autre chose à ce sujet.

06:40.970 --> 06:43.070
Euh, oui.

06:43.070 --> 06:45.230
J'ai donc évoqué l'idée ici.

06:45.230 --> 06:53.030
Si vous vouliez réduire la dépendance codée en dur que nous avons, chaque classe dépendant de l'autre

06:53.030 --> 06:58.910
et obtenir plus de flexibilité comme nous l'avons vu dans l'exemple du chargeur My Data, vous pourriez certainement déclarer

06:58.910 --> 07:03.320
et l'aborder de cette façon, mais nous n'avons pas besoin de le faire ici.

07:03.320 --> 07:06.020
Nous allons simplement revenir en arrière et exécuter l'exemple une fois de plus.

07:06.020 --> 07:10.340
Ici, dans unity, nous sommes en cours d'exécution et les touches fléchées se déplacent.

07:10.370 --> 07:15.770
Dans les dernières vidéos, nous avons vu des exemples de réduction de la complexité.

07:15.770 --> 07:20.480
Ainsi, la réduction des différentes dépendances offre une certaine flexibilité pour séparer notre code.

07:20.480 --> 07:26.120
Ainsi, pour le bien de cet exemple, qui utilise l'entrée, la physique et les monobehaviours ou d'autres choses de ce genre, je

07:26.120 --> 07:27.250
Je pense que nous avons terminé.

07:27.260 --> 07:27.980
Merci.
