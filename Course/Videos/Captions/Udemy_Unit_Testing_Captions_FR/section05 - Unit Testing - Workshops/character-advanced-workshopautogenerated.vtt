WEBVTT

00:00.260 --> 00:03.380
Bonjour et bienvenue à Unit Testing for unity.

00:03.410 --> 00:07.340
Dans cet atelier, nous examinons la classe de personnage dans une version avancée.

00:07.340 --> 00:09.290
Jetons un coup d'œil à cette démo en action.

00:09.290 --> 00:11.330
Ici, nous allons ouvrir notre unité.

00:11.360 --> 00:13.310
Nous allons ouvrir notre projet d'exemple.

00:13.310 --> 00:18.830
Et nous allons jeter un coup d'œil à une scène à l'intérieur pour la situation avancée du personnage ici, je veux

00:18.830 --> 00:21.620
parler un peu de la séparation des codes.

00:21.650 --> 00:26.420
Plus tôt, dans l'un des ateliers, j'ai parlé des différentes dépendances que l'on peut avoir.

00:26.420 --> 00:28.670
Par exemple, si vous appelez un serveur dorsal.

00:28.670 --> 00:35.840
Dans ce cas, nous avons utilisé une bibliothèque de substitution pour nous moquer et ne pas avoir besoin d'appeler le serveur final.

00:35.870 --> 00:42.230
Il s'agit d'une discussion similaire ici, où nous examinons les dépendances impliquées par une bibliothèque particulière.

00:42.230 --> 00:48.950
scénario de test particulier, et comment sommes-nous conscients de ces différentes dépendances, et que voulons-nous faire à ce sujet ?

00:48.950 --> 00:49.190
de ces dépendances ?

00:49.220 --> 00:51.740
Ici, nous n'allons pas utiliser la bibliothèque de substitution.

00:51.740 --> 00:56.270
Nous allons penser à séparer notre monobehaviour du reste du code et à y jeter un coup d'oeil.

00:56.480 --> 00:58.250
Nous voici donc à l'intérieur de unity.

00:58.580 --> 00:59.750
Nous avons une classe de production.

00:59.750 --> 01:00.560
Jetons-y un coup d'œil.

01:00.560 --> 01:01.160
En cours d'exécution.

01:04.840 --> 01:07.810
Ici, nous voyons que nous pouvons nous déplacer à l'aide des touches fléchées.

01:07.810 --> 01:11.350
Comme dans l'exemple de base, l'expérience de l'utilisateur final est la même.

01:11.350 --> 01:16.630
Il s'agit d'un exemple intéressant : certains changements apportés au code

01:16.630 --> 01:21.550
qualité du code et la testabilité de nos systèmes n'ont pas nécessairement d'impact sur l'utilisateur final.

01:21.580 --> 01:22.680
C'est un point positif.

01:22.690 --> 01:25.570
Jetons donc un coup d'œil au code de production.

01:25.570 --> 01:27.640
Nous allons ouvrir l'exemple de caractère avancé.

01:27.640 --> 01:29.200
Voici un exemple complet.

01:29.200 --> 01:35.140
Ce que nous faisons dans le sillage de cette classe d'exemple, c'est que nous créons une primitive pour le cube.

01:35.140 --> 01:37.600
Nous lui donnons un nom pour des raisons d'organisation.

01:37.690 --> 01:45.310
Ensuite, au lieu d'une ligne ici où nous ajoutons simplement un composant qui a toutes nos fonctionnalités, nous faisons

01:45.340 --> 01:46.480
deux étapes.

01:46.720 --> 01:52.000
Cela me rappelle un peu l'injection de dépendance que nous avons vue dans l'exemple du chargeur de données.

01:52.000 --> 01:55.300
Mais il s'agit d'un cas d'utilisation différent avec des dépendances différentes.

01:55.300 --> 02:00.250
Au lieu d'une seule ligne d'ajout de composant, nous ajoutons un composant.

02:00.250 --> 02:05.590
Puis nous créons notre propre classe avancée de caractère non monobehaviour.

02:05.590 --> 02:07.840
Et nous passons le Monobehaviour.

02:07.840 --> 02:12.700
Nous passons donc la dépendance que le caractère avancé va utiliser.

02:12.730 --> 02:19.240
Maintenant, l'avance de caractère n'est pas un comportement unique, et nous avons donc plus de flexibilité sur la façon dont nous voulons que l'avance de caractère soit utilisée.

02:19.240 --> 02:19.810
de le tester.

02:19.840 --> 02:23.110
Nous pourrions le tester en mode édition, par exemple, plus facilement.

02:23.260 --> 02:28.330
Encore une fois, lorsque vous utilisez des Monobehaviours, c'est plus approprié pour les tests en mode lecture.

02:28.360 --> 02:31.270
Ce n'est pas une règle absolue, mais c'est une façon de voir les choses.

02:31.270 --> 02:37.960
Ici, en séparant notre monobehaviour de notre non-monobehaviour, nous avons un peu plus d'options.

02:37.990 --> 02:43.360
Nous sommes toujours dans un environnement en mode "play play" car il s'agit du code de production.

02:43.360 --> 02:46.270
Entrons et voyons comment notre code source est modifié.

02:46.270 --> 02:48.340
Nous voici donc dans le caractère avancé.

02:48.370 --> 02:50.530
Vous verrez que cela nous est assez familier.

02:50.530 --> 02:56.400
La majeure partie du code ici sera identique à l'exemple de base précédent, à quelques exceptions près.

02:56.410 --> 03:02.980
L'une d'entre elles est que le caractère avancé va prendre une référence au Monobehaviour dans son constructeur.

03:03.010 --> 03:08.200
En effet, il a besoin de savoir certaines choses sur le Monobehaviour, notamment en ce qui concerne sa transformation.

03:08.200 --> 03:09.040
sa position.

03:09.130 --> 03:15.700
Il y a aussi une situation où nous devons utiliser la deuxième ligne et indiquer une référence au Monobehaviour

03:15.700 --> 03:18.130
qui nous renvoie à l'avancement du caractère.

03:18.160 --> 03:24.790
C'est juste pour que le Monobehaviour, à chaque fois qu'il appelle la mise à jour, puisse nous dire de faire le mouvement approprié.

03:24.820 --> 03:30.280
Il y a d'autres façons d'organiser cela, mais pour des raisons de simplicité, nous passons dans le monobehaviour

03:30.280 --> 03:31.660
et nous le gérons de cette façon.

03:31.990 --> 03:34.480
Voyons quels sont les autres changements dans la base de code.

03:35.800 --> 03:38.140
Le type de déplacement est identique à celui de la base.

03:38.170 --> 03:40.360
Le déplacement par entrée est le même.

03:41.260 --> 03:45.610
Ici, le mouvement par code de touche est très similaire, voire identique.

03:46.480 --> 03:52.930
Et ici, dans le déplacement vers et le déplacement par, vous pouvez remarquer que nous obtenons et définissons la position

03:52.930 --> 03:55.630
sur la transformation du Monobehaviour.

03:55.630 --> 04:02.590
Encore une fois, nous avons une classe non monobehaviour qui fait ce qu'elle peut faire sans dépendre de

04:02.590 --> 04:08.130
Monobehaviour et ce n'est que dans les endroits les plus nécessaires qu'elle s'adresse au Monobehaviour.

04:08.140 --> 04:14.140
Cette séparation commence à nous aider à réfléchir à la façon dont nous pourrions tester uniquement le monobehaviour si nous le pouvions,

04:14.170 --> 04:17.140
comment pourrions-nous tester uniquement le comportement non monobloc si nous le pouvions ?

04:17.170 --> 04:22.570
Ce n'est pas un exemple parfait, car il s'agit d'une étape intermédiaire dans l'apprentissage de la méthode

04:22.570 --> 04:24.370
comment les séparer correctement.

04:24.370 --> 04:25.900
Mais je pense que c'est un bon apprentissage.

04:25.900 --> 04:29.800
Regardez donc le code source ici pour le caractère avancé.

04:29.800 --> 04:33.880
Comparez-le à character Basic sur votre propre temps et voyez les différences.

04:34.030 --> 04:36.910
Regardons ensuite l'exemple que nous faisons.

04:36.910 --> 04:37.240
Encore une fois.

04:37.270 --> 04:38.830
Voici l'exemple que nous avons vu.

04:38.830 --> 04:40.000
Il s'agit donc de ces deux lignes.

04:40.000 --> 04:41.200
C'est vraiment la clé.

04:41.230 --> 04:47.290
Nous allons ajouter un composant du Monobehaviour avancé sur notre objet de jeu.

04:47.290 --> 04:49.580
Puis nous allons créer un nouveau personnage avancé.

04:49.580 --> 04:50.740
C'est une étape distincte.

04:50.740 --> 04:54.310
On pourrait donc imaginer que nous soyons en mesure de tester ces deux choses isolément.

04:54.310 --> 04:56.650
Or, elles sont très dépendantes l'une de l'autre.

04:56.680 --> 04:58.390
Il y a des moyens de masser cela.

04:58.390 --> 05:01.300
Pour que l'un ne dépende pas directement de l'autre.

05:01.300 --> 05:07.660
Ou nous pourrions faire quelque chose comme nous l'avons fait dans l'exemple du chargeur de données et utiliser une bibliothèque de substitution de sorte que

05:07.660 --> 05:10.080
nous nous moquons de la dépendance à la place.

05:10.090 --> 05:15.730
Mais encore une fois, pour simplifier l'apprentissage de la séparation d'un monobehaviour, je pense que nous avons fait

05:15.730 --> 05:16.510
l'affaire ici.

05:16.510 --> 05:21.430
Vous pouvez exécuter ces tests avec le mode édition et le mode lecture à votre guise et jeter un coup d'oeil à ceci.

05:21.640 --> 05:27.760
Mais pour moi, je pense que nous avons fini de parler des différences entre les comportements monoblocs et les comportements non monoblocs.

05:27.790 --> 05:28.450
Merci à tous.
