WEBVTT

00:00.320 --> 00:03.950
Bonjour et bienvenue aux tests unitaires pour les ateliers Unity.

00:03.950 --> 00:06.800
Ici, nous allons nous intéresser au chargement de la scène.

00:06.800 --> 00:12.860
Traditionnellement, lorsque nous pensons aux tests unitaires, nous pensons à tester la plus petite unité de code avec l'algorithme de test.

00:12.860 --> 00:15.530
le moins de lignes et le moins de dépendances.

00:15.530 --> 00:21.530
À l'opposé du spectre de la simplicité, nous avons la complexité.

00:21.530 --> 00:27.710
L'un des objets fondamentaux de l'unité est la scène elle-même.

00:28.220 --> 00:35.150
Tout ce que vous voyez en tant que joueur dans un jeu se trouve à l'intérieur d'une scène.

00:35.150 --> 00:39.950
Nous pouvons donc effectuer des tests unitaires sur les scripts ou les éléments individuels d'une scène.

00:39.950 --> 00:44.210
Ou, comme nous allons le montrer ici, nous pouvons tester l'ensemble de la scène elle-même.

00:44.210 --> 00:45.710
Pourquoi faire cela ?

00:45.710 --> 00:48.110
Tout d'abord, c'est un bon test de fumée.

00:48.140 --> 00:53.630
Un moyen simple de voir si la scène s'est chargée et si elle s'est chargée sans exception.

00:53.630 --> 00:54.980
Rien que ça, ça vaut le coup.

00:54.980 --> 00:56.690
Réfléchissons aux choses que nous pouvons faire.

00:56.720 --> 01:00.770
Nous pourrions faire des hypothèses sur la structure de la scène et sur les objets qui s'y trouvent.

01:00.770 --> 01:04.340
Nous pouvons faire des hypothèses sur les comportements des objets de cette scène.

01:04.340 --> 01:11.210
Et un flux de travail que je trouve vraiment génial, c'est que vous pouvez laisser ces tests derrière vous et demander aux non-programmeurs de

01:11.210 --> 01:15.590
de votre équipe exécutent les tests avant et après leur travail.

01:15.590 --> 01:21.590
Peut-être qu'un concepteur de niveaux peut travailler avec plus d'assurance, sachant que les nouveaux niveaux ajoutés n'ont pas été testés.

01:21.590 --> 01:25.490
n'interrompent pas les scènes existantes ou les révisions de niveaux existants.

01:25.490 --> 01:31.450
Ne brisez aucune scène non plus, et votre équipe artistique peut être sûre que si elle devait remplacer certaines scènes, elle pourrait les remplacer par d'autres.

01:31.460 --> 01:37.400
ou d'ajouter de nouveaux éléments, rien n'a été cassé du point de vue du programmeur.

01:37.400 --> 01:39.200
À quoi ressemblerait ce flux de travail ?

01:39.200 --> 01:45.680
Je vais vous montrer un exemple de la possibilité de créer un test en mode lecture et de charger une scène entière dans le fichier

01:45.680 --> 01:49.070
ce test de mode de jeu et de faire des hypothèses à l'aide d'assertions.

01:49.070 --> 01:56.030
Par exemple, vous pouvez charger une scène et, dans la scène d'introduction, vérifier que le menu s'affiche correctement.

01:56.030 --> 01:57.620
Nous sommes dans une scène de jeu.

01:57.650 --> 02:03.080
Assurez-vous que l'élément d'arrière-plan, le héros et tous les ennemis ont été instanciés au bon moment.

02:03.080 --> 02:03.470
moment.

02:03.470 --> 02:08.900
Maintenant, parce que nous ouvrons la porte à la grande complexité possible au sein d'une scène donnée, il se peut que nous ayons à faire face à des problèmes de complexité.

02:08.900 --> 02:15.380
de vouloir tout tester dans une scène, mais encore une fois, je pense que même une scène très

02:15.380 --> 02:22.490
conservateur qui se contente de charger la scène et de s'assurer que 1 ou 2 éléments clés sont présents, sans aucune exception.

02:22.490 --> 02:27.400
Thrown est un fantastique fruit à portée de main qui apportera de la valeur à votre équipe.

02:27.410 --> 02:28.580
Jetons un coup d'œil à l'intérieur.

02:28.580 --> 02:29.240
L'unité.

02:29.510 --> 02:31.910
Nous voici à l'intérieur du projet core sample.

02:31.940 --> 02:33.440
Maintenant, dans la fenêtre du programme de test.

02:33.440 --> 02:35.450
Ici, nous avons beaucoup de catégories différentes.

02:35.450 --> 02:42.140
J'ai sélectionné le chargement de scène et vous pouvez voir que nous avons quelques tests d'éditeur et d'exécution.

02:42.140 --> 02:48.380
Parce que les scènes et les choses que je choisis de tester ici sont liées au comportement typique de l'exécution.

02:48.380 --> 02:50.240
de l'unité Monobehaviours.

02:50.240 --> 02:54.470
Par exemple, je vais me concentrer sur le test du temps d'exécution, le test du mode de jeu.

02:54.470 --> 02:56.470
Je vais donc désactiver le test du mode édition.

02:56.480 --> 02:58.220
Regardons ce que nous avons ici.

02:58.220 --> 03:04.970
Ce que nous allons faire, c'est qu'à chaque fois que nous exécuterons ce test particulier, nous vérifierons que

03:04.970 --> 03:12.500
la scène d'introduction contient un héros qui simule le personnage principal du jeu, que la scène d'introduction

03:12.500 --> 03:15.020
se charge sans aucune exception.

03:15.260 --> 03:17.720
Nous répétons ensuite l'opération pour la scène de jeu.

03:17.930 --> 03:23.480
On pourrait imaginer qu'un seul test permette de tester toutes les scènes de manière systématique.

03:23.480 --> 03:30.950
Ce que j'ai choisi de faire ici, c'est de structurer un test pour chacune des fonctionnalités que l'on souhaite, un

03:30.950 --> 03:36.770
pour le héros, un pour les exceptions, et cela pour chacune des scènes, le tout dans un seul test

03:36.770 --> 03:37.310
structure.

03:37.310 --> 03:40.610
Mais vous pouvez décider de la façon de l'étendre en fonction de ce que vous et votre équipe souhaitez faire.

03:40.640 --> 03:41.840
Laissez-moi exécuter ces tests.

03:41.840 --> 03:42.920
Tout se passe bien ici.

03:42.920 --> 03:44.690
Vous pouvez voir que nous avons du trafic sur la console.

03:44.690 --> 03:45.920
Jetons un coup d'oeil au code source.

03:45.920 --> 03:50.990
Dans ce test, je dis que l'intro de la scène 1, qui est le nom de l'une des scènes de l'écran d'accueil, doit être activée.

03:50.990 --> 03:57.710
nous supposerons que le héros n'est pas nul lorsque la scène est chargée, contrairement à certaines de nos plus petites scènes.

03:57.710 --> 04:01.280
tests unitaires, en chargeant la scène et en le faisant bien et gentiment.

04:01.280 --> 04:02.540
Un flux de travail agréable.

04:02.540 --> 04:06.140
Cela implique une certaine configuration, alors parlons-en.

04:06.140 --> 04:09.380
La première chose à faire est d'écouter le gestionnaire de scène pour voir ce qu'il en est.

04:09.380 --> 04:14.840
Hé, la scène que je veux charger a été chargée, alors je vais charger la scène ici.

04:14.840 --> 04:21.830
J'ai créé une variable statique pour les noms de scène, juste pour qu'il soit plus facile pour moi d'isoler et d'utiliser les noms de scène.

04:21.830 --> 04:23.360
les mettre à jour si nécessaire.

04:23.390 --> 04:26.090
Ensuite, je vais m'asseoir ici et attendre que la scène soit chargée.

04:26.090 --> 04:31.580
Cela m'assure de ne pas supposer ou affirmer quoi que ce soit à ce sujet jusqu'à ce que la scène soit chargée.

04:31.580 --> 04:33.020
Cela se produit assez rapidement.

04:33.020 --> 04:37.640
C'est à ce moment-là que je pourrai procéder à l'introspection de la scène.

04:37.670 --> 04:43.700
Une chose très puissante que je peux faire est d'examiner la scène entière une fois qu'elle est chargée, et de rechercher les éléments suivants

04:43.700 --> 04:45.320
existence d'un script donné.

04:45.320 --> 04:52.730
Si j'avais un prefab appelé hero ou un script hero individuel dans cette scène, cela retournerait une valeur.

04:52.730 --> 04:57.020
Je pourrais également obtenir une liste de tous les héros ou de tous les ennemis.

04:57.020 --> 04:59.840
Si j'en ai plusieurs, je peux itérer sur eux et...

04:59.940 --> 05:01.670
Et effectuer le test que je veux.

05:01.680 --> 05:03.960
Je fais un test volontairement maigre ici.

05:03.990 --> 05:06.780
Tout ce que je fais, c'est m'assurer que le héros n'est pas nul.

05:06.810 --> 05:14.100
Si, par exemple, un artiste ou un concepteur de niveau a accidentellement supprimé le héros dans une scène donnée, ceci

05:14.100 --> 05:14.730
échouerait.

05:14.730 --> 05:17.680
Et c'était un bon test pour s'assurer que les éléments sont bien présents.

05:17.700 --> 05:23.550
Vous pouvez imaginer qu'un système à l'intérieur d'unity peut être assez complexe et que vos scènes peuvent être assez complexes.

05:23.550 --> 05:24.000
aussi.

05:24.030 --> 05:26.820
Vous pouvez avoir des centaines, voire des milliers d'objets.

05:26.820 --> 05:33.060
Vous ne voudrez pas nécessairement faire une assertion pour chacun d'entre eux, mais en fonction de la façon dont vous

05:33.060 --> 05:38.460
organiser votre scène, vous pouvez être en mesure de vérifier certaines choses simples comme l'arrière-plan, l'interface utilisateur,

05:38.490 --> 05:45.360
le héros, et une liste d'ennemis qui sont des tests faciles à réaliser en ajoutant simplement quelques lignes ici, et

05:45.360 --> 05:50.340
alors vous êtes plus confiant que lorsque vous et votre équipe travaillez sur le code et faites des modifications à votre version, vous êtes plus confiant que lorsque vous et votre équipe travaillez sur le code et faites des modifications à votre version

05:50.340 --> 05:53.790
de contrôle de version, personne ne casse accidentellement quelque chose.

05:53.790 --> 06:00.630
Rappelez-vous, ce que vous êtes en train de faire maintenant, c'est de jouer la scène ou toutes les scènes et de faire

06:00.630 --> 06:05.780
que vous ne détectez pas visuellement que quelque chose manque ou est cassé ici.

06:05.790 --> 06:07.930
L'automatisation est beaucoup plus fluide.

06:07.950 --> 06:09.290
Jetons un coup d'œil aux autres tests.

06:09.300 --> 06:16.080
Nous en avons un ici qui charge la scène, puis nous nous assurons qu'il ne lève aucune exception.

06:17.110 --> 06:20.960
Ensuite, nous répétons les deux mêmes tests pour toutes les autres scènes.

06:20.980 --> 06:25.630
Jetons maintenant un coup d'oeil au sommet de cette scène de test et voyons quelques-unes des configurations additionnelles qui se trouvent dans la scène de test.

06:25.660 --> 06:26.230
nécessaires.

06:26.260 --> 06:32.410
Une chose est que parce que nous chargeons des scènes avec du code, celles-ci doivent exister dans les paramètres de construction de l'unité.

06:32.410 --> 06:35.530
C'est vrai en production comme en test.

06:35.560 --> 06:41.110
Maintenant, vous et votre équipe pouvez simplement vous assurer qu'il est toujours mis à jour et le faire manuellement dans les paramètres de construction de l'unité.

06:41.110 --> 06:41.950
éditeur unity.

06:41.950 --> 06:44.950
Jetons un coup d'œil à la façon dont nous ferions cela maintenant dans unity.

06:44.980 --> 06:46.840
Vous allez dans File Build Settings.

06:46.840 --> 06:50.020
Et voici la liste de toutes les scènes dont vous avez besoin.

06:50.050 --> 06:53.710
Si vous oubliez d'en ajouter une, le test échouera.

06:53.710 --> 06:59.380
Ainsi, plutôt que de nous demander de nous souvenir de cette étape particulière, ce qui est acceptable si votre équipe veut le faire, nous avons décidé d'ajouter une étape supplémentaire.

06:59.380 --> 07:04.030
cela, je l'automatise et j'ajoute dynamiquement les scènes que nous voulons ajouter.

07:04.060 --> 07:10.990
Pour ce faire, j'utilise des interfaces existantes que unity met à disposition ici pour quand

07:10.990 --> 07:13.930
la construction est mise en place et quand la construction est nettoyée.

07:13.960 --> 07:18.550
Ces attributs sont différents de ceux que nous avons vus dans les tests précédents, mais je n'entrerai pas dans les détails de ces attributs.

07:18.550 --> 07:19.720
la complexité de la situation.

07:19.720 --> 07:25.960
Mais sachez que dans la configuration, ce que je fais est d'ajouter nos deux scènes de test aux paramètres de construction.

07:26.290 --> 07:32.020
Et ici, dans le nettoyage, j'annule ou je supprime les deux scènes qui ont été ajoutées.

07:32.230 --> 07:35.890
Il y a beaucoup de façons différentes d'organiser cela, mais vous pouvez jeter un coup d'œil au code source

07:35.890 --> 07:37.520
et voir s'il y a quelque chose d'autre à faire.

07:37.540 --> 07:44.800
Ici, dans le test, je suppose que je peux appeler load scene sur n'importe quelle scène testable.

07:44.800 --> 07:46.150
et que nous sommes prêts à partir.

07:46.150 --> 07:47.110
Voilà, c'est fait.

07:47.140 --> 07:52.660
C'est assez facile à mettre en place, et si vous vous basez sur ce qui est donné ici dans le projet d'exemple, vous obtiendrez les résultats suivants

07:52.660 --> 07:57.750
pourrez rapidement tester vos scènes pour la production de vos jeux.

07:57.760 --> 07:58.660
Remerciements.
