WEBVTT

00:00.050 --> 00:03.650
Bonjour et bienvenue à cet atelier sur les tests unitaires dans Unity.

00:03.650 --> 00:07.190
Nous allons examiner mon chargeur de données Basic à titre d'exemple.

00:07.190 --> 00:07.820
Entrons dans le vif du sujet.

00:07.820 --> 00:10.670
Dans cette démo, je vais ouvrir unity.

00:10.670 --> 00:16.040
Ouvrez notre projet core sample et regardez la scène de mon data loader basic.

00:16.040 --> 00:21.890
La raison pour laquelle j'ai choisi d'effectuer une sorte de chargement de données est de parler de ce qui suit

00:21.890 --> 00:30.290
si nos tests unitaires, que nous espérons très fiables et isolés et qui s'exécutent rapidement pour le bien de nos clients.

00:30.290 --> 00:32.390
propres méthodologies de test ?

00:32.390 --> 00:38.150
Et s'ils dépendent d'autres systèmes, comment savoir si nous sommes en mesure de tester une seule partie ?

00:38.180 --> 00:46.130
En général, les tests unitaires consistent à tester une seule unité, que l'on peut assimiler à une méthode d'une classe.

00:46.130 --> 00:52.130
Mais notre code est souvent constitué de plusieurs classes dépendant les unes des autres, ce qui peut constituer un défi pour la prise de décision.

00:52.130 --> 00:55.460
comment les séparer et les tester de manière isolée.

00:55.460 --> 01:01.640
Vous pouvez également avoir un système qui dépend de quelque chose d'asynchrone, comme le rendu des graphiques, le rendu de l'image, etc.

01:01.640 --> 01:05.150
audio ou, dans le cas présent, l'appel d'un serveur dorsal.

01:05.150 --> 01:12.770
J'ai donc créé un exemple très simple qui charge des données que vous passez dans une URL, et qui appelle simplement une page web.

01:12.770 --> 01:15.020
et récupère le texte de cette page web.

01:15.050 --> 01:21.800
Il s'agit de l'exemple le plus simple, mais on peut imaginer qu'il s'agit de n'importe quelle logique de serveur appelant à l'envoi de

01:21.800 --> 01:26.930
un score élevé de votre jeu, un appel pour charger des données de joueur, quelque chose en rapport avec le multijoueur.

01:26.930 --> 01:31.690
Tous ces éléments pourraient dépendre d'un trafic réseau asynchrone.

01:31.700 --> 01:32.720
Jetons un coup d'œil.

01:32.810 --> 01:34.640
Nous voici donc dans l'échantillon.

01:34.640 --> 01:36.650
Nous avons mon chargeur de données basic.

01:36.650 --> 01:37.310
Chargez-le.

01:37.310 --> 01:38.330
Lançons la lecture.

01:41.030 --> 01:42.380
Dans cette démo particulière.

01:42.410 --> 01:46.940
Il n'y a pas vraiment de choses intéressantes dans cette démo.

01:46.970 --> 01:49.340
Il n'y a rien de très intéressant qui se passe au niveau du gameplay.

01:49.610 --> 01:53.330
Nous allons aller sur la console ici et nous verrons que cette scène n'a pas d'interface utilisateur.

01:53.360 --> 01:59.660
Nous voyons la console unity, qui montre simplement la longueur de ce qui est renvoyé par le serveur.

01:59.660 --> 02:03.590
Tout ce qui n'est pas zéro signifie qu'une page a été chargée.

02:03.590 --> 02:05.030
Donc très léger.

02:05.030 --> 02:06.080
Test simple.

02:06.080 --> 02:09.550
Je n'ai pas de contrôle d'erreur ou ce genre de choses intégrées.

02:09.560 --> 02:14.030
Pour la simplicité de cette démo, le succès est supposé.

02:14.060 --> 02:18.170
Si vous faites du code de production et que vous appelez des serveurs, vous voudrez ajouter beaucoup plus de fonctionnalités

02:18.170 --> 02:18.800
à cela.

02:18.800 --> 02:23.160
Voilà donc l'expérience d'exécution, qui est assez simple et pas très intéressante.

02:23.180 --> 02:28.940
Maintenant, si nous regardons le lanceur de test ici, nous pouvons définir notre catégorie comme étant mon chargeur de données de base.

02:28.940 --> 02:32.720
Il ne nous montre donc que les tests liés à ce code particulier.

02:32.720 --> 02:34.520
Puis nous passons en mode édition.

02:34.520 --> 02:38.600
Ici encore, nous disposons d'un mode lecture, mais vous pouvez l'explorer par vous-même.

02:38.600 --> 02:42.620
Pour cette démo en particulier, je trouve que le mode édition est plus intéressant.

02:42.620 --> 02:45.050
Je vais donc appuyer sur run all.

02:46.660 --> 02:48.740
Et nous pouvons voir que nous avons réussi.

02:48.760 --> 02:54.910
Ceci indique que le résultat load async contient le doctype when is loaded.

02:54.910 --> 02:56.890
Jetons donc un coup d'œil à un peu de tout cela.

02:57.010 --> 02:59.200
Nous allons ici ouvrir notre source.

03:00.590 --> 03:02.210
Et voici le test.

03:02.300 --> 03:08.000
Il montre que nous créons d'abord une instance de notre chargeur de données basic.

03:08.300 --> 03:12.050
Ensuite, nous écoutons lorsqu'il est chargé.

03:13.000 --> 03:16.260
Nous vérifions les données chargées par le serveur.

03:16.270 --> 03:21.190
Encore une fois, il s'agit simplement d'appeler une page web, et quel que soit le code source de la page web, il est renvoyé sous la forme d'un fichier

03:21.190 --> 03:22.420
un gros bloc de texte.

03:22.420 --> 03:24.760
Cela va donc ressembler à du HTML.

03:24.760 --> 03:30.310
En le regardant pendant que je le créais, j'ai remarqué qu'il indiquait doctype.

03:30.310 --> 03:35.920
Doctype n'est pas quelque chose de très important, en tout cas pas dans le monde de l'unité, mais je me suis dit

03:35.920 --> 03:40.030
c'était un petit test qui me disait si j'avais reçu quelque chose en retour d'une page web ?

03:40.030 --> 03:43.460
Vous pouvez imaginer des tests pour n'importe quelle autre sous-chaîne.

03:43.480 --> 03:50.410
Enfin, j'effectue l'action que nous testons et je charge l'appel asynchrone ici

03:50.410 --> 03:51.700
et je passe l'URL.

03:51.730 --> 03:58.600
Remarquez que l'URL est celle de la page GitHub, mais ce n'est pas si important s'il n'y a rien d'unique.

03:58.600 --> 03:58.960
rien d'unique.

03:58.960 --> 04:06.010
Si vous voulez tester google.com, il suffit d'appeler google.com et d'obtenir la source.

04:06.010 --> 04:07.210
code en retour.

04:07.210 --> 04:12.610
Je ne veux pas vraiment me concentrer sur ce que je fais ici dans le code de production, parce qu'il s'agit, il est vrai, d'un code de production.

04:12.610 --> 04:13.720
exemple simple.

04:13.720 --> 04:19.030
Je voulais juste que ce soit un moyen d'obtenir quelque chose d'asynchrone à l'intérieur d'unity.

04:20.210 --> 04:22.880
Regardons le code source pour bien comprendre.

04:23.880 --> 04:24.330
Ici.

04:24.330 --> 04:24.930
Ce que nous faisons.

04:24.930 --> 04:29.130
Quand j'appelle load, je dis juste, hey, assurez-vous que l'URL n'est pas vide.

04:29.520 --> 04:34.710
Ensuite, j'utilise la requête web d'Unity, qui est une fonctionnalité intégrée.

04:34.710 --> 04:41.880
J'appelle send request, puis je définis le résultat comme étant le texte du gestionnaire de téléchargement.

04:41.910 --> 04:44.220
C'est un moyen simple et peu coûteux.

04:44.220 --> 04:47.400
Recommandé par unity pour appeler des données simples en ligne.

04:47.430 --> 04:48.930
Très simple et direct.

04:48.960 --> 04:53.250
Cela soulève une question : qu'est-ce que nous testons réellement ici ?

04:53.640 --> 04:59.940
J'ai une classe personnalisée appelée mon chargeur de données, mais à l'intérieur, je suis fortement dépendant d'une unité existante.

04:59.970 --> 05:02.550
fonctionnalité de unity web request.

05:02.580 --> 05:06.420
Ensuite, j'appelle une page web, dans ce cas GitHub.

05:06.420 --> 05:08.040
Et c'est là que ça se passe.

05:08.040 --> 05:13.170
Si GitHub était en panne pour la journée, ce test échouerait.

05:13.200 --> 05:14.490
Est-ce approprié ?

05:14.490 --> 05:21.390
Si mon test unitaire est vraiment destiné à tester ma propre méthodologie, ma propre fonctionnalité, je ne devrais pas considérer

05:21.390 --> 05:22.440
qu'il s'agit d'un test qui a échoué.

05:22.440 --> 05:25.230
Si une dépendance sans rapport échoue.

05:25.230 --> 05:27.000
Mais ici, c'est le cas.

05:27.000 --> 05:29.030
J'échouerais si GitHub était en panne.

05:29.040 --> 05:34.830
De plus, j'utilise ici la requête web Unity qui est une fonctionnalité intégrée à unity.

05:34.860 --> 05:41.280
Nous espérons que cela fonctionne à 100% dans toutes les situations, mais il est possible que mon code fonctionne et qu'il n'y ait pas de problème.

05:41.280 --> 05:42.600
son code ne fonctionne pas.

05:42.600 --> 05:44.910
Il y a donc une zone grise.

05:44.910 --> 05:50.070
Quand vous pensez à la conception de vos classes et ensuite à la conception des tests sur ces classes, comment faites-vous ?

05:50.070 --> 05:52.350
savez-vous sur quoi vous devez vous concentrer ?

05:52.350 --> 05:54.780
Les tests, en général.

05:54.780 --> 05:59.940
Et il y a des livres et des livres écrits sur ce sujet de la façon d'aborder l'art des tests unitaires.

05:59.940 --> 06:05.730
Mais d'une manière générale, vous voulez réduire vos dépendances et simplifier le nombre de tests unitaires.

06:05.730 --> 06:07.920
de lignes de code que vous testez.

06:07.920 --> 06:14.880
Il est donc préférable de réduire le code car il est plus simple et plus ciblé et vous savez exactement, de manière isolée, quels sont les éléments suivants

06:14.880 --> 06:16.410
code que vous testez.

06:16.410 --> 06:22.710
Ce n'est pas un exemple parfait, mais pour nous, c'est un bon moyen de commencer et de parler des tests asynchrones.

06:22.710 --> 06:23.340
code en cours d'exécution.

06:23.340 --> 06:25.440
Pour l'instant, nous allons terminer cet exemple.
