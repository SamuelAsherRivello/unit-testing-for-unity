WEBVTT

00:00.290 --> 00:04.310
Bonjour et bienvenue à la série d'ateliers sur les tests unitaires pour Unity.

00:04.460 --> 00:06.770
Ici, nous allons nous intéresser aux préfabriqués.

00:06.800 --> 00:10.940
Jusqu'à ce moment du cours, nous n'avons pas testé les préfabriqués.

00:10.970 --> 00:16.460
Lorsque j'ai voulu tester des monobehaviours, je les ai créés à partir de zéro en utilisant du code

00:16.460 --> 00:18.080
comme indiqué dans les vidéos précédentes.

00:18.080 --> 00:24.440
Mais bien sûr, l'un des éléments fondamentaux du développement d'un jeu dans unity est le prefab.

00:24.680 --> 00:32.300
Les préfabriqués vous permettent de rassembler divers actifs et fonctionnalités, de les placer dans votre projet et de les intégrer à votre projet.

00:32.300 --> 00:38.020
de les réutiliser facilement, soit en les faisant glisser dans la scène, soit en les sauvegardant dans la scène et en les conservant,

00:38.030 --> 00:40.690
soit en les créant dynamiquement avec du code.

00:40.700 --> 00:43.040
Maintenant, pourquoi voudrions-nous tester ces préfabriqués ?

00:43.040 --> 00:48.800
Imaginons que votre jeu utilise un préfabriqué de personnage dans un préfabriqué d'ennemi, par exemple

00:48.800 --> 00:49.900
plusieurs de chaque.

00:49.910 --> 00:58.280
Vous pouvez avoir un test unitaire qui crée juste le joueur et valide qu'il ne lance pas d'exceptions,

00:58.400 --> 01:04.970
Rien que cela vous donne un peu plus de confiance dans le fait que l'actif fonctionne bien dans le temps.

01:04.970 --> 01:10.670
Et lorsque vous collaborez avec d'autres talents non programmateurs, notamment des concepteurs de niveaux et des artistes,

01:10.700 --> 01:14.030
vous savez que ces préfabriqués n'ont pas été accidentellement cassés.

01:14.030 --> 01:17.870
Vous pouvez faire des hypothèses sur la structure en utilisant un test.

01:17.870 --> 01:22.760
Vous pouvez faire des hypothèses sur les champs sérialisés et vérifier qu'ils sont correctement remplis, et vous pouvez

01:22.760 --> 01:25.400
pouvez faire des hypothèses sur le comportement, bien sûr.

01:25.400 --> 01:31.160
Dans l'exemple précédent, qui n'utilisait pas de préfabriqués, j'avais un script de personnage et je devais

01:31.160 --> 01:36.770
vérifiais qu'il pouvait se déplacer correctement dans le monde lorsque j'appelais la fonctionnalité "move by" ou "move to".

01:36.770 --> 01:43.730
Lorsque vous créez des préfabriqués complexes avec des dépendances, vous pouvez appeler des fonctionnalités sur ces préfabriqués.

01:43.730 --> 01:44.300
également.

01:44.300 --> 01:47.990
Maintenant, les tests peuvent couvrir une petite unité de code.

01:48.140 --> 01:54.680
Dans le monde idéal, vous avez peu de lignes et peut-être pas de dépendances jusqu'à un système plus complexe,

01:54.680 --> 01:59.810
qui, si vous savez ce que vous faites lorsque vous effectuez vos tests unitaires, vous permet d'avoir fidèlement une

01:59.810 --> 02:06.200
test qui s'exécute également sur certaines dépendances, et vous donne l'assurance que ces systèmes

02:06.200 --> 02:07.490
fonctionnent bien ensemble.

02:07.520 --> 02:14.120
Un bâtiment préfabriqué est probablement le plus complexe du spectre, et vous allez devoir tester

02:14.120 --> 02:14.270
cela.

02:14.270 --> 02:21.560
Le préfabriqué peut utiliser ses propres composants personnalisés ainsi que des composants unity tels que rigidbody.

02:21.560 --> 02:26.750
Il faut donc veiller à ne pas tester un système trop important lors de la mise en place de ces tests.

02:26.750 --> 02:34.160
Si, par exemple, votre héros utilise un corps rigide et un composant de vol personnalisé, vous voudrez peut-être

02:34.160 --> 02:38.060
tester le composant de vol personnalisé séparément dans son propre test unitaire.

02:38.060 --> 02:42.980
Rappelez-vous qu'il y a toujours des avantages à pouvoir décomposer et réduire les dépendances dans vos tests unitaires.

02:42.980 --> 02:43.460
tests.

02:43.460 --> 02:49.550
Cela dit, nous pouvons effectivement créer un test qui s'exécute sur un préfabriqué entier, y compris ses dépendances.

02:49.550 --> 02:50.240
si nous le souhaitons.

02:50.240 --> 02:52.370
Jetons un coup d'œil à un exemple de ceci dans le code.

02:52.940 --> 02:54.640
Nous voici à l'intérieur de unity.

02:54.650 --> 02:59.720
Si je regarde la fenêtre du test runner ici dans la catégorie, je l'ai déjà réglée sur prefab.

02:59.720 --> 03:05.510
Et ici, dans ce dossier, nous pouvons voir qu'il y a un exemple de préfabriqué.

03:05.510 --> 03:10.520
Ouvrons la scène et jetons un coup d'oeil à cette scène en cours d'exécution.

03:10.520 --> 03:10.850
la scène.

03:13.540 --> 03:18.130
Lorsque j'exécute cette scène, une balle tombe avec les lois de la physique et glisse sur le sol.

03:18.160 --> 03:21.420
Ce n'est pas ce comportement particulier qui nous intéresse.

03:21.430 --> 03:27.760
Je voulais juste mettre un préfabriqué ennemi dans la scène, le voir exister dans le code de production ici.

03:27.760 --> 03:34.750
La simulation serait votre grand menu de jeu, vos paramètres, votre scène, peu importe ce que c'est, et le fait d'avoir quelques

03:34.750 --> 03:39.730
dépendance à l'égard d'un ou de plusieurs comportements mono sur un préfabriqué.

03:39.940 --> 03:43.340
Maintenant que tout cela est en place, voyons comment nous pouvons le tester.

03:43.360 --> 03:49.480
Dans cette scène, j'ai un test d'éditeur et un test d'exécution.

03:49.480 --> 03:55.450
Mais comme il s'agit de tester plus de comportements unity et que nous avons vu que les comportements mono, par exemple, sont

03:55.450 --> 03:57.400
quelque chose que vous voulez tester seulement au moment de l'exécution.

03:57.400 --> 03:59.470
Concentrons-nous ici sur le test du mode lecture.

03:59.470 --> 04:00.820
Je vais donc décocher ce test.

04:01.600 --> 04:06.820
Et ici, j'ai plusieurs choses différentes que nous pouvons faire lorsque ce test de mode de jeu est exécuté, je vérifie que l'ennemi

04:06.820 --> 04:08.380
n'est pas nul.

04:08.410 --> 04:10.420
C'est la quantité de script de comportement.

04:10.450 --> 04:16.330
Ensuite, je teste que l'objet de jeu sur lequel il est assis n'est pas nul, et nous supposons généralement que si le script de comportement est nul, l'objet de jeu n'est pas nul.

04:16.330 --> 04:18.460
l'ennemi existe, l'objet de jeu existe aussi.

04:18.460 --> 04:20.740
Mais ceci n'est qu'un test supplémentaire.

04:20.740 --> 04:23.410
Enfin, nous pouvons vérifier que le corps rigide n'est pas nul.

04:23.410 --> 04:27.670
Ici, nous vérifions principalement la structure de ce que nous avons ici.

04:27.670 --> 04:33.940
Mais on peut aussi vérifier les champs sérialisés, les valeurs publiques initialisées, certaines fonctionnalités de comportement

04:33.940 --> 04:35.230
en appelant des méthodes.

04:35.230 --> 04:36.430
Vous pouvez le faire vous-même.

04:36.430 --> 04:41.350
Développez ce que vous voyez ici et ajoutez votre propre fonctionnalité de test au-dessus du nouveau code de production.

04:41.380 --> 04:44.200
Faites vos premiers pas dans ce domaine et voyez comment cela se passe pour vous.

04:44.230 --> 04:46.120
Jetons un coup d'œil au code source.

04:46.270 --> 04:47.620
Voici le test du mode lecture.

04:47.620 --> 04:52.090
Je vais jeter un coup d'oeil à ces trois tests, puis je parlerai de la configuration nécessaire pour

04:52.090 --> 04:52.900
préfabriqués.

04:52.900 --> 04:55.270
Voici donc un test très simple.

04:55.300 --> 04:58.960
Nous avons le paradigme arrange, act et assert que nous avons l'habitude de voir.

04:58.960 --> 05:03.070
Remarquez que l'arrangement et l'acte sont étrangement absents ici.

05:03.070 --> 05:06.820
Et tout ce que je fais, c'est vérifier que l'ennemi n'est pas nul.

05:06.820 --> 05:10.210
Dans le test suivant, l'objet de jeu enemy n'est pas null.

05:10.210 --> 05:13.240
Et enfin, ce rigidbody ennemi n'est pas null.

05:13.270 --> 05:14.620
Dans le cas du corps rigide.

05:14.620 --> 05:20.830
C'est un champ public que j'ai créé et qui est sérialisé, et je suppose que le préfabriqué est correctement configuré.

05:20.830 --> 05:25.150
aurait déjà ce champ sérialisé déclaré et rempli.

05:25.150 --> 05:26.560
Tout passe donc.

05:26.560 --> 05:27.760
Tout se passe bien.

05:27.760 --> 05:29.800
Maintenant, comment faire pour obtenir le préfabriqué ici ?

05:29.800 --> 05:31.900
Remarquez que nous utilisons le test en mode lecture.

05:31.900 --> 05:37.840
Comme nous l'avons vu, un test en mode lecture s'exécute dans sa propre scène vide créée dynamiquement.

05:37.840 --> 05:41.680
Ainsi, tout ce que nous voulons faire sur cette scène, nous devons le configurer manuellement nous-mêmes.

05:41.680 --> 05:46.000
Nous allons donc tirer parti de la fixation de texte et de certaines des choses que nous pouvons faire avec le test.

05:46.000 --> 05:46.300
de l'interface.

05:46.300 --> 05:53.230
L'une des choses que nous pouvons faire ici est d'établir une référence à la durée du délai qui permet de

05:53.230 --> 05:57.340
le préfabriqué à être instancié, le chemin vers le préfabriqué ennemi lui-même.

05:57.340 --> 05:59.710
Remarquez que le chemin commence par assets.

05:59.710 --> 06:01.300
Cela va être important dans une seconde.

06:01.300 --> 06:03.520
Ensuite, j'ai une référence à l'ennemi privé.

06:03.550 --> 06:09.010
Maintenant, en plus de l'attribut test que nous avons beaucoup utilisé, il y a un attribut setup qui

06:09.010 --> 06:11.860
s'exécutera une fois avant chaque méthode de test.

06:11.860 --> 06:19.570
Ici, ce que nous voulons faire avant chaque méthode de test, c'est simplement charger cet actif au chemin que nous avons choisi.

06:20.380 --> 06:26.560
Obtenons une référence à l'ennemi assis sur cet objet de jeu une fois que nous l'avons instancié, et ensuite nous attendons un

06:26.590 --> 06:31.450
trois secondes ou une durée arbitraire, et on se rend compte qu'il n'a pas besoin de trois secondes.

06:31.450 --> 06:33.250
Il a probablement besoin d'une image.

06:33.250 --> 06:35.590
Vous pouvez donc expérimenter ce que vous faites ici.

06:35.890 --> 06:38.800
J'attends jusqu'à, je crois, une demi-seconde ici.

06:38.830 --> 06:44.260
La raison pour laquelle nous avons besoin de cela est que j'ai vu que lorsque vous faites l'instanciation de l'objet game dot, vous devez

06:44.260 --> 06:50.080
attendre une image entière pour que l'awake soit appelé et que le start soit appelé sur cet objet de jeu.

06:50.080 --> 06:55.420
Ainsi, en fonction de ce que vous faites dans ce awake et ce start dans votre monobehaviour, vous pouvez avoir besoin de

06:55.420 --> 06:56.800
attendre un peu plus longtemps.

06:56.800 --> 07:03.550
Je pense qu'attendre 2 ou 3 frames dans toutes les situations serait suffisant.

07:03.550 --> 07:08.230
Mais ici, je n'attends qu'une demi-seconde et vous pouvez vous amuser avec cela et voir si cela répond à vos besoins.

07:08.230 --> 07:10.300
Ici, j'utilise l'attribut Teradyne.

07:10.300 --> 07:13.840
Cet attribut est appelé une fois après chacune des méthodes de test.

07:13.840 --> 07:15.970
Dans la configuration, nous créons le préfabriqué.

07:16.000 --> 07:17.200
Ensuite, le test est exécuté.

07:17.200 --> 07:19.630
Et dans le démontage, je nettoie le tout.

07:19.630 --> 07:26.470
Vous pouvez également faire l'équivalent de l'installation et du démontage dans chaque

07:26.470 --> 07:27.400
chaque test.

07:27.400 --> 07:29.050
Si vous le souhaitez, vous pouvez le faire.

07:29.080 --> 07:33.190
Mais je profite de la possibilité de réutiliser certaines méthodes existantes.

07:33.190 --> 07:36.520
Je ne déclare donc qu'une seule fois le setup et une seule fois le teardown.

07:36.520 --> 07:40.270
Et je sais que ces méthodes seront appelées avant et après chaque méthode de test.

07:40.270 --> 07:41.320
Voilà, c'est tout.

07:41.320 --> 07:45.190
Jetons un coup d'œil au script ennemi lui-même pour voir comment il est configuré.

07:45.190 --> 07:47.590
L'ennemi est un monobehaviour très simple.

07:47.590 --> 07:52.390
Je n'ai pas vraiment besoin de faire quoi que ce soit pour le rendre testable, mais juste d'avoir quelque chose d'excitant ici pour

07:52.390 --> 07:53.290
pouvoir tester.

07:53.290 --> 07:57.940
J'ai un champ sérialisé de rigidbody, et j'ai un test qui suppose qu'il est renseigné.

07:57.940 --> 08:01.960
Maintenant, en regardant le code, vous pouvez voir qu'il n'y a rien qui le remplisse réellement.

08:01.960 --> 08:08.320
Mais si nous regardons dans unity et que nous cliquons sur le prefab, nous verrons que c'est le prefab qui fait cette association.

08:08.320 --> 08:09.400
Vérifions donc cela maintenant.

08:09.400 --> 08:11.740
Revenons à l'unité et descendons.

08:11.740 --> 08:13.570
Nous regardons le préfabriqué ennemi.

08:13.570 --> 08:17.860
Et nous pouvons voir ici à droite que le préfabriqué a un script ennemi.

08:17.860 --> 08:20.380
Et il a déjà un corps rigide déclaré.

08:20.410 --> 08:23.110
Si d'une manière ou d'une autre je devais l'oublier.

08:23.110 --> 08:29.140
Ou peut-être que quelqu'un de votre équipe casse cet aspect du préfabriqué, alors refaisons ces tests.

08:32.310 --> 08:35.310
Et nous pouvons voir que le corps rigide est nul a échoué.

08:35.310 --> 08:41.680
Voilà donc un exemple très simple d'un système qui fonctionne et qui se casse.

08:41.700 --> 08:47.370
Si vous êtes un développeur de jeux unity et que vous avez déjà travaillé en équipe, je suis sûr que vous en avez fait l'expérience.

08:47.370 --> 08:51.810
que vous ou quelqu'un avec qui vous travaillez a accidentellement cassé un préfabriqué.

08:51.840 --> 08:53.320
C'est un processus très courant.

08:53.340 --> 08:56.460
Il se peut que vous ne voyiez aucune erreur dans l'éditeur unity.

08:56.460 --> 09:01.200
Vous pouvez même être en mesure de jouer au jeu, et dans certaines circonstances, vous ne voyez pas l'effet de

09:01.230 --> 09:06.990
jusqu'au moment final où ce corps rigide particulier est utilisé ou la fonctionnalité qui est utilisée.

09:06.990 --> 09:08.130
manquante est appelée.

09:08.130 --> 09:13.110
Il s'agit donc d'un excellent moyen de faire en sorte que tous les membres de votre équipe suivent le flux de travail suivant.

09:13.200 --> 09:19.650
Hey, à chaque fois que vous allez tirer de git et faire des changements au niveau des actifs, de la conception, etcetera,

09:19.680 --> 09:26.940
assurez-vous d'ouvrir la fenêtre de l'exécuteur de tests et cliquez simplement sur run selected ou run all et exécutez-les tous.

09:26.970 --> 09:28.620
Vous verrez que tout se passe bien.

09:28.620 --> 09:34.800
Ensuite, avant de commiter à nouveau votre travail, refaites-le et si et quand vous avez remarqué que quelqu'un commite

09:34.800 --> 09:40.710
quelque chose qui a passé les tests mais qui a cassé quelque chose, vous voulez ajouter un nouveau test unitaire qui teste peut-être

09:40.710 --> 09:47.760
pour le script de vol des ennemis existant ou pour la partie incriminée, et vous avez maintenant un héritage

09:47.760 --> 09:52.320
d'un peu plus de tests pour s'assurer que ce cas particulier ne se reproduise pas.

09:52.320 --> 09:56.760
Il n'est pas nécessaire de tester chaque élément du préfabriqué dès le départ.

09:56.760 --> 10:01.470
Vous devez examiner les flux de travail de votre équipe et identifier les éléments qui pourraient être testés.

10:01.470 --> 10:03.120
être corrigées le plus facilement.

10:03.120 --> 10:04.950
Ajoutez ensuite quelques tests légers pour cela.

10:04.980 --> 10:10.950
Il est très facile, une fois que vous avez ce test pour un préfabriqué particulier, de l'exécuter sur un tas de préfabriqués,

10:10.950 --> 10:16.650
vous pourriez, en théorie, avoir un script de test qui teste un grand nombre de préfabriqués différents, en faisant

10:16.650 --> 10:22.200
de s'assurer qu'il n'y a pas de null refs, qu'aucune exception n'est levée.

10:22.440 --> 10:26.340
Les objets du jeu existent, le prefab peut être trouvé.

10:26.340 --> 10:28.920
Vous pourriez faire tout cela en une seule fois si vous le vouliez.

10:28.950 --> 10:34.530
Ce que je montre ici est un script particulier pour un préfabriqué particulier, et vous pouvez décider de la manière de le faire.

10:34.530 --> 10:35.400
l'agrandir.

10:35.670 --> 10:36.870
C'est tout pour cette fois.

10:36.870 --> 10:40.410
Parlons de l'utilisation conjointe des préfabriqués et des tests unitaires.

10:40.410 --> 10:41.190
Merci à tous.
