WEBVTT

00:00.140 --> 00:01.400
Yazılım tasarımı.

00:01.400 --> 00:02.360
Genel bakış.

00:02.510 --> 00:05.980
Tasarım ilkeleri teorisi ile başlayalım.

00:06.020 --> 00:10.620
Deneyimli geliştiriciler bunu kolaymış gibi gösterebilir, ancak temiz kod tesadüfen yazılmaz.

00:10.640 --> 00:17.330
İyi projeler yaratmak, sağlam ilkeler, iyi iş akışları ve üretken modeller kullanmaktan geçer

00:17.330 --> 00:18.540
senin sürecinde.

00:18.560 --> 00:21.300
İlk olarak, tasarım ilkelerini tartışalım.

00:21.320 --> 00:24.920
Bunlar verimli yazılım geliştirmeye yol açan felsefelerdir.

00:24.920 --> 00:32.420
Faydaları arasında daha hızlı planlama, net iletişim ve gelişiminiz sırasında odaklanma yer alır.

00:32.570 --> 00:37.310
Bilgisayar biliminin tarihi bu tasarım ilkeleriyle doludur.

00:37.340 --> 00:39.750
En popüler olanlardan bazılarının üzerinden geçeceğim.

00:39.770 --> 00:46.070
Bu, sizin için yeni olan herhangi bir konuda kendi araştırmanızı yapmanız için mükemmel bir fırsattır.

00:46.070 --> 00:49.280
aşina olduklarınızı daha derinlemesine araştırın.

00:49.280 --> 00:56.150
Her harfin bir tasarım ilkesine karşılık geldiği katı ilkelerle başlayalım.

00:56.330 --> 01:04.430
Tek sorumluluk ilkesi, sınıflarınızın ve yapılarınızın her biri için genel arzudur

01:04.430 --> 01:05.990
sadece bir şey yap.

01:05.990 --> 01:13.910
Açık kapalı ilkesi, her sınıfın genişletmeye açık, ancak değiştirmeye kapalı olması gerektiği anlamına gelir.

01:13.910 --> 01:19.160
Nesne yönelimli programlama ile kalıtım ve arayüzlere sahip olursunuz.

01:19.160 --> 01:27.740
Liskov İkame ilkesi, herhangi bir alt türün üst tür olarak kullanılabilmesi gerektiğini tartışır

01:27.770 --> 01:28.100
tip.

01:28.100 --> 01:35.900
Arayüz ayrımı, belirli bir türe gerekenden daha fazla arayüz uygulamamamız gerektiği anlamına gelir.

01:35.900 --> 01:41.870
Ve son olarak, bağımlılık tersine çevrilmesi, yüksek kod ve düşük kod ile uğraşırken

01:41.870 --> 01:49.190
bir sistemde, üst düzey kod, alt düzey kodun somut uygulamalarına bağlı olmamalıdır.

01:49.190 --> 01:52.760
Bunun yerine, bunu soyutlamak için arayüzler gibi bir şey kullanmalıdır.

01:52.760 --> 01:55.060
Diğer bazı popüler kavramlar şunlardır.

01:55.070 --> 01:56.360
Kendini tekrar etme.

01:56.360 --> 02:02.840
Bu, geliştiriciler olarak kullandığımız bir hatırlatmadır; kendinizi gerçek kodu kopyalayıp yapıştırırken bulursanız

02:02.840 --> 02:08.780
ya da kavramlar varsa, bu kodu daha verimli bir şekilde yeniden kullanmamıza yardımcı olacak sistematik bir yaklaşım olabilir.

02:08.810 --> 02:15.500
Keep it simple bize çözümlerimizi aşırı karmaşıklaştırmamamız gerektiğini ve buna ihtiyacınız olmayacağını hatırlatır.

02:15.500 --> 02:19.460
Yarının çözümlerini bugünden inşa etmememiz gerektiğini hatırlatıyor.

02:20.150 --> 02:21.800
Yinelemeli geliştirmede.

02:21.800 --> 02:27.980
Şu anda önümüzde duran zorlukları sağlam ilkelerle çözmek istiyoruz, öyle bir şey tasarlamak değil

02:27.980 --> 02:30.080
mutlaka geleceğe dönüktür.

02:30.110 --> 02:36.500
Çoğu zaman geleceğin ne getireceğini bilemeyiz ve yarın için tasarım yapmak gereksiz bir komplikasyondur.

02:36.500 --> 02:42.800
Sadece buradaki ilkeleri uygulamak ve bunları projenize uygulamak size otomatik olarak şunları sağlayacaktır

02:42.800 --> 02:49.080
daha fazla ölçeklenebilirlik, sürdürülebilirlik ve bir geliştirici olarak yaşam kalitesi.

02:49.100 --> 02:54.800
Bu özel bölümde bu yazılım tasarım ilkelerini düşündüğümüzde, yüksek bir seviyeden başlıyoruz

02:54.800 --> 03:00.570
Farklı programlama platformları arasında daha evrensel olabilecek teorik düzeyde şeyler.

03:00.590 --> 03:06.470
Daha sonra, özellikle birlik içinde nasıl uygulandığına dair daha fazla ayrıntıya gireceğiz.

03:06.470 --> 03:12.920
Ancak yüksek düzeyde konuştuğumuz ve daha sonra düşük düzeyde somut olarak konuştuğumuz bu farkı fark edeceksiniz.

03:12.920 --> 03:18.920
Ve bu ilkelerden hangilerinin sizi etkilediğine dair kendi kişisel tarzınızı geliştirebilirsiniz.

03:18.920 --> 03:20.930
günlük iş hayatı diğerlerinden daha fazla.

03:20.960 --> 03:26.510
Ayrıca, kullandığımız mimarilerde bu ilkelerden bazılarını tanımaya başlayacağız ve

03:26.510 --> 03:29.990
nihayetinde kodlama bölümlerinde birlikte yaptığımız kodlama.

03:30.020 --> 03:31.160
Şimdilik bu kadar.

03:31.160 --> 03:31.910
Teşekkürler.
