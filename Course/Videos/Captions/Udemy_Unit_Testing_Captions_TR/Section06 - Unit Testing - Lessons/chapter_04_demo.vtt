WEBVTT

00:00.170 --> 00:03.020
Şimdi bunun iş başındaki bir demosuna göz atalım.

00:03.020 --> 00:07.400
Unity editörünü açacağız, kurs örnek projemizi açacağız.

00:07.400 --> 00:09.740
Tüm kurs için aynı proje.

00:09.740 --> 00:12.260
Ve bunun içinde bazı sahnelere bakacağız.

00:12.260 --> 00:15.620
Dersler içinde saf fonksiyonlar alanım var.

00:15.620 --> 00:23.990
Sahte sub, sahte mock ve casus hakkında biraz daha fazla şey göreceğiz ve bunları karşılaştırabileceğiz.

00:23.990 --> 00:25.970
İşte birlik içindeyiz.

00:25.970 --> 00:30.920
Bu, diğer bazı derslerde ve videolarda kullanılan kurs örnek projesidir.

00:30.920 --> 00:36.590
Ve burada göstermek istediğim şey, sadece kısa bir yeniden giriş olarak, sağdaki düzenimde,

00:36.590 --> 00:42.850
Projenin içinde benioku varlığını gösteren denetçim var, bu yüzden buraya tıklayabilir ve

00:42.860 --> 00:44.840
Readme'ye bakın ve burada görünüyor.

00:44.840 --> 00:49.580
Ya da Window Unit Testing'e gidebilir ve readme'yi açabilirsiniz.

00:49.790 --> 00:57.620
Readme burada size örnek proje hakkında bazı üst düzey bilgiler verir ve ayrıca sürekli güncellenen bir

00:57.620 --> 01:01.970
Burada hangi derslerin ve hangi atölye çalışmalarının ilginç olduğunu gösteren bir liste var.

01:01.970 --> 01:07.280
Dolayısıyla, kurs genişledikçe bunun videodan videoya biraz farklı göründüğünü fark edebilirsiniz

01:07.280 --> 01:08.570
ve daha fazla içerik var.

01:08.600 --> 01:11.960
Burada bakacağımız şey saf fonksiyonlar dersidir.

01:11.960 --> 01:15.200
Eğer buna tıklarsam, tam burada olmak istediğimiz yeri seçer.

01:16.060 --> 01:18.430
Sonra saf fonksiyonlar örneğini açacağım.

01:18.460 --> 01:24.310
Şimdi, incelediğimiz diğer sahnelerde olduğu gibi, çalıştırabileceğiniz bir üretim sahnesi var.

01:24.310 --> 01:27.700
Bu en ilginç kısım değil, ama bununla başlayalım.

01:27.940 --> 01:30.100
Eğer sadece oynat'a tıklarsam.

01:33.170 --> 01:35.060
Buradaki sahnede.

01:35.090 --> 01:37.970
Bize biraz konsol çıktısı verecektir.

01:37.970 --> 01:43.760
Yani bu sadece biz bunu yaparken bir sahne olduğu fikrini pekiştirmek içindir.

01:43.760 --> 01:45.020
üretim kodu.

01:45.020 --> 01:48.080
Bizim durumumuzda oldukça küçük şeyler yapıyor.

01:48.110 --> 01:50.990
Yukarıdaki test çalıştırıcısı penceresine bakmaya davet ediliyoruz.

01:52.930 --> 01:57.370
Buradaki test çalıştırıcı penceresi herhangi bir kategoriye odaklanmamızı sağlar.

01:57.370 --> 01:59.800
Bu durumda, saf fonksiyonlara bakıyoruz.

01:59.800 --> 02:02.530
Ve sonra burada tüm saf fonksiyonlarımız var.

02:04.640 --> 02:07.280
Bunların hepsi test ediliyor ve tüm testler geçiyor.

02:07.280 --> 02:11.720
Eğer burada en üstteki düğümü seçer ve Tümünü Çalıştır'a tıklarsam, tüm bu testleri çalıştıracaktır.

02:11.750 --> 02:18.590
Şimdi kurs boyunca her ders, her sahne için düzenleme modu ve oynatma modu testleri ekledim.

02:18.590 --> 02:23.480
Ve bazı durumlarda, birine ya da diğerine bakmamızın daha uygun olacağını düşünüyorum.

02:23.480 --> 02:25.900
Bu durumda, düzenleme modu gerçekten önemlidir.

02:25.910 --> 02:28.160
Peki düzenleme modu neden önemli?

02:28.160 --> 02:33.830
Çünkü bu özel durumda Monobehaviour gibi herhangi bir çalışma zamanı özelliği kullanmıyoruz ve diğer

02:33.830 --> 02:35.300
Unity kütüphanesinden bir şeyler.

02:35.300 --> 02:37.220
Yani düzenleme modu burada önemlidir.

02:37.220 --> 02:42.890
Ve dahası, son yedek kütüphaneye bakacağız ve faaliyetlerimizi düzenleyeceğiz.

02:42.890 --> 02:43.520
Sadece.

02:43.520 --> 02:46.310
Yani bunu yalnızca bu düzenleme modu testlerinde uygulayabilirsiniz.

02:46.310 --> 02:48.560
Şimdi testi genişletelim ve görelim.

02:51.310 --> 02:59.710
Burada saf bir testimiz, saf olmayan bir testimiz ve teoriye benzer şekilde saf olmayan gelişmiş bir testimiz var.

02:59.710 --> 03:01.330
slaytlar kısmında gördük.

03:01.330 --> 03:03.850
Orijinal saf örneğimiz vardı.

03:03.850 --> 03:09.820
Sonra düşündük ki, bir şekilde bu dolaylı girdilere sahip olan saf olmayan bir örneğe bakalım

03:09.820 --> 03:11.020
veya dolaylı çıktılar.

03:11.020 --> 03:15.370
Ve sonra gelişmiş olan, soruna yönelik evrimleşmiş bir çözümdür.

03:15.370 --> 03:21.910
Şimdi, burada masaj yapıldıktan sonra bile saf olmayan %100 saf değildir.

03:21.910 --> 03:26.400
Bu nedenle, teoriyi pekiştirmek için saf teste bakmanız faydalı olabilir.

03:26.410 --> 03:35.470
Neden saf bir test saftır, o zaman iki numaralı sistemimi yeniden düzenlenmemiş bir tür için bir başlangıç noktası olarak görün

03:35.470 --> 03:37.210
sorunlu kullanım durumunun.

03:37.210 --> 03:43.810
Ve sonra gelişmiş teste bakın, burada gelişmiş olanı bir tür evrimleşmiş çözüm olarak gösteriyor.

03:44.050 --> 03:46.720
Ve bunların hepsi kendiniz için sahip olduğunuz seçeneklerdir.

03:46.720 --> 03:49.450
Kod tabanınızda kesinlikle saf sistemler oluşturabilirsiniz.

03:49.450 --> 03:53.260
Saf olmayan ve test için biraz sorunlu olanları yaratabilirsiniz.

03:53.260 --> 03:55.570
Ve belki de bazı durumlarda bu iyi bir şeydir.

03:55.570 --> 04:02.410
Ve sonra gelişmek, yeniden düzenlemek ve iyileştirmek istiyorsanız, testi daha yalnız ve daha sosyal hale getirin,

04:02.410 --> 04:05.730
Örneğin, gelişmiş olana bir model olarak bakabilirsiniz.

04:05.740 --> 04:08.290
Şimdi geçelim ve her biri için kaynak koduna bakalım.

04:08.290 --> 04:12.100
Şimdi saf sistem için teste bakarak başlayalım.

04:12.100 --> 04:12.760
Burada okuyacağım.

04:12.760 --> 04:15.400
Değeri dönüştüreceğimiz test.

04:15.700 --> 04:18.040
Varsaydığımız sonuç 20'dir.

04:18.070 --> 04:22.030
Girdi iki ve on olduğunda bunu bekliyoruz.

04:22.180 --> 04:24.670
İşte düzenlenmiş girdilerimiz.

04:24.700 --> 04:26.740
İşte onları geçiriyoruz.

04:26.740 --> 04:28.410
Ve işte değer çıktı.

04:28.420 --> 04:35.050
Teori kısmında gördüğümüz gibi, bunun saf bir fonksiyon olmasının nedeni, sonucun

04:35.050 --> 04:39.520
sadece aktarılan girdiye bağlıdır, başka hiçbir şeye bağlı değildir.

04:39.520 --> 04:41.410
Ve hiçbir yan etkisi yoktur.

04:41.410 --> 04:45.550
Yani dolaylı girdi ve dolaylı çıktı yok.

04:45.550 --> 04:46.510
Yani bu saf.

04:46.540 --> 04:48.880
Saf için kaynak koduna bakalım.

04:50.180 --> 04:51.510
Ve bu oldukça basit.

04:51.530 --> 04:55.100
Slaytlarda gördüğümüzle aynı olduğuna inanıyorum, belki biraz ince ayar yapılabilir.

04:55.130 --> 04:58.670
İnt ve çarpanı giriyoruz ve bunu döndürüyoruz.

04:58.700 --> 05:02.070
Burada başka ilgisiz bağımlılıklar yapmıyoruz.

05:02.090 --> 05:03.890
Yeni bir sistem oluşturmuyoruz.

05:03.890 --> 05:05.870
Başka herhangi bir sisteme değinmiyoruz.

05:05.870 --> 05:08.090
Başka bir değer ayarlamıyoruz.

05:08.090 --> 05:09.890
Sadece çarpıp geri gönderiyoruz.

05:09.890 --> 05:14.020
Ve yine, dönen değer dolaylı bir çıktı olarak sayılmaz.

05:14.030 --> 05:15.270
Bu doğrudan çıktıdır.

05:15.290 --> 05:17.330
Yani bu olabildiğince saf.

05:17.360 --> 05:19.400
Bu çok güzel bir örnek ve iyi bir başlangıç noktası.

05:19.400 --> 05:21.380
Ve bu örneği burada çalıştırdığımızda.

05:22.890 --> 05:25.530
Harika çalıştığını görüyoruz.

05:25.530 --> 05:26.160
Yeşil.

05:26.160 --> 05:26.870
Kontrol işareti.

05:26.880 --> 05:28.400
Şimdi bir sonrakine geçelim.

05:28.410 --> 05:30.750
İşte saf olmayan bir test.

05:31.020 --> 05:33.120
Burada değeri dönüştüreceğimizi görüyoruz.

05:33.150 --> 05:37.140
Girilen girdi üç olduğunda sonucun 30 olduğunu varsayıyoruz.

05:37.260 --> 05:43.350
Şimdi üçlük bir değer ve onluk bir çarpan belirliyoruz.

05:43.380 --> 05:46.890
Bu iki int değeri önceki testte de kullanılmıştı.

05:46.890 --> 05:51.630
Biraz farklı değerler kullanılıyor, ancak önemli olan benzer girdiler.

05:51.630 --> 05:56.490
Ama bir girdinin buraya ve bir girdinin buraya nasıl girdiğine dikkat edin.

05:56.490 --> 06:00.570
Yani buradaki test değeri dönüştürmekle ilgili.

06:00.570 --> 06:05.610
Dolayısıyla dönüştürme değeri, aktarılan üç değerine bağlıdır.

06:05.610 --> 06:13.470
Ve ne yazık ki saflık açısından bakıldığında, bu aynı zamanda paylaşılan bir değer olan çarpan değerine de bağlıdır.

06:13.470 --> 06:15.780
burada geçirilen eyalet.

06:15.840 --> 06:22.380
Üretim ihtiyaçlarınıza bağlı olarak bu tür bir durumla karşılaşabileceğinizi tahmin edebilirsiniz.

06:22.380 --> 06:25.620
Yapıcıda bazı durumları ayarlamış olabilirsiniz.

06:25.620 --> 06:28.350
Ve sonra bu durumun bir kısmını kullanan bir yöntemde.

06:28.350 --> 06:32.820
Burada gördüğümüz gibi, bir sınıf için yedi farklı yönteminiz de olabilir.

06:32.820 --> 06:37.500
Birinci ve üçüncü yöntemin çağrılması durumu etkileyecektir.

06:37.500 --> 06:41.220
Sonunda yedinci yöntemi çağırdığımızda, bu üçü çağırıp çağırmadığınıza bağlıdır.

06:41.250 --> 06:44.730
Beşi çağırdınız mı, bazı genel özellikleri ayarladınız mı, vb?

06:44.760 --> 06:46.080
Bu çok normal.

06:46.080 --> 06:51.330
Nesne yönelimli programlamada, farklı yöntem çağrılarının belki de geride bazı

06:51.330 --> 06:52.260
paylaşılan durum.

06:52.710 --> 06:59.490
Bunların hepsi tamam, ancak biz bunun saf olmadığını ve test edilmesinin bazı ek düşünceler ve

06:59.490 --> 07:00.480
Sonuçlar.

07:00.480 --> 07:07.830
Burada yine sorunlu olan kısım, dolaylı girdiye sahip olmamızdır.

07:08.280 --> 07:10.410
Şimdi kaynak koduna bir göz atalım.

07:10.560 --> 07:16.860
Burada saf uygulamaya kıyasla sadece akademik süreç için birkaç şey ekledim.

07:17.160 --> 07:19.230
Eğer çözülmesi gereken sorunlar varsa.

07:19.230 --> 07:25.350
Biri çarpanı saklıyor olmamız, diğeri de son sonucu burada saklıyor olmamız.

07:25.350 --> 07:27.570
Son sonucun ayarlandığını görüyoruz.

07:27.570 --> 07:35.940
Bu bir dolaylı çıktı örneğidir çünkü convert değerini çağırmadan önce son sonuç

07:35.940 --> 07:36.960
herhangi bir değer seti.

07:36.960 --> 07:42.030
Ancak convert değerini çağırdıktan sonra son sonuç bir değer setine sahip olur.

07:42.030 --> 07:47.910
Belki de değer ve çarpanın tam olarak ne olduğuna bağlı olarak daha önce olduğundan farklıdır.

07:47.940 --> 07:54.870
Dolayısıyla bu saf olmayan örnek hem dolaylı girdi hem de dolaylı çıktıyı göstermektedir.

07:54.870 --> 07:56.220
Dolaylı girdi.

07:56.220 --> 08:00.270
Çünkü girdinin bir kısmı buraya gelir ve burada kullanılır.

08:01.140 --> 08:05.940
Değerleri dönüştürme açısından, sadece burada vurgulanan kod.

08:05.940 --> 08:10.170
Girişi etkileyecek şeylerden bazıları burada mavi renkle vurgulanmamıştır.

08:10.170 --> 08:12.030
Aslında daha önce ayarlanmıştı.

08:12.180 --> 08:16.110
Buna saflık açısından sorunlu diyebilirsiniz.

08:16.110 --> 08:18.780
Ayrıca dolaylı çıktılarımız da var.

08:18.810 --> 08:25.240
Sadece mükemmel ve saf bir değer döndürmekle kalmıyoruz, aynı zamanda son sonucu da belirliyoruz.

08:25.260 --> 08:31.500
Yine bu dolaylı bir çıktıdır ve saflık açısından istenmeyen bir durum olarak değerlendirilebilir.

08:31.660 --> 08:36.810
Bunun üretimimize yardımcı olmayacak sorunlu bir kaynak kod parçası olduğunu göstermez

08:36.810 --> 08:37.470
İhtiyaçlar.

08:37.470 --> 08:42.960
Elbette, kodunuzda bu dolaylı girdilere sahip olduğunuz bazı durumlar olacak ve

08:42.990 --> 08:44.490
veya dolaylı çıktılar.

08:44.820 --> 08:51.270
Ancak burada gördüğüm şey, birim testlerimiz üzerinde bazı etkileri olabilecek bir şey.

08:51.270 --> 08:56.970
Bu yüzden burada üniteye geri dönelim ve bunu tekrar çalıştıralım. Çalıştır'a basacağım, iyi çalışıyor ve harika çalışıyor.

08:56.970 --> 09:02.190
Daha sonra burada saf olmayan gelişmişimiz için bu sorunlu kullanım örneğini aldım.

09:02.190 --> 09:09.660
Bu sorunların bazılarını biraz çözen örnek bir sistemi güncelledim ve oluşturdum, belki de

09:09.660 --> 09:10.920
%100 saf.

09:10.920 --> 09:12.750
Ve farklı yollara baktım.

09:12.750 --> 09:21.000
Bu nedenle, bazı farklı test çiftlerini simüle etmek veya bunlara örnek vermek için bir test oluşturdum

09:21.000 --> 09:21.840
kullanılıyor.

09:21.870 --> 09:26.670
İlk olarak, herhangi bir test ikilisi olmayan standart olana sahibiz.

09:26.670 --> 09:29.730
Yani bu sadece önceki resim gibi bir şey.

09:29.760 --> 09:32.760
O zaman burada bir kukla kullanırız.

09:32.790 --> 09:35.610
Sonra burada bir saplama kullanırız.

09:36.690 --> 09:38.610
Burada bir casus kullanıyoruz.

09:40.310 --> 09:41.870
Burada bir mock kullanıyoruz.

09:43.050 --> 09:45.270
Ve son olarak burada bir sahte kullanıyoruz.

09:45.360 --> 09:47.670
Onları burada bir sıraya koydum.

09:47.790 --> 09:51.930
Daha önce farklı test çiftleri tablosunda gördüğümüz teoriyle aynı.

09:51.930 --> 09:56.280
Ve en iyiden en kötüye ya da buna benzer bir şekilde sıralanmamıştır.

09:56.280 --> 10:01.890
Daha çok, en ucuz ve uygulaması en kolay olan en az güçlü test çiftinden

10:01.890 --> 10:06.920
En güçlü test ikilisi, oluşturulması en çok zaman alan test olabilir.

10:06.930 --> 10:13.230
Ayrıca en çok işi yapar ve bazı durumlarda bunlardan birine sahip olmanın daha iyi olduğunu göreceksiniz

10:13.230 --> 10:13.800
diğerinden daha fazla.

10:13.830 --> 10:19.740
Özel durumunuz göz önüne alındığında, her zaman sahte olanı kullanmak veya her zaman

10:19.740 --> 10:20.190
Alay et.

10:20.220 --> 10:24.210
Bunlar, alet kemerinizde bulunan ve kullanabileceğiniz bir dizi farklı araçtır.

10:24.210 --> 10:26.880
Şimdi standarttan başlayarak hepsinin üzerinden geçelim.

10:26.880 --> 10:28.860
İşte standart örnek.

10:28.860 --> 10:31.590
Buna henüz herhangi bir test ikilisi eklenmemiştir.

10:31.590 --> 10:37.350
Ve tanıdık gelecektir çünkü temelde orijinal saf olmayan örnek için yaptığımız şey budur.

10:37.500 --> 10:40.980
Ve biz buna değeri dönüştürmek diyoruz.

10:41.010 --> 10:44.340
Giriş dört olduğunda sonuç 40 olacaktır.

10:44.370 --> 10:47.100
Ve burada düzenlemeyi ayarlıyoruz.

10:47.310 --> 10:49.950
Çarpanı buraya aktarıyoruz.

10:51.050 --> 10:53.060
Sonra dönüştürücüyü buradan geçiriyoruz.

10:53.730 --> 10:56.880
Ve buradaki tek satırımız değer olarak geçiyor.

10:56.880 --> 11:02.280
Ancak değeri çarpanla çarptığımızı da unutmayın.

11:02.280 --> 11:04.980
Elimizde biraz eski bilgi var.

11:05.610 --> 11:07.280
Sadece bununla biraz oynamak için.

11:07.290 --> 11:14.820
Hatırlarsak, orijinal saf uygulama buradaki tüm girdileri doğrudan alıyordu ve bu

11:14.820 --> 11:16.220
Daha saf ol.

11:16.230 --> 11:21.600
Ancak öğrenmemiz amacıyla, tartışabilmemiz için daha az saf olan bir şey yarattım

11:21.600 --> 11:23.640
Bu yüzden bu harika çalışıyor.

11:23.640 --> 11:26.640
Ve bu, herhangi bir test çiftini keşfetmeden önce.

11:26.640 --> 11:32.490
Yani bunların her birini gözden geçireceğiz, giderek daha güçlü bir şekilde eklendiğini göreceğiz.

11:32.490 --> 11:33.290
Test çiftleri.

11:33.300 --> 11:39.390
İtiraf etmeliyim ki, bu örneği oluştururken, daha sonraki aşamalar için en mantıklı olanı buydu.

11:39.390 --> 11:43.620
örnekler, daha sonraki testler sahte ve casusluk gibi şeyleri ikiye katlar.

11:43.650 --> 11:48.930
Sahte olanlar o kadar harika değil, ancak tüm üretim kodlarında gerçekten aynı üretim kodunu kullanmak istedim

11:48.930 --> 11:49.140
Onlar.

11:49.140 --> 11:55.380
Bu nedenle, kukla ve belki de ondan sonraki örnek burada en iyi örnek olmadığı için beni affedin, ancak umarım

11:55.380 --> 11:56.810
öğrenmenize yardımcı olurlar.

11:56.820 --> 11:57.930
İşte kukla.

11:57.960 --> 12:02.220
Burada yaptığımız şey, varsayılan olarak negatif bir döndürdüğünü söylemektir.

12:02.220 --> 12:08.670
Dolayısıyla, null değerini iki olarak geçersem, bu dönüştürücü için kukla değer olur.

12:09.330 --> 12:12.480
Şimdi sınıfın kırılabileceğini hayal edebilirsiniz.

12:12.480 --> 12:13.920
Eğer null değeri geçersek.

12:13.920 --> 12:17.880
Bu, sınıfın bağımlılık açısından daha zor olduğu anlamına gelir.

12:17.880 --> 12:21.180
Buna muhtemelen, hey, öyle değil, diye düşünürsünüz.

12:21.180 --> 12:24.090
İçeri aktardığınız her sınıfın null olmaması gerekir.

12:24.270 --> 12:27.090
Evet, muhtemelen birçok durumda, evet.

12:27.090 --> 12:30.210
Ancak burada size bir örnek verdim ve kaynak koduna bakabilirsiniz.

12:30.240 --> 12:32.730
Sınıf bu null değeri alacaktır.

12:32.730 --> 12:33.180
Güzel.

12:33.180 --> 12:40.260
Ve null veya mümkün olan en aptal nesneyi koymanın gerçekten de

12:40.260 --> 12:41.010
İşe.

12:41.040 --> 12:49.650
Şimdi muhtemelen dönüştürücü test edilen yöntemde kullanılmış olsaydı, bu bir null ref atardı.

12:49.650 --> 12:52.110
Ama burada kasıtlı olarak.

12:52.140 --> 12:57.240
Test ettiğimiz şey, son sonucun belirli bir değere sahip olacağıdır.

12:57.240 --> 13:01.920
Burada dönüştürücüyü test ediyor olsaydım, dönüştürücüyü kullandığını bildiğim.

13:01.920 --> 13:06.270
Bu yüzden her şeyi kuklalarla halledebilir miyim diye düşünmek zorundasınız.

13:06.270 --> 13:07.380
Muhtemelen değil.

13:07.380 --> 13:13.080
Muhtemelen aktardığınız şey paylaşılan bir durum için bir yerde kullanılacaktır.

13:13.080 --> 13:15.930
Ancak gerçekten de bunun yeşil onay işaretiyle geçtiğini görüyoruz.

13:15.930 --> 13:16.920
Yani işe yaradığını biliyoruz.

13:16.920 --> 13:22.230
Ve yaptığımız şey, kukla için önemli olan kısım, bazen test ederken

13:22.230 --> 13:27.150
bir şey, aktarılan ucuz ve kolay bir bağımlılığa dayanabilir.

13:27.750 --> 13:28.770
Yani bu iyi.

13:29.900 --> 13:34.310
Buna bakarak, kaynak koduna bakmadan söyleyebileceğimiz bir başka şey de

13:34.310 --> 13:42.230
Muhtemelen bu iyi çalışıyorsa, o zaman muhtemelen ne aktardığımıza bağlı olmadığını varsayalım

13:42.230 --> 13:42.900
null olarak.

13:42.920 --> 13:50.960
Yani bu sınıfın oluşturulması için bir şeylerin aktarılması gerektiğine dair küçük bir ipucu.

13:50.960 --> 13:51.500
Bir şeyler.

13:51.500 --> 13:54.530
Null verdiğimiz için muhtemelen burada kullanılmaz.

13:54.560 --> 13:56.240
Aksi takdirde null ref ile başarısız olur.

13:56.480 --> 13:58.070
Kaynak koduna bir göz atalım.

13:58.070 --> 14:01.940
İşte bakacağımız diğer tüm testler için kullanılan kaynak kodun bir örneği

14:01.940 --> 14:02.640
Burada.

14:02.660 --> 14:05.270
Bu dönüştürücüyü geçiriyorum ve saklıyorum.

14:05.540 --> 14:08.750
Ayrıca son sonucu negatif bir sonuç olarak ayarladım.

14:08.780 --> 14:14.180
Negatif olan genellikle this hasn't been set yet tipi bir değer olarak kullanılır.

14:14.180 --> 14:15.560
Bu yüzden burayı seçtim.

14:15.560 --> 14:16.850
Ama sıfır da olabilir.

14:16.850 --> 14:18.620
İstediğiniz herhangi bir değer olabilir.

14:18.620 --> 14:25.970
Ve nesne burada oluşturulduğunda, bunu bir tür ayarlanmamış değer olarak ayarladığımı varsayıyorum.

14:26.150 --> 14:30.650
Sonra burada, convert value'yu çağırırsam, onu düzgün bir şekilde güncellerim.

14:30.650 --> 14:33.860
Yani bunu başlangıç değeri olarak düşünebilirsiniz.

14:33.860 --> 14:35.810
Ve bu burada güncelleniyor.

14:35.900 --> 14:40.190
Şimdi testte yaptığım tek şey I dönüştürücü için null değerini geçmek.

14:40.190 --> 14:42.860
Ve sonra sadece son sonucu kontrol ediyorum.

14:42.860 --> 14:45.440
Henüz bu kısım üzerinde bir test yapmıyorum.

14:46.580 --> 14:52.710
Ve bu son sonucu görebiliriz çünkü dönüştürücüye hiç bağlı değildir.

14:52.730 --> 14:57.590
Örneğin, bilirsiniz, geri dönün demiyor.

14:59.020 --> 15:00.940
Dönüştürücü nokta gibi bir şey.

15:00.940 --> 15:06.340
Bu hattın hiç kullanılmadığını, dönüştürücü olsa bile muhtemelen iyi çalışacağını biliyorsunuz

15:06.340 --> 15:07.030
boş.

15:07.210 --> 15:14.260
Sınıflarınızı keşfederken, bunu deneyebilir ve bir null geçersem ne olacağını görebilirsiniz

15:14.260 --> 15:15.830
bağımlılıklarımdan biri için.

15:15.850 --> 15:17.590
Sadece derlenmiyor mu?

15:17.590 --> 15:24.100
Yoksa null ref değeri mi atıyor ya da başka bir tür işlem hatası mı veriyor?

15:24.100 --> 15:26.920
geçtiğiniz şeye daha güçlü bir bağımlılığınız var mı?

15:26.920 --> 15:31.870
Ve bu iyi olabilir, ancak farklılıkları öğrenirken burada oynamanız gereken bir şey

15:31.870 --> 15:33.880
bağımlılıklarınızla birlikte.

15:35.500 --> 15:38.140
Teste geri döndüğümüzde geçeceğini görüyoruz.

15:38.140 --> 15:39.280
Ve negatif bir çalışıyor.

15:39.280 --> 15:40.870
Yani bu bir kukla örneği.

15:40.870 --> 15:46.630
Ve daha önce de itiraf ettiğim gibi, odaklanmak istediğim bu ilk birkaç örnek en iyi örnek değil

15:46.630 --> 15:47.770
sonraki örneklerde.

15:47.770 --> 15:48.850
İşte ikincisi.

15:48.850 --> 15:54.640
Yorumda gördüğümüz gibi, burada yaptığımız test ikilisi bir taslaktır ve taslak bir test ikilisidir

15:54.640 --> 15:57.490
belirli bir değer döndürmek üzere yapılandırılmış.

15:57.490 --> 15:59.740
Yani buradaki örnek kusurludur.

15:59.740 --> 16:06.130
Öncekinden biraz daha fazla kukla gibi hissettiren bir null'da geçtiğimi itiraf edeceğim.

16:06.130 --> 16:13.600
Ancak aktarılan kukla değer gerçekten de testi etkiler.

16:14.250 --> 16:16.350
Çünkü burada dönüştürme değerini çağırıyorum.

16:17.040 --> 16:18.930
Bunun bir saplama olduğunu düşünürdüm.

16:19.230 --> 16:26.010
Yeni bir sıcaklık dönüştürücü gibi bir şey de olabilir.

16:28.550 --> 16:31.040
Ve belki de bu değerde geçer.

16:31.090 --> 16:35.360
Oraya geçici bir şey yerleştirmenin farklı yolları olduğunu hayal edebilirsiniz.

16:35.360 --> 16:41.300
Ancak benim için, bu özel örnekte, gerçekten de test çağrısının bir parçası olan bir null geçmek

16:41.300 --> 16:42.110
Yapı.

16:42.900 --> 16:43.800
Bu bir yedek demek.

16:44.190 --> 16:46.280
Yani bu bir hata verecektir.

16:46.290 --> 16:47.490
Şimdi neden hata veriyor?

16:47.520 --> 16:49.320
Kaynak koda tekrar bir göz atalım.

16:49.770 --> 16:54.990
Çünkü dönüştürücü için null girersem ve dönüştürücüyü null olarak saklarsam.

16:55.020 --> 17:01.830
Sonra burada null üzerinde bir şey çağırdığımda, çıldıracak ve bir null ref veya başka bir şey atacak

17:01.830 --> 17:03.150
diğer istisna türleri.

17:03.360 --> 17:07.140
Ve burada gerçekten attığından emin olmak için kontrol ediyorum.

17:07.410 --> 17:11.270
Bu özel örneği sevmiyorum ama umarım öğrenmeye yardımcı olur.

17:11.280 --> 17:13.500
Şimdi SPI kavramına bakalım.

17:13.500 --> 17:15.900
Yani buradaki tanım bir SPI testidir.

17:15.900 --> 17:20.120
Double, bir yöntemin çağrıldığını doğrulayan bir test double'ıdır.

17:20.130 --> 17:23.670
Metottan ne döndüğü ile ilgilenmiyoruz.

17:23.670 --> 17:25.640
Sadece arandığını bilmek istiyoruz.

17:25.650 --> 17:32.430
Yani kukla örnekte ve alt örnekte daha az bilgiden daha az güce doğru gidiyoruz.

17:32.430 --> 17:35.390
İşte biraz daha güçlü bir tür orta güç.

17:35.400 --> 17:37.280
Bir şeyin arandığını biliyoruz.

17:37.290 --> 17:39.020
İşte böyle çalışıyor.

17:39.030 --> 17:43.700
n substitute kütüphanesini kullanıyoruz ve arayüz için bir substitution oluşturuyoruz.

17:43.710 --> 17:48.660
Şimdi, burada örneklerin üzerinden geçerken nasıl güncelleme ve yeniden düzenleme yapılacağından bahsettiğimi hatırlayın

17:48.690 --> 17:51.360
üretim kodunuzu daha test edilebilir hale getirmek için?

17:51.360 --> 17:55.560
Yaptığım şeylerden biri de refactor'da bir arayüz kullanmaktı.

17:55.680 --> 18:03.870
Arayüzler genel olarak kodunuzda size esnek, daha az kodlanmış bir bağlantı sağlamak için çok kullanışlıdır.

18:03.990 --> 18:09.030
Bu yüzden üretimde iyidir, ancak aynı zamanda özellikle burada mocking yapan bu kütüphane için de iyidir.

18:09.760 --> 18:11.590
Ve bizim için casusu yaratır.

18:11.620 --> 18:22.210
Bu tek satırda AI dönüştürücüye dayalı dönüştürücü için yeni bir uygulama oluşturacaktır.

18:22.210 --> 18:24.640
Böylece gidip kendi kukla sınıfımızı oluşturmak zorunda kalmayız.

18:24.640 --> 18:26.680
Kendi örnek sınıfımızı oluşturmak zorunda değiliz.

18:26.710 --> 18:28.120
Bu bizim için yeterli.

18:28.120 --> 18:29.440
Ve bunu içeri aktarıyoruz.

18:29.530 --> 18:32.500
Sonra null'u geçirdiğimizde.

18:32.530 --> 18:36.460
Daha önce convert değerini çağıramıyorduk, ancak burada çağırabiliyoruz.

18:36.580 --> 18:39.610
Burada neyin geri döndüğü ile ilgilenmiyoruz.

18:39.610 --> 18:42.610
Bazen testinizin ihtiyaçları olabilir ve göreceğiz.

18:42.610 --> 18:45.970
Bir sonraki örnekte dönüş değerinin ne olduğu ile ilgileniyorsunuz.

18:45.970 --> 18:49.360
Ama burada sadece bir şeyin adını bilmek istiyoruz.

18:49.360 --> 18:57.070
Yani test edilen sistemin içinde bazı yapılar olduğunu varsayan bir birim testi yapıyoruz.

18:57.070 --> 18:58.240
Biz de buna

18:58.240 --> 18:59.890
Ve işte iddia.

19:00.070 --> 19:04.030
Ve buradaki dilin son yedek kütüphanenin bir parçası olduğuna dikkat edin.

19:04.060 --> 19:06.250
Diyoruz ki dönüştürücü.

19:06.980 --> 19:09.590
Bir çağrı almış olacağız.

19:10.010 --> 19:15.110
Bir değer değil, dönüştürme değerine bir çağrı.

19:15.740 --> 19:17.100
Ki bu mantıklı.

19:17.120 --> 19:19.220
Eğer bunu burada yaparsam.

19:20.980 --> 19:24.760
İki kez arandığını varsayabilirim.

19:25.680 --> 19:27.420
Ya da içeride.

19:27.420 --> 19:33.480
Belki de değeri dönüştürdüm ve bir tane olduğunu varsayıyorum.

19:35.860 --> 19:43.060
Ve sonra belki de bu sistemi ben yazdığım için biliyorum ki aslında dahili diye bir şey çağırıyor.

19:45.940 --> 19:48.490
Ya da hazırlık.

19:49.120 --> 19:50.500
Sistem.

19:51.070 --> 19:57.430
Sistem dönüştürme değerini çağırdığımda muhtemelen gerçekleştiğini bildiğim tüm farklı alt yöntemleri koyabilirim.

19:57.640 --> 20:02.020
Şimdi bu oldukça yalın bir sistem, bu yüzden yapabileceğimi bildiğim tek varsayım buradaki.

20:02.020 --> 20:04.270
Ve bunu neden varsayabileceğimizi görelim.

20:04.270 --> 20:06.460
Eğer kaynak koduna bakarsak.

20:07.350 --> 20:10.230
Sistem dönüştürme değerini her çağırdığımda.

20:10.230 --> 20:16.620
Yani burada convert değerinin gerçekten de converter dot convert değerini çağırdığını görebiliriz.

20:16.620 --> 20:18.060
Ve tam olarak öyle diyor.

20:18.060 --> 20:25.440
Bir kez daha, birden fazla çağrı olsaydı, dönüştürme değerinin çağrıldığını belirtmem gerekirdi

20:25.440 --> 20:27.780
sistemi her test ettiğimde iki kez.

20:27.780 --> 20:29.310
Ama sadece bir kez test ediyoruz.

20:29.340 --> 20:34.800
Şimdi burada çok, çok, çok daha fazla kod satırına sahip olabileceğinizi hayal edebilirsiniz, birkaç farklı

20:35.190 --> 20:37.080
bağımlılıklarının alanları.

20:37.080 --> 20:42.510
Ve testte buraya geri dönebilir ve buraya daha fazlasını ekleyerek hepsini test edebilirsiniz.

20:42.750 --> 20:49.800
SPI'ı ilk öğrendiğimde, bu çok zayıf bir test değil mi diye düşündüm.

20:49.830 --> 20:55.890
Yalnızca çağrıldığını değil, aynı zamanda belirli bir şeyin döndürüldüğünü de bilmek istemez miyim?

20:55.890 --> 20:56.610
Çağrı.

20:57.370 --> 21:00.350
Bunu bir sonraki örnekte de yapabilirsiniz, ancak bu iyi bir yoldur.

21:00.370 --> 21:04.480
Yine, en az güçlü sembollerden en güçlü test sembollerine doğru bakıyoruz.

21:04.510 --> 21:04.780
Tamam.

21:04.810 --> 21:07.780
Az önce de ima ettiğim gibi, burada bir sonraki alay etmektir.

21:07.780 --> 21:12.620
Ve mocking sadece bir yöntemin çağrılıp çağrılmadığı değil, aynı zamanda ne döndürdüğüdür?

21:12.640 --> 21:15.390
İşte teoride gördüğümüz örnek bu.

21:15.400 --> 21:22.810
Burada yaptığım şey, anında bir yedek test oluşturmak için n yedek kütüphanesini kullanmaktır

21:22.810 --> 21:25.450
Geçen seferki gibi I converter için iki katı.

21:25.450 --> 21:30.600
Ancak burada bazı uygulama ayrıntılarını ekliyorum.

21:30.610 --> 21:37.870
Diyorum ki, dönüştürücü nokta dönüştürme değeri herhangi bir int değerini alabilmeli ve

21:37.870 --> 21:43.300
teori bölümünde çarpanla çarpılan değer, slaytlarda tam olarak bu örneği gördük.

21:43.300 --> 21:47.800
Ve sonra burada biliyorum çünkü değer çarpı çarpanı.

21:47.800 --> 21:52.570
Değer üç ve çarpan on ise 30'a eşit olur.

21:52.690 --> 21:57.730
Böylece bunun gerçekten test ettiği şeyin bu olduğunu görebilirsiniz.

21:57.730 --> 22:04.600
Ancak test edilen şey olan bir varsayımda bulunuyorum, eğer sistem dönüştürme değerini çağırırsam

22:04.600 --> 22:09.160
döndürdüğü değer dönüştürücü nokta dönüştürme değeri ile aynıdır.

22:10.100 --> 22:14.810
Şimdi, burada bir sürü kelime ve kafa karıştırıcı bir sürü tekrar kullanılan terminoloji var.

22:14.810 --> 22:17.690
Bu nedenle, buradaki örneğe bakmak önemlidir.

22:17.690 --> 22:21.560
Ama bakalım burada gerçekten bir artı bir var mıydı?

22:21.590 --> 22:29.900
Testimiz başarısız olur çünkü testim sistem dönüştürme değerinin

22:29.900 --> 22:31.760
dönüştürücü dönüştürme değeri.

22:31.760 --> 22:37.640
Ancak burada bir şey olsaydı, bu dolaylı bir girdi olarak kabul edilirdi.

22:37.640 --> 22:40.160
Yani dolaylı bir girdi olmadığını teyit ediyoruz.

22:40.160 --> 22:42.200
Ve test tekrar geçer.

22:42.200 --> 22:43.790
Yani bu sahte.

22:43.790 --> 22:48.680
Ve bir mock, belirli değerleri döndürmek üzere yapılandırılmış test çiftidir.

22:48.710 --> 22:55.040
Şimdi kursun bağlantılar bölümüne eklediğim yedek belgelere bakabilirsiniz.

22:55.040 --> 22:57.380
Burada başka şeyler de yapabilirsin.

22:57.380 --> 23:02.750
Belki de şöyle bir şey söylemek istersiniz: Eğer on değerini girerseniz, bunun bir modelini yapacağım,

23:02.780 --> 23:04.220
bunu döndürür.

23:04.220 --> 23:12.770
Ama eğer 15 kelimesini geçerseniz, binle çarpabilirsiniz ya da her neyse.

23:12.800 --> 23:20.330
Aktarılan argümanların çıktının nasıl olacağını değiştirdiği farklı durumlar olabilir.

23:21.590 --> 23:27.890
Ancak buradaki dil, herhangi bir int'in son yedek kütüphaneye özgü olduğunu savunmaktadır.

23:27.890 --> 23:33.320
Ve tamam diyor, dönüştürme değerine ne aktarırsak aktaralım, gelen değer bu olacak

23:33.320 --> 23:33.680
Dışarı.

23:33.680 --> 23:38.510
Ve son olarak en güçlü test çiftimiz sahte testtir.

23:38.510 --> 23:40.050
Peki sahte nasıl çalışıyor?

23:40.070 --> 23:42.920
Burada herhangi bir yedek kullanmıyorum.

23:42.920 --> 23:45.560
Aslında, bu testte onu hiç kullanmıyorum.

23:45.590 --> 23:51.410
Bunun yerine ne yapıyorum ve dürüst olmak gerekirse, çift testler hakkında çok şey öğrenmeden önce, bu gerçekten bir

23:51.410 --> 23:52.400
Benim için ortak bir araç.

23:52.400 --> 23:53.900
Buna sahte dendiğini bilmiyordum.

23:53.930 --> 23:59.750
Yıllar önce birim testi yolculuğuma başladığımda, sadece, oh, üretim testini kullanamam diye düşünürdüm.

23:59.750 --> 24:01.640
bir sebepten dolayı.

24:01.820 --> 24:08.960
Bunun yerine, belirli bağımlılıkların yalnızca geçici test sürümlerini oluşturacağım.

24:08.960 --> 24:13.130
Test çiftleri dünyasında bunlara sahte sınıflar denir.

24:13.490 --> 24:15.130
Peki bunu nasıl oluşturabilirim?

24:15.140 --> 24:21.620
Farklı bir sınıfta kendi sahte dönüştürücü uygulamanızı oluşturursunuz veya benim seçtiğim yol

24:21.620 --> 24:22.580
düzenlemek için.

24:22.580 --> 24:26.210
Sanatım testin hemen üzerinde buna yaklaşacak.

24:26.210 --> 24:29.870
İhtiyaç duyulan her şeyin sahte uygulamasını oluşturuyorum.

24:29.870 --> 24:34.790
Bu yüzden burada sadece test durumunda kullanılacak yepyeni bir sınıf oluşturuyorum.

24:34.790 --> 24:40.910
Bunu yanlışlıkla üretimde kullanmak istemiyorum, bu yüzden sahte veya test veya örnek gibi bir başlık veriyorum

24:40.910 --> 24:43.220
veya örnek dönüştürücü, bunun gibi bir şey.

24:43.220 --> 24:49.430
Ancak buradaki dili takip ederek, sahte dönüştürücü ve ben işlevselliğinin sadece yeterli kısmını

24:49.430 --> 24:50.180
Test.

24:50.210 --> 24:57.080
Şimdi bazı birim testi geliştiricilerinin bu sahte dönüştürücüyü oluşturup birçok testte kullandığını görüyorum.

24:57.080 --> 24:58.070
Aynı sınıf.

24:58.100 --> 24:59.420
Bunda bir sorun yok.

24:59.420 --> 25:03.740
Her bir test için ayrı ayrı bir tane oluşturmanız gerekmez.

25:03.740 --> 25:08.780
Ancak buradaki güzel şey, testimin geçmesi için sadece yeterince uygulama yapmam gerektiğini bilmemdir.

25:08.780 --> 25:11.870
Bu da bana peşinden gidebileceğim çok basit bir hedef veriyor.

25:12.680 --> 25:20.750
Burada oynadığım şey, son sonucun değer çarpı on olacağını bilmemdir,

25:20.750 --> 25:23.960
ki ben sadece eğlence olsun diye kendi uygulamamı yapıyorum.

25:23.960 --> 25:28.550
Yani dört değerini girersem sonucun 40 olmasını beklerim.

25:28.880 --> 25:37.640
Bununla oynamak ve burada 15 demek istersem, bunu 45 olarak güncelleyebilirim çünkü 15 kez,

25:37.640 --> 25:42.430
Pardon, 60 olarak güncelleyebilirim çünkü 15 kere 4 60 eder.

25:42.470 --> 25:44.450
Ama orijinal örneğimize geri dönelim.

25:46.040 --> 25:46.640
İşte başlıyoruz.

25:46.790 --> 25:53.900
Burada dikkat edilmesi gereken bir nokta, sahte dönüştürücüyü ilettiğimde, üretim sınıfımızın

25:53.900 --> 25:59.980
sahte dönüştürücüye karşı yedek kütüphane tarafından oluşturulan bir sahteye karşı bir kuklayı bilir.

25:59.990 --> 26:03.740
Üretim kodu bunu bilmez ve bilmesi de gerekmez.

26:03.770 --> 26:06.500
Sadece bir I dönüştürücüye ihtiyacı var.

26:06.500 --> 26:13.370
Bu da bize sınıfları uygulayabilme ve ikame kütüphanesini kullanarak

26:13.370 --> 26:14.840
test ihtiyaçlarımızı karşılıyor.

26:14.840 --> 26:19.930
Üretim kodumuzda bir arayüz kullanmasaydık, ciddi şekilde kısıtlanmış olurduk.

26:19.940 --> 26:22.850
Bu yüzden burada ele aldıklarımız üzerinde biraz düşünmeme izin verin.

26:22.880 --> 26:28.100
Saf bir işlevi olan saf bir sistem gördük ve bunun test edilebilirlik açısından faydalarını gördük.

26:28.190 --> 26:32.240
Daha sonra bu sistemin saf olmayan bir versiyonu fikriyle oynadığımızı gördük.

26:32.240 --> 26:37.430
Ve belki de dolaylı girdi ve dolaylı çıktı ile ilgili ortaya çıkabilecek bazı sorunlar nelerdir?

26:37.430 --> 26:43.130
Ve sonra burada gelişmiş sürümde, etrafta çalışabileceğimiz tüm farklı yollarla oynadık

26:43.130 --> 26:47.030
veya saf olmayan sistemlere sahip olmanın getirdiği zorluklara masaj yapmak.

26:47.030 --> 26:50.930
Sahte saplamadan sahte saplamaya kadar ilerledik.

26:50.930 --> 26:58.190
Sahte versiyonu duymak için bir testin hafif uygulamalarını iki katına çıkarabileceğimizi görmek tam bir

26:58.220 --> 27:06.050
Test için kullandığımız sahte sınıfın sadece arayüzü kullanması gerekiyor.

27:06.050 --> 27:13.940
sınıfının test modunda olup olmadığını veya bir test çiftinin hangi sürümünün geçirildiğini bilmesine gerek yoktur

27:13.970 --> 27:20.210
üretim kodu, hangi I dönüştürücü türünün karmaşıklığından ayrı olarak zarif bir şekilde çalışır

27:20.210 --> 27:20.570
öyle.

27:20.600 --> 27:23.210
Bize oynayabileceğimiz pek çok farklı örnek verir.

27:23.210 --> 27:29.240
Genel olarak, umarım saf fonksiyonlar ve test çiftleri hakkında bilgi edinmekten ve kodu görmekten keyif almışsınızdır

27:29.240 --> 27:35.840
Burada üretimde sahip olduğumuz ve testlerimizde masaj yapan ve herkes için öğrenmemize izin veren

27:35.840 --> 27:43.670
Testlerimizi daha saf hale getirmeye ve üretim kodumuzu daha saf hale getirmeye yardımcı olabileceğimiz farklı yollar

27:43.670 --> 27:49.910
daha az yan etki ve ortaya çıkabilecek paylaşılan durum sorunlarının daha azı ile yeniden kullanılabilir.

27:49.910 --> 27:50.840
Teşekkürler.
