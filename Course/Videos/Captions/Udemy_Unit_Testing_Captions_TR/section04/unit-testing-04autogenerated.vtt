WEBVTT

00:00.020 --> 00:01.220
Test odaklı geliştirme.

00:01.220 --> 00:04.790
İşte bir test metoduna sahip bir test sınıfı örneği.

00:04.790 --> 00:08.330
Kursta zaten mevcut bir testin nasıl çalıştırılacağını gördük.

00:08.360 --> 00:11.080
Sıfırdan yeni testlerin nasıl oluşturulacağını gördük.

00:11.090 --> 00:17.450
Test Güdümlü geliştirme veya TDD, üretim kodunuzu eklemeden önce testler ekleme uygulamasıdır.

00:17.450 --> 00:21.180
Bazıları için, özellikle de test yapmaya yeni başlayanlar için bu durum tuhaf görünebilir.

00:21.200 --> 00:26.300
Bu teknik hakkında daha fazla bilgi edineceğiz ve test odaklı geliştirme ile geleneksel

00:26.330 --> 00:29.360
kendi iş akışlarınızda istediğiniz gibi test edebilirsiniz.

00:29.390 --> 00:36.500
TDD, kod oluşturulduktan sonra ne yapacağını belirleyen ve doğrulayan testler oluşturur.

00:36.950 --> 00:38.120
İşte iş akışı.

00:38.150 --> 00:39.560
Yeni bir test oluşturuyorsunuz.

00:39.590 --> 00:44.120
Kodun derlenebilmesi için içine yeterince uygulama eklersiniz.

00:44.120 --> 00:50.180
Bu kodun derlenmesi için yeterli üretim kodu eklediğimizden, belki de boş bir

00:50.210 --> 00:51.260
Uygulama.

00:51.260 --> 00:53.900
Testi çalıştırıyoruz ve test başarısız oluyor.

00:54.260 --> 01:00.290
Bu beklenen bir durumdur ve aslında ilk olarak başarısız bir test görerek başlamak için çok iyi bir yerdir.

01:00.290 --> 01:05.960
Geçtiğinde testin gerçekten bir şey ifade ettiğine dair daha fazla güvenimiz varsa, o zaman yeniden düzenlersiniz

01:05.960 --> 01:09.310
kod geçene kadar üretim kodunuz ve sonra devam edin.

01:09.330 --> 01:15.860
TDD, basitçe önce test etme ve üretim kodunuzu ikinci olarak yazma sırası değildir.

01:15.860 --> 01:19.060
Bu aynı zamanda projeleriniz hakkında düşünmenin bir yoludur.

01:19.070 --> 01:24.080
Bunların bazılarının sonuçlarını hissetmek için gerçekten pratik yapmanız gerekir.

01:24.080 --> 01:30.980
Ancak daha fazla TDD deneyimi ile bulduğum şey, yeni kodunuz hakkında farklı düşündüğünüzdür.

01:30.980 --> 01:37.370
Geliştirmenizde daha odaklı olursanız, tek bir şey yapan daha atomik kodlar oluşturursunuz.

01:37.370 --> 01:42.020
Ve test kodunuz geçtiğinde, bu daha anlamlı bir geçiştir.

01:42.050 --> 01:46.280
Bu akışa bakmanın bir başka yolu da başarısız bir test yazmaktır.

01:46.280 --> 01:51.530
Testi geçmesini sağlarsınız ve ardından kodunuzu diğer hedefleri karşılayacak şekilde yeniden düzenlersiniz.

01:51.530 --> 01:54.710
Optimizasyonunuz, kodlama standartlarınız var.

01:54.710 --> 01:55.490
Vesaire.

01:55.940 --> 01:57.060
Ve sonra tekrarlıyorsun.

01:57.080 --> 01:58.490
Bunu iş başında görelim.

01:58.490 --> 02:01.210
Halihazırda bir testi olan bir unity projesi açacağız.

02:01.220 --> 02:08.690
TDD'yi yeni bir test eklemek için kullanacağız, derlemek için yeterli üretim kodu oluşturacağız, başarısız bir

02:08.690 --> 02:12.050
ve sonra geçen bir sonuç elde edene kadar yeniden düzenleyin.

02:12.820 --> 02:16.090
Burada oldukça boş bir unity projesindeyiz.

02:16.090 --> 02:22.450
Test çerçevesinin daha önce gösterildiği gibi paket yöneticisine zaten eklenmiş olduğundan emin oldum ve

02:22.450 --> 02:25.390
Başlamamız için bir test kopyaladım.

02:25.420 --> 02:28.250
Düzenleme modunda bu teste bir göz atalım.

02:28.270 --> 02:33.660
Basit bir matematik sınıfının add metodunu kapsayan bir testim var.

02:33.670 --> 02:35.720
Testi çalıştıralım. Geçti.

02:35.740 --> 02:37.120
Koda bir göz atalım.

02:37.120 --> 02:41.300
Ve burada, sunumun önceki bölümlerinden aşina olduğumuz bir testi görüyoruz.

02:41.320 --> 02:45.160
Şimdi burada tartışıldığı gibi biraz test güdümlü geliştirme yapalım.

02:45.190 --> 02:51.280
Buradaki fikir, eğer matematik sisteminin işlevselliğini genişletmek istiyorsak, birkaç yaklaşımımız olduğudur.

02:51.310 --> 02:57.010
Bu üretim kodunu herhangi bir test yapmadan ve sonrasında da oluşturabiliriz.

02:57.930 --> 03:01.260
Sonrasında belki testler ekleriz, belki de eklemeyiz.

03:02.310 --> 03:08.400
Bununla birlikte, test odaklı geliştirme ile, herhangi bir üretim eklemeden önce ilk önce test edeceğiz

03:08.400 --> 03:08.970
Kod.

03:09.730 --> 03:10.930
Nasıl çalıştığını görelim.

03:10.930 --> 03:12.340
Yarattığımı hayal edeceğim.

03:12.910 --> 03:16.600
Matematik sisteminin bir çıkarma yöntemine ihtiyacı olduğunu düşünelim.

03:17.830 --> 03:22.150
Kaynak koda baktığımızda göreceğimiz gibi, bu çıkarma yöntemi henüz mevcut değil.

03:22.950 --> 03:24.780
Ama yine de bunun için bir test yapalım.

03:25.650 --> 03:28.980
Test özelliğini ekleyerek başlayacağım.

03:29.190 --> 03:33.030
Yöntemi test edilen şeyle adlandıracağım.

03:33.060 --> 03:39.990
Beklenen sonuç nedir ve çıkarma işlemi için beklediğim durumda sonuç beş olacaktır.

03:40.020 --> 03:45.000
Eğer 10 ve 5'i geçersem, 10 eksi 5, 5 eder.

03:45.030 --> 03:48.870
Testi ayarlamak için matematik sistemimin yeni bir kopyasını oluşturuyorum.

03:49.080 --> 03:52.120
Çıkartma yöntemini çağırarak sonucu elde ediyorum.

03:52.140 --> 03:56.730
Buradaki kırmızı metin, kod düzenleyicimin çıkarma yöntemi olmadığını bildiğini gösteriyor.

03:56.730 --> 04:01.200
Ve son olarak, metodumuzun beş değerini döndürmesini bekliyoruz.

04:01.230 --> 04:04.980
Bunu daha önceki örnekten kopyalayıp yapıştırdığım için 15 yazıyor.

04:05.010 --> 04:06.060
Bunu şimdi değiştireceğim.

04:06.090 --> 04:08.070
Şimdi doğru varsayımı kontrol ediyor.

04:08.670 --> 04:13.050
Şimdi bunun derlenmeyeceğini biliyoruz, ancak kaydedelim ve unity'ye dönelim.

04:13.080 --> 04:19.530
İki şeye dikkat edelim: Birincisi, konsol penceresi bir derleyici hatası olduğunu düzgün bir şekilde gösteriyor ve

04:19.530 --> 04:24.150
test runner penceresinde henüz yeni metodumuzu görmediğimizi fark ettik.

04:24.180 --> 04:26.520
Bunlar TDD'de dikkat edilmesi gereken iyi şeylerdir.

04:26.550 --> 04:30.810
Bir sonraki adım, derlemeye yetecek kadar kod yazmaktır.

04:30.840 --> 04:34.570
Uygulamayı bu aşamada bitirmememiz çok önemli.

04:34.590 --> 04:36.780
İşte matematik sistemimizin kaynak kodu.

04:36.780 --> 04:41.920
İşte kodu derlemek için yapabileceğim en basit uygulama.

04:41.940 --> 04:45.610
Doğru uygulamayı bitirmediğime dikkat edin.

04:45.630 --> 04:52.480
Şimdi bu örnekte, tek yapmamız gerekenin a ve b'yi çıkarmak olduğunu bildiğimiz için önemsiz görünüyor.

04:52.500 --> 04:58.320
Bununla birlikte, normalde test güdümlü geliştirmede, belirli bir yöntemin uygulanması daha karmaşık olacaktır

04:58.320 --> 04:59.400
ve daha fazla zaman alır.

04:59.430 --> 05:03.390
Ne olursa olsun, derlemek için yeterli sayıya ulaştığımızda her zaman burada dururuz.

05:04.090 --> 05:05.250
Teste bakalım.

05:05.260 --> 05:07.840
Kod düzenleyicimiz artık düzgün bir şekilde gösterilmiyor.

05:07.840 --> 05:09.010
Çıkar ve kırmızı.

05:09.460 --> 05:11.260
Kaydedelim ve birliği kontrol edelim.

05:11.290 --> 05:13.600
Artık herhangi bir konsol hatası görmüyoruz.

05:13.630 --> 05:14.170
Harika.

05:14.170 --> 05:15.400
Her şey derleniyor.

05:15.400 --> 05:19.210
Ve şimdi test çalıştırıcı penceremiz yeni test yöntemini düzgün bir şekilde gösteriyor.

05:19.210 --> 05:20.290
Tüm testleri çalıştıralım.

05:20.290 --> 05:26.320
Bir veya daha fazla test yöntemi başarısız olduğu için başarısızlık testini düşünebilirsiniz.

05:26.320 --> 05:32.290
Başarısız yöntemi seçtiğimizde baktığımızda, orada küçük bir girdi görüyoruz, biraz çıktı görüyoruz

05:32.320 --> 05:34.120
neden başarısız olduğunu gösteren bir metin.

05:34.240 --> 05:38.410
Beş bekliyor ama onun yerine sıfır döndürüyor.

05:38.410 --> 05:40.420
Şimdi neden buradaki hareketleri yaptık?

05:40.420 --> 05:46.600
Önemsiz görünebilir, ancak doğru testi test ettiğine inandığımız bir test oluşturmamız önemli bir ayrımdır.

05:46.600 --> 05:49.120
işlevselliği ve ilk olarak başarısız olduğunu görüyoruz.

05:49.120 --> 05:55.420
Bu da bize uygun bir uygulamanın ne zaman güvenle geçilebileceğini bilmek için iyi bir temel sağlar.

05:55.420 --> 05:57.040
Uygun uygulamayı ekleyelim.

05:57.040 --> 06:02.050
Burada, gelen ilk parametrenin ikinciden daha büyük olacağını varsayıyoruz ve basitçe

06:02.050 --> 06:04.080
ve basitçe a eksi b döndürüyoruz.

06:04.090 --> 06:05.560
Kaydedelim ve testi çalıştıralım.

06:07.440 --> 06:12.480
Şimdi test iyi çalışıyor ve ilk test güdümlü geliştirme örneğimizi tamamladık.

06:12.480 --> 06:13.410
Bu kadar.

06:13.800 --> 06:20.580
Şimdi, kendi deneyimlerimden biliyorum ki, gerçekten hissetmek için testlerle zaman geçirmem ve pratik yapmam gerekti.

06:20.580 --> 06:21.390
Faydaları.

06:21.420 --> 06:29.820
Birim testleri, birim testleri oluşturma ve test güdümlü geliştirme konularına kısa bir genel bakış yaptık,

06:30.420 --> 06:35.070
Umarım sizin için iyi olabilecek bazı faydaları görmeye başlıyorsunuzdur.

06:35.100 --> 06:39.360
Burada test hakkında öğrendiklerinizi MVC mimarisi ile birleştirmek.

06:39.390 --> 06:47.340
Daha modüler, ölçeklenebilir, optimize edilmiş, sağlam ve güvenilir projeler oluşturmak için gerekli araçlara sahipsiniz.

06:47.370 --> 06:52.440
Test ve iyi mimarinin birleşimi gerçekten güçlüdür.

06:52.470 --> 06:53.430
Teşekkürler.
