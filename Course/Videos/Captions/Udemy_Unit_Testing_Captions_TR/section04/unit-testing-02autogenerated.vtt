WEBVTT

00:00.050 --> 00:03.640
Test çalıştırıcı penceresi ve test sınıfları için kurulum.

00:03.650 --> 00:07.250
Test çerçevesi için kaynak kodu paket yöneticisi aracılığıyla edinilebilir.

00:07.250 --> 00:10.800
Test çerçevesi için paket aramasını ekleyebilirsiniz.

00:10.820 --> 00:15.530
Test çerçevesini içe aktarın ve isteğe bağlı olarak kod kapsama araçlarını içe aktarın.

00:15.530 --> 00:21.110
Unity test çerçevesi, C-sharp kodunuzu şimdi bireysel olarak test etmek için gereken tüm kütüphaneleri içerir

00:21.110 --> 00:21.770
ya da bir takım.

00:21.770 --> 00:26.540
Test konusunda yeniyseniz, kodunuzun tamamını bir kerede test etmek zorunda değilsiniz.

00:26.540 --> 00:32.450
Yavaş yavaş, zaman içinde, kodunuzun ne kadar çok kısmını testlerle kaplarsanız o kadar iyi olur

00:32.450 --> 00:34.020
daha fazla güveniniz olacak.

00:34.040 --> 00:36.320
Bunu ekibinize entegre etmenin bazı yolları.

00:36.320 --> 00:37.640
Bu güzel ve kolay.

00:37.820 --> 00:44.540
Testleri yalnızca yeni özellikler için mi ekliyorsunuz yoksa büyük bir yeniden düzenlemeden önce kilit sistemlere test mi ekliyorsunuz?

00:44.540 --> 00:48.650
Ve başlamak için harika bir yol, sadece hata düzeltmeleri sırasında test yapmaktır.

00:48.650 --> 00:55.010
Bir kullanıcı bir hata bildirirse, önce hatanın varlığını başarısız bir testle çoğaltırsınız.

00:55.040 --> 00:57.790
Sonra kodu düzeltirsiniz ve test geçer.

00:57.800 --> 01:03.260
Bu testi bir miras olarak bırakabilirsiniz, böylece bu hatanın gelecekte geri dönmeyeceğinden emin olursunuz.

01:03.290 --> 01:08.840
Kod kapsamı kavramı, kod tabanınızın ne kadarının testlerle kaplandığını ifade eder.

01:08.930 --> 01:16.250
Tüm projenizde bir sınıfınız ve üç yönteminiz varsa ve bunların üçünde de test varsa,

01:16.250 --> 01:18.290
o zaman %100 kapsama alanınız olur.

01:18.290 --> 01:23.480
Genel olarak, kapsam ne kadar yüksek olursa, kod kapsamı penceresini o kadar iyi açabilirsiniz,

01:23.480 --> 01:30.440
Testlerinizi çalıştırın ve size sadece sınıf ve sistem başına yüzdeyi göstermeyen sağlam sonuçlar elde edin,

01:30.440 --> 01:36.830
ancak her sınıf içinde, hangi yöntemlerin kapsama alanına sahip olup olmadığına dair satır satır bir okuma elde edersiniz.

01:37.130 --> 01:38.300
Çok faydalı.

01:38.300 --> 01:43.670
Kodunuzun ne kadarının test edildiğini takip edebilir, testleriniz sırasında sahip olduğunuz güvenlik açıklarını

01:43.670 --> 01:48.710
test süreci ve ayrıca zaman içinde artan kapsamınızı izleyin.

01:48.710 --> 01:52.390
Bu kütüphaneler yüklendikten sonra ilk testinizi oluşturabilirsiniz.

01:52.400 --> 01:58.730
Test Runner penceresini açın, varlıklarınızda bir test klasörü oluşturun, ilk sınıfınızı ve

01:58.730 --> 02:03.890
o noktada o sınıftaki ilk yöntem, bu testler Test Runner penceresinde görünecektir.

02:03.890 --> 02:06.350
Çalıştır'a tıklayıp çalıştıklarını görebilirsiniz.

02:06.350 --> 02:09.080
İşte bir test metoduna sahip bir test sınıfı örneği.

02:09.110 --> 02:11.780
Normal Do diyez gibi göründüğüne dikkat edin.

02:11.780 --> 02:16.850
Burada köşeli parantez içinde gösterilen test özelliği gizli sostur.

02:16.850 --> 02:22.220
Burada sistem, bir test olarak değerlendirmek için bu nitelikle işaretlenmiş herhangi bir yöntem arar.

02:22.220 --> 02:26.600
Bahsettiğim gibi, test etmek bir sanattır ve buna yaklaşmanın pek çok farklı yolu vardır.

02:26.630 --> 02:35.210
Kullandığım güzel bir yöntem de her bir yöntemi üç bölüme ayırmaktır: düzenle, harekete geç ve iddia et.

02:35.240 --> 02:39.800
Düzenlemede, testi kurmak için gerekli olan bir veya daha fazla satırı yaparsınız.

02:39.800 --> 02:45.650
Eylem bölümünde, özellikle testle ilgili olan her şeyi yürütürsünüz ve ardından

02:45.650 --> 02:46.400
iddiayı yap.

02:46.430 --> 02:49.430
İddia etmek, bir şeyin doğru olduğunu varsaymak anlamına gelir.

02:49.430 --> 02:52.280
Böylece test çerçevesi assert kütüphanesinde gelir.

02:52.280 --> 02:56.450
İki sayıyı toplamanızı sağlayan özel bir matematik sistemimiz olduğunu düşünün.

02:56.450 --> 03:01.430
Beş artı on toplamının 15 ettiğini iddia edebiliriz.

03:01.430 --> 03:03.860
Ve bunu başarılı bir test olarak kabul ediyoruz.

03:03.890 --> 03:06.110
Çalıştırır ve geçtiğini görürüz.

03:06.110 --> 03:07.520
Bunu iş başında görelim.

03:07.520 --> 03:10.520
Testi hazır olan bir unity projesi açacağım.

03:10.550 --> 03:13.940
Nasıl çalıştığına bir göz atacağız ve testi çalıştıracağız.

03:14.880 --> 03:17.520
Burada boş bir unity projesindeyiz.

03:17.520 --> 03:20.290
Test çerçevesini kurarak başlayacağım.

03:20.340 --> 03:22.260
Bu yüzden paket yöneticisini açacağım.

03:26.800 --> 03:30.830
Paket yöneticisi hangi paketlerin zaten yüklü olduğunu gösterir.

03:30.850 --> 03:36.610
Başladığınız projede test çerçevesinin zaten eklenmiş olması mümkündür.

03:37.190 --> 03:39.960
Ama eğer yoksa, kendiniz nasıl ekleyebileceğinizi aşağıda bulabilirsiniz.

03:39.980 --> 03:44.720
Unity Kayıt Defteri'nde test çerçevesini arayın ve en son sürümü yükleyin.

03:44.750 --> 03:51.650
Ardından, isteğe bağlı ek özellikler için unity kayıt defterinde kod kapsamını arayın ve yükleyin.

03:51.980 --> 03:54.320
Kod kapsamının bazı isteğe bağlı örnekleri vardır.

03:54.320 --> 03:55.790
Onları buraya yüklemeyeceğim.

03:56.590 --> 04:02.020
Şimdi projede sahip olduğumuz paketleri gözden geçirdiğimizde, hem test çerçevesini hem de isteğe bağlı olarak

04:02.020 --> 04:04.020
yüklemeyi seçtiniz, kodlama kapsamı.

04:04.030 --> 04:07.210
Şimdi bu proje birim testine sahip olmak için tamamen uyumludur.

04:08.940 --> 04:11.520
Başlamak için test çalıştırıcı penceresini açacağız.

04:11.970 --> 04:14.220
Test koşucusu penceresinde iki sekme vardır.

04:14.250 --> 04:16.230
Düzenleme modu ve oynatma modu.

04:16.440 --> 04:21.810
Eklenmiş testimiz olmadığı için, pencere çok yardımcı oluyor ve bazı tıklanabilir oluşturma seçenekleri sunuyor

04:21.810 --> 04:24.270
daha sonraki bir demoda bizim için testler yapmak.

04:24.300 --> 04:26.670
Sıfırdan testlerin nasıl oluşturulacağını göstereceğim.

04:26.880 --> 04:30.180
Şimdilik, önceden hazırladığım bir tanesini yapıştıracağım.

04:31.010 --> 04:37.790
Burada gösterilen test, odaklanmamıza yardımcı olması için kurs için mini Max örnek projesinden yapıştırılmıştır.

04:37.790 --> 04:40.310
Bakmak istediğimiz test dışındaki her şeyi kaldırdım.

04:40.310 --> 04:45.050
Düzenleme Modu sekmesindeki düzenleme modundan başlayarak Test Runner penceresini inceleyelim.

04:45.050 --> 04:49.520
Varsayılan olarak, projedeki tüm testler burada Düzenleme Modu sekmesinde listelenir.

04:49.520 --> 04:55.700
Varsayılan olarak, varlıklar klasöründe ve paketler klasöründe herhangi bir yerde bulunan tüm testler gösterilir.

04:55.700 --> 04:59.690
Sadece bazı testleri görmek için kategoriye göre filtreleme yapabilirsiniz.

04:59.690 --> 05:04.760
Burada çok fazla testimiz yok, ancak demo olması açısından örneklerimiz için bir kategori seçeceğim.

05:04.760 --> 05:08.600
Şimdi pencere, ad alanına göre düzenlenmiş tüm testlerin bir hiyerarşisini gösterir.

05:08.600 --> 05:15.380
Tüm alt seviyeleri genişlettiğimde, test sınıfını ve ardından altında bir test yöntemi görüyorum.

05:15.380 --> 05:18.500
Tüm testleri çalıştırabilir ve geçtiklerini görebiliriz.

05:18.500 --> 05:22.010
Tek bir test seçebilir ve seçileni çalıştırabiliriz.

05:22.010 --> 05:24.140
Testin başarılı ya da başarısız olması.

05:24.140 --> 05:27.470
Sağ tıklama menüsü ile kaynak koda ulaşmanın kolay bir yolunu bulduk.

05:30.070 --> 05:31.810
İşte test kodunun tamamı.

05:32.230 --> 05:34.990
Bu, sunumda daha önce gördüğümüzle aynı.

05:34.990 --> 05:36.280
Önemli noktaların üzerinden geçelim.

05:36.280 --> 05:40.900
Testlerimizi düzenlemeye yardımcı olan isteğe bağlı bir kategori özelliğimiz var.

05:41.110 --> 05:43.000
Şu gösterdiğim açılır menü.

05:43.240 --> 05:43.960
Filtreler.

05:43.960 --> 05:47.860
Bu değere dayanarak aynı kategoride birçok test sınıfına sahip olabilirsiniz.

05:47.890 --> 05:50.830
Aynı kategoride birçok test sınıfınız olabilir.

05:50.830 --> 05:52.330
Sonra test özelliğimiz var.

05:52.330 --> 05:57.100
Bu, test çerçevesine bu yöntemin aslında bir test yöntemi olduğunu söyleyen şeydir.

05:57.820 --> 06:00.590
Bu olmadan, test çalıştırıcı penceresinde görünmez.

06:00.610 --> 06:05.770
Daha sonra tanıdık ancak isteğe bağlı olan düzenle, harekete geç ve iddia et paradigmasını kullanırız.

06:05.800 --> 06:10.060
Bu sadece test mantığımı düzenlemek için kullandığım bir yöntemdir.

06:10.060 --> 06:14.710
Ayrıca, testlerimi adlandırırken, testin altında ne olduğuna bağlı olarak adlandırmayı seçiyorum.

06:14.740 --> 06:17.560
Beklenti nedir ve durum nedir?

06:17.560 --> 06:23.890
Burada, işlenenler olarak beş ve on geçtiğimde sonucun 15 olacağını add yöntemiyle test ediyorum.

06:23.920 --> 06:25.780
Oynatma moduna geçelim.

06:25.810 --> 06:30.970
Oynatma modu sekmesi çok benzer görünüyor ve tam olarak aynı testi gösteriyor gibi görünüyor, ancak

06:30.970 --> 06:31.280
Hayır.

06:31.300 --> 06:32.230
Kaynağı açacağım.

06:32.230 --> 06:34.240
İşte bir oyun modu testi için kaynak kodu.

06:34.240 --> 06:35.470
Peki bunun farkı ne?

06:35.500 --> 06:40.240
Temel fark, proje penceresinde nerede bulunduğudur.

06:40.270 --> 06:41.500
Bunu birazdan göstereceğim.

06:41.500 --> 06:47.470
İsteğe bağlı olarak seçtiğim bir fark, oyun modundaki testlerim için sınıfı oyun modu ile ekliyorum

06:47.500 --> 06:51.530
test, editör modunda ise sadece test ile ekliyorum.

06:51.550 --> 06:52.870
Bu organize olmama yardımcı oluyor.

06:52.900 --> 06:56.560
Şimdi burada demo amaçlı olarak, tam olarak aynı davranışı test ediyorum.

06:56.560 --> 06:58.870
Bir kez düzenleme modunda ve bir kez oynatma modunda.

06:58.870 --> 07:01.150
Bu muhtemelen sizin için gerekli değildir.

07:01.180 --> 07:08.170
Bunun yerine varsayılan olarak düzenleme modunda test edersiniz ve yalnızca oynatmayı yakalamanız gerektiğinde oynatma modu testini kullanırsınız

07:08.170 --> 07:13.480
Uyanmayı Başlat veya Oyun nesnesi işlevselliği gibi mod olayları.

07:13.510 --> 07:14.860
Çarpışma tespiti.

07:14.860 --> 07:16.840
Yalnızca çalışma zamanında gerçekleşen diğer şeyler.

07:16.840 --> 07:21.040
Kursta tartışıldığı gibi, daha önce gördüğümüz aynı yöntem adlandırma kuralını kullanıyorum.

07:21.040 --> 07:22.060
İki tanesini not edelim.

07:22.150 --> 07:23.920
İki önemli farka dikkat edelim.

07:23.920 --> 07:29.230
Burada daha önce gördüğümüz gibi bir test niteliği değil, bir unity test niteliği kullanıyoruz.

07:29.230 --> 07:34.300
Ve arrange, act ve assert'e ek olarak, isteğe bağlı bir await paradigması vardır.

07:34.300 --> 07:41.050
Bu, burada sadece düzenleme modu testleri eşzamanlı olarak yürütülürken, oynatma

07:41.050 --> 07:44.590
modu testleri eşzamansız olarak yürütülebilir.

07:44.590 --> 07:49.750
Dolayısıyla, eşzamansız test gerektiren herhangi bir kodunuz varsa, oynatma modu harika bir seçenektir.

07:49.750 --> 07:52.470
Organizasyonu görmek için proje penceresine bir göz atalım.

07:52.480 --> 07:57.940
Düzenleme modu testinin bir editör klasöründe olduğuna dikkat edin ve oynatma modu testinin bir çalışma zamanında olduğuna dikkat edin

07:57.940 --> 07:58.330
klasör.

07:58.330 --> 08:03.490
Bu fark, montaj tanım dosyalarındaki farklılıklarla birlikte.

08:03.520 --> 08:09.760
Bu testlerin bitişiğinde, sistemin birinin editör testi, diğerinin oyun modu testi olduğunu nasıl bildiği yer almaktadır.

08:09.790 --> 08:11.220
Oyun modu testini çalıştıracağım.

08:11.230 --> 08:13.300
Son olarak, oyun modu testini çalıştıracağım.

08:13.330 --> 08:16.870
Test koşucusu penceresi bir istisna dışında aynı şekilde davranır.

08:16.900 --> 08:18.730
Çünkü bunlar oyun modu testleridir.

08:18.730 --> 08:25.570
Unity anonim bir sahne oluşturacak, testi yalıtılmış olarak yürütecek ve ardından sahneyi yok edecektir.

08:25.570 --> 08:29.620
Tüm bunlar oldukça hızlı gerçekleşirken, burada benim gibi gerçekleştiğini fark edeceksiniz.

08:29.620 --> 08:35.890
Ayrıca, tüm testleri bir milisaniyede çalıştırmak yerine tümünü çalıştır düğmesine bastığımda, örneğin

08:35.890 --> 08:39.490
modu burada yapabilir, yürütülmesi birkaç milisaniye sürer.

08:39.490 --> 08:46.090
Burada bir testin çalıştığını görme, test çalıştırıcı penceresini görme ve temel bilgileri görme şansımız oldu.

08:46.120 --> 08:48.970
Şimdi, kendi testlerimizi nasıl oluşturacağımıza bir göz atalım.
