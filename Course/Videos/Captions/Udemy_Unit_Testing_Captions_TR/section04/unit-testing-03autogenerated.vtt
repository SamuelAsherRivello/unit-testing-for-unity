WEBVTT

00:00.020 --> 00:03.440
Birim testleri, test sınıfı ve test metotları oluşturma.

00:03.440 --> 00:07.100
İşte bir test yöntemi içeren bir test sınıfının kodu.

00:07.100 --> 00:12.370
İçeride isteğe bağlı düzenle, harekete geç ve iddia et paradigmasını takip ediyoruz.

00:12.380 --> 00:14.870
Tüm testlerim için kullandığım kural budur.

00:14.870 --> 00:18.980
Böylece bir testin neye benzediğini ve mevcut bir testin nasıl çalıştırılacağını gördük.

00:19.010 --> 00:20.620
Şimdi kendi testimizi oluşturalım.

00:20.630 --> 00:22.550
Boş bir proje açacağız.

00:22.580 --> 00:29.690
Test Runner penceresini açın, bir test klasörü, bir test sınıfı ve bu testin içinde bir yöntem oluşturun.

00:29.720 --> 00:31.610
Sonra testi çalıştıracağız ve sonucu göreceğiz.

00:31.610 --> 00:33.920
Burada oldukça boş bir projedeyiz.

00:33.920 --> 00:37.310
Unity test çerçevesini zaten ekledim.

00:37.310 --> 00:39.470
Test çalıştırıcı penceresini açalım.

00:39.470 --> 00:46.370
Projede düzenleme modu testleri ve oynatma modu testleri olmadığından, bu sekmelerin her biri bazı seçenekler sunar

00:46.370 --> 00:47.540
Burada başlamamız için.

00:47.540 --> 00:53.480
İlk olarak, yeni bir klasör oluşturan düğmeye tıklayarak bir düzenleme Modu test montaj klasörü oluşturacağız

00:53.480 --> 00:59.930
proje penceremizde, birlik montajlarını test etmek için bir montaj kurulumu ve montaj tanımı da dahil olmak üzere

00:59.930 --> 01:07.220
dosyası bu dersin kapsamı dışındadır, ancak kısaca, bu, bu dosyadaki şeylerin birliğini işaret eder.

01:07.220 --> 01:11.630
verilen klasör derlenmeli, benzersiz bir şekilde derlenmelidir.

01:11.630 --> 01:16.310
Şimdi bu test montaj klasörünü kurduğumuza göre, ilk test sınıfımızı oluşturabiliriz.

01:16.310 --> 01:21.290
Bu adımların her biri pencereyi kullanmadan manuel olarak yapılabilir, ancak ben

01:21.290 --> 01:26.390
Proje penceresindeki geçerli klasörde bir test komut dosyası oluşturmak için buradaki ileri düğmesi

01:26.420 --> 01:29.460
yeni bir test sınıfı ve bize iki test yöntemi verir.

01:29.480 --> 01:32.350
Test çalıştırıcısı penceresinde her şeyin göründüğüne dikkat edin.

01:32.360 --> 01:33.770
Tüm testleri yapacağım.

01:33.770 --> 01:35.040
Tüm testler geçer.

01:35.060 --> 01:37.160
Şimdi oluşturulan koda bir göz atalım.

01:37.160 --> 01:41.990
Bu noktada, sınıfı ve bu yöntemleri uygun gördüğünüz şekilde yeniden adlandırmakta özgürsünüz.

01:41.990 --> 01:45.530
Ve tabii ki daha fazla yöntem eklemek için kopyalayıp yapıştırın.

01:45.530 --> 01:50.840
Bir test sınıfında sahip olabileceğiniz test yöntemlerinin sayısında bir sınır yoktur, ancak genellikle

01:50.840 --> 01:57.890
Belirli konuları organize etmek için sınıf, belki her üretim sınıfı için bir test sınıfı ve ardından bir

01:57.890 --> 02:00.440
her yöntem için kendi içinde test yöntemi.

02:00.440 --> 02:03.290
Üretimde böyle bir şeyi test etmek istersiniz.

02:03.290 --> 02:07.010
Bu yorumlar unity tarafından otomatik olarak oluşturulur ve oldukça faydalıdır.

02:07.520 --> 02:10.310
Burada testi kullanarak önemli noktaların üzerinden geçeceğim.

02:10.640 --> 02:15.740
Test özelliğini kullanmak bizi normal bir düzenleme modu testi için hazırlar.

02:15.740 --> 02:22.100
Unity test özelliğini kullanmak, bir testi birden fazla kare üzerinden yürütmemizi sağlar.

02:22.100 --> 02:26.630
Şimdi, daha önce unity test kullanmanın oyun modu için en uygun yöntem olduğundan bahsetmiştim.

02:26.660 --> 02:31.160
Burada ne tür eşzamansız işlevler yapabileceğiniz konusunda çok daha fazla seçeneğiniz vardır.

02:31.160 --> 02:38.060
Burada gerçekten mümkündür ve yorumda da belirtildiği gibi, bir kareyi atlamak için yield return null kullanabilirsiniz.

02:38.060 --> 02:42.920
Örneğin, kurulumu yapmak, ardından bir kare beklemek ve testi yapmak.

02:42.920 --> 02:43.910
Onun gibi bir şey.

02:43.910 --> 02:46.220
Örneğin kurulum kodunu yapmak.

02:46.220 --> 02:47.660
Bir kare bekleniyor.

02:48.220 --> 02:52.240
Ve sonra burada olduğu gibi bir iddiada bulunarak birliğe geri dönün.

02:52.240 --> 02:54.580
Şuraya geçeceğim.

02:55.200 --> 02:57.720
Oynatma moduna geçin ve aynı adımları izleyin.

02:57.720 --> 03:03.870
İlk olarak, bir oyun modu test montaj klasörü oluşturacağız ve ardından bir test komut dosyası oluşturacağım.

03:03.870 --> 03:04.710
Bu klasörde.

03:04.710 --> 03:09.840
Test koşucusunda iki test yöntemi içeren bir test sınıfımız olduğunu görebiliriz.

03:10.350 --> 03:13.250
Hepsini çalıştıracağım ve her şeyin geçtiğini göreceğiz.

03:13.260 --> 03:15.230
Oluşturulan koda bir göz atalım.

03:15.240 --> 03:21.870
Burada oluşturulan kod aslında hem oynatma modunda hem de düzenleme modunda aynıdır.

03:21.900 --> 03:24.120
Size çok benzer başlangıç noktaları verirler.

03:24.120 --> 03:25.050
Bu kadar.

03:26.390 --> 03:31.910
Test koşucusu penceresi ve birazcık C-keskinliği ekleyerek bunu görmeye başlıyoruz.

03:31.910 --> 03:35.110
birlik projelerimizle daha önce sahip olduğumuzdan daha fazla şey yapabiliriz.

03:35.120 --> 03:40.490
Birim testinde yeniyseniz, çalışma zamanı kodu oluşturmak için unity kullanmaya aşinasınızdır.

03:40.490 --> 03:42.740
Ancak kodu test etmek farklı bir şeydir.

03:43.300 --> 03:46.660
Son kullanıcılarınız tarafından asla doğrudan deneyimlenmez.

03:47.110 --> 03:52.200
Bu kod yalnızca test modunda çalışır ve son derlemenizde paketlenmez bile.

03:52.210 --> 03:58.790
Testlere artık daha büyük bir uygulamada zaman içindeki anlara açılan küçük bir pencere olarak bakmaya başlıyoruz.

03:58.810 --> 04:02.930
Tutarlı sonuçlar aldığımızdan emin olmak için dar bir odakla test yapıyoruz.

04:02.950 --> 04:08.200
Şu ana kadar çoğunlukla mevcut koda yeni testler eklemekten bahsettik.

04:08.230 --> 04:13.300
Daha sonra, test güdümlü geliştirme ile kod geliştirirken testleri nasıl ekleyeceğimize bakacağız.

04:13.330 --> 04:14.110
Teşekkürler.
