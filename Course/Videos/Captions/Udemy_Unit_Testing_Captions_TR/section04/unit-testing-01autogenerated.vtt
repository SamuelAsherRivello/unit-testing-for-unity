WEBVTT

00:00.110 --> 00:01.340
Birim testi.

00:01.340 --> 00:02.190
Genel bakış.

00:02.210 --> 00:04.100
İlk olarak, biraz bağlam.

00:04.130 --> 00:11.690
Projeleriniz daha fazla komut dosyası, daha fazla yöntem ve daha fazla karmaşıklıkla büyüdükçe, aşağıdakileri sağlamak zor olabilir

00:11.690 --> 00:14.510
yeni kod eski kodu bozmaz.

00:14.540 --> 00:19.920
Otomatik testler, kodunuzun beklediğiniz gibi çalıştığından emin olmanıza yardımcı olabilir.

00:19.940 --> 00:25.940
Otomatik testler, hataların nasıl ve nerede oluştuğunu sürecin erken aşamalarında tespit ederek bize yardımcı olur.

00:25.940 --> 00:31.010
Son kullanıcılarınızın bu hataları bildirmesini beklemek gibi çok daha pahalı bir seçenek yerine.

00:31.010 --> 00:36.210
Yani MVC mimarilerini test etmeden de kullanabilirsiniz, test etmeden de kullanabilirsiniz.

00:36.230 --> 00:37.550
MVC mimarisi.

00:37.550 --> 00:40.990
Peki bu konular hakkında birlikte konuşmak neden önemli?

00:41.000 --> 00:45.380
Çünkü bu iki teknolojinin birleşimi inanılmaz derecede güçlüdür.

00:45.410 --> 00:51.800
MVC gibi bir mimari kullanarak, kodunuzun daha ayrık olmasını, her sınıfın

00:51.800 --> 00:55.000
tek bir amacı vardır ve çözümler daha basittir.

00:55.010 --> 00:57.950
Tüm bunlar daha test edilebilir kodlar için de birer özelliktir.

00:57.980 --> 01:04.610
Projenize test eklemek sağlamlık ve daha fazla güven katar ve basit çözümleri teşvik eder,

01:04.610 --> 01:08.930
özellikle de test güdümlü geliştirme ile etkinleştirildiğinde, ki bunu tartışacağız.

01:08.960 --> 01:12.530
Projenize ve iş akışınıza birim testi eklemek zaman kazandıracaktır.

01:12.530 --> 01:15.440
Planlama, geliştirme ve bakımdan tasarruf sağlar.

01:15.470 --> 01:21.170
Kodunuza daha fazla güven katar ve bu güvenle, aşağıdaki konularda çok daha cesur olabilirsiniz

01:21.170 --> 01:22.370
Refaktörleriniz.

01:22.370 --> 01:28.910
Büyük bir refactor işleminden önce tüm testlerinizi çalıştırmayı düşünün ve sonra size zaman kazandırdıktan ve

01:28.910 --> 01:31.430
refaktörün iyi çalıştığına dair daha fazla güven duyarsınız.

01:31.460 --> 01:33.620
Test hem bir sanat hem de bir bilimdir.

01:33.620 --> 01:38.360
Daha fazla araştırma ve daha fazla uygulama ile her geliştirici kendi sanatını geliştirebilir.

01:38.360 --> 01:42.980
Ayrıca, birim seviyesindeki şeyleri test eden düşük seviye testler.

01:43.370 --> 01:49.040
Diyelim ki bireysel yöntemler ve yazılımınızın uygulamalarından ve evriminden kaynaklanacak

01:49.070 --> 01:55.970
mimari tercihler, bağımlılıklar veya diğer konular hakkında daha üst düzey tartışmaları da teşvik eder.

01:55.970 --> 02:00.710
Kodunuz boyunca bunların eksikliği ve bu sistemlerin ne kadar bağlı veya ayrık olduğu.

02:00.740 --> 02:06.850
Tüm bunlar, yazılımınıza iyi bir organizasyon getirmeye davet eden daha büyük bir konuşmanın parçasıdır.

02:06.860 --> 02:13.430
Özellikle test etmeye yeni başlayanlar olarak ilk hedefimiz, belirli bir yöntemin istenen özelliklere sahip olduğundan emin olmaktır.

02:13.430 --> 02:14.170
Sonuçlar.

02:14.180 --> 02:20.960
Bunu yaptıktan sonra, artık beklenmedik koşullarla ve tartışmaya davet edebilecek köşe durumlarıyla test edebilirsiniz

02:20.960 --> 02:24.230
ve sınıfın kendi yapısı üzerinde analiz.

02:24.260 --> 02:28.070
Daha sonra bu sınıfın içinde bulunduğu sistemin amacına bakabilirsiniz.

02:28.070 --> 02:35.330
Daha önce de belirttiğim gibi, bu tür bir analiz bize büyük ölçekli projelere bakmak için bir fırsat ve format sunuyor.

02:35.330 --> 02:37.160
ölçekli çözüm önümüzde duruyor.

02:37.160 --> 02:42.260
Yazılımda birçok farklı test türü vardır ve farkında olsanız da olmasanız da zaten

02:42.260 --> 02:43.100
Test yapıyorum.

02:43.130 --> 02:46.820
En yaygın test türlerinden birkaçı duman testidir.

02:46.850 --> 02:49.910
Bu oldukça sıradan bir test, işe yarıyor mu?

02:49.910 --> 02:50.630
Benim için mi?

02:50.630 --> 02:55.280
Ve birçoğumuz için bu, yaptığımız tek proje testi türü olabilir.

02:55.900 --> 03:02.920
Her yeni kod yaptığınızda, uygulamayı bir kullanıcı gibi çalıştırırsınız veya oyunu bir oyuncu gibi oynarsınız ve

03:02.920 --> 03:08.210
Uygulama ya da oyundaki bu belirli yolun beklediğim şekilde çalışıp çalışmadığını görüyor musunuz?

03:08.230 --> 03:14.110
Bir de kullanıcı testleri vardır; burada periyodik olarak, belki de haftalık derlemeden sonra, bazı kullanıcıları davet edersiniz

03:14.110 --> 03:16.210
ya da oyunu denemek isteyen oyuncular.

03:16.240 --> 03:21.760
Burada aradığınız sadece herhangi bir hataya sahip olup olmadığı değil, kullanıcının beklentilerini karşılayıp karşılamadığıdır.

03:21.760 --> 03:22.970
Oynamak eğlenceli mi?

03:22.990 --> 03:23.710
Bunun gibi şeyler.

03:23.710 --> 03:30.220
Birim testinde ise deneyimin çok küçük bir bölümüne bakarsınız, belki de sadece tek bir

03:30.220 --> 03:37.000
yöntem çağrısı veya sistemler birlikte çalıştıkça küçük bir çağrı dizisi ve siz soruyorsunuz

03:37.000 --> 03:37.960
Çalışması amaçlanıyor mu?

03:37.990 --> 03:43.180
Bahsettiğim gibi, projelere yaklaşmanın temel bir yolu olarak zaten duman testi yapıyoruz.

03:43.180 --> 03:45.280
Şimdi basit bir örnek düşünelim.

03:45.280 --> 03:50.170
Bir düğmesi olan ve düğmeye tıkladığınızda kazandığınız bir düğmeye tıklama uygulamamız olsaydı.

03:50.200 --> 03:52.630
Buna biraz kod ekleyebiliriz.

03:52.630 --> 03:54.910
Deneyimi derleyin ve çalıştırın.

03:54.940 --> 03:59.500
Bir düğmeye tıklayın ve kazandığınız zafer metnini gösterip göstermediğine bakın.

03:59.530 --> 04:05.110
Bu bir duman testi olacaktır ve bunu kullanıcıya aktarabilir ve onlar için işe yarayıp yaramadığını görebilirsiniz.

04:05.260 --> 04:11.340
Her iki durumda da bu, gerçekleştirilmesi oldukça pahalı bir testtir ve kodun çok dar bir kullanımıdır

04:11.350 --> 04:11.710
Buraya.

04:11.710 --> 04:17.470
Bu basit örnekte, tüm kullanım durumlarını yakalayabiliyoruz gibi görünebilir, ancak daha büyük bir oyun hayal edin

04:17.470 --> 04:19.900
çekirdek döngüler ve meta döngüler ile.

04:20.050 --> 04:24.370
Geliştiriciye ya da kullanıcıya ve kullanıcı testlerine güvenemezsiniz.

04:24.400 --> 04:30.070
Tüm düğmelerin, tüm işlevlerin, tüm girdilerin ve tüm potansiyel sonuçların test edilmesi.

04:30.070 --> 04:36.430
Doğru yapıldığında, birim testi kodda daha fazla yolu daha hızlı yakalayabilir ve siz de

04:36.430 --> 04:39.730
bu test paketini otomatik olarak daha sık çalıştırabilir.

04:39.730 --> 04:45.790
Zaman içinde, çalıştırılmaya hazır bekleyen kalıcı testlerin bir listesini oluşturuyorsunuz, böylece yeni

04:45.790 --> 04:47.930
kod eski işlevselliği bozmaz.

04:47.950 --> 04:54.340
Bazı ekipler çevik geliştirme ilkeleri altında çalışır ve bu da takviminizin bir bölümünü

04:54.340 --> 04:55.030
Bir sprint.

04:55.030 --> 05:01.540
Örneğin, her iki haftada bir, ekip her saat, gün, hafta bazı yeni özellikler eklemeyi taahhüt eder,

05:01.540 --> 05:02.420
ya da sprint.

05:02.440 --> 05:07.510
Ekip bu otomatik testleri tekrar çalıştırabilir, bu herhangi bir hatayı yakalamak için harika bir fırsattır.

05:07.510 --> 05:09.790
Peki bu testleri tam olarak nasıl yapıyoruz?

05:09.790 --> 05:13.600
Unity'nin unity editörü içinde test desteği var.

05:13.630 --> 05:19.510
İstediğiniz zaman açabileceğiniz ve bu testleri manuel olarak yürütebileceğiniz özel bir pencere vardır.

05:19.540 --> 05:21.100
Başlamak için harika bir yer.

05:21.130 --> 05:25.750
Elbette bunu otomatikleştirmek de mümkündür ve daha büyük projeler için önerilir.

05:25.750 --> 05:31.690
Bunu sürüm kontrolünüzle ilişkilendirmenin yolları vardır, böylece her işlediğinizde veya bir

05:31.690 --> 05:34.360
belirli bir dalda, bu testleri tekrar çalıştırabilir.

05:34.600 --> 05:39.020
Unity'nin kendisi, Unity Cloud build dahil olmak üzere bazı hizmetler sunar.

05:39.040 --> 05:45.040
Bu, bu testleri çalıştırmayı ve oyununuzu oluşturmayı taklit eder, ancak bunu otomatik olarak yapan bir sunucuda yapılır

05:45.040 --> 05:47.800
Günde bir kez ya da hangi sıklık mantıklı geliyorsa.

05:47.800 --> 05:53.620
Şimdi genel unity gelişiminde, unity deneyimi içinde iki farklı moda aşinayız.

05:53.770 --> 05:56.770
Oynat düğmesine basmadan önce düzenleme modundayız.

05:56.770 --> 05:58.210
Oynat tuşuna bastığımızda.

05:58.210 --> 06:01.420
Bu sahne durana kadar oyun modundayız.

06:01.480 --> 06:05.650
Unity testi ile bu iki moddan herhangi birinde test yapabilirsiniz.

06:05.650 --> 06:07.870
O halde buna yaklaşmanın birkaç farklı yolu vardır.

06:08.260 --> 06:13.480
Burada sahip olabileceğiniz test fikirlerinden bazıları, bir yöntemi çağırmak ve size

06:13.480 --> 06:14.580
beklenen sonuç.

06:14.590 --> 06:20.470
Diyelim ki ekleme yöntemi olan bir matematik sistemi sınıfımız var ve siz sadece bilinen parametreleri ve

06:20.470 --> 06:22.150
bilinen sonuçla eşleşip eşleşmediğine bakın.

06:22.150 --> 06:27.070
Editör işlevselliği hakkında belirli sorular soran testleriniz de olabilir.

06:27.100 --> 06:33.100
Editör penceresi uygun boyutta mı açıldı veya oyun nesnelerimiz veya kamera uygun boyutta mı

06:33.100 --> 06:35.350
sahne başlamadan önceki konumu?

06:35.350 --> 06:40.900
Mümkün olduğunda düzenleme modunda test yapmak başlamak için harika bir yerdir, bu nedenle varsayılan olarak bunu yapın.

06:40.900 --> 06:46.930
Oyun modu testi inanılmaz derecede kullanışlıdır, ancak çalışma zamanı kodunun ek karmaşıklığı ile birlikte gelir.

06:47.540 --> 06:47.990
İşte.

06:47.990 --> 06:53.330
Sadece belirli bir yöntemin bir sonuç döndürmesini test etmiyorsunuz, aynı zamanda bunu daha büyük bir

06:53.330 --> 06:57.020
oyun nesnelerinin yaşam döngüsü ve diğer unity kavramları.

06:57.070 --> 07:03.200
Ve eğer buradaysa, uyanma, başlatma, güncelleme vb. şeylere dayanan kodu test edebilirsiniz.

07:03.200 --> 07:04.400
çalışma zamanında yürütülür.

07:04.400 --> 07:11.210
Buradaki bazı test fikirleri, bir prefabrik oluşturulduktan sonra başlatma yöntemini düzgün bir şekilde çalıştırıp çalıştırmadığını görmektir

07:11.210 --> 07:12.620
istisnasız.

07:12.620 --> 07:14.780
Kodu zaman içinde test edebilirsiniz.

07:15.460 --> 07:19.150
Bu döngü birkaç saniye sonra düzgün bir şekilde çalışıyor mu?

07:19.180 --> 07:21.820
Çalışma zamanı fizik etkileşimlerini kontrol edebilirsiniz.

07:21.820 --> 07:28.720
3D oyununuzda bir top zıplama faktörünü test etmeyi bırakmadan önce kaç zıplama yapar?

07:28.750 --> 07:30.310
Burada biraz daha bağlam.

07:30.310 --> 07:36.830
Geçmişte unity, test runner penceresini kullanarak editörde yerleşik testler sunmuyordu.

07:36.850 --> 07:37.330
Göreceğiz.

07:37.360 --> 07:43.570
Unity'nin ilk lansmanından bu yana geçen uzun yıllar boyunca, bu işlevsellik yavaş yavaş eklendi ve şu şekilde genişletildi

07:43.570 --> 07:45.100
Unity'nin son sürümü.

07:45.130 --> 07:50.500
İstediğimiz test türlerini istediğimiz şekilde uygulamak için ihtiyacımız olan her şeye sahibiz.

07:50.500 --> 07:55.900
İş akışınıza birim testi eklemek için hiç bu kadar iyi bir zaman olmamıştı ve birlikte nasıl yapılacağını göreceğiz

07:55.900 --> 07:56.770
Bunu yapmak için.

07:57.160 --> 07:57.970
Teşekkürler.
