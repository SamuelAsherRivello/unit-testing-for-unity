WEBVTT

00:00.050 --> 00:02.900
Burada test çiftleri hakkında konuşalım.

00:02.910 --> 00:03.970
Genel bir bakış sunacağım.

00:03.980 --> 00:07.940
Birkaç tür birim testinden bahsederek başlayalım.

00:07.940 --> 00:12.020
Bu, birim testinize bakmanın çok geniş ve soyut bir yoludur.

00:12.230 --> 00:13.460
Burada okuyacağım.

00:13.580 --> 00:21.260
Bir birim testi, test edilen sistemin hiçbir bağımlılığının olmadığı tek başına bir test olarak düşünülebilir,

00:21.290 --> 00:26.990
veya test edilen sistemin gerçekten bağımlılıkları olduğu durumlarda sosyal.

00:27.140 --> 00:34.220
Saf fonksiyonlar dersini hatırlarsanız, tek başına olan bir şey biraz daha saftır.

00:34.220 --> 00:36.200
sosyal olan daha saf değildir.

00:36.230 --> 00:37.220
Şuna bir göz atalım.

00:37.220 --> 00:44.150
Buradaki diyagramda, bazı üretim kodlarımız olduğunu ve bazı tekil birim testleri koymak istediğimizi hayal edin

00:44.150 --> 00:47.780
çünkü solitary'nin bağımlılıkları yok.

00:47.810 --> 00:55.150
İlk testimizin doğrudan üretim kodu içindeki bir ve yalnızca bir sınıfa gittiğine dikkat edin.

00:55.160 --> 01:01.970
Ve sadece başka bir sınıf üzerinde bir şeyi test eden başka bir tekil testimiz var.

01:01.970 --> 01:06.080
Bu daha çok tek başına bir yaklaşım, daha çok saf bir yaklaşım olacaktır.

01:06.080 --> 01:10.280
Şimdi bunu aşağıda gördüğümüz sosyal bir birim testiyle karşılaştıralım.

01:10.310 --> 01:16.760
Sosyal bir test, kendi içinde 1 veya 2 başka sisteme bağlı olan bir sistemi test edebilir.

01:16.760 --> 01:22.670
Yani burada biraz daha üst düzey bir şeyi test ediyoruz, ancak bunun bağımlı olacağının farkındayız

01:22.670 --> 01:24.770
diğer bazı sistemlerde.

01:24.770 --> 01:26.560
Yani bazı bağımlılıkları var.

01:26.570 --> 01:30.010
Şimdi burada sadece 0.02 dolar vereceğim.

01:30.030 --> 01:31.520
Bu biraz da bir görüş.

01:31.730 --> 01:36.620
Sosyal testler yaparsanız daha az test yaptırabilirsiniz.

01:36.620 --> 01:42.800
Ancak bu testler daha fazla varsayım ve bağımlılık içeren daha üst düzey kavramları test etmektedir.

01:43.250 --> 01:49.550
Oysa tek başına birim testleri yaparsak, daha yüksek hacimli testleriniz olabilir çünkü

01:49.550 --> 01:51.500
daha bireysel sistemler.

01:52.080 --> 01:58.650
Muhtemelen daha fazla tek başına test yapmayı hedefliyorsanız, daha fazla yeniden düzenleme yapmanız gerekecektir,

01:58.650 --> 02:02.250
çünkü muhtemelen üretim kodumuz varsayılan olarak temel alınmıştır.

02:02.250 --> 02:08.280
Unity geliştiricileri olarak, daha fazla bağımlılık, daha fazla sistemler arası işlem düşünüyorum.

02:08.280 --> 02:15.060
Dolayısıyla, mevcut kod tabanınızda yapılması muhtemelen daha kolay olan sosyal testlerden geçmeye başlarsanız

02:15.060 --> 02:20.520
ve tekil testlere doğru ilerlemek istiyorsanız, sistemlerinizde bazı yeniden düzenlemeler yapıyor olabilirsiniz, böylece

02:20.520 --> 02:22.070
daha bağımsız çalışırlar.

02:22.080 --> 02:24.530
Şimdi test çiftlerinin ne olduğu hakkında konuşalım.

02:24.540 --> 02:29.610
Yani bir test ikilisi, herhangi bir gerçek nesnenin yerine geçebilecek bir nesnedir.

02:29.640 --> 02:35.610
Bu, birim testlerinin saflığını artırmaya yardımcı olarak daha yalnız hale getirebilir.

02:35.610 --> 02:42.330
Buradaki resmimizin de ima ettiği gibi, bir test dublesi mevcut bir üretim sınıfı için ikiz gibi bir şeydir.

02:42.330 --> 02:44.610
Peki bu iki ikiz birbirine ne kadar benziyor?

02:44.610 --> 02:48.540
Bu, büyük ölçüde hangi tür test çiftini uyguladığımıza bağlıdır.

02:48.660 --> 02:50.130
Çok geniş bir aralık var.

02:50.130 --> 02:51.510
Şimdi bu tabloyu inceleyeceğim.

02:51.510 --> 02:53.910
İşte bazı çift test türleri.

02:53.910 --> 03:00.330
Genel olarak konuşursak, bu listenin en üstünde daha az şey yapan daha aptal bir nesne ve en altında da

03:00.330 --> 03:03.780
alt kısım daha fazla şey yapan daha eksiksiz bir nesnedir.

03:03.930 --> 03:10.440
Bahsettiğiniz teste bağlı olarak, bunlardan birinin, herhangi birinin

03:10.440 --> 03:12.180
en iyi çözümdür.

03:12.210 --> 03:17.610
Amaç ille de her zaman sahte olanı ya da sahte olanı denemek değildir.

03:17.640 --> 03:22.050
Her birinin burada bir rolü vardır ve ne yaptığınıza bağlı olarak, bazı değerler bulabilirsiniz.

03:22.410 --> 03:29.220
Yani bir kukla, boş bir değer ya da çok az şey yapan veya hiçbir şey yapmayan aptal bir nesne iletiyor.

03:29.220 --> 03:33.570
Ve bu derleme için kullanılır, ancak aslında hiçbir zaman çağrılmaz.

03:33.570 --> 03:38.250
Yani kurucuda bir şey olması gereken bir sınıfınız olduğunu düşünün ve sonra

03:38.250 --> 03:40.950
test için o sınıfta bir yöntem.

03:40.980 --> 03:46.020
Çağırdığınız yöntem, yapıcıya aktardığınız şeye gerçekten bağlı olmadığı sürece,

03:46.050 --> 03:52.740
null değerini ya da derleme için ihtiyacınız olan minimum değeri geçmenizde bir sakınca yoktur.

03:52.740 --> 03:59.130
Bunu, sadece derlemeye yetecek kadarını koymak ve ardından parçaları test etmek olarak düşünebilirsiniz

03:59.130 --> 04:00.230
hala çalışıyor.

04:00.240 --> 04:03.930
Bu test üzerinde en düşük güce veya etkiye sahiptir.

04:03.960 --> 04:05.670
Aslında hiç yok.

04:05.670 --> 04:07.560
Sırada, saplama fikri var.

04:07.560 --> 04:13.410
Hayatta genel olarak saplama, amaca yeterince hizmet eden geçici bir şey koymaktır.

04:13.410 --> 04:15.180
Saplama terimi de buradan geliyor.

04:15.180 --> 04:19.260
Yani burada test edilen sisteme sahte veri sağlıyoruz.

04:19.290 --> 04:22.290
Bu, kukla gibi derleme içindir.

04:22.290 --> 04:26.550
Ancak bu aynı zamanda gerçekte neyi aradığınız ve test ettiğinizle de ilgilidir.

04:26.850 --> 04:32.550
Ancak fikir yine minimum miktarı koymak ve istediğiniz sonuçları alabilmektir.

04:32.580 --> 04:37.050
Ve bunu tek başına test kavramlarına geri getiriyorum.

04:37.050 --> 04:44.400
Sisteminizin ikinci bir sisteme bağımlılığı varsa ve bunu test etmek istiyorsanız, sahte bir

04:44.400 --> 04:46.590
ya da ikinci sistem için bir saplama.

04:46.590 --> 04:53.760
Bu şekilde, birincil sisteminiz hala ihtiyaç duyduğu şeyi bekler ve alır, ancak

04:53.760 --> 04:57.540
ikinci bağımlılık için sabit kodlanmış üretim kodu.

04:57.540 --> 04:59.550
Ve bunu kodlama örneklerinde göreceğiz.

04:59.790 --> 05:01.670
Sıradaki bir casus.

05:01.710 --> 05:06.420
Yani bir casus, test edilen sistemin nasıl kullanıldığını kaydeder.

05:06.450 --> 05:12.840
Yani burada belirli bir yöntemin çağrılıp çağrılmadığını test ediyorsunuz, karşılığında biraz daha fazla bir şey

05:12.840 --> 05:14.730
test üzerinde güç ve etki.

05:14.730 --> 05:17.550
Burada devam etmek değerlerle alay etmektir.

05:17.550 --> 05:22.560
Yani burada test edilen sistemi ve ne döndürdüğünü tanımlıyorsunuz.

05:22.560 --> 05:24.300
Yani bu daha yüksek bir güce sahip.

05:24.300 --> 05:28.950
Ve bu sadece bir metodun dönüp dönmeyeceğini değil, ne döndüreceğini de tanımlar.

05:28.950 --> 05:37.980
Ve son olarak pişirme, tam üretim dışı uygulama eklediğinizde ve yapmak için tam kontrole sahip olduğunuzda

05:37.980 --> 05:39.180
İhtiyacınız olan her neyse.

05:39.210 --> 05:45.630
Yani burada kısaca daha düşük güçlü, daha hızlı, daha ucuz bir menü seçeneğiniz olduğunu görebilirsiniz.

05:45.630 --> 05:50.700
en üstte seçenekler ve en sonda daha yüksek güçlü, daha güçlü şeyler var.

05:50.700 --> 05:55.620
İşte aynı dersin daha önceki bölümlerinden bir kod parçacığı.

05:55.620 --> 06:03.570
Ve sistemimin bu örneğini oluştururken de içeri girdiğimizi görüyoruz, oluşturuyoruz

06:03.570 --> 06:06.540
kurucu ve bir çarpan değeri geçiyoruz.

06:06.840 --> 06:12.150
Sonra dönüştürme değerini çağırdığımızda, dönüştürme değeri üzerinde bir birim testi yaptığımızı düşünün.

06:12.180 --> 06:18.990
Bu dolaylı girdiye sahibiz çünkü dönüştürme değeri sadece değer argümanına bağlı değildir.

06:18.990 --> 06:21.900
geçiyoruz, ama başka bir şey üzerinde.

06:21.900 --> 06:26.220
Ve biz bunu saf olmayan ya da saf olmayan olarak değerlendiriyoruz.

06:26.220 --> 06:28.860
Ve bu mutlaka bir sorun değildir.

06:28.860 --> 06:33.270
Ancak bunun olabildiğince deterministik olmadığının farkındayız.

06:33.270 --> 06:37.470
Ayrıca bu çarpan değerine de bağımlıdır.

06:38.320 --> 06:41.170
Şimdi, bunu kesinlikle olduğu gibi birim testine tabi tutabilirsiniz.

06:41.200 --> 06:44.680
Ve koda baktığımızda, tam da bunu yapabileceğimizi göreceğiz.

06:44.710 --> 06:47.650
Bunun üzerine standart bir test uygulayabiliriz.

06:47.650 --> 06:50.590
Ancak burada ne tür bir yeniden düzenleme yapabileceğimizi düşünelim.

06:50.590 --> 06:54.940
İşte az önce gördüklerimizi geliştirmeyi amaçlayan yeni bir sınıf.

06:55.270 --> 07:03.280
Şimdi burada gerçekten de kurucuya bir şey aktarıyorum, ancak bunun yerine sadece

07:03.280 --> 07:07.120
bir değer, ancak bu değeri tutan bir arayüz.

07:07.150 --> 07:10.030
Şimdi, bu çok basit bir örnek.

07:10.060 --> 07:16.900
Tüm zorlukları çözmesi gerekmiyor, ancak bu küçük bebek adımında daha fazla şey öğreniyoruz,

07:16.900 --> 07:20.530
Burada bir arayüzün neden daha yararlı olduğunu öğreneceğiz.

07:21.460 --> 07:26.790
Yine burada dönüştürme değerinde bu dönüştürücü sınıfını kullanacağız.

07:26.800 --> 07:33.340
Oradaki sorumluluğun bir kısmını biraz daha dolaylı yollardan aktarıyoruz.

07:33.340 --> 07:35.950
işlevselliği biraz daha bağımlılık.

07:35.950 --> 07:40.780
Ama yine göreceğiz ki, bu bir arayüz olduğu için, bir şeylerle oynayabileceğiz

07:40.780 --> 07:43.780
Burada elimizdeki kütüphanelerden birini kullanıyoruz.

07:43.780 --> 07:45.850
Bunun bize nasıl yardımcı olabileceğini görelim.

07:45.850 --> 07:53.860
Bu yüzden burada yeşil renkte, bazı test çiftlerini oluşturmamıza yardımcı olacak bir kütüphane kullanacağız

07:54.220 --> 07:55.450
Bu durumda.

07:55.450 --> 07:58.110
Peki ne tür bir test çifti yaratıyoruz.

07:58.120 --> 08:02.620
Kullandığımız son yedek kütüphanenin dili.

08:02.620 --> 08:07.180
Ve bu son yedek bağımlılık sizin için örnek projeye dahil edilmiştir.

08:07.180 --> 08:09.550
Ve buna örnek kodda bakacağız.

08:10.240 --> 08:19.120
Son ikamenin bizim için yapabileceği şey, nokta yerine nokta koymaktır ve aşağıdakilere dayalı yeni bir test ikilisi oluşturabiliriz

08:19.120 --> 08:20.350
I dönüştürücü.

08:20.530 --> 08:27.130
Daha sonra burada, test dünyasında, herhangi bir üretim kodunu etkilemeden şunları yapabiliriz

08:27.130 --> 08:32.580
dönüştürücü test çiftinin bizim için tam olarak ne yapması gerektiğini tanımlayın.

08:32.590 --> 08:39.670
Çünkü tam burada yeşil renkte, istediğimiz davranışı tamamen kontrol edebilir ve simüle edebiliriz.

08:39.700 --> 08:44.230
Üretim koduna olan bağımlılıkları azaltıyoruz.

08:44.530 --> 08:49.540
Bağımlılığı sadece test koduna taşıyoruz.

08:49.540 --> 08:50.950
Ve bu çok faydalı.

08:50.950 --> 08:56.470
Üretim kodunuzun yeterince esnek olduğu durumlarda bu tür kavramları daha fazla benimseyebilirsiniz.

08:56.470 --> 08:59.230
Bu durumda, yeterince esnek, arayüzler anlamına gelir.

08:59.230 --> 09:01.120
Ama bunu satabileceğimiz başka yollar da var.

09:01.450 --> 09:09.910
Testlerimizin sahte saplamaları simüle edebilmesi için yeterince esnek olması, ihtiyacımız olan şeylerden daha fazlası,

09:09.910 --> 09:10.840
daha iyi.

09:11.170 --> 09:13.540
Sonra yapacağımız şey dönüştürücüyü içeri aktarmaktır.

09:13.540 --> 09:19.750
Dolayısıyla, önceki örnekle karşılaştırıldığında, 20 çarpan değerini geçmiyoruz.

09:19.780 --> 09:28.420
Burada daha yakından kontrol edebildiğimiz sahte simüle edilmiş bir stubbed test double'ı geçiriyoruz.

09:28.600 --> 09:33.910
Şimdi burada ikinci satırda dönüştürücü dönüştürme değeri yazdığını biliyoruz.

09:33.940 --> 09:35.940
Belirli bir dil var.

09:35.940 --> 09:41.530
Aşina değilseniz biraz garip görünüyor, ancak bunun için belgelere bağlantılar ekliyorum.

09:41.560 --> 09:50.470
Söylediğimiz şey, convert değerini çağırırsak ve int türünde herhangi bir argüman geçirirsek, ki bu

09:50.470 --> 09:56.080
ihtiyacı varsa, her zaman değer çarpanını döndürecektir.

09:56.380 --> 09:57.670
Etkili bir şekilde.

09:57.700 --> 10:00.790
Sonuçtaki sıcak kablolar gibiyiz.

10:00.790 --> 10:07.030
Kendi test sınıflarımızı oluşturmak zorunda kalmadan beklediğimiz uygulamayı bekliyoruz.

10:07.060 --> 10:11.530
Sahte sınıflar, sahte sınıflar sanırım daha iyi bir kelime.

10:12.070 --> 10:17.230
Ve sonra burada aşağıda mavi renkte aynı eski sisteme nokta dönüştürme değeri diyoruz.

10:17.410 --> 10:25.630
Şimdi buna yeşil ve mavi arasında baktığımızda, varsayım yapabileceğimiz kadarını görebiliyoruz

10:25.630 --> 10:31.510
sonucumuz 30'a eşit olacak çünkü tüm uygulama burada.

10:31.600 --> 10:37.840
Yani mavi gerçekten minimum miktarda işlevselliği test ediyor.

10:38.230 --> 10:42.610
Sistemin kendisinde hiçbir işlevselliği test etmediğini bile iddia edebilirsiniz.

10:42.790 --> 10:47.920
Ancak yine de, bununla oynuyoruz ve bilerek basit bir örnek gösteriyoruz.

10:48.190 --> 10:55.090
Eğer dönüşüm değeri biraz daha fazla olsaydı, dönüşümün tamamını olmasa da bir kısmını etkileyebilirdik.

10:55.090 --> 10:57.970
burada yeşil ile gösterilenleri kullanarak uygulanması.

10:57.970 --> 11:04.060
Ancak burada saf ile saf olmayan arasında ve saf ile saf olmayan arasında hareket etme fikriyle oynadığımızı unutmayın.

11:04.060 --> 11:09.730
yalnız ve sosyal testler ve bize yardımcı olan bu kütüphanelere bakabilmenin yararı

11:09.730 --> 11:17.560
test çiftleri yapmak, birim testlerimizde yeniden düzenlemeye gerek kalmadan daha fazlasını yapabilmemizdir.

11:17.560 --> 11:18.850
üretim kodumuz.

11:18.850 --> 11:25.870
Ancak test odaklı geliştirmeyi ve genel olarak birim testini kullandıkça, mevcut

11:25.870 --> 11:31.690
üretim kodu ve gerektiğinde üretim kodunuzu yeniden düzenlemeye açık olmak.

11:31.720 --> 11:39.340
Bunlar bu yolculuk boyunca kullanabileceğiniz harika araçlardır, böylece karmaşıklığı azaltarak

11:39.340 --> 11:43.960
ve üretim kodunuzdaki bağımlılıklar, daha fazla birim test edilebilir kod elde ederiz.

11:43.960 --> 11:50.320
Ancak bunu yapmamış olsanız bile, burada daha iyi test türleri yapmamıza yardımcı olabilecek bazı kütüphanelerimiz var

11:50.320 --> 11:50.860
İkiye katlanıyor.

11:50.860 --> 11:52.420
Bu da bize daha fazla seçenek sunuyor.
