WEBVTT

00:00.380 --> 00:02.620
Saf fonksiyonlar ve genel bakış.

00:02.630 --> 00:06.290
Peki, saf bir yöntem olarak da bilinen saf bir fonksiyon nedir?

00:06.290 --> 00:10.250
Peki bunun birim test süreciyle ne ilgisi var?

00:10.280 --> 00:18.320
Saf bir işlev, diğer ilgisiz sistemler üzerinde daha az etkisi ve bağımlılığı olan bir işlev olarak düşünülebilir.

00:18.440 --> 00:24.020
İlgisiz derken, fonksiyonun kendi gövdesindeki kodla doğrudan ilgili olmadığını kastediyorum.

00:24.440 --> 00:31.580
Burada ekranı okurken bakabileceğimiz bir yol, dönüş değerlerinin aynı

00:31.580 --> 00:37.850
argümanlarından biri olarak bir değer iletirseniz, her zaman

00:37.850 --> 00:41.650
ve ikinci olarak, hiçbir yan etkisi yoktur.

00:41.660 --> 00:50.030
Yan etkiler, belirli bir sistemin yürütülmesi sırasında etkilenen dolaylı çıktılar veya diğer sistemlerdir.

00:50.030 --> 00:50.770
Yöntem.

00:50.780 --> 00:57.800
Yani bir işlev ne kadar safsa, o kadar izole ve bağımsız çalışır.

00:57.800 --> 01:03.200
Dolayısıyla, örnek proje için verilen örnek kodda, şuna benzer bir şey göreceksiniz

01:03.230 --> 01:04.490
C-sharp kod tabanı.

01:04.850 --> 01:07.640
Burada sadece bakabilmemiz için birkaç renk ekledim.

01:07.640 --> 01:15.650
Burada Sistemim adında özel bir sınıfımız olduğunu ve içindeki bir yöntemin

01:15.650 --> 01:16.910
Değeri dönüştür.

01:16.940 --> 01:23.810
Aktardığım iki argüman ve bu iki değer olduğuna dikkat edin ve yalnızca bu iki değer

01:23.810 --> 01:26.630
operasyonu etkileyen doğrudan girdiler.

01:26.660 --> 01:34.670
Orada mavi renkte gördüğümüz üçüncü bir kamu statik özel statik ilişkisiz sistem yoktur.

01:34.670 --> 01:36.140
Çok basit.

01:36.140 --> 01:38.960
Şimdi burada çok daha fazla kod satırına sahip olabilirsiniz.

01:38.960 --> 01:41.840
Bunu saf yapan sadece kısa olması değil.

01:41.840 --> 01:48.860
Sonucun argümanlara ve sadece bu argümanlara bağlı olduğunu görüyoruz.

01:48.860 --> 01:56.930
Dolayısıyla, çıktılar veya yan etkiler hakkında konuştuğumuzda, burada başka hiçbir şeyin olmadığını görebiliriz.

01:56.930 --> 01:58.610
değerleri burada ayarlanır.

01:58.880 --> 02:02.840
Eğer herhangi bir geçici değer ayarlarsak, bu saf bir fonksiyonda sorun olmaz.

02:02.840 --> 02:09.620
Ancak burada mavi içinde ilgisiz sistemler veya statik değişkenler üzerinde değerler ayarlıyor olsaydık

02:09.620 --> 02:15.620
Bu yöntemin ötesinde bir ömrü olan şeyler, onu daha az saf hale getirecek şeyler olacaktır.

02:15.620 --> 02:20.840
Şimdi burada birkaç slayta daha bakacağız, bazı teoriler edineceğiz ve aynı zamanda

02:20.840 --> 02:21.440
kodu.

02:21.440 --> 02:27.470
Bu kavramları tanıtırken ve pekiştirirken, hepimiz bu kavramların değerini biraz daha iyi anlayacağız.

02:27.470 --> 02:29.330
Saf bir fonksiyon olmanın ne anlama geldiğini.

02:29.330 --> 02:33.140
Burada daha da derinlemesine bir açıklama görüyoruz.

02:33.140 --> 02:34.310
Yüksek sesle okuyacağım.

02:34.400 --> 02:41.450
Saf bir fonksiyonun hata ayıklaması, bakımı ve birim testi genellikle aşağıdaki faktörler nedeniyle daha kolaydır

02:41.450 --> 02:41.930
Bir.

02:41.930 --> 02:43.670
Herhangi bir yan etkisi yoktur.

02:43.670 --> 02:49.010
Bu, davranışın yalnızca bu girdiye dayalı olarak öngörülebilir ve tutarlı olduğu anlamına gelir.

02:49.010 --> 02:52.640
Tıpkı örnekte gördüğümüz gibi, deterministiktir.

02:52.640 --> 02:57.140
Bu, belirli bir girdi verildiğinde her zaman aynı çıktıyı ürettiğimiz anlamına gelir.

02:57.170 --> 03:00.250
Bu, ilgisiz başka bir değer olmadığı anlamına gelir.

03:00.260 --> 03:02.060
Rastgelelik yok.

03:02.060 --> 03:07.400
Eğer üç ve on değerlerini girersek, her zaman 30 değerini alırız.

03:07.430 --> 03:13.610
Önceki örnekte, saf bir işlev de yalıtılmış olarak çalışır, bu nedenle ayarlamaya gerek yoktur ve

03:13.610 --> 03:15.620
dış bağımlılıkları yönetin.

03:15.620 --> 03:19.790
Bu çok sayıda farklı örnek olabilir, ancak burada birkaçı veritabanlarıdır.

03:19.790 --> 03:27.080
Dosya sistemi ağ kaynakları, sistem tarafından kullanılan oluşturulan diğer sınıflar.

03:27.080 --> 03:32.600
Birim testinde hata ayıklamanın ve bakım yapmanın bu kadar kolay olmasının bir başka nedeni de

03:32.600 --> 03:33.530
birim testleri.

03:33.530 --> 03:37.610
Girdileri sağlayabilir ve belirli çıktıları ileri sürebilirsiniz.

03:37.610 --> 03:42.560
Testin etrafındaki şeylerin oluşturulmasına ilişkin daha az şablon vardır.

03:42.560 --> 03:45.080
Ve son olarak modüler ve yeniden kullanılabilir.

03:45.080 --> 03:51.950
Dolayısıyla, saf bir fonksiyon olan ve saf fonksiyonlara dayanan kod daha bağımsız ve taşınabilir olma eğilimindedir,

03:51.950 --> 03:56.170
ve aynı işlevselliğin farklı bağlamlarda yeniden kullanılmasını kolaylaştırır.

03:56.180 --> 04:01.910
Şimdi, bir bütün olarak kursun temasına çok benzer şekilde, saf fonksiyonlardan bahsediyoruz,

04:01.910 --> 04:08.690
Kodunuz daha kolay test edilebilir olduğunda, bunun test süreci için iyi olduğunu söyleyebilirim, ancak daha

04:08.690 --> 04:12.890
büyük ölçüde kodun daha iyi tasarlandığına işaret ediyor.

04:12.890 --> 04:20.450
Yani kodumuzu test etmesek bile, eğer kodumuzun yan etkisi yoksa, daha deterministikse, daha

04:20.450 --> 04:28.010
daha izole, modüler ve yeniden kullanılabilir olması, üretim kodunun kendisi için faydalıdır.

04:28.010 --> 04:36.110
Dolayısıyla, bir şeyin birim test edilebilir olmasının faydaları ve faydaları arasında bir gelgit görüyoruz

04:36.110 --> 04:37.370
üretim kodu olması.

04:37.370 --> 04:41.120
Eğer saf fonksiyon buysa, o zaman saf olmayan fonksiyon nedir?

04:41.120 --> 04:44.410
Bu sadece çok saf olmayan bir işlevdir.

04:44.420 --> 04:49.190
Ayrıca bu %100 saf değil, %100 saf değil.

04:49.190 --> 04:53.780
Belirli bir işlevden bahsederken, onun saflık düzeyini değerlendirebiliriz.

04:53.780 --> 04:55.520
Bu ortalarda bir yerde olabilir.

04:55.520 --> 04:59.660
Saf olmayan bir fonksiyonun temel kriterlerinden bazıları şunlardır.

04:59.820 --> 05:03.450
Dolaylı girdiler, yani bir çeşit paylaşılan durum vardır.

05:03.570 --> 05:10.740
Belki bir değer giriyoruz ve bu değer üzerinde çalışıyor, ayrıca saf olmayan başka bağımlılıklar kullanıyor

05:10.740 --> 05:13.140
ve ayrıca dolaylı çıktılara sahip olmak.

05:13.170 --> 05:14.700
Basit örneğimizi hatırlayın.

05:14.700 --> 05:16.200
Yakında başka bir tanesine bakacağız.

05:16.200 --> 05:18.940
Sadece iki sayıyı çarpıp geri döndürür.

05:18.960 --> 05:26.460
Bir tür ortak değer olarak durgun bir şekilde duracak herhangi bir ilgisiz sistem değeri ayarlamıyordu.

05:26.460 --> 05:26.820
Durum.

05:27.030 --> 05:33.930
Ancak burada, saf olmayan bir fonksiyon söz konusu olduğunda, dolaylı girdiler fikrinden birine veya her ikisine birden sahip olabilir

05:33.960 --> 05:35.040
dolaylı çıktılar.

05:35.040 --> 05:36.690
İşte çok basit bir örnek.

05:36.690 --> 05:38.430
Bu aynı zamanda örnek projede de yer almaktadır.

05:38.430 --> 05:41.670
Bu da saf olmayan bir sistem örneğidir.

05:41.760 --> 05:43.800
Yani biraz farklı.

05:43.830 --> 05:47.460
Burada da aynı çarpma işlemini yapıyoruz.

05:47.460 --> 05:50.490
Ancak burada değeri dönüştürme yöntemine dikkat edin.

05:50.490 --> 05:53.910
İhtiyacı olan tüm argümanları almaz.

05:53.910 --> 05:59.180
Bir değer alır ve onu mevcut bir sistem değeriyle çarpar.

05:59.190 --> 06:03.000
Yani bu bir dolaylı girdi örneğidir.

06:03.030 --> 06:09.210
Çarpan, değeri dönüştür yöntemi çağrılmadan önce mevcuttur.

06:09.210 --> 06:13.890
Yani bu, saf olmayan bir fonksiyonun dolaylı girdi kısmıdır.

06:13.920 --> 06:18.840
Şimdi bahsettiğimiz diğer kısım ise burada bazı dolaylı çıktılara sahip olmak.

06:18.840 --> 06:20.760
Bunun bir örneğini görmüyoruz.

06:20.790 --> 06:24.270
Değişen ve devam eden bir durum yok.

06:24.300 --> 06:26.310
Sadece basit bir değer döndürüyoruz.

06:26.310 --> 06:29.100
Ve bir değer döndürmek buna karşı sayılmaz.

06:29.100 --> 06:32.640
Yani dolaylı girdimiz var ama dolaylı çıktımız yok.

06:32.640 --> 06:35.880
Ancak yine de bunlardan birinin burada olması onu safsız yapar.

06:35.880 --> 06:38.610
Peki bu saf olmayan fonksiyonlarla ne yapacağız.

06:38.610 --> 06:44.250
Saf fonksiyonların test edilmesinin daha kolay olduğunu ve üretim kodlarında birçok faydası olduğunu ima ettik

06:44.250 --> 06:45.360
kullanımı da.

06:45.360 --> 06:50.330
Peki, eğer saf bir fonksiyonumuz yoksa bu konuda ne yapabiliriz?

06:50.340 --> 06:56.010
Yapabileceğimiz şeylerden bazıları, kesinlikle onu kendi haline bırakabilir, saf olmadığı için bırakabiliriz.

06:56.010 --> 06:57.720
Ve bunu sık sık yapacağız.

06:57.720 --> 07:03.570
Ancak bazen bir şeyin birim testini yapmaya çalışırken, aşağıdaki konularda cesaretlenebiliriz

07:03.570 --> 07:07.800
Bu sistemin biraz daha saf hale gelmesine yardımcı olmak için biraz yeniden düzenleme yapmak.

07:07.800 --> 07:13.380
Belki bunu %100 başaramayız ama bu yine sanat hakkında konuşmaktır.

07:13.410 --> 07:18.150
Kodunuzun ne kadar saf ve ne kadar saf olmayan bir yapıda olmasını istediğinize karar vermek size kalmış.

07:18.180 --> 07:23.580
Şimdi, bazı geliştiriciler teorik olarak her şeyin her zaman saf olmasını istedikleri bir yaklaşım sergileyebilirler.

07:23.580 --> 07:24.210
Zaman.

07:24.510 --> 07:25.620
Bu da bir yaklaşım.

07:25.650 --> 07:29.250
Bir diğeri de eskiden oluşturduğunuz gibi kod oluşturmaktır.

07:29.250 --> 07:32.550
Ve eğer bu saf değilse, onu saf bırakırsınız.

07:32.550 --> 07:38.010
Sizi davet etmek istediğim şey, fikirlere biraz masaj yapmak ve onlarla oynamak için rahat olmak.

07:38.010 --> 07:42.810
Ortada bir yerde saf olmayan bir şeyi alıp biraz daha saf hale getirebilirsiniz.

07:42.810 --> 07:47.580
Üretim kodunuza sağladığı faydaların yanı sıra birim testinize sağladığı faydaların da farkına varmak.

07:47.580 --> 07:49.290
Bakalım burada ne yapabileceğiz.

07:49.290 --> 07:51.990
Bazı yan etkileri ortadan kaldırabiliriz.

07:52.110 --> 07:56.700
Yan etkilere benzer şekilde paylaşılan durumu ortadan kaldırabiliriz.

07:56.730 --> 07:59.580
Kullanılan bağımlılıkları ortadan kaldırabiliriz.

07:59.730 --> 08:04.350
Ve kendimizi test başına bir iddiaya sahip olmaya davet edebiliriz.

08:04.380 --> 08:12.270
Şimdi bu, bir test sadece bir şeyi iddia ediyorsa, kodumuzun şunları yapması gerektiğini anlamamıza yardımcı olacaktır

08:12.270 --> 08:15.270
bu iddiayı karşılamak için oldukça basit olmalı.

08:15.360 --> 08:17.640
Bu yüzden koda baktığımızda bununla biraz oynayacağız.

08:17.640 --> 08:19.050
Peki bunu nasıl yapabiliriz?

08:19.050 --> 08:23.700
Peki, üretim kodunun yeniden düzenlenmesinin bir kısmını, aşağıdaki adımları uygulayarak yapabiliriz

08:23.700 --> 08:24.630
önceki slayt.

08:24.630 --> 08:29.730
Bir diğeri ise bir sonraki bölümde yeni bir test ikilisi kavramını tanıtmak istiyorum.

08:29.760 --> 08:30.570
Teşekkürler.
