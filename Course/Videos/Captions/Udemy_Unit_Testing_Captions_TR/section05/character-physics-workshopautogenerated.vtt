WEBVTT

00:00.050 --> 00:02.240
Merhaba ve Unity için Birim Testine hoş geldiniz.

00:02.270 --> 00:05.270
Bu atölye çalışmamızda karakter fiziği hakkında konuşuyoruz.

00:05.300 --> 00:11.750
Şimdi önceki atölye çalışmalarında çok basit bir karakter örneğinden yavaşça okla hareket eden

00:11.750 --> 00:17.600
Monobehaviour ve monobehaviour olmayan endişeleri ayıran gelişmiş örneğin anahtarları.

00:17.600 --> 00:22.580
Ve burada, başka bir birlik sistemine bağlı olursak ne olur sorusu hakkında konuşacağız.

00:22.580 --> 00:23.540
Fizik gibi.

00:23.540 --> 00:29.360
Ve ayrıca bu özel örnekte fizik kullandığımızda hareketimiz daha bulanık hale gelir.

00:29.360 --> 00:33.500
Yani sola tıklamıyorum ve hemen bir konuma tıklıyor.

00:33.500 --> 00:35.570
Zaman içinde yavaşça hareket eder.

00:35.570 --> 00:39.740
Zaman içinde yavaşça değişen bir değeri nasıl test edebiliriz?

00:39.740 --> 00:42.860
Bu yüzden kaynak kodda bu şeylerden birkaçı hakkında konuşacağız.

00:42.860 --> 00:47.930
Bu demoya bir göz atmak için unity editörümüzü ve örnek projemizi açıyoruz.

00:47.930 --> 00:50.660
Buradaki sahne karakter fiziği sahnesi olacak.

00:50.660 --> 00:54.330
Ve bakacağımız şeylerden biri de bu bulanık değerlerin nasıl test edileceğidir.

00:54.350 --> 01:01.280
Tekrar söylüyorum, bulanık değerler benim için anlık olarak değişmek zorunda olmayan değerlerdir.

01:01.280 --> 01:02.270
A'dan B'ye.

01:02.270 --> 01:09.500
Bir nesnenin konumu veya yavaş yavaş sayan bir skor gibi zaman içinde yavaşça hareket ederler.

01:09.560 --> 01:14.720
Bunların hepsi bir şeyi zaman içinde test edebilmek isteyeceğiniz alanlardır ve bizim kolay bir yaklaşımımız var

01:14.720 --> 01:15.860
Bunu yapmak için buradayım.

01:15.860 --> 01:20.360
Bu sorunu çözmenin tek yolu bu değil, ancak yol boyunca öğrenmemize yardımcı olacağını düşündüğüm bir yol.

01:20.360 --> 01:21.410
Bir göz atalım.

01:21.410 --> 01:23.060
İşte birlik projesindeyiz.

01:23.060 --> 01:25.580
Karakter fiziği örneğimiz açık.

01:25.580 --> 01:27.140
Devam edelim ve sahneyi çalıştıralım.

01:33.260 --> 01:36.170
Şimdi burada ok tuşlarını kullanarak hareket edebiliyorum.

01:40.030 --> 01:45.610
Ve atölyedeki önceki örneklerde, solda yaptığım her tıklamanın üzerine tıkladığını gördük

01:45.610 --> 01:51.040
ok, pozisyon anlık olarak değişirdi, ancak burada daha yumuşak bir hareket var.

01:51.670 --> 01:56.890
Farklı trafiği hangi yöne gitmesi gerektiği konusunda yönlendirmek için hala tüm ok tuşlarını kullanabilirim, ancak fikir

01:56.890 --> 02:00.670
Zaman içinde yavaş hareket etmesi şu anda gerçekten yeni bir durum.

02:00.670 --> 02:06.430
Unity'de bunu yapmanın pek çok yolu var, ancak ben sadece konuşmak için fizik sistemini kullanmayı seçtim

02:06.430 --> 02:11.530
Birkaç tane daha birlik sistemi işin içine girerse ne olacağı hakkında biraz.

02:11.530 --> 02:13.570
Neyle gerildiğimizi hatırlıyor musun?

02:13.600 --> 02:20.770
Ve buradaki fikir, ideal bir dünyada, birim testinizin en az sayıda satırı test etmesini sağlamaktır.

02:20.770 --> 02:24.400
bağımlılık, aynı anda en az kod satırı.

02:24.400 --> 02:28.240
Ancak çoğu zaman üretim kodumuz bu kadar basit değildir.

02:28.240 --> 02:30.160
Farklı şeylere bağlıyız.

02:30.160 --> 02:35.620
Verilerim yükleyicisi ve önceki karakter örnekleriyle, burada bazı yolları gördük

02:35.650 --> 02:37.750
bu farklı bağımlılıkları ele alır.

02:37.780 --> 02:40.900
Bu diğerlerinden biraz daha karmaşık bir örnek.

02:40.930 --> 02:42.880
Üretim koduna bir göz atalım.

02:42.880 --> 02:45.760
Bu yüzden burada karakter fiziği örneğine bakacağız.

02:47.240 --> 02:48.440
Bunu açıyor muyuz?

02:49.860 --> 02:53.160
Ve burada bir ilkel karakter oluşturuyoruz.

02:53.970 --> 03:02.490
Burada oyun nesnesini önce ilkel için küp görünümünde oluşturuyoruz ve ardından

03:02.490 --> 03:06.120
karakter fiziği tek davranışının bileşeni.

03:06.120 --> 03:09.690
Ve sonra orada aldığımız ayrı bir karakter fiziği dersimiz var.

03:09.690 --> 03:15.360
Yani halihazırda monolitik bir monobehaviour sınıfından ikiye ayrılıyoruz.

03:15.360 --> 03:21.000
Bu, kodumuzu daha basit hale getirmenin ve her birini tek bir amaç için kullanmanın iyi bir yoludur.

03:21.000 --> 03:28.260
Önceki örnekte ihtiyacımız olan Monobehaviour işlevselliğinin çoğunun sadece güncelleme olduğunu gördük.

03:28.260 --> 03:30.330
Gerçekten halletmemiz gereken tek şey buydu.

03:30.330 --> 03:35.760
Bu nedenle, güncelleme dışındaki tüm şeyleri ikinci sınıfa taşıyarak, artık daha kolay

03:35.760 --> 03:36.360
Test.

03:39.080 --> 03:42.210
Sonra bu basit örnekte, belirli bir konuma geçiyoruz.

03:42.230 --> 03:46.340
Şimdi testleri çalıştıralım ve ardından üretim koduna bir göz atalım.

03:46.370 --> 03:49.130
Şimdi seçilenleri çalıştırmaya bir göz atalım.

03:51.190 --> 03:52.480
Hepsi orada çalışıyor.

03:52.500 --> 03:53.500
Her şey geçiyor.

03:53.520 --> 03:55.290
Bu sadece oyun modu testi.

03:55.290 --> 03:59.760
Ancak, eğer tekrar bakmak isterseniz düzenleme modu testlerimiz de var, çünkü biz

03:59.760 --> 04:01.600
tek davranışlı şeylerle uğraşmak.

04:01.620 --> 04:03.990
Bir oyun modu kullanmak daha uygun geliyor.

04:03.990 --> 04:05.610
İşte benim burada yaptığım yaklaşım bu.

04:05.610 --> 04:09.090
Ancak hangi sistemleri test etmek istediğinize karar vermek size ve projenize bağlıdır.

04:09.120 --> 04:10.860
Düzenleme modu ve hangilerini test etmek istediğinizi.

04:10.890 --> 04:11.430
Oyun modu.

04:18.220 --> 04:23.620
Şimdi bu testleri gördüğümüze göre, sınıfın kaynak koduna hızlıca bir göz atalım.

04:23.620 --> 04:25.300
Daha sonra da bazı testlere bakacağız.

04:25.330 --> 04:25.510
Tamamdır.

04:25.510 --> 04:27.380
İşte karakter fiziğindeyiz.

04:27.400 --> 04:31.520
Son gördüğümüz gelişmiş karaktere oldukça benzediğini göreceğiz.

04:31.540 --> 04:35.470
Yine Monobehaviour ve monobehaviour olmayan sınıfı ayırdık.

04:35.470 --> 04:39.250
İşte işin çoğunu yapan monobehaviour olmayan sınıf.

04:39.280 --> 04:45.460
Burada kurucunun içinde Monobehaviour'a bir referans aldığına ve onu sakladığına dikkat edin ve sonra

04:45.460 --> 04:50.320
ayrıca Monobehaviour'a burada bu sınıfa bir referans aktarır.

04:50.320 --> 04:54.550
Böylece her güncelleme yaptığında hareketi çağırabilir.

04:54.580 --> 04:56.620
Şimdi bunu organize etmenin farklı yolları var.

04:56.620 --> 05:00.460
Burada birbirimize olan sabit kodlanmış bağımlılığı bile kaldırabilirsiniz.

05:00.460 --> 05:04.000
Ancak bu örnekte basitlik adına, bu çok uygundur.

05:04.360 --> 05:05.410
Koddan aşağı iniyorum.

05:05.410 --> 05:08.470
Yine, çoğu yerde gelişmiş gibi.

05:08.500 --> 05:11.290
Fiziğin kullanıldığı yerleri belirtmek istiyorum.

05:11.290 --> 05:19.540
Yani burada harekette, sadece bir örnek üzerinde kodlanmış pozisyona göre hareket etmek yerine Taneous güncellemesi,

05:19.570 --> 05:22.960
burada hareket pozisyonunu kullanacağız.

05:22.960 --> 05:28.510
Ve sonra Add force altında, ki bu benim yaptığım yeni bir yöntem, fiziğe dayalı olarak hareket edecek

05:28.510 --> 05:29.200
Kuvvetler.

05:29.200 --> 05:33.250
Bunun bir blok olduğunu ve bir taraftan ittiğimizi düşünün.

05:33.250 --> 05:39.010
Ve sonra sürtünme, kütle ve yerçekimine dayanarak, biliyorsunuz ki

05:39.010 --> 05:41.890
burada ekleme kuvvetini kullanarak daha bulanık bir tepki vermek.

05:41.890 --> 05:48.220
Ve burada, aynı sınıf dosyasının en üstünde fizik tekli davranışını gördüğümüz kuvvet ekleyerek hareket ediyoruz

05:48.220 --> 05:49.240
ilan edildi.

05:49.240 --> 05:55.210
Son atölyede gördüğümüz gelişmiş karakterin oldukça benzer görünmesi oldukça tanıdık,

05:55.210 --> 05:58.000
ama burada depoladığımız sert bir cisim var.

05:58.000 --> 06:04.630
Ve sonra bu sınıf uyandığında, katı gövdeyi bağlarız ve sonra bazı fizik ayarlarını yaparız

06:04.630 --> 06:05.320
Değerler.

06:05.320 --> 06:12.070
Yani tüm fiziği yapan tek bir davranışa sahip olmak yerine bir tür özetleme yapmayı düşünürsek

06:12.070 --> 06:16.840
ve birlikte hareket ederek, monobehaviour'u monobehaviour olmayanlardan ayırdık.

06:16.870 --> 06:23.130
Daha sonra Monobehaviour içinde güncelleme döngüsünü yaparız ve bazı fizik şeyleriyle de ilgileniriz.

06:23.140 --> 06:29.200
Sonra diğerinden, monobehaviour olmayan, istediğimiz gibi hareket edebiliyoruz ve karakter girişi alabiliyoruz,

06:29.200 --> 06:31.110
bu yüzden klavye girişi ve bunun gibi şeyleri alın.

06:31.120 --> 06:35.560
Yani burada oldukça iyi bir ayrım var ve ihtiyacımız olan şeyle devam etmemizi sağlıyor.

06:36.740 --> 06:40.430
Bu konuda belirtmek istediğim başka bir şey varsa yüksek sesle düşünmeme izin verin.

06:40.970 --> 06:43.070
Evet.

06:43.070 --> 06:45.230
Bu yüzden buradaki fikirle dalga geçtim.

06:45.230 --> 06:53.030
Sahip olduğumuz sabit kodlanmış bağımlılığı azaltmak istiyorsanız, her sınıf birbirine bağlı

06:53.030 --> 06:58.910
ve My Data loader örneğinde gördüğümüz esneklikten daha fazlasını elde etmek için, kesinlikle

06:58.910 --> 07:03.320
arayüzler ve bu şekilde ele alın, ancak burada bunu yapmamıza gerek yok.

07:03.320 --> 07:06.020
Geri dönüp örneği bir kez daha çalıştıracağız.

07:06.020 --> 07:10.340
Unity'de koşuyoruz ve ok tuşlarıyla hareket ediyoruz.

07:10.370 --> 07:15.770
Son birkaç videoda karmaşıklığı azaltmanın örneklerini gördük.

07:15.770 --> 07:20.480
Böylece farklı bağımlılıkları azaltarak kodumuzu ayırmak için biraz esneklik sağladık.

07:20.480 --> 07:26.120
Yani bu örnekte girdi, fizik, tekli davranışlar ya da bunun gibi şeyler kullanarak

07:26.120 --> 07:27.250
Sanırım burada işimiz bitti.

07:27.260 --> 07:27.980
Teşekkürler.
