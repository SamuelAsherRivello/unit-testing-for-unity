WEBVTT

00:00.260 --> 00:02.360
Merhaba ve Unity için Birim Testine hoş geldiniz.

00:02.390 --> 00:06.020
Burada gelişmiş sürümdeki veri yükleyicime bakacağız.

00:06.020 --> 00:12.170
Bu demoyu çalışırken görmek için unity Download'u açacağız ve Source örnek projesini kullanacağız.

00:12.170 --> 00:12.920
Bu rota.

00:12.920 --> 00:15.020
Ve burada önemli bir sahneye göz atacağız.

00:15.020 --> 00:17.210
Bu, My Data yükleyicisinin gelişmiş halidir.

00:17.210 --> 00:23.210
Burada bahsedeceğim kavramlardan bazıları, gördüğümüz gibi bağımlılık enjeksiyonunu ve son ikameyi içerir.

00:23.210 --> 00:29.150
İşte birlik içindeyiz Verilerim yükleyicisi için bu sahneyi hazırladım ve burada gitmeye hazırım.

00:29.150 --> 00:34.070
Bu yüzden devam edeceğiz ve atölyedeki bu sahnelerin çoğu için bu sahneyi çalıştıracağız.

00:34.070 --> 00:38.840
Üretim sahnesini yönetmek ilginç bir şey değil, ancak sizi her zaman bunu yapmaya teşvik ediyorum

00:38.840 --> 00:39.890
bir başlangıç noktası olarak.

00:39.890 --> 00:46.310
Burada, yüklenen verinin uzunluğunun şu olduğunu söyleyen basit konsol günlüğünü görüyoruz.

00:46.340 --> 00:50.120
Bu değer çok önemli değildir, ancak bir göz atmak isterseniz bu örnek sınıfı inceleyebilirsiniz

00:50.120 --> 00:50.480
ona.

00:50.480 --> 00:52.160
Bunun için testi çalıştıralım.

00:54.550 --> 00:58.090
Burada kategorimi gelişmiş veri yükleyicim olarak ayarladım.

00:58.090 --> 01:02.320
Yani sadece bununla ilgili testi ve sadece düzenleme modunda görüyoruz.

01:02.350 --> 01:06.490
Ayrıca kendi zamanınızda göz atabileceğiniz bir oyun modu testi de var, ancak bence düzenleme modu

01:06.490 --> 01:07.630
burada daha ilginç.

01:07.630 --> 01:09.490
Bu yüzden hepsini çalıştıracağım.

01:15.130 --> 01:19.450
Ve burada iki testimiz olduğunu görüyoruz ve ikisi de yeşil onay ile geçiyor, bu harika.

01:19.480 --> 01:24.510
Hem load async hem de mock load async'e bakalım ve nasıl çalıştıklarına bir göz atalım.

01:24.520 --> 01:26.260
İşte örnek kodun içindeyiz.

01:26.260 --> 01:31.060
Son videoyu takip ettiyseniz ve umarım etmişsinizdir, aradığımız yöntemin üzerinden geçtik

01:31.060 --> 01:38.920
Burada, bir web sunucusuna gerçek bir çağrı kullanan, verileri geri yükleyen ve değerini kontrol eden.

01:38.920 --> 01:42.370
Bu, üretim kullanım durumunun ne olacağına çok benziyor mu?

01:42.370 --> 01:44.830
Ancak buradaki bazı sorunlardan bahsetmiştik.

01:44.860 --> 01:49.030
Kodumu mu test ediyorum yoksa altındaki Unity Web Hizmetini mi test ediyorum?

01:49.180 --> 01:50.140
Bunu test etmem mi?

01:50.140 --> 01:53.140
Yoksa github.com'un arka ucunu mu test ediyorum?

01:53.140 --> 02:00.010
Ve eğer kararlı bir sunucuysa, testlerinizi kendi özel kodunuza odaklamak ve en az

02:00.010 --> 02:01.810
ve mümkün olduğunca az bağımlılık.

02:01.810 --> 02:03.990
Yani bununla ilgili bazı sorunlar var.

02:04.000 --> 02:09.910
Bu konuda yaptığım ilk şey bağımlılık enjeksiyonu hakkında düşünmek oldu.

02:09.910 --> 02:16.510
Diyelim ki üretimde şunu çağırdığım ve bunun uygulandığı bir yol olmasını istiyorum

02:16.510 --> 02:18.340
Unity web hizmetini kullanıyor.

02:18.370 --> 02:22.690
O zaman test için, belki de buna yaklaşmak istediğim ikinci bir yol olmasını istiyorum.

02:22.720 --> 02:29.800
Şimdi, kod tabanınızda hata ayıklama eşittir doğru mu yoksa üretim mi gibi bir şey söyleyen bir bayrağınız olabilir

02:29.800 --> 02:30.700
eşittir yanlış mı?

02:30.700 --> 02:35.260
Ve üretim kodunuzda bazı şeyleri test modunda yapın, bazı şeyleri yapmayın.

02:35.290 --> 02:39.850
Kod tabanlarında bunun çok olduğunu görüyorum, ancak bu genellikle iyi bir uygulama değildir.

02:39.850 --> 02:45.790
Üretim kodunuzu gerçekten sadece testler için olan şeylerle kirletiyorsunuz, bu yüzden uygun değil.

02:45.820 --> 02:47.200
Bu daha iyi bir çözüm.

02:47.200 --> 02:49.810
Neyi iyi yaptığımıza bir göz atalım.

02:49.810 --> 02:55.600
Önceki temel örnekte, bir ağ hizmeti kavramına sahip değildim ve bunu

02:55.600 --> 02:56.110
Buraya.

02:56.140 --> 02:59.440
Biz sadece onu yarattık ve her zaman tek yönlü çalıştı.

02:59.440 --> 03:03.670
Ama buradaki bağımlılık enjeksiyonuna ben karar veriyorum.

03:03.670 --> 03:07.080
İşte bunun işe yarayabileceği bazı özel yollar.

03:07.090 --> 03:11.290
İşte birkaç farklı şekilde değiştirebileceğim bazı mantıklar.

03:11.290 --> 03:13.930
Burada bir satırda bildiriyorum ve sonra içeri aktarıyorum.

03:13.930 --> 03:17.440
Böylece birkaç farklı ağ hizmetine sahip olduğunuzu hayal edebilirsiniz.

03:17.440 --> 03:22.000
Bir tanesi sadece test için, bir tanesi sadece üretim için, bir tanesi de sadece

03:22.000 --> 03:26.560
belirli bir arka uç sunucusu için uygun olan bir yerel disk.

03:26.560 --> 03:27.370
Vesaire.

03:27.400 --> 03:30.070
Bunun üretimde de kullanım alanları vardır.

03:30.070 --> 03:31.980
Bu bağımlılık enjeksiyonu fikri.

03:31.990 --> 03:34.270
Şimdi buna neden bağımlılık enjeksiyonu diyoruz.

03:34.270 --> 03:43.960
Bunun nedeni, gelişmiş veri yükleyicimin her zaman tek bir şey yapması yerine, aşağıdakilere karar veren bazı bilgileri iletmemdir

03:43.960 --> 03:45.490
nasıl çalışacağını.

03:45.490 --> 03:52.000
Yani burada her şeyi bilen sınıfın kendisi yerine, bu durumda bir bağımlılığı

03:52.000 --> 03:54.160
Unity Web İstek Ağı hizmeti.

03:54.160 --> 04:00.340
Şimdi bunun nasıl yapılandırıldığına bir göz atalım ve sonra da bunun bizim için neden yararlı olduğunu görelim

04:00.340 --> 04:01.180
testimiz.

04:01.300 --> 04:05.050
İşte My Data loader advanced için kaynak kodun tamamı.

04:05.080 --> 04:07.330
Şimdi burada odaklanmak istediğim iki şey var.

04:07.330 --> 04:11.420
Birincisi, yapıcıda bu bağımlılığı aktarıyorum.

04:11.440 --> 04:18.970
Şimdi bağımlılık enjeksiyonu ve bu bağımlılık enjeksiyonu kavramından esnek sınıfların nasıl oluşturulacağı

04:18.970 --> 04:21.580
gerçekten bu sınıfın kapsamı dışındadır.

04:21.610 --> 04:24.130
Gidip bakmanız için gerçekten iyi bir şey.

04:24.130 --> 04:30.640
Google'da unity için D I veya unity için bağımlılık enjeksiyonu gibi bir şey veya hatta bağımlılık

04:30.640 --> 04:35.320
Nesne yönelimli programlamada enjeksiyon ve bu genel kavramlardan biraz daha fazlasını görmek.

04:35.320 --> 04:41.040
Ancak, biraz aşina olduğunuzu varsayarak, özellikle de az önce yaptığım açıklama göz önüne alındığında, orada verdim,

04:41.050 --> 04:42.340
Devam edelim.

04:42.370 --> 04:49.720
Şimdi bunu bir bağımlılık olarak buraya aktarıyorum ve depoluyorum, o zaman çekirdek işlevselliğimizi her çağırdığımda

04:49.750 --> 04:56.470
Asenkron yüklemeye hazır olduğumda, ağ hizmetime şunu söylerim

04:56.470 --> 04:57.630
async yüklemek için.

04:57.640 --> 05:04.930
Şimdi, bir arka uç sunucusu için asenkron yükleme yapan bir ağ hizmeti geçtiğimi hayal edebilirsiniz

05:04.930 --> 05:06.700
belirli bir teknolojinin.

05:06.730 --> 05:08.320
Bu satır bunu yapacaktır.

05:08.550 --> 05:14.800
Eğer diske yazma veya diskten okuma işlemini farklı bir tür olarak yapan başka bir şey girersem

05:14.800 --> 05:17.890
ağ hizmetinde, burada gerçekten değişecek olan satır budur.

05:17.890 --> 05:24.010
Böylece veri yükleyicimin 2 ya da 3 farklı sürümünün burada gelişmiş olması gerekmiyor.

05:24.010 --> 05:29.040
Bunun yerine, söz konusu ayrıntıyı benzersiz bir şekilde ele alan özel bir uygulama aktarıyorum.

05:29.050 --> 05:33.030
Kodunuzun daha esnek olmasını sağlamak için çok güçlü bir yoldur.

05:33.040 --> 05:41.290
Şimdi, bir bağımlılığı aktarmaktan ve işlevselliği nasıl sarabildiğinden bahsettiğimize göre

05:41.290 --> 05:44.560
Burada, bu özel kaynak için kaynağın ne olduğuna bakalım.

05:44.560 --> 05:49.150
Burada aynı sınıf dosyasında konuşmam gereken birkaç şey var.

05:49.150 --> 05:51.490
Birincisi, bir arayüz oluşturdum.

05:51.610 --> 05:59.140
I ağ hizmetinin buradaki arayüzü tamam diyor, uygulanabilir olarak kabul edilmek isteyen herkes

05:59.140 --> 06:04.900
Burada aktarılacak bağımlılığın bazı yöntem ya da yöntemlere sahip olması gerekir.

06:04.900 --> 06:09.820
Ve bu durumda, sadece yüklemenin asenkron olması ve bir dize URL'si alması gerekir.

06:09.850 --> 06:10.620
Bu kadar.

06:10.630 --> 06:14.530
Eğer arayüzlere çok aşina değilseniz.

06:14.820 --> 06:16.440
Lütfen arayüzleri kontrol edin.

06:16.440 --> 06:22.200
C-sharp'ta veya unity'de sınıflara karşı arayüzler gibi bir şeye bakabilirsiniz ve çok şey göreceksiniz

06:22.200 --> 06:23.040
örneklerin.

06:23.040 --> 06:29.850
Ancak buradaki önemli bir ayrım, arayüzün genel API'nin ne olduğunu tanımlaması, ancak

06:29.850 --> 06:31.920
uygulama hakkında endişelenmek.

06:31.980 --> 06:35.430
Uygulama burada genel bir sınıfta beyan edilir.

06:35.460 --> 06:37.590
Şimdi muhtemelen daha aşina olduğunuz sınıflar.

06:37.920 --> 06:42.480
Ve burada yaptığımız şey, bunun belirli bir çeşidini uygulamaktır.

06:42.480 --> 06:48.240
Bu özel tattaki ağ hizmeti size önceki videodan çok tanıdık gelecektir.

06:48.270 --> 06:50.640
Bu tam olarak aynı uygulama.

06:50.910 --> 06:58.020
Sadece unity web isteğini kullanıyoruz ve ardından web isteği gönderme metodolojisini uyguluyoruz.

06:58.020 --> 07:03.420
Şimdi buraya geri gelen kaynak koduna baktığımıza göre, tamam, sadece

07:03.420 --> 07:06.150
işlevselliğin bir kısmını yerine getiren özel bir sınıf.

07:06.150 --> 07:08.430
Ve bu özel sınıfı oraya aktarıyoruz.

07:08.430 --> 07:12.920
Ancak artık çok daha esnek olan gelişmiş bir my data loader sınıfımız var.

07:12.930 --> 07:17.600
Şimdi, bağımlılık enjeksiyonu test dünyasında özellikle neden önemlidir?

07:17.610 --> 07:23.280
Birim testlerimiz için unity içinde kullanabileceğimiz harika bir yardımcı programımız var.

07:23.280 --> 07:28.710
Bu N substitute adında bir kütüphanedir ve örnek projeye dahil edilmiştir.

07:28.710 --> 07:31.890
Diğerinin hemen altındaki başka bir test yöntemine göz atalım.

07:31.890 --> 07:35.790
Ve bu, bir sınıfın mock'u olarak adlandırılan şeyi kullanacak.

07:35.790 --> 07:41.190
Burada gelişmiş My Data yükleyicisinin çok benzer bir yaratımına sahibiz.

07:41.190 --> 07:46.980
Ve unity web istek sürümünü iletmek yerine, oldukça görünen bir şey yapacağız

07:47.010 --> 07:47.760
Burada garip.

07:47.760 --> 07:50.820
Yedek kütüphane kullanacağız.

07:50.820 --> 07:58.170
Ve burada yapacağımız şey, bu iki satırda anında hey diyeceğiz, git oluştur

07:58.170 --> 08:02.910
İhtiyacım olan işlevselliği yerine getirebilecek bir sınıf.

08:02.910 --> 08:09.900
Ancak bu bir sahte sınıf olduğu için sunucuyu aramak zorunda değildir.

08:09.900 --> 08:15.330
Bunun yerine yapacağı şey, önemli anlarda bize öngörülebilir bir değer döndürmektir.

08:15.330 --> 08:24.570
Şimdi hatırlayın, buradaki akışımız testin veri yükleyiciye verilerin içindeki bir URL'yi yüklemesini söylemesidir

08:24.570 --> 08:28.650
loader ağ hizmetine gidip bir URL yüklemesini söyler.

08:28.680 --> 08:35.340
Bu son adım, sonuç olarak yarım saniye sürer, gider ve sunucudan yükler ve geri döner

08:35.370 --> 08:36.780
bir dizi geri.

08:36.780 --> 08:41.670
Sahte bir durumda ihtiyacım olan tek şey tamam, bir sunucu bile çağırma.

08:41.670 --> 08:45.240
Tam bunu aradığımda bana bir ip geri veriyorsun.

08:45.240 --> 08:54.630
Yani burada bu dille şunu söylüyorum: load async'i her çağırdığımda ve herhangi bir dizeyi ilettiğimde

08:54.630 --> 08:59.370
URL için, ardından taklit edilen veri kelimesini döndürün.

08:59.640 --> 09:05.970
Sonra burada, kontrol etmek yerine istediğim beklenen sonucu aldığımdan emin olabilirim

09:05.970 --> 09:09.930
daha önce yaptığım gibi geri dönüşte doctype var.

09:09.930 --> 09:13.650
Sahte verileri buradan kontrol edebilirim.

09:13.650 --> 09:22.290
Burada gördüğümüz şey çok basit bir örnek ve kullanışlı görünmeyebilir, ancak bir

09:22.290 --> 09:29.460
sadece veri yüklemediğimiz, yüklediğimiz, okuduğumuz, yazdığımız, dönüştürdüğümüz daha karmaşık bir örnek

09:29.460 --> 09:32.730
Verileri, biraz, belki 5 veya 6 farklı yöntem kullanarak.

09:32.760 --> 09:39.060
Bunların hepsi çok farklı sistemlere işaret ediyor olabilir, ancak gerçekten test etmek istediğimizde sadece

09:39.060 --> 09:48.210
veri yükleyicisi, daha sonra bu diğer sistemler için taklit edilmiş yetenekleri geçici olarak iletmek istiyoruz

09:48.210 --> 09:52.130
Böylece elimizdekilere odaklanabiliriz.

09:52.140 --> 09:54.360
Şimdi ne olacağına bir göz atalım.

09:54.360 --> 09:56.850
Bu yüzden yüklemeyi async olarak çağırıyorum.

09:56.850 --> 10:03.960
Olacak olan şey, içerideki bu sistemin öngörülen değeri döndürmesidir.

10:03.960 --> 10:08.130
Ve veri yükleyici daha sonra yüklendi çağrısı yapacaktır.

10:08.130 --> 10:14.070
Ve sonuç değerinin olmasını beklediğimiz değer olmasını sağlayacaktır.

10:14.070 --> 10:18.210
Şimdi bunu unity editörünün içinde çalıştıralım.

10:18.210 --> 10:19.680
Bu yüzden hepsini çalıştıracağız.

10:22.010 --> 10:23.380
Ve oldukça hızlı çalışıyor.

10:23.390 --> 10:29.180
Aslında bir sunucuyu çağıran load async'i çalıştırırsam bile karşılaştıralım.

10:33.100 --> 10:34.120
Çabuk oldu.

10:34.150 --> 10:38.620
Sonra herhangi bir sunucuyu çağırmayan mock load async'i çağırırsam.

10:42.510 --> 10:47.720
Videodan anlaşılmayabilir, ancak MOC'yi aramak çok daha hızlıdır.

10:47.730 --> 10:53.060
Ve bu mantıklı çünkü aslında bir sunucuyu aramıyor ve bir sonuç beklemiyoruz.

10:53.070 --> 10:56.550
Yani bu sadece bize birkaç saniye kazandırmak için değil.

10:56.580 --> 11:00.180
Testlerimizi tasarlarken odaklanmamız gereken yine bu.

11:00.210 --> 11:02.670
Aslında neyi test etmek istiyoruz?

11:02.670 --> 11:04.830
Ve sonra onu izole etmek istiyoruz.

11:04.830 --> 11:09.060
Yani aslında bir Unity Web Hizmetleri sınıfını test etmiyoruz.

11:09.090 --> 11:11.580
GitHub arka ucunu test etmiyoruz.

11:11.610 --> 11:15.390
Birkaç sistemin birlikte test edilmesine entegrasyon testi denir.

11:15.390 --> 11:17.460
Bu uygun bir test türüdür.

11:17.460 --> 11:21.570
Ancak bu, burada bahsettiğimiz birim testinin dışında kalıyor.

11:21.570 --> 11:26.340
Yine, mümkün olduğunca az bağımlılığa, az kod satırına inmek.

11:26.340 --> 11:27.360
Bunu düşünebilirsin.

11:27.360 --> 11:35.790
İşte bu kadar, yedek kütüphaneyi nasıl kullanacağımızı ve ayrıca bir mock'u nasıl yapabileceğimizi inceledik.

11:35.790 --> 11:37.620
arka uç sunucusuna bir çağrı.

11:37.620 --> 11:38.460
O yüzden teşekkürler.
