WEBVTT

00:00.050 --> 00:03.650
Merhaba ve bu Unity Birim testi atölyesine hoş geldiniz.

00:03.650 --> 00:07.190
Örnek olarak benim veri yükleyicim Basic'e bakacağız.

00:07.190 --> 00:07.820
Hadi başlayalım.

00:07.820 --> 00:10.670
İşte bu demoda unity'yi açacağım.

00:10.670 --> 00:16.040
Çekirdek örnek projemizi açın ve temel veri yükleyicimin sahnesine bir göz atın.

00:16.040 --> 00:21.890
Şimdi, bir çeşit veri yüklemesi yapmayı seçmemin nedeni, sadece ne hakkında konuşmaktır

00:21.890 --> 00:30.290
çok güvenilir ve yalıtılmış olmasını umduğumuz birim testlerimiz hızlı bir şekilde çalışırsa

00:30.290 --> 00:32.390
kendi test metodolojileri?

00:32.390 --> 00:38.150
Ya diğer sistemlere bağlıysa, örneğin sadece bir parçayı test edebileceğimizi nasıl bilebiliriz?

00:38.180 --> 00:46.130
Genel olarak birim testi, bir sınıfın bir yöntemi olarak düşünebileceğiniz tek bir birimin test edilmesidir.

00:46.130 --> 00:52.130
Ancak çoğu zaman kodumuz birbirine bağlı birden fazla sınıftan oluşur ve bu da karar vermeyi zorlaştırabilir

00:52.130 --> 00:55.460
onları nasıl ayıracağımızı ve izole olarak nasıl test edeceğimizi.

00:55.460 --> 01:01.640
Ayrıca, grafik oluşturma, render etme gibi asenkron bir şeye bağlı olan bir sisteminiz olabilir.

01:01.640 --> 01:05.150
ses veya bu durumda bir arka uç sunucusunu çağırmak.

01:05.150 --> 01:12.770
Bu yüzden burada bir URL'ye aktardığınız verileri yükleyen çok basit bir örnek oluşturdum, sadece bir web sayfasını çağırıyor

01:12.770 --> 01:15.020
ve bu web sayfasının metnini geri alır.

01:15.050 --> 01:21.800
Bu en basit örnektir, ancak bunun herhangi bir sunucu mantığı olduğunu düşünebilirsiniz.

01:21.800 --> 01:26.930
oyununuzdan yüksek bir puan, oyuncu verilerini yüklemek için çağrı, çok oyunculu ile ilgili bir şey.

01:26.930 --> 01:31.690
Belki de bunların hepsi bazı eşzamansız ağ trafiğine bağlı olabilir.

01:31.700 --> 01:32.720
Bir göz atalım.

01:32.810 --> 01:34.640
İşte örneklemdeyiz.

01:34.640 --> 01:36.650
Temel veri yükleyicim var.

01:36.650 --> 01:37.310
Yükle.

01:37.310 --> 01:38.330
Oynat tuşuna basalım.

01:41.030 --> 01:42.380
Bu özel demoda.

01:42.410 --> 01:46.940
Bu özel demoda çok ilginç şeyler yok.

01:46.970 --> 01:49.340
Oynanışta çok ilginç bir şey olmuyor.

01:49.610 --> 01:53.330
Burada konsola gideceğiz ve bu sahnenin kullanıcı arayüzü olmadığını göreceğiz.

01:53.360 --> 01:59.660
Unity konsoluna bakın ve sonra sadece sunucudan döndürülenlerin uzunluğunu gösteriyor.

01:59.660 --> 02:03.590
Sıfır olmayan herhangi bir şey hey, bir sayfa yüklendi anlamına gelir.

02:03.590 --> 02:05.030
Çok hafif.

02:05.030 --> 02:06.080
Basit bir test.

02:06.080 --> 02:09.550
Hata denetimi ya da bu tür şeylere yerleşik olarak sahip değilim.

02:09.560 --> 02:14.030
Bu demonun basitliği adına sadece başarı varsayılmaktadır.

02:14.060 --> 02:18.170
Üretim kodu yapıyorsanız ve sunucuları çağırıyorsanız, çok daha fazla işlevsellik eklemek istersiniz

02:18.170 --> 02:18.800
ona.

02:18.800 --> 02:23.160
İşte bu oldukça basit ve o kadar da ilginç olmayan çalışma zamanı deneyimidir.

02:23.180 --> 02:28.940
Şimdi buradaki test çalıştırıcısına bakarsak, kategorimizi veri yükleyicim temel olacak şekilde ayarlayabiliriz.

02:28.940 --> 02:32.720
Yani bize sadece bu belirli kodla ilgili testleri gösterir.

02:32.720 --> 02:34.520
Ve sonra düzenleme moduna geçiyoruz.

02:34.520 --> 02:38.600
Burada yine oyun modumuz var ama bunu kendi başınıza keşfedebilirsiniz.

02:38.600 --> 02:42.620
Bu özel demo için düzenleme modunun daha ilginç olduğunu düşünüyorum.

02:42.620 --> 02:45.050
Bu yüzden hepsini çalıştır'a basacağım.

02:46.660 --> 02:48.740
Ve başarıya ulaştığımızı görebiliyoruz.

02:48.760 --> 02:54.910
Bu, load async sonucunun yüklendiğinde doctype içerdiğini söylüyor.

02:54.910 --> 02:56.890
Şimdi buna biraz göz atalım.

02:57.010 --> 02:59.200
Buraya gideceğiz ve kaynağımızı açacağız.

03:00.590 --> 03:02.210
Ve işte test.

03:02.300 --> 03:08.000
İlk olarak veri yükleyicimiz basic'in bir örneğini oluşturduğumuzu gösteriyor.

03:08.300 --> 03:12.050
Sonra yüklendiğinde dinleriz.

03:13.000 --> 03:16.260
Sunucudan geri yüklenen verileri kontrol edeceğiz.

03:16.270 --> 03:21.190
Yine, bu sadece bir web sayfasını çağırıyor ve web sayfasının kaynak kodu ne olursa olsun, onu bir

03:21.190 --> 03:22.420
büyük bir metin bloğu.

03:22.420 --> 03:24.760
Bu yüzden bazı HTML öğeleri gibi görünecek.

03:24.760 --> 03:30.310
Ve bunu oluştururken baktığımda, bir parçası olarak doctype yazdığını fark ettim.

03:30.310 --> 03:35.920
Yani Doctype çok önemli bir şey değil, kesinlikle unity dünyasında değil, ama sadece düşündüm

03:35.920 --> 03:40.030
Bir web sayfasından bir şey alıp almadığımı söyleyen küçük bir testti.

03:40.030 --> 03:43.460
Sizin için anlamlı olan başka herhangi bir alt dizeyi test etmeyi hayal edebilirsiniz.

03:43.480 --> 03:50.410
Son olarak, burada test ettiğimiz eylemi yapıyorum ve eşzamansız çağrıyı buraya yüklüyorum

03:50.410 --> 03:51.700
ve URL'yi iletin.

03:51.730 --> 03:58.600
URL'nin GitHub sayfasının URL'si olduğuna dikkat edin, ancak benzersiz bir şey yoksa bu o kadar önemli değildir

03:58.600 --> 03:58.960
Orada.

03:58.960 --> 04:06.010
Eğer google.com gibi bir test yapmak isterseniz, sadece gidip google.com'u arayacak ve kaynağı alacaktır

04:06.010 --> 04:07.210
kodu geri alacağız.

04:07.210 --> 04:12.610
Burada üretim kodunda ne yaptığıma gerçekten odaklanmak istemiyorum, çünkü kuşkusuz bu bir

04:12.610 --> 04:13.720
basit bir örnek.

04:13.720 --> 04:19.030
Ben sadece unity içinde asenkron bir şeyler yapmanın bir yolu olmasını istedim.

04:20.210 --> 04:22.880
Şimdi anlayabilmemiz için kaynak koduna bakalım.

04:23.880 --> 04:24.330
İşte.

04:24.330 --> 04:24.930
Yaptığımız şey.

04:24.930 --> 04:29.130
Yükle dediğimde, URL'nin boş olmadığından emin ol diyorum.

04:29.520 --> 04:34.710
Sonra devam ediyorum ve Unity'nin yerleşik işlevi olan web isteğini kullanıyorum.

04:34.710 --> 04:41.880
Bunun üzerine istek gönder çağrısı yapıyorum ve ardından sonucu indirme işleyicisinin metni olarak ayarlıyorum.

04:41.910 --> 04:44.220
Bu sadece süper ucuz ve kolay bir yol.

04:44.220 --> 04:47.400
Basit verileri çevrimiçi aramak için unity tarafından önerilir.

04:47.430 --> 04:48.930
Çok basit ve anlaşılır.

04:48.960 --> 04:53.250
Şimdi bu, burada aslında neyi test ettiğimiz sorusunu gündeme getiriyor?

04:53.640 --> 04:59.940
Veri yükleyicim adında özel bir sınıfım var, ancak içinde büyük ölçüde mevcut bazı unity

04:59.970 --> 05:02.550
unity web isteğinin işlevselliği.

05:02.580 --> 05:06.420
Sonra bir web sayfasını, bu durumda GitHub'ı çağırıyorum.

05:06.420 --> 05:08.040
Ve bu da işin içinde.

05:08.040 --> 05:13.170
GitHub bir şekilde gün boyunca kapalı olsaydı, bu test başarısız olurdu.

05:13.200 --> 05:14.490
Bu uygun mu?

05:14.490 --> 05:21.390
Birim testim gerçekten kendi metodolojimi, kendi işlevselliğimi test etmekle ilgiliyse, aşağıdakileri dikkate almamalıyım

05:21.390 --> 05:22.440
başarısız bir test.

05:22.440 --> 05:25.230
İlgisiz bir bağımlılık başarısız olursa.

05:25.230 --> 05:27.000
Ama burada durum böyle.

05:27.000 --> 05:29.030
GitHub kapalı olsaydı başarısız olurdum.

05:29.040 --> 05:34.830
Ayrıca, burada unity'nin yerleşik işlevi olan Unity web isteğini kullanıyorum.

05:34.860 --> 05:41.280
Her durumda %100 çalışmasını umuyoruz, ancak kodumun çalışması ve

05:41.280 --> 05:42.600
kodu çalışmıyor.

05:42.600 --> 05:44.910
Yani burada gri bir alan var.

05:44.910 --> 05:50.070
Sınıflarınızı tasarlamayı ve ardından bu sınıflar üzerindeki testleri tasarlamayı düşündüğünüzde, nasıl

05:50.070 --> 05:52.350
aslında neye odaklanmanız gerektiğini biliyor musunuz?

05:52.350 --> 05:54.780
Test, genel olarak konuşursak.

05:54.780 --> 05:59.940
Ve birim testi sanatına nasıl yaklaşılacağı konusunda yazılmış kitaplar ve kitaplar var.

05:59.940 --> 06:05.730
Ancak genel olarak konuşmak gerekirse, bağımlılıklarınızı azaltmak ve sayıyı basitleştirmek istersiniz

06:05.730 --> 06:07.920
test ettiğiniz kod satırlarının sayısı.

06:07.920 --> 06:14.880
Yani daha az kod daha iyidir çünkü daha basit ve odaklıdır ve tam olarak hangi kodun izole olduğunu bilirsiniz.

06:14.880 --> 06:16.410
test ettiğiniz kod.

06:16.410 --> 06:22.710
Yani bu mükemmel bir örnek değil, ancak bizim için başlamak ve asenkron hakkında konuşmak için harika bir yol

06:22.710 --> 06:23.340
Kod çalışıyor.

06:23.340 --> 06:25.440
Bu yüzden şimdilik bu örneği sonlandırıyoruz.
