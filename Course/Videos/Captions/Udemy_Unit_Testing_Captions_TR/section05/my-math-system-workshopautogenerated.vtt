WEBVTT

00:00.110 --> 00:00.980
Merhaba ve hoş geldiniz.

00:00.980 --> 00:07.040
Bu atölye çalışmasında, My Math sistemine bir göz atacağız ve oldukça ilginç bir sisteme adım atacağız.

00:07.070 --> 00:11.300
Basit bir örnek, sadece birim testinin temellerini yeniden öğrenmemizi sağlıyor.

00:11.300 --> 00:14.720
Bu demoda, takip etmek için Core Sample projesini kullanabilirsiniz.

00:14.720 --> 00:19.520
Unity editörünü açacağız, bu çekirdek örnek projeyi açacağız ve sonra

00:19.520 --> 00:21.140
aç ve burada bazı sahneleri oynat.

00:21.140 --> 00:26.360
My Math sistemine ve arkasındaki teste bakacağız ve bir özet yapacağız

00:26.390 --> 00:31.970
birim testinin temel kavramlarından bahsediyorum, sadece orada gördüğüm ve bahsetmeyi düşündüğüm temel kavramlardan bahsediyorum.

00:31.970 --> 00:38.450
Ayrıca, parametrelendirilmiş değerler hakkında da konuşacağız, bu da yaklaşabileceğiniz bir ara yoldur

00:38.450 --> 00:38.960
Test.

00:38.960 --> 00:42.620
Ve birim testine yaklaşırken sahip olunması gereken iyi bir ek beceridir.

00:42.620 --> 00:43.640
Hadi dalalım.

00:43.850 --> 00:48.410
Burada unity editörünün içindeyim ve matematik sistemi örneğimi açtım.

00:48.410 --> 00:51.050
Sahnenin kendisini bir oynayalım.

00:51.080 --> 00:54.710
Bazen bu atölyelerde sahne daha heyecan vericidir.

00:54.710 --> 00:56.300
Bu o kadar da heyecan verici değil.

00:56.300 --> 01:01.730
Devam edelim ve alt pencerede oynat düğmesine basalım, yardımcı olan bazı basit metinler görüyoruz

01:01.730 --> 01:07.040
birim testi demosunda olduğumuzu anlıyoruz ve sadece sahneyi oynatacağız ve konsolu görüntüleyeceğiz.

01:07.040 --> 01:08.510
Şimdi konsola bakalım.

01:08.600 --> 01:11.210
Konsol bu sahnede kullanıcı arayüzü olmadığını söylüyor.

01:11.630 --> 01:14.510
Unity konsoluna bakın burada konsolun içindeyiz.

01:14.510 --> 01:15.140
Gerçekten.

01:15.140 --> 01:19.880
Bize sadece başarılı bir operasyondan sonra tükürülen bir değeri gösterecek.

01:19.880 --> 01:25.370
Dolayısıyla bu, gerçek üretim kodunda çok daha ilginç bir sahne olacaktır.

01:25.370 --> 01:30.590
Belki de burada aslında oyun menüsü veya oyun oynanıyor olabilir.

01:30.860 --> 01:35.810
Burada görülecek pek bir şeyin olmadığı oldukça yalın bir sahne var, ancak bunun

01:35.810 --> 01:36.200
ol.

01:36.770 --> 01:41.960
Test için bir çalışma zamanı sahnesi olması özellikle önemli değildir.

01:41.960 --> 01:47.600
Sık sık üretim kodunuzla üretim kodunuz arasındaki dengeden bahsetmek istiyorum.

01:47.600 --> 01:48.200
şey.

01:48.200 --> 01:51.560
Ve sonra burada test kodu test işini yapıyor.

01:51.560 --> 01:57.380
Yani üretim kodu, bunu her zaman bunun gibi bir unity sahnesinde play tuşuna basarak deneyimliyoruz.

01:57.380 --> 02:00.860
Ve birim testimizi yapmak için farklı bir şey yapıyoruz.

02:00.860 --> 02:04.040
Burada yaptığımız şey test çalıştırıcı penceresine bakmaktır.

02:04.580 --> 02:08.420
Burada bakmak istediğimiz şeye uygun kategoriyi keşfediyoruz.

02:08.420 --> 02:10.550
Biz sadece benim matematik sistemime bakıyoruz.

02:11.630 --> 02:14.090
Ve sonra bakalım.

02:14.090 --> 02:15.350
Sadece düzenleme modu görevini yapalım.

02:15.470 --> 02:19.850
Hepsini burada çalıştıracağız ve tüm testler bu şekilde çalışacak.

02:19.880 --> 02:22.120
Şimdi aslında sahneyi çalıştırmadı.

02:22.130 --> 02:28.490
Sadece kendi küçük evreninde bir tür kenarda çalışıyor, bu testleri bir

02:28.490 --> 02:29.360
Düzenleme modu.

02:29.360 --> 02:32.860
Bu yüzden düzenleme modu testleri buradaki farktan biraz bahsediyor.

02:32.870 --> 02:38.090
Düzenleme modu testleri, unity'de iki ana mod olan düzenleme modunda çalışır.

02:38.090 --> 02:43.700
Temel olarak, oynat düğmesine bastığınız andan oynat düğmesine bastığınız ana kadar, yani

02:43.700 --> 02:44.360
oyun modu.

02:44.390 --> 02:47.990
Bu genellikle kullanıcının unity oyununu deneyimlediği yerdir.

02:48.680 --> 02:53.240
Bu modda olmadığımız her an, tam burada oturan düzenleme modundayız, düzenleme modundayız.

02:53.270 --> 02:59.330
Bu testler düzenleme modunda çalıştırılır çünkü bir çalışma zamanının tüm karmaşıklığına ihtiyaç duymazlar

02:59.330 --> 02:59.870
Sahne.

02:59.870 --> 03:05.180
Bu, bu kodların çalıştığı daha basit, küçük ve izole bir alana sahip olmamıza yardımcı olur.

03:05.180 --> 03:10.850
Şimdi bazen tekli davranışların ve çalışma zamanı işlevselliğinin kolaylıklarına ihtiyaç duyarsınız.

03:10.850 --> 03:14.750
İşte bu noktada oyun modu devreye giriyor.

03:14.750 --> 03:17.330
Ve burada da bazı oyun modu testlerimiz var.

03:17.330 --> 03:22.550
Bu onay kutularından birine her tıkladığımda, bize biraz farklı listeler gösterdiğini görebilirsiniz

03:22.580 --> 03:23.810
elimizdekilerin.

03:23.810 --> 03:26.240
Oyun modunda tümünü çalıştır seçeneğine basacağım.

03:27.020 --> 03:34.670
Ve burada aslında yepyeni bir sahne oluşturuyor, sadece demo amaçlı bir çalışma zamanı sahnesi çalıştırıyor

03:34.670 --> 03:36.380
Elimdeki test koduyla.

03:36.380 --> 03:39.920
Ve sonra bizi içinde bulunduğumuz orijinal sahneye geri döndürür.

03:39.920 --> 03:44.180
Eğer sahneyi kaydetmemiş olsaydık, bizi uyaracak ve diyecekti ki, hey, bir oyun modu çalıştırmak üzeresin

03:44.210 --> 03:44.660
Test.

03:44.690 --> 03:46.430
Geçici olarak olay yerinden ayrılacağız.

03:46.460 --> 03:48.110
Önce sahnenizi kaydetmek ister misiniz?

03:48.110 --> 03:50.570
Genelde bu iyi bir fikirdir, bu yüzden buna dikkat edin.

03:50.600 --> 03:52.370
Şimdi kaynak koduna bakalım.

03:52.400 --> 03:56.060
İlk olarak çalışma zamanı üretim koduna bakalım.

03:56.060 --> 03:58.850
Bu yüzden My Math sistemi örneğini açacağız.

03:58.880 --> 04:05.810
Bu atölyelerin her birinde, genellikle bir oyun nesnesi ile bir örnek komut dosyası bulunur.

04:05.810 --> 04:06.620
Her şey bitti.

04:06.620 --> 04:12.560
Buna baktığımızda, burada kod editöründeyiz ve matematik sistemimin tamamını görebiliyoruz

04:12.560 --> 04:13.250
Örnek.

04:13.250 --> 04:18.740
Şimdi bu bir monobehaviour çünkü bir oyun nesnesi üzerinde oturan kodun kolaylıklarına sahip olmak istiyorum.

04:18.740 --> 04:20.230
Ve sonra uyanıklığın içinde.

04:20.240 --> 04:23.450
Burada bazı üretim kodlarını simüle edeceğim.

04:23.450 --> 04:29.210
Şimdi çok yalın, fazla bir şey yok ve birazdan yapacağımız testle aynı gibi görünüyor.

04:29.210 --> 04:34.850
çünkü sınıfı sıfırdan yaratıyorum ve sonra üzerinde bir yöntem çağırıyorum ve sonra gösteriyorum

04:34.850 --> 04:35.600
Sonuçlar.

04:35.600 --> 04:41.390
Ancak bir üretim örneğinde, gerçek bir oyun projesinde, bu eşdeğerin şu şekilde olacağını bilmek önemlidir

04:41.390 --> 04:46.640
çok sayıda sınıf ve tüm sahneler ve tüm prefabrikler ve genellikle sahip olacağınız tüm karmaşıklık

04:46.640 --> 04:47.600
projenizde.

04:47.600 --> 04:50.300
Ama burada bilerek çok yalın tutuyorum.

04:50.300 --> 04:51.980
Burada ne yaptığımıza dikkat edin.

04:51.980 --> 04:53.960
Matematik sistemimi oluşturuyoruz.

04:53.990 --> 04:58.820
Birkaç ints alıyoruz ve bunları beş ve on değerleriyle dolduruyoruz.

04:58.820 --> 05:01.010
Ve sonra Matematik sistemim diyoruz.

05:01.010 --> 05:03.620
Ve beş ve onda birlikte geçiyoruz.

05:03.620 --> 05:05.570
Ve sonra burada sonucu gösteriyoruz.

05:05.570 --> 05:07.100
Öyleyse devam edelim ve bunu yapalım.

05:07.100 --> 05:08.540
Burada oynat tuşuna bastım.

05:12.600 --> 05:16.600
Ve burada konsol penceresinde sonucun 15 olduğunu görüyoruz.

05:16.620 --> 05:22.290
Şimdi, bu kodlama örneğinin basitliğini seviyorum, çünkü bizi bir dünyada düşünmeye başlatıyor

05:22.290 --> 05:27.570
Birim testlerinin hiç var olmadığı bir yerde, bu kodun işlevsel olduğundan nasıl emin olabilirim?

05:27.600 --> 05:34.620
Belki de matematik sistemimin bu kodu oyununuzun pek çok yerinde kullanılıyor ve siz sadece

05:34.620 --> 05:40.020
Bu sistemin iyi çalıştığını görmek ve doğrulamak istediğinizde, sadece oyunu oynarsınız ve

05:40.020 --> 05:44.160
oyununuz birkaç dakika ya da birkaç saat uzunluğunda olabilir.

05:44.160 --> 05:50.220
Ve test edilmekte olan bu özel sistem, aşağıdakilere bağlı olarak pek çok farklı yerde kullanılabilir

05:50.220 --> 05:53.400
Farklı kullanıcı davranışları, girdiler ve durumlar üzerinde.

05:53.400 --> 05:55.740
Belki de günün saati önemli olabilir.

05:55.740 --> 06:01.020
Bu yüzden, gerçekten ham izolasyonda test edip etmediğimi bilmeniz zor.

06:01.020 --> 06:09.570
Doğrulama yapmak istersem yapabileceğim ilk şey bunu buraya kopyalayıp yapıştırmaktır

06:09.570 --> 06:10.440
Buraya.

06:12.790 --> 06:15.290
Ve bunu buraya çağırın ve test edin.

06:15.310 --> 06:16.840
Peki ya altı olsaydı?

06:16.840 --> 06:18.700
Peki ya 11 olsaydı?

06:20.790 --> 06:22.410
A'dan B'ye.

06:27.060 --> 06:33.060
Şimdi bir birim testi değil, sadece iki farklı örneği test ediyorum.

06:33.060 --> 06:35.820
Bu yüzden önce bunu yapıyorum ve ikinci olarak bunu yapıyorum.

06:35.850 --> 06:42.840
Şimdi buna kullanıcı testi veya oyun modu testi veya entegrasyon testi deniyor.

06:42.840 --> 06:43.980
üretim kodu.

06:43.980 --> 06:50.760
Ve ben sadece bir kullanıcı olarak deniyorum, yanlışlıkla bir sürü farklı şey yapmasını isteyebileceğimi umuyorum.

06:50.790 --> 06:53.690
hiçbirinin başarısız olmadığına bakın.

06:53.700 --> 06:57.870
Ancak burada yaptığım şeyin, son için gerçekten istemediğim şeyleri eklemek olduğunu hayal edebilirsiniz

06:57.870 --> 06:59.190
kullanıcı deneyimi.

06:59.190 --> 07:05.700
Sadece bazı işlevleri çağırarak kendi koduma biraz daha fazla güvenmeye çalışıyorum

07:05.700 --> 07:06.960
ekstra zamanlar.

07:06.990 --> 07:13.590
Ayrıca projenizde bir yerde hata ayıklama modunun doğru olduğunu söyleyen bir boolean ayarlayabilir ve ardından

07:13.590 --> 07:15.330
üretim kodunuz boyunca.

07:15.330 --> 07:18.810
Eğer durum buysa, biraz daha fazla test yaparsınız.

07:18.810 --> 07:20.220
Bu hiç fena değil.

07:20.220 --> 07:25.200
Bazı durumlarda size kesinlikle yardımcı olabilir, ancak durumun ne kadar daha iyi olduğuna bakalım

07:25.200 --> 07:25.770
olabilir.

07:25.770 --> 07:29.010
Eğer bunu yapmak yerine birim testlerini çalıştırırsam.

07:29.010 --> 07:31.860
İşte bu proje kodunun bulunduğu yer.

07:31.860 --> 07:36.060
Bu projede, incelediğimiz My Math sistemi, My Math sistemi örneğimiz var.

07:36.750 --> 07:42.630
Bunun yapısı ve birlikte çalışma şekilleri kursun başlarında konuşulmuştur.

07:42.630 --> 07:47.430
Ancak bir editör testimiz ve bir de çalışma zamanı testimiz var, bunlardan bahsedeceğiz.

07:47.430 --> 07:54.030
Yine, herhangi bir editör testi bir düzenleme modu çalıştıracaktır ve bu genellikle

07:54.030 --> 07:57.360
Monobehaviour gibi unity'ye özgü sınıfları kullanın.

07:57.390 --> 08:02.520
Monobehaviour sadece oyun modunda en iyi şekilde çalışmak üzere tasarlanmıştır.

08:02.520 --> 08:04.470
Yani burada çok uygun değil.

08:04.470 --> 08:04.950
Yani.

08:04.950 --> 08:07.860
Ancak burada yaptığımız gibi basit testler için harika.

08:07.890 --> 08:12.630
Oyun modu testinin yapıldığı çalışma zamanı alanı harika bir yer olacaktır.

08:12.630 --> 08:18.180
Farklılıkları görebilmeniz için bu atölyelerin her birinden birer tane yapıyorum.

08:18.180 --> 08:23.040
Ancak bazı durumlarda, neyi test ettiğinize bağlı olarak, muhtemelen

08:23.040 --> 08:27.060
Bu durumda düzenleme modunda bir birim testi daha uygundur.

08:27.060 --> 08:31.680
Bu kesinlikle daha sonra girdi ile hareket etmek ve bir şeyler yapmaktan bahsettiğimizde geçerlidir.

08:31.680 --> 08:37.800
fizik, belki de orada oyun modu testi gereklidir, çünkü giriş ve fizik gerçekten tasarlanmıştır

08:37.800 --> 08:39.270
oyun modu deneyimleri olarak.

08:39.270 --> 08:41.700
Dolayısıyla bu ayrımı bilmek önemlidir.

08:41.700 --> 08:43.080
Ve bunu burada ve orada gündeme getireceğim.

08:43.320 --> 08:45.840
Şimdi matematik sistemim testine bakalım.

08:49.240 --> 08:52.210
Ve bunun nasıl organize edildiğini görün.

08:53.800 --> 08:59.050
Burada, Matematik sistemim testinde birkaç farklılık olduğuna dikkat edin.

09:04.440 --> 09:06.270
Altında birkaç farklı yöntem vardır.

09:06.420 --> 09:10.560
Burada gördüğümüz isimlerin her biri test yöntemlerinin isimleridir.

09:10.560 --> 09:12.180
Öyleyse ilkiyle başlayalım.

09:12.570 --> 09:18.030
Kullanmayı sevdiğim kural burada takip ediliyor ve genellikle koyduğum kodda buna gireceğiz

09:18.030 --> 09:23.520
İlk olarak, hangi yöntemi test ediyoruz, ne bekliyoruz ve sonra durum nedir.

09:23.520 --> 09:26.490
Yani burada test ettiğimiz şeyin add yöntemi olduğu yazıyor.

09:26.490 --> 09:31.140
Beş ve onda geçtiğimizde sonucun 15 olmasını bekliyoruz.

09:31.380 --> 09:36.840
Burada güzel bir kısayol, herhangi bir testi çalıştırırken tekrar çalıştırmak için çift tıklayabilmenizdir.

09:37.890 --> 09:39.600
Ve sonra sağ tıklayabilirim.

09:41.550 --> 09:42.420
Üzgünüm, oyun modundaydım.

09:42.960 --> 09:44.910
Çift tıklayın ve tekrar çalışsın.

09:44.940 --> 09:45.390
Harika.

09:45.390 --> 09:46.290
Hala yeşil.

09:46.290 --> 09:49.650
Ve sağ tıklayıp kaynak kodu aç'ı seçebiliyorum.

09:50.810 --> 09:54.860
Bu, doğru sınıfa ve doğru yönteme ulaşmanın kolay bir yoludur.

09:54.890 --> 09:57.380
İşte yine gördüğümüz yöntem adı.

09:57.410 --> 10:00.920
Yine beş ve on eklendiğinde sonuç 15 olur.

10:00.950 --> 10:07.130
Bunun önemli olmasının nedeni, çok sayıda test yöntemine sahip çok sayıda test sınıfınız olmasıdır,

10:07.130 --> 10:14.660
ve umarım projenizde test çalıştırıcısında hangisinin kodda olduğunu anlamak için yaparsınız

10:14.660 --> 10:17.670
Burada tutarlı bir isimlendirme olması güzel.

10:17.690 --> 10:22.960
Yani burada yaptığımız şey, düzenle, harekete geç ve iddia et metodolojisini uygulamaktır.

10:22.970 --> 10:23.780
Sıralamada.

10:23.780 --> 10:28.370
İlk olarak yapacağımız şey, test etmek istediğimiz şeyin yeni bir örneğini oluşturmaktır.

10:28.370 --> 10:32.490
Bu şekilde, içinde eski veri bulunmadığını ve boş durmadığını biliriz.

10:32.510 --> 10:33.850
Bu her zaman iyi bir alıştırmadır.

10:33.860 --> 10:35.540
O zaman buna göre hareket edeceğiz.

10:35.540 --> 10:39.200
Bu şöyle bir şey, eğer bundan kurtulabilirseniz tek yöntem nedir?

10:39.200 --> 10:41.750
Belki de testi gerçekten yapan iki yöntem vardır.

10:41.750 --> 10:43.220
Ama tek bir yöntem idealdir.

10:43.250 --> 10:45.740
Burada beş ve onu topluyoruz.

10:45.740 --> 10:49.720
Ve sonra assert içinde bu assert dilini kullanacağız.

10:49.730 --> 10:56.720
assert sınıfı, bir şeyin bir şey olduğunu iddia ettiğimi söylediğiniz belirli bir yapıya sahiptir.

10:56.720 --> 11:01.730
Ve bunu biçimlendirmenin çeşitli yollarını görmek için bununla ilgili belgelere bakabilirsiniz.

11:01.730 --> 11:07.840
Ancak genellikle is equal to veya is true veya is false kullanıyorum.

11:07.850 --> 11:10.730
Yani bunlar burada oldukça yaygın olarak görecekleriniz.

11:11.060 --> 11:15.980
Kod doğru çalıştığı için bunu çalıştırdığımda beş ve on ekleyerek 15 yapıyor.

11:16.010 --> 11:16.760
İşte bu kadar.

11:16.790 --> 11:18.070
Bunu yapabiliyoruz.

11:18.080 --> 11:21.710
Şimdi üretim kodunda verdiğim örneği hatırlayın.

11:21.710 --> 11:30.710
Ya beş ve onu test etmek ve sonra altı ve 11'i test etmek ve sonra yedi ve 12'yi test etmek ya da her neyse

11:30.710 --> 11:31.760
Kombinasyonlar?

11:31.760 --> 11:38.570
Test konusunda ne kadar iyi olursanız, yeterli kapsama alanı sağlamak için gerçekten kaç teste ihtiyacınız olduğunu fark edeceksiniz.

11:38.600 --> 11:44.240
Sağlayabileceğiniz minimum test sayısının ne olduğu konusunda çok fazla sanat ve bilim var.

11:44.240 --> 11:47.800
Etkinizi ve sahip olduğunuz kod kapsamını en üst düzeye çıkarın.

11:47.810 --> 11:53.090
Bu özel atölye çalışmasının bir parçası olarak bahsetmek istediğim şeylerden biri de

11:53.090 --> 11:54.890
parametrelendirilmiş testler.

11:54.890 --> 12:01.520
Yani bunu kopyalayıp aşağıya yapıştırmak ve değerleri değiştirerek altı tanesini toplamak yerine

12:01.520 --> 12:08.840
ve 11 veya 0 ve negatif on, unity'den aynı testi çalıştırmasını isteyebiliriz, ancak bazı farklı

12:08.840 --> 12:09.590
Değerler.

12:09.590 --> 12:11.810
Burada pek çok farklı seçeneğiniz var.

12:11.810 --> 12:13.400
Sadece bir tanesini gösteriyorum.

12:13.400 --> 12:15.890
Ama şuraya bir göz atalım.

12:16.790 --> 12:23.150
Diyoruz ve birlikte bu değerler olduğunda sonucun doğru olduğunu varsayıyoruz.

12:23.150 --> 12:28.670
Yani yöntem adları biraz daha belirsiz çünkü parametrelendirilmiş, mutlaka bilmiyorum.

12:28.700 --> 12:31.490
Bu 5 ve 10'un 15 olduğunu test edecek mi?

12:31.520 --> 12:37.340
Daha önce yaptığım beş ve on yerine buraya dikkat edin.

12:37.370 --> 12:42.950
Bu özel dili kullandığım yöntemin gövdesinde, değer kaynağı adı verilen bir şey kullanıyorum.

12:42.950 --> 12:44.300
Ve sonra içeri aktarıyorum.

12:44.300 --> 12:50.180
Unity'nin yaptığı şey, bu ilk geçiş değerlerini buraya doldurmaktır.

12:50.180 --> 12:51.800
Diyelim ki beş.

12:51.830 --> 12:54.380
Sonra buradan başka bir değer kaynağı alır.

12:54.410 --> 13:01.070
Diyelim ki biri on ve bunların toplamının beş artı on olduğunu varsayıyor.

13:01.070 --> 13:06.020
Yani her çalıştığında, gördüğümüz son testin eşdeğerini yapacak.

13:06.020 --> 13:12.110
Ancak tek bir değer kümesine sabit kodlanmış olmak yerine, bunları karıştıracak ve çeşitli değerler gösterecektir

13:12.110 --> 13:12.620
onlardan.

13:12.620 --> 13:15.520
Şimdi tekrar, bunu biçimlendirebileceğiniz birçok farklı yol var.

13:15.520 --> 13:19.730
Bu yüzden unity'de parametrelendirilmiş testler için belgelere bakmak istersiniz.

13:19.730 --> 13:21.980
Ama burada benim özel durumuma bakalım.

13:22.010 --> 13:24.410
Bu değerler A ve b değerlerine kaynaklık eder.

13:24.410 --> 13:27.860
Sadece burada bulunan birkaç diziye atıfta bulunuyorlar.

13:27.860 --> 13:34.040
Ve yapacağı şey sadece adım adım ilerlemek ve bir ve bir, negatif iki ve

13:34.040 --> 13:36.620
negatif iki, negatif üç ve negatif üç.

13:36.650 --> 13:43.130
Bunları istediğiniz şekilde düzenleyebilir ve belki yedi, 11 tane yapabileceğiniz farklı senaryoları test edebilirsiniz.

13:43.130 --> 13:43.730
ve 12.

13:43.760 --> 13:45.260
İstediğiniz her şeyi test edebilirsiniz.

13:45.290 --> 13:48.080
Artık orada sonsuz miktarda test yapmak zorunda değilsiniz.

13:48.080 --> 13:50.510
İşte bu noktada sanat ve bilim bir araya geliyor.

13:50.510 --> 13:57.020
Bazı senaryolarda birkaç negatif değeri sıfır ve birkaç pozitif değeri test etmek isteyebilirsiniz.

13:57.050 --> 14:01.880
Belki yaptığınız şey matematik temelli değildir ve bunu başka bir şekilde düşünmek istiyorsunuzdur, ancak yaptığınız şey

14:01.880 --> 14:04.460
köşe vakaları denen şeyleri arıyoruz.

14:04.460 --> 14:10.310
Örneğin, bir bölme yöntemi uyguluyorsanız ve bunu matematiksel olarak test etmek istiyorsanız

14:10.310 --> 14:12.800
sıfıra bölme hakkında bir meydan okuma.

14:12.800 --> 14:17.030
Dolayısıyla, sıfır geçtiğinizi görmek ve bunu zarif bir şekilde ele almak istersiniz.

14:17.030 --> 14:22.100
Üretim kodunuzun içinde bulunduğu özel etki alanını gerçekten bilmeniz gerekir.

14:22.100 --> 14:22.790
test etmek için.

14:22.790 --> 14:27.080
Ama burada her birinden birkaç tane pozitif ve negatif ve bunun gibi şeyler var.

14:28.230 --> 14:31.010
Şimdi bunun unity editöründe nasıl göründüğüne bakalım.

14:31.020 --> 14:32.730
Burada ne yaptığına dikkat edin.

14:32.730 --> 14:38.040
Aslında elimizdeki tüm kombinasyonlara göre 49 test çalıştırıyor.

14:38.040 --> 14:41.930
Böylece size değerlerin ne zaman olduğunu gösterir ve sonra içeri geçer.

14:41.940 --> 14:43.490
Bu gerçekten güzel.

14:43.500 --> 14:50.490
Şimdi bu çıktıya bakarken fark edebilirsiniz ki %100 test etmek benim için önemli olacak.

14:50.490 --> 14:51.860
ve -100.

14:51.870 --> 14:52.410
Harika.

14:52.410 --> 14:58.950
Sonra geri dönüp bu örnek değerleri ekleyin, eğer sadece sabit bir değer yerine başka şeyler yapmak istiyorsanız

14:58.950 --> 14:59.700
kodlanmış liste.

14:59.700 --> 15:03.600
Rastgele bir değer seçmek istiyorsanız, orada sahip olduğunuz birçok başka seçenek vardır.

15:03.600 --> 15:06.240
Yine, parametrelendirilmiş testler hakkında biraz araştırma yapın.

15:06.420 --> 15:10.950
İsterseniz oyun modu testini de inceleyebilirsiniz, ancak bu daha ilginç olacağından

15:10.950 --> 15:15.060
diğer örneklerle devam edip bu çalıştayı sonlandıracağız.

15:15.060 --> 15:15.900
Teşekkürler.
