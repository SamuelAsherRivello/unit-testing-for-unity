WEBVTT

00:00.260 --> 00:03.380
Merhaba ve Unity için Birim Testine hoş geldiniz.

00:03.410 --> 00:07.340
Bu atölye çalışmasında karakter sınıfının gelişmiş bir versiyonuna bakıyoruz.

00:07.340 --> 00:09.290
Şimdi bu demonun nasıl çalıştığına bir göz atalım.

00:09.290 --> 00:11.330
Burada birliğimizi açacağız.

00:11.360 --> 00:13.310
Örnek projemizi açacağız.

00:13.310 --> 00:18.830
Ve burada karakterin gelişmiş durumu için içerideki bir sahneye göz atacağız.

00:18.830 --> 00:21.620
kod ayrımı hakkında biraz konuşalım.

00:21.650 --> 00:26.420
Daha önceki çalıştaylardan birinde, sahip olabileceğiniz farklı bağımlılıklardan bahsetmiştim.

00:26.420 --> 00:28.670
Örneğin, bir arka uç sunucusunu çağırıyorsanız.

00:28.670 --> 00:35.840
Ve bu durumda, arka ucu çağırmak zorunda kalmamak için bir yedek kütüphane kullandık.

00:35.870 --> 00:42.230
Burada da benzer bir tartışma söz konusu, belirli bir bağımlılıkla ilgili bağımlılığın ne olduğuna bakıyoruz.

00:42.230 --> 00:48.950
test senaryosu ve bu farklı bağımlılıkların nasıl farkında olacağız ve bu konuda ne yapmak istiyoruz?

00:48.950 --> 00:49.190
Öyle mi?

00:49.220 --> 00:51.740
Burada yedek kütüphaneyi kullanmayacağız.

00:51.740 --> 00:56.270
Monobehaviour'umuzu diğer kodlardan ayırmayı düşüneceğiz ve bir göz atacağız.

00:56.480 --> 00:58.250
İşte birlik içindeyiz.

00:58.580 --> 00:59.750
Bir üretim sınıfımız var.

00:59.750 --> 01:00.560
Bir göz atalım.

01:00.560 --> 01:01.160
Koşuyorum.

01:04.840 --> 01:07.810
Burada, ok tuşlarımızla hareket edebileceğimizi görüyoruz.

01:07.810 --> 01:11.350
Tıpkı temel örnekte olduğu gibi, son kullanıcı deneyimi aynıdır.

01:11.350 --> 01:16.630
Ve burada ilginç bir örnek var, kod için yaptığımız bazı değişiklikler

01:16.630 --> 01:21.550
Sistemlerimizin kalitesi ve test edilebilirliği son kullanıcıyı etkilemek zorunda değildir.

01:21.580 --> 01:22.680
Bu olumlu bir şey.

01:22.690 --> 01:25.570
Şimdi üretim koduna bir göz atalım.

01:25.570 --> 01:27.640
Gelişmiş karakter örneğini açacağız.

01:27.640 --> 01:29.200
İşte tam bir örnek.

01:29.200 --> 01:35.140
Bu örnek sınıfın içinde yaptığımız şey, küp için bir ilkel oluşturmaktır.

01:35.140 --> 01:37.600
Organizasyonun hatırına ona bir isim veriyoruz.

01:37.690 --> 01:45.310
Ardından, burada tüm işlevselliğimize sahip bir bileşen eklediğimiz tek bir satır yerine

01:45.340 --> 01:46.480
İki adım.

01:46.720 --> 01:52.000
Bu bana biraz My Data loader örneğinde gördüğümüz bağımlılık enjeksiyonunu hatırlatıyor.

01:52.000 --> 01:55.300
Ancak bu, farklı bağımlılıkları olan farklı bir kullanım durumudur.

01:55.300 --> 02:00.250
Yani tek bir bileşen ekleme satırı yerine bileşen ekliyoruz.

02:00.250 --> 02:05.590
Ve sonra kendi monobehaviour olmayan karakter gelişmiş sınıfımızı oluşturuyoruz.

02:05.590 --> 02:07.840
Ve Monobehaviour'a geçiyoruz.

02:07.840 --> 02:12.700
Böylece karakter ilerlemesinin kullanacağı bağımlılığı aktarıyoruz.

02:12.730 --> 02:19.240
Artık gelişmiş karakter tek bir davranış değildir ve bu nedenle nasıl istediğimiz konusunda daha fazla esnekliğe sahibiz

02:19.240 --> 02:19.810
test etmek için.

02:19.840 --> 02:23.110
Örneğin düzenleme modunda daha kolay test edebiliriz.

02:23.260 --> 02:28.330
Yine, Monobehaviours kullandığınızda bu, oyun modu testleri için daha uygundur.

02:28.360 --> 02:31.270
Bu kesin bir kural değil, ama bu da düşünmenin bir yolu.

02:31.270 --> 02:37.960
Burada, monobehaviour'umuzu monobehaviour olmayanlardan ayırarak, birkaç seçeneğimiz daha var.

02:37.990 --> 02:43.360
Şimdi hala burada bir oyun modu ortamındayız çünkü bu üretim kodu.

02:43.360 --> 02:46.270
Şimdi kaynak kodumuzun nasıl değiştiğini görelim.

02:46.270 --> 02:48.340
İşte burada gelişmiş karakterdeyiz.

02:48.370 --> 02:50.530
Oldukça tanıdık geldiğini göreceksiniz.

02:50.530 --> 02:56.400
Buradaki kodun çoğu önceki temel örnek gibi olacak, birkaç istisna dışında.

02:56.410 --> 03:02.980
Birincisi, gelişmiş karakterin kurucusunda Monobehaviour'a bir referans alacak olmasıdır.

03:03.010 --> 03:08.200
Bunun nedeni, Monobehaviour hakkında, özellikle de dönüşümüyle ilgili bazı şeyleri bilmeye ihtiyaç duymasıdır

03:08.200 --> 03:09.040
Pozisyon.

03:09.130 --> 03:15.700
İkinci satırı kullanmamız ve Monobehaviour'a bir referans söylememiz gereken bir durum da vardır

03:15.700 --> 03:18.130
karakter ilerledikçe bize geri dönecek.

03:18.160 --> 03:24.790
Bu sadece Monobehaviour'un güncelleme çağrısı yaptığında bize doğru hareketi yapmamızı söyleyebilmesi içindir.

03:24.820 --> 03:30.280
Bunu düzenleyebileceğiniz başka yollar da var, ancak basitlik açısından monobehaviour

03:30.280 --> 03:31.660
ve bu şekilde ele almak.

03:31.990 --> 03:34.480
Bakalım kod tabanında başka ne gibi değişiklikler göreceğiz.

03:35.800 --> 03:38.140
Hareket türü temel ile aynıdır.

03:38.170 --> 03:40.360
Girişe göre hareket aynıdır.

03:41.260 --> 03:45.610
Burada anahtar koduna göre hareket aynı olmasa da çok benzerdir.

03:46.480 --> 03:52.930
Ve sonra burada aşağıya doğru hareket et ve hareket et ile, pozisyonu aldığımızı ve ayarladığımızı fark edebilirsiniz

03:52.930 --> 03:55.630
dönüştürülmesinde kullanılır.

03:55.630 --> 04:02.590
Yani burada da çoğunlukla monobehaviour olmayan bir sınıfımız var ve herhangi bir bağımlılık olmadan yapabileceği şeyi yapıyor.

04:02.590 --> 04:08.130
Monobehaviour ve sadece en gerekli noktalarda Monobehaviour'a hitap eder.

04:08.140 --> 04:14.140
Bu ayrım, eğer yapabilseydik sadece tek bir davranışı nasıl test edebileceğimizi düşünmemize yardımcı olmaya başlar,

04:14.170 --> 04:17.140
Eğer yapabilseydik, sadece monobehaviour olmayanları nasıl test edebilirdik?

04:17.170 --> 04:22.570
Şimdi, bu mükemmel bir örnek değil, çünkü bu bir tür orta adımdır.

04:22.570 --> 04:24.370
bunları nasıl düzgün bir şekilde ayırabiliriz.

04:24.370 --> 04:25.900
Ama bunun iyi bir öğrenme olduğunu düşünüyorum.

04:25.900 --> 04:29.800
Gelişmiş karakter için buradaki kaynak koduna bakın.

04:29.800 --> 04:33.880
Bunu kendi zamanınızdaki Basic karakteriyle karşılaştırın ve aradaki farkları görün.

04:34.030 --> 04:36.910
O zaman yaptığımız örneğe bir göz atalım.

04:36.910 --> 04:37.240
Tekrar.

04:37.270 --> 04:38.830
İşte gördüğümüz örnek.

04:38.830 --> 04:40.000
Yani bu iki çizgi.

04:40.000 --> 04:41.200
Bu gerçekten anahtar.

04:41.230 --> 04:47.290
Oyun nesnemize gelişmiş Monobehaviour karakterinin bir bileşenini ekleyeceğiz.

04:47.290 --> 04:49.580
Ve sonra yeni bir gelişmiş karakter oluşturacağız.

04:49.580 --> 04:50.740
Bu ayrı bir adım.

04:50.740 --> 04:54.310
Yani bu iki şeyi ayrı ayrı test edebileceğimizi hayal edebilirsiniz.

04:54.310 --> 04:56.650
Şimdi birbirlerine oldukça bağımlılar.

04:56.680 --> 04:58.390
Buna masaj yapmanın yolları var.

04:58.390 --> 05:01.300
Yani biri diğerine doğrudan bağlı değildir.

05:01.300 --> 05:07.660
Ya da veri yükleyici örneğinde yaptığımız gibi bir şey yapabilir ve bir yedek kütüphane kullanabiliriz, böylece

05:07.660 --> 05:10.080
bunun yerine bağımlılıkta mocking yapıyoruz.

05:10.090 --> 05:15.730
Ancak yine de, sadece bir monobehaviour'u nasıl ayıracağımızı öğrenmenin basitliği için, sanırım

05:15.730 --> 05:16.510
buradaki durum.

05:16.510 --> 05:21.430
Bu testleri düzenleme modu ve oynatma modu ile kendi zamanınızda çalıştırabilir ve buna bir göz atabilirsiniz.

05:21.640 --> 05:27.760
Ama bana kalırsa, monobehaviour ve non monobehaviour ayrımındaki farklılıklar hakkında konuşmayı bitirdik.

05:27.790 --> 05:28.450
Teşekkürler.
