WEBVTT

00:00.590 --> 00:02.660
Merhaba ve Unity için Birim Testine hoş geldiniz.

00:02.690 --> 00:03.860
Atölyeler.

00:03.860 --> 00:09.590
Bu atölye bölümünde, her biri bize bazı şeyleri gösteren çok sayıda farklı küçük örneği ele alacağız

00:09.590 --> 00:11.030
birim testinin özellikleri.

00:11.030 --> 00:12.800
Buradaki içeriğe bir göz atalım.

00:12.800 --> 00:16.730
İlk olarak, bu bölümün girişinde şimdi geçmekte olduğum bu genel bakışı vereceğim.

00:16.730 --> 00:19.070
Ve sonra her bir atölyeyi adım adım inceleyeceğiz.

00:19.070 --> 00:24.320
Tipik olarak her atölye, bir örnek projemizdeki bir sahneyi ifade eder.

00:24.320 --> 00:28.370
Bu örnek projeyi indirirseniz her bir sahneyi takip edebilirsiniz.

00:28.370 --> 00:35.270
Çok basit bir örnek olan matematik sistemimi ele alacağız, sadece birim testinin ne olduğunu bize yeniden tanıtmak için

00:35.270 --> 00:36.500
Unity'nin içinde.

00:36.500 --> 00:42.230
Daha sonra veri yükleyici örneğime geçeceğiz ve bunun temel bir versiyonunu göstereceğim ve ardından

00:42.230 --> 00:48.740
isteğe bağlı ancak içinde müthiş güçlü bazı ek özellikler kullanan daha gelişmiş bir sürüm

00:48.740 --> 00:50.390
birim testi için unity.

00:50.420 --> 00:54.920
Daha sonra işlenmiş grafiklerle bir şeyler yapmak istediğim bir örnek üzerinden gideceğiz.

00:54.920 --> 01:00.530
Bu yüzden ok tuşlarıyla veya gamepad ile çalıştırabileceğimiz bir küpüm var ve buna

01:00.530 --> 01:01.340
Karakter.

01:01.400 --> 01:06.950
Test için giderek daha karmaşık kullanım durumlarına bakarak birkaç örnek üzerinden ilerleyeceğiz,

01:06.950 --> 01:13.520
Sonunda fizik tabanlı bir hareket yapıyor, girdi alıyor ve karakterimizi sert gövde ile hareket ettiriyoruz,

01:13.520 --> 01:17.990
ve bunun etrafında nasıl ve neden birim testi yapmak isteyeceğimize bakıyoruz.

01:18.020 --> 01:25.340
Genel olarak konuşursak, ne kadar çok unity özelliği kullanırsanız ve ne kadar çok çalışma zamanı animasyonu yaparsanız

01:25.340 --> 01:27.440
test sürecinde daha fazla zorluk.

01:27.440 --> 01:28.880
Bu konu hakkında biraz konuşacağız.

01:28.880 --> 01:31.670
Buraya daha fazla içerik eklemem için her zaman bir fırsat var.

01:31.670 --> 01:34.160
Bu yüzden bazı ileri düzey konuları da ele alacağız.

01:34.160 --> 01:38.990
Ve bu atölye çalışması, bazı özel alt konulara daha derinlemesine dalmamızı sağlayacak.

01:38.990 --> 01:43.580
Tüm kaynak kodu, projenin kendisi için indirilen kaynak kodunda mevcuttur.

01:43.580 --> 01:44.720
Böylece bunu yakalayabilirsiniz.

01:44.720 --> 01:48.950
Ve buradaki format doğaçlama bir ekran paylaşımı olacak.

01:48.980 --> 01:53.750
Normalden daha uzun çekimler yapacağım ve bazı farklı şeyler olduğunda yüksek sesle düşüneceğim

01:53.750 --> 01:58.520
Birim testinin güçleri ve zorlukları hakkında konuşmak ve bunları sizinle paylaşmak istiyorum.

01:58.820 --> 02:03.320
Mevcut bazı kodları gözden geçireceğim ve bu arada yeni kodlar oluşturacağım.

02:03.320 --> 02:09.590
Buna bakmanın ve bu bilgileri kullanmanın harika bir yolu, örnek projeyi indirmek ve birlikte takip etmektir

02:09.590 --> 02:10.400
Burada ve orada.

02:10.400 --> 02:16.190
Test edilmek üzere yeni bir üretim yöntemi veya test ettiklerinizi kapsayacak yeni test yöntemleri eklemeniz için sizi teşvik edeceğim.

02:16.190 --> 02:17.540
üretim kodunda var.

02:17.540 --> 02:21.200
Burada bulunan mevcut örnekler üzerine inşa edebilirsiniz.

02:21.200 --> 02:23.720
Ya da kesinlikle kendi örnek sahnelerinizi oluşturabilirsiniz.

02:23.720 --> 02:27.230
Ve özet olarak, birim testinin faydalarını burada okuyalım.

02:27.230 --> 02:33.560
Bunlardan bazıları, kodunuza güven katmanın yanı sıra kodunuzda daha cesur refactor'lara izin vermeyi içerir

02:33.560 --> 02:39.560
Projenizin durumu hakkında refactor öncesi ve sonrasında daha fazla farkındalık ile temel.

02:39.560 --> 02:44.990
Ve genel olarak, bu zamandan tasarruf sağlayacak çünkü gördük ki her zaman

02:45.020 --> 02:50.210
Çalışmalarımızın büyük bir kısmında yeni özellikler eklerken, araştırmalardan öğrendiğimize göre yazılım geliştirme

02:50.210 --> 02:55.220
çoğunlukla mevcut bir kodu korumakla ilgilidir ve birim testinin asıl gittiği yer de burasıdır

02:55.220 --> 02:55.640
parlamak için.

02:55.640 --> 02:58.700
Böylece projenin ömrü boyunca bize zaman kazandıracak.

02:58.730 --> 03:04.130
Bu kurstan ve birim testini kullanmaktan beklediğimiz sonuçlar, daha fazla güvene sahip olmak ve

03:04.130 --> 03:05.990
kod tabanımızda sağlamlık.

03:06.020 --> 03:12.680
Daha fazla tek amaçlı sınıf ve metoda sahip olacağız, bu da odaklanmak için harika bir tasarım ilkesidir.

03:12.680 --> 03:14.930
ve kesinlikle test edilebilirliğimize yardımcı olur.

03:14.930 --> 03:17.450
Ve daha basit çözümleri teşvik edeceğiz.

03:17.450 --> 03:19.550
Ve bu örneklerin bazılarında bundan bahsedeceğiz.

03:19.550 --> 03:21.650
En basit örneği burada özetlemek gerekirse.

03:21.650 --> 03:24.380
Bu aynı zamanda ele alacağımız atölye çalışmalarının ilki.

03:24.410 --> 03:30.290
Eğer bir mind math system sınıfımız varsa ve bu sınıfın toplama ve çıkarma için iki metodu varsa.

03:30.320 --> 03:35.090
Şimdi, bu kod tabanının çalıştığını gördüğünüzde, çarpma için kendi yönteminizi ekleyebileceğinizi hayal edebilirsiniz

03:35.090 --> 03:38.300
veya bölmek ve ardından bunun üzerine bazı birim testleri eklemek.

03:38.310 --> 03:39.800
Burada pratik yapmak için harika bir yol.

03:39.800 --> 03:43.220
Ve bu bilerek üzerinden geçeceğimiz sahnelerin en basiti.

03:43.220 --> 03:48.560
Dolayısıyla, hala temel bilgilere alışmaya çalışıyorsanız ve bunun gerçekten yerleştiğinden emin olmak istiyorsanız,

03:48.560 --> 03:53.300
Videonun bu bölümüne ve kod tabanının bu bölümüne biraz daha zaman ayırmanızı öneririm

03:53.300 --> 03:55.340
iyi hissediyorsanız, ondan sonra devam edin.

03:55.340 --> 03:59.450
Ve yine, burada oluşturacağımız birim testlerinin türüne bir örnek var.

03:59.450 --> 04:04.100
Bu, benim matematik sistemimi kapsayan basit, eksiksiz ve uygun bir testtir.

04:04.100 --> 04:08.690
Burada yaptığımız şey, düzenle, harekete geç ve iddia et paradigmasını takip etmektir.

04:08.720 --> 04:14.540
Bu, birim testinize yaklaşmak için isteğe bağlı bir yoldur, sadece ilerledikçe kendi düşüncelerinizi organize etmek için.

04:14.720 --> 04:18.740
Bazen yol boyunca asenkron kod geliştirme yapıyor olabilirsiniz.

04:18.740 --> 04:23.990
Yani bu metodolojide arrange, act, await ve assert yapardım.

04:23.990 --> 04:29.840
Beklemenin ne olduğundan tam olarak emin değilseniz, await ve async metodolojisine bakacağız.

04:29.870 --> 04:32.120
atölye çalışmasının bir parçası olarak asenkron kodlama.

04:32.120 --> 04:37.760
Şimdi burada projeye ve bu kursa katkıda bulunmak için kaynak kodu üzerinde çalışırken, ne

04:37.760 --> 04:40.330
Bağımlılıkların her birine baktım.

04:40.340 --> 04:47.990
Unity, resmi unity çözümünü yapabilmemiz için unity paket yöneticisinde belirli kütüphanelere sahiptir

04:47.990 --> 04:49.550
birim testi için.

04:49.550 --> 04:55.820
Şimdi, burada yaptığım şey, sürümdeki bir x'i kullanmak yerine, deneysel bir sürüm kullanmak.

04:55.820 --> 04:59.900
Bu yüzden videoda geçtiğim test koşucusunun göründüğünü fark edebilirsiniz.

05:00.050 --> 05:04.940
İnternette gördüğünüz bazı ekran görüntülerinden biraz daha farklı ya da deneyiminiz varsa

05:04.940 --> 05:06.400
test çalıştırıcısı ile kendiniz.

05:06.410 --> 05:08.630
Bugün göstereceğim şey biraz farklı görünebilir.

05:08.660 --> 05:13.370
İndireceğiniz örnek proje bu videonun görünümüyle eşleşecek, çünkü ben

05:13.400 --> 05:15.020
bu bağımlılığı oraya dahil ettim.

05:15.050 --> 05:16.340
Bunu yapmamın sebepleri var.

05:16.340 --> 05:21.020
Bu sadece test koşucusunun farklı görünmesi ve daha kararlı olması değil, ki bence durum böyle.

05:21.050 --> 05:26.870
Aynı zamanda arkasındaki kütüphane, özellikle bazı asenkron

05:26.870 --> 05:28.370
geliştirme ve test.

05:29.730 --> 05:33.060
Projeye dahil olan bu sürüm metin dosyasına göz atabilirsiniz.

05:33.060 --> 05:37.790
Bu bağımlılıkların her birinin nasıl, nerede ve neden dahil edildiğini görmek istiyorsanız.

05:37.800 --> 05:43.020
Gireceğimiz örnek proje, üzerine tıklayıp görebileceğimiz bir Benioku varlığı içerir

05:43.020 --> 05:44.390
sağdaki bu güzel menü.

05:44.400 --> 05:49.950
Bazı popüler bağlantıları hatırlamak ve her birine doğrudan tıklamak için yönlendirilmenin kolay bir yoludur.

05:49.950 --> 05:51.690
içine girmek istediğiniz örnekler.

05:51.960 --> 05:57.270
Burada kullandığımı göreceğiniz özel bir düzenim var, bu da test koşucusunu merkezde tutmak

05:57.270 --> 05:59.930
sadece videonun amaçları doğrultusunda güzel ve büyük olması için.

05:59.940 --> 06:04.710
Genellikle geliştirme aşamasında, test koşucum sağ tarafta oturuyor olabilir, ancak ben

06:04.710 --> 06:08.280
özellikle testlerin tartışılması amacıyla ön ve merkezde.

06:08.370 --> 06:13.290
Bu pencereleri ve düzenleri elbette istediğiniz şekilde yeniden boyutlandırabilirsiniz, ancak bazı önemli olanlar

06:13.290 --> 06:18.150
Burada proje penceresine, test çalıştırıcısına ve ardından denetçiye bir göz atacağız.

06:18.150 --> 06:19.020
bir göz atalım.

06:19.020 --> 06:23.310
Şimdi buraya dalmak ve atölye çalışmalarının ilkine göz atmak üzereyiz.

06:23.370 --> 06:27.870
Yine bazı farklı alt konulara odaklanarak birkaç bölüme ayırdım.

06:27.870 --> 06:35.130
Ayrıca yol boyunca bunları birden başlayarak en yüksek sayıya doğru aşağı yukarı düzenlemeyi düşündüm

06:35.130 --> 06:39.840
En kolay ve en az karmaşık olanla başlayıp bu kavramlar üzerine inşa etmek.

06:40.140 --> 06:42.810
Demo sahnelerinin her biri kendi başına çalışır.

06:42.810 --> 06:44.880
Konsol penceresinde oynat tuşuna basmanız yeterli.

06:44.910 --> 06:47.070
Bazı göstergeler ve bunun gibi şeyler göreceksiniz.

06:47.070 --> 06:52.050
Takip edebilirsiniz ve bazı sahnelerde oynat tuşuna bastığınızda aslında yapacak bir şeyler var.

06:52.080 --> 06:56.610
Bazen kullanıcı arayüzü yoktur, sadece basittir ve sadece bazı hata ayıklama günlük ifadelerine bakarsınız.

06:56.610 --> 07:00.110
Bu nedenle, bu atölye çalışmalarını bu konuya giriş yapmanın harika bir yolu olarak paylaşmaktan gerçekten heyecan duyuyorum.

07:00.120 --> 07:01.140
Hadi başlayalım.

07:01.140 --> 07:02.970
Unity editörünü açacağız.

07:02.970 --> 07:07.680
Dersin başındaki ders kaynaklarını takip ederek kaynak kodunu zaten indirdim.

07:07.680 --> 07:12.540
Bu kurs örnek projesini açacağız ve ardından bir veya daha fazla sahneyi açıp oynatacağız

07:12.540 --> 07:13.680
her bir atölyede.

07:13.680 --> 07:18.360
İlk olarak, bize projede biraz yönlendirme sağlayan Readme varlığına bakacağız.

07:18.390 --> 07:23.700
Ayrıca paket yöneticisine bakacağız, proje yapısını keşfedeceğiz ve ardından teste bir göz atacağız

07:23.700 --> 07:24.630
Koşucu penceresi.

07:24.630 --> 07:29.610
Burada sadece örnek projenin ne olduğuna ve atölye çalışmalarının nasıl yapıldığına dair genel bir bakış sunuyoruz.

07:29.610 --> 07:30.270
Biçimlendirilmiş.

07:30.270 --> 07:33.090
Daha sonra her bir atölye çalışmasına geçeceğiz.

07:33.090 --> 07:35.190
İşte birlik içindeyiz.

07:35.190 --> 07:39.960
Web kameramı aksiyondan uzak tutmak için elimden geleni yapacağım.

07:39.960 --> 07:45.360
Ve bakacağımız şey, birkaç noktada mevcut olan Readme, biz

07:45.360 --> 07:48.810
buraya gidebilir ve Benioku'yu açmak için bu menü seçeneğini keşfedebilirsiniz.

07:49.440 --> 07:54.060
Ayrıca proje penceresine göz atabilir ve buraya gidip sadece benioku'ya tıklayabiliriz.

07:54.180 --> 07:56.900
Her iki durumda da, Denetçi'de benioku dosyasını açacaktır.

07:56.910 --> 07:58.650
Elimizdekilere bir göz atalım.

08:00.900 --> 08:05.490
Bu bilgilerin yer aldığı kursa ve örnek projeye sadece oryantasyon için bazı bağlantılarımız var

08:05.490 --> 08:06.060
mevcut.

08:06.060 --> 08:08.670
Eğer tıklamak ve bu bağlantılara göz atmak isterseniz.

08:11.450 --> 08:13.220
Ve sonra Başlarken bölümü.

08:13.220 --> 08:18.650
Popüler örneklerden bazılarına ulaşmak için hızlı bir yol var, bu yüzden kesinlikle

08:18.650 --> 08:20.060
proje penceresi ve onları bulun.

08:20.060 --> 08:22.140
Ama bu oryantasyon için güzel bir yol.

08:22.160 --> 08:25.190
Bakmak istediğim başka bir şey de buradaki paket yöneticisi.

08:25.220 --> 08:29.360
Eğer bu projeyi indiriyorsanız, aynı paketleri burada da göreceksiniz.

08:29.360 --> 08:35.510
Ancak burada veya gelecekte öğrenmeniz amacıyla bu dersleri getirmeye karar verirseniz

08:35.510 --> 08:40.640
farklı bir projeye dönüştürmek istiyorsanız, paket yöneticinizin benzer görünmesini isteyeceksiniz.

08:40.640 --> 08:42.230
burada da aynı deneyimi yaşamak için.

08:42.230 --> 08:46.160
Son yedek paketi aldığıma dikkat edin.

08:46.400 --> 08:52.130
Ayrıca kod kapsama paketi ve test çerçevesi de var.

08:52.130 --> 08:56.990
Ve bu kursun amacı doğrultusunda, bize bazı ek bilgiler veren bir ön sürümüm olduğuna dikkat edin

08:56.990 --> 08:57.940
işlevsellik.

08:57.950 --> 09:00.050
Bu, birim testi için isteğe bağlıdır.

09:00.050 --> 09:04.730
Birim testinin özelliklerinin büyük bir kısmı için kesinlikle buna ihtiyacınız yok, ancak bence bazı

09:04.730 --> 09:06.020
havalı, son teknoloji şeyler.

09:06.020 --> 09:10.040
Bu yüzden buna odaklanacağız ve denemenizi tavsiye ederim.

09:10.070 --> 09:11.420
Burada dikkat edilmesi gereken bir şey daha var.

09:11.420 --> 09:14.750
Seçtiğim bu sürüm dosyası bunu inceleyecektir.

09:14.750 --> 09:19.430
Bu sadece bağımlılıklar hakkında biraz konuşmak için yol boyunca aldığım bazı notlar.

09:19.430 --> 09:20.390
ve neden seçtiğini.

09:22.530 --> 09:24.420
O yüzden bu konuya burada girmeyeceğiz.

09:24.450 --> 09:26.080
Bu da zaman içinde değişebilir.

09:26.100 --> 09:30.210
Ancak her bir bağımlılığı nasıl ve neden kullandığımı merak ediyorsanız bu dosyaya göz atın ve

09:30.210 --> 09:33.450
Bu yüzden orada açıkça bahsettiğim yayın öncesi sürümü kullanıyorum.

09:33.480 --> 09:37.110
Ve son olarak, burada ön ve ortada, test çalıştırıcı penceresine bakalım.

09:37.140 --> 09:42.480
Artık bu pencereye Window General ve Test Runner'dan erişilebilir.

09:42.480 --> 09:47.160
Ve bahsettiğim gibi her varsayılan unity kurulumuna dahildir.

09:47.190 --> 09:51.600
Belirli bir paketin ön sürümünü ekledim, bu nedenle benimkinin düzeni biraz farklı görünebilir

09:51.600 --> 09:54.150
bu düzendeki standarttan daha fazla.

09:54.180 --> 10:01.260
Burada sahip olduğumuz şey, düzenleme modu testlerini açma ve kapatma ve oynatma modu testlerini açma ve kapatma yeteneğidir.

10:01.260 --> 10:03.570
Burada aynı sekme görünümünde gösterilmektedirler.

10:03.720 --> 10:04.840
Bu gerçekten harika.

10:04.860 --> 10:07.800
Sonra farklı kategorilere göz atabilirim.

10:07.800 --> 10:13.140
Şimdi incelediğimiz tüm testleri oluşturdum ve her birini belirli bir kategori olarak işaretledim.

10:13.140 --> 10:18.360
Yani matematik sistemim gibi sadece belirli bir tanesine bakmak istersem, o zaman sadece görünümü filtreler

10:18.390 --> 10:23.970
burada ve size yalnızca belirli bir kategorideki düzenlemeleri veya yalnızca oynatılanları gösterecektir.

10:24.000 --> 10:25.230
Bu sana gerçekten yardımcı olur.

10:25.260 --> 10:31.170
O zaman burada sadece düzenleme seçiliyken yapabileceğim şey, örneğin, tüm testleri görebilmektir

10:31.170 --> 10:31.770
Orada olanları.

10:31.770 --> 10:36.600
Ve burada altta seçili olarak çalıştırabilirim ya da tümünü çalıştırabilirim, örneğin seçili olarak çalıştıracağım.

10:36.600 --> 10:40.950
Ve yaptığı şey, tüm test kodlarını gözden geçirmek ve çalıştırmaktır.

10:41.040 --> 10:48.270
Burada yaklaştığımız metodolojinin özü, gelişiminizde periyodik olarak

10:48.270 --> 10:50.270
kendi kod tabanınızı test etmek istiyorsunuz.

10:50.280 --> 10:55.190
Bu pencereye gelirsiniz ve manuel olarak seçili çalıştır veya tümünü çalıştır düğmesine basarsınız.

10:55.200 --> 10:59.340
En üstte başarıyı gösteren yeşili görüyoruz.

10:59.340 --> 11:02.970
Bu bize başarılı olan 100 testimiz olduğuna dair küçük bir özet verir.

11:02.970 --> 11:07.550
Başarısız olan sıfır, atlanan ya da göz ardı edilen ise sıfır.

11:07.560 --> 11:13.530
Bu nedenle, birim testi yaparken tüm testlerinizin geçtiğinden emin olmak harika bir uygulamadır.

11:13.560 --> 11:18.570
Başarısız bir testin projenizde uzun süre kalmasına izin vermeyin.

11:18.570 --> 11:19.680
Bu konuya değinmek istiyorsunuz.

11:19.680 --> 11:20.520
Yoldan çekil.

11:20.520 --> 11:23.280
Gelecekte bir göç olacağını bilseniz bile.

11:23.280 --> 11:29.280
Bu nedenle buradaki en iyi uygulama, testlerinizi kod değişikliklerinizle güncel tutmak ve her zaman

11:29.280 --> 11:30.030
geçiyor.

11:30.030 --> 11:32.700
Burada en iyi uygulamanın yürürlükte olduğunu gösteriyoruz.

11:33.690 --> 11:36.690
Bir sonraki atölye çalışmasında ilgili kaynak koduna daha yakından bakacağız.

11:36.690 --> 11:41.850
Ancak atölye çalışmalarına ve örnek projeye baktığımız bu bölüm bu kadar.

11:46.910 --> 11:47.900
Merhaba ve hoş geldiniz.

11:47.900 --> 11:53.990
Bu atölye çalışmasında, My Math sistemine bir göz atacağız ve oldukça ilginç bir sisteme adım atacağız.

11:54.020 --> 11:58.250
Basit bir örnek, sadece birim testinin temelleri ile yeniden tanışmamızı sağlıyor.

11:58.250 --> 12:01.640
Yani bu demoda takip etmek için Core Sample projesini kullanabilirsiniz.

12:01.640 --> 12:06.440
Unity editörünü açacağız, bu çekirdek örnek projeyi açacağız ve sonra

12:06.440 --> 12:08.060
açın ve burada bazı sahneleri oynatın.

12:08.060 --> 12:13.310
My Math sistemine ve arkasındaki teste bakacağız ve bir özet yapacağız

12:13.340 --> 12:18.920
birim testinin temel kavramlarından bahsediyorum, sadece orada gördüğüm ve bahsetmeyi düşündüğüm temel kavramlardan bahsediyorum.

12:18.920 --> 12:25.370
Ayrıca, parametrelendirilmiş değerler hakkında da konuşacağız, bu da yaklaşabileceğiniz bir ara yoldur

12:25.370 --> 12:25.880
Test.

12:25.880 --> 12:29.540
Ve birim testine yaklaşırken sahip olunması gereken iyi bir ek beceridir.

12:29.570 --> 12:30.560
Hadi dalalım.

12:30.770 --> 12:35.330
Burada unity editörünün içindeyim ve matematik sistemi örneğimi açtım.

12:35.330 --> 12:37.970
Sahnenin kendisini bir oynayalım.

12:38.000 --> 12:41.630
Bazen bu atölyelerde sahne daha heyecan vericidir.

12:41.630 --> 12:43.220
Bu o kadar heyecan verici değil.

12:43.220 --> 12:48.680
Devam edelim ve alt pencerede oynat düğmesine basalım, yardımcı olan bazı basit metinler görüyoruz

12:48.680 --> 12:53.960
birim testi demosunda olduğumuzu ve sadece sahneyi oynatıp konsolu görüntüleyeceğimizi anlıyoruz.

12:53.960 --> 12:55.430
Şimdi konsola bakalım.

12:55.520 --> 12:58.520
Konsol bu sahnede kullanıcı arayüzü olmadığını söylüyor.

12:58.550 --> 13:01.430
Unity konsoluna bakın burada konsolun içindeyiz.

13:01.430 --> 13:02.090
Gerçekten.

13:02.090 --> 13:06.830
Bize sadece başarılı bir operasyondan sonra tükürülen bir değeri gösterecek.

13:06.830 --> 13:12.290
Dolayısıyla bu, gerçek üretim kodunda çok daha ilginç bir sahne olacaktır.

13:12.290 --> 13:17.540
Belki de burada aslında oyun menüsü veya oyun oynanışı vardır.

13:17.780 --> 13:22.730
Burada görülecek pek bir şeyin olmadığı oldukça yalın bir sahne var, ancak bunun

13:22.730 --> 13:23.150
ol.

13:23.720 --> 13:28.880
Test için bir çalışma zamanı sahnesi olması özellikle önemli değildir.

13:28.880 --> 13:34.520
Sık sık üretim kodunuzla üretim kodunuz arasındaki dengeden bahsetmek istiyorum.

13:34.520 --> 13:35.150
Şey.

13:35.150 --> 13:38.480
Ve sonra burada test kodu test işini yapıyor.

13:38.480 --> 13:44.330
Yani üretim kodu, bunu her zaman bunun gibi bir unity sahnesinde play tuşuna basarak deneyimliyoruz.

13:44.330 --> 13:47.750
Ve birim testimizi yapmak için farklı bir şey yapıyoruz.

13:47.780 --> 13:50.990
Burada yaptığımız şey test çalıştırıcı penceresine bakmaktır.

13:51.530 --> 13:55.340
Burada bakmak istediğimiz şeye uygun kategoriyi keşfediyoruz.

13:55.340 --> 13:57.470
Sadece benim matematik sistemime bakıyoruz.

13:58.560 --> 14:01.020
Ve sonra bakalım.

14:01.020 --> 14:02.280
Sadece düzenleme modu testini yapalım.

14:02.430 --> 14:06.780
Tümünü burada çalıştıracağız ve tüm testler bu şekilde çalışacak.

14:06.810 --> 14:09.050
Şimdi aslında sahneyi çalıştırmadı.

14:09.060 --> 14:15.420
Sadece kendi küçük evreninde bir tür kenarda çalışıyor, bu testleri bir

14:15.420 --> 14:16.290
Düzenleme modu.

14:16.290 --> 14:19.790
Bu yüzden düzenleme modu testleri buradaki farktan biraz bahsediyor.

14:19.800 --> 14:25.050
Düzenleme modu testleri, unity'de iki ana mod olan düzenleme modunda çalışır.

14:25.050 --> 14:30.630
Temel olarak, oynat düğmesine bastığınız andan oynat düğmesine bastığınız ana kadar, yani

14:30.630 --> 14:31.290
oyun modu.

14:31.320 --> 14:35.440
Bu genellikle kullanıcının unity oyununu deneyimlediği yerdir.

14:35.610 --> 14:38.430
Bu modda olmadığımız her an düzenleme modundayız.

14:38.430 --> 14:40.170
Tam burada oturuyoruz, düzenleme modundayız.

14:40.200 --> 14:46.260
Bu testler düzenleme modunda çalıştırılır çünkü bir çalışma zamanının tüm karmaşıklığına ihtiyaç duymazlar

14:46.260 --> 14:46.800
Sahne.

14:46.800 --> 14:52.110
Bu, bu kodların çalıştığı daha basit ve küçük bir izole alana sahip olmamıza yardımcı olur.

14:52.110 --> 14:57.780
Şimdi bazen tekli davranışların ve çalışma zamanı işlevselliğinin kolaylıklarına ihtiyaç duyarsınız.

14:57.780 --> 15:01.680
İşte bu noktada oyun modu devreye giriyor.

15:01.680 --> 15:04.260
Ve burada da bazı oyun modu testlerimiz var.

15:04.260 --> 15:09.480
Bu onay kutularından birine her tıkladığımda, bize biraz farklı listeler gösterdiğini görebilirsiniz

15:09.510 --> 15:10.740
elimizdekilerin.

15:10.740 --> 15:13.140
Bu yüzden burada oyun modunda hepsini çalıştıra basacağım.

15:13.950 --> 15:18.090
Ve burada aslında yepyeni bir sahne oluşturuyor.

15:18.090 --> 15:24.420
Elimdeki test koduyla sadece demo amaçlı bir çalışma zamanı sahnesi çalıştırıyorum ve sonra

15:24.420 --> 15:26.880
İçinde bulunduğumuz orijinal sahneye geri dönüyoruz.

15:26.880 --> 15:31.110
Eğer sahneyi kaydetmemiş olsaydık, bizi uyaracak ve diyecekti ki, hey, bir oyun modu çalıştırmak üzeresin

15:31.140 --> 15:31.620
Test.

15:31.650 --> 15:33.360
Geçici olarak olay yerinden ayrılacağız.

15:33.390 --> 15:35.040
Önce sahnenizi kaydetmek ister misiniz?

15:35.040 --> 15:37.500
Genelde bu iyi bir fikirdir, bu yüzden buna dikkat edin.

15:37.530 --> 15:39.300
Şimdi kaynak koduna bakalım.

15:39.330 --> 15:43.020
İlk olarak çalışma zamanı üretim koduna bakalım.

15:43.020 --> 15:45.810
Bu yüzden My Math sistem örneğini açacağız.

15:45.810 --> 15:52.740
Bu atölyelerin her birinde, genellikle bir oyun nesnesi ile bir örnek komut dosyası bulunur.

15:52.740 --> 15:53.580
Her şey bitti.

15:53.580 --> 15:59.490
Buna baktığımızda, burada kod editöründeyiz ve matematik sistemimin tamamını görebiliyoruz

15:59.490 --> 16:00.180
Örnek.

16:00.180 --> 16:05.670
Şimdi bu bir monobehaviour çünkü bir oyun nesnesi üzerinde oturan kodun kolaylıklarına sahip olmak istiyorum.

16:05.670 --> 16:10.380
Ve sonra buradaki bekleyişin içinde bazı üretim kodlarını simüle edeceğim.

16:10.380 --> 16:16.140
Şimdi çok yalın, fazla bir şey yok ve birazdan yapacağımız testle aynı gibi görünüyor.

16:16.140 --> 16:21.780
çünkü sınıfı sıfırdan yaratıyorum ve sonra üzerinde bir yöntem çağırıyorum ve sonra gösteriyorum

16:21.780 --> 16:22.530
Sonuçlar.

16:22.530 --> 16:28.320
Ancak bir üretim örneğinde, gerçek bir oyun projesinde, bu eşdeğerin şu şekilde olacağını bilmek önemlidir

16:28.320 --> 16:33.600
çok sayıda sınıf ve tüm sahneler ve tüm prefabrikler ve genellikle sahip olacağınız tüm karmaşıklık

16:33.600 --> 16:34.530
projenizde.

16:34.530 --> 16:37.230
Ama burada bilerek çok zayıf tutuyorum.

16:37.230 --> 16:38.910
Burada ne yaptığımıza dikkat edin.

16:38.910 --> 16:40.920
Matematik sistemimi oluşturuyoruz.

16:40.920 --> 16:45.750
Birkaç ints alırız ve bunları beş ve on değerleriyle doldururuz.

16:45.750 --> 16:47.940
Ve sonra Matematik sistemim diyoruz.

16:47.940 --> 16:50.550
Ve beş ve onda birlikte geçiyoruz.

16:50.550 --> 16:52.500
Ve sonra burada sonucu gösteriyoruz.

16:52.500 --> 16:54.030
Öyleyse devam edelim ve bunu yapalım.

16:54.030 --> 16:55.470
İşte oynat tuşuna bastım.

16:59.430 --> 17:03.560
Ve burada konsol penceresinde sonucun 15 olduğunu görüyoruz.

17:03.570 --> 17:09.240
Şimdi, bu kodlama örneğinin basitliğini seviyorum, çünkü bizi bir dünyada düşünmeye başlatıyor

17:09.240 --> 17:14.540
Birim testlerinin hiç var olmadığı bir yerde, bu kodun işlevsel olduğundan nasıl emin olabilirim?

17:14.550 --> 17:21.570
Belki de benim matematik sistemimin bu kodu oyununuzun pek çok yerinde kullanılıyor ve siz de basitçe,

17:21.570 --> 17:26.970
Bu sistemin iyi çalıştığını görmek ve doğrulamak istediğinizde, sadece oyunu oynarsınız ve

17:26.970 --> 17:31.110
oyununuz birkaç dakika ya da birkaç saat uzunluğunda olabilir.

17:31.110 --> 17:37.140
Ve test edilmekte olan bu özel sistem, aşağıdakilere bağlı olarak pek çok farklı yerde kullanılabilir

17:37.140 --> 17:40.320
farklı kullanıcı davranışları, girdiler ve durumlar üzerinde.

17:40.320 --> 17:42.660
Belki de günün saati önemli olabilir.

17:42.660 --> 17:47.970
Bu nedenle, bunu gerçekten ham izolasyonda test edip etmediğimi bilmek sizin için zor.

17:47.970 --> 17:56.490
Doğrulama yapmak istersem yapabileceğim ilk şey bunu buraya kopyalayıp yapıştırmaktır

17:56.490 --> 17:57.360
Buraya.

17:59.710 --> 18:02.220
Ve bunu buraya çağırın ve test edin.

18:02.230 --> 18:03.790
Peki ya altı olsaydı?

18:03.790 --> 18:05.680
Peki ya 11 olsaydı?

18:07.710 --> 18:09.360
A'dan B'ye.

18:14.010 --> 18:20.000
Şimdi bir birim testi değil, sadece iki farklı örneği test ediyorum.

18:20.010 --> 18:22.770
Bu yüzden ilk önce bunu yapıyorum ve ikinci olarak bunu yapıyorum.

18:22.800 --> 18:29.760
Şimdi buna kullanıcı testi veya oyun modu testi veya entegrasyon testi deniyor.

18:29.760 --> 18:30.900
üretim kodu.

18:30.900 --> 18:37.710
Ve ben sadece bir kullanıcı olarak deniyorum, yanlışlıkla bir sürü farklı şey yapmasını isteyebileceğimi umuyorum.

18:37.740 --> 18:40.620
işlemlerinden hiçbirinin başarısız olmadığını görün.

18:40.650 --> 18:44.790
Ancak burada yaptığım şeyin, son için gerçekten istemediğim şeyleri eklemek olduğunu hayal edebilirsiniz

18:44.790 --> 18:46.140
kullanıcı deneyimi.

18:46.140 --> 18:52.650
Sadece bazı işlevleri çağırarak kendi koduma biraz daha fazla güvenmeye çalışıyorum

18:52.650 --> 18:53.910
ekstra zamanlar.

18:53.940 --> 19:00.510
Ayrıca projenizde bir yerde hata ayıklama modunun doğru olduğunu söyleyen bir boolean ayarlayabilir ve ardından

19:00.510 --> 19:02.280
üretim kodunuz boyunca.

19:02.280 --> 19:05.730
Eğer durum buysa, biraz daha fazla test yapmalısınız.

19:05.730 --> 19:07.140
Bu hiç fena değil.

19:07.140 --> 19:12.150
Bazı durumlarda size kesinlikle yardımcı olabilir, ancak durumun ne kadar daha iyi olduğuna bakalım

19:12.150 --> 19:12.720
olabilir.

19:12.720 --> 19:15.960
Eğer bunu yapmak yerine birim testlerini çalıştırırsam.

19:15.960 --> 19:18.780
İşte bu projenin kodu burada yer alıyor.

19:18.780 --> 19:23.010
Bu projede, incelediğimiz My Math sistemi, My Math sistemi örneğimiz var.

19:23.700 --> 19:29.580
Bunun yapısı ve birlikte çalışma şekli kursun başlarında konuşulmuştur.

19:29.580 --> 19:34.350
Ancak bir editör testimiz ve bir de çalışma zamanı testimiz var, bunlardan bahsedeceğiz.

19:34.350 --> 19:40.980
Yine, herhangi bir editör testi bir düzenleme modu çalıştıracaktır ve bu genellikle

19:40.980 --> 19:44.310
Monobehaviour gibi birliğe özgü sınıfları kullanın.

19:44.310 --> 19:49.440
Monobehaviour yalnızca oyun modunda en iyi şekilde çalışmak üzere tasarlanmıştır.

19:49.440 --> 19:51.390
Yani burada çok uygun değil.

19:51.390 --> 19:51.870
Yani.

19:51.870 --> 19:54.810
Ancak burada yaptığımız gibi basit testler için harika.

19:54.840 --> 19:59.580
Oyun modu testinin yapıldığı çalışma zamanı alanı harika bir yer olacaktır.

19:59.580 --> 20:05.130
Farklılıkları görebilmeniz için bu atölyelerin her birinden birer tane yapıyorum.

20:05.130 --> 20:09.960
Ancak bazı durumlarda, neyi test ettiğinize bağlı olarak, muhtemelen

20:09.960 --> 20:14.010
Bu durumda düzenleme modunda bir birim testi daha uygundur.

20:14.010 --> 20:18.630
Bu kesinlikle daha sonra girdi ile hareket etmek ve bir şeyler yapmaktan bahsettiğimizde geçerlidir.

20:18.630 --> 20:24.750
fizik, belki de orada oyun modu testi gereklidir, çünkü giriş ve fizik gerçekten tasarlanmıştır

20:24.750 --> 20:26.220
oyun modu deneyimleri olarak.

20:26.220 --> 20:28.650
Dolayısıyla bu ayrımı bilmek önemlidir.

20:28.650 --> 20:30.030
Ve bunu burada ve orada gündeme getireceğim.

20:30.270 --> 20:32.760
Şimdi zihin matematik sistemi testine bakalım.

20:36.190 --> 20:39.130
Ve bunun nasıl organize edildiğini görün.

20:40.710 --> 20:45.990
Burada, Matematik sistemim testinde birkaç farklılık olduğuna dikkat edin.

20:51.350 --> 20:53.180
Altında birkaç farklı yöntem var.

20:53.330 --> 20:57.500
Burada gördüğümüz isimlerin her biri test metotlarının isimleridir.

20:57.500 --> 20:59.000
İlkiyle başlayalım.

20:59.600 --> 21:04.970
Kullanmayı sevdiğim kural burada takip ediliyor ve genellikle koyduğum kodda buna gireceğiz

21:04.970 --> 21:10.460
İlk olarak, hangi yöntemi test ediyoruz, ne bekliyoruz ve sonra durum nedir.

21:10.460 --> 21:13.400
Yani burada test ettiğimiz şeyin add yöntemi olduğu yazıyor.

21:13.400 --> 21:18.080
Beş ve onda geçtiğimizde sonucun 15 olmasını bekliyoruz.

21:18.320 --> 21:23.750
Burada güzel bir kısayol, herhangi bir testi çalıştırırken tekrar çalıştırmak için çift tıklayabilmenizdir.

21:24.800 --> 21:26.540
Ve sonra sağ tıklayabilirim.

21:28.490 --> 21:29.360
Üzgünüm, oyun modundaydım.

21:29.810 --> 21:31.850
Çift tıklayın ve tekrar çalışsın.

21:31.880 --> 21:32.330
Harika.

21:32.330 --> 21:33.230
Hala yeşil.

21:33.230 --> 21:36.560
Ve sağ tıklayıp kaynak kodu aç'ı seçebilirim.

21:37.720 --> 21:41.800
Bu, doğru sınıfa ve doğru yönteme ulaşmanın kolay bir yoludur.

21:41.830 --> 21:44.320
İşte yine gördüğümüz yöntem adı.

21:44.350 --> 21:47.860
Yine beş ve on eklendiğinde sonuç 15 olur.

21:47.890 --> 21:54.070
Bunun önemli olmasının nedeni, çok sayıda test yöntemine sahip çok sayıda test sınıfınız olmasıdır,

21:54.070 --> 22:01.600
ve umarım projenizde, bir test çalıştırıcısında hangisinin kodda olduğunu anlamak için yaparsınız

22:01.600 --> 22:04.610
Burada tutarlı bir isimlendirme olması güzel.

22:04.630 --> 22:09.910
Yani burada yaptığımız şey, düzenle, harekete geç ve iddia et metodolojisini uygulamaktır.

22:09.910 --> 22:10.720
Düzenlemede.

22:10.720 --> 22:15.310
İlk yapacağımız şey test etmek istediğimiz şeyin yeni bir örneğini oluşturmak.

22:15.310 --> 22:19.420
Bu şekilde boş durmadığını ve içinde eski veri bulunmadığını biliriz.

22:19.430 --> 22:20.770
Bu her zaman iyi bir uygulamadır.

22:20.770 --> 22:22.480
O zaman buna göre hareket edeceğiz.

22:22.480 --> 22:26.140
Bu, eğer bundan kurtulabilirseniz tek yöntem nedir gibi bir şey?

22:26.140 --> 22:28.690
Belki de testi gerçekten yapan iki yöntem.

22:28.690 --> 22:30.160
Ancak tek bir yöntem idealdir.

22:30.190 --> 22:32.680
Burada 5 ve 10'u topluyoruz.

22:32.680 --> 22:36.670
Ve sonra assert içinde bu assert dilini kullanacağız.

22:36.670 --> 22:43.630
assert sınıfı, bir şeyin bir şey olduğunu iddia ettiğimi söylediğiniz belirli bir yapıya sahiptir.

22:43.630 --> 22:48.670
Ve bunu biçimlendirebileceğiniz çeşitli yolları görmek için bununla ilgili belgelere bakabilirsiniz.

22:48.670 --> 22:54.790
Ancak genellikle is equal to veya is true veya is false kullanıyorum.

22:54.790 --> 22:57.670
Yani bunlar burada oldukça sık göreceğiniz şeyler.

22:57.970 --> 23:02.920
Kod doğru çalıştığı için bunu çalıştırdığımda beş ve on ekleyerek 15 yapıyor.

23:02.950 --> 23:03.700
Bu kadar.

23:03.730 --> 23:05.010
Bunu yapabiliyoruz.

23:05.020 --> 23:08.620
Şimdi üretim kodunda verdiğim örneği hatırlayın.

23:08.620 --> 23:17.650
Ya beş ve onu test etmek ve sonra altı ve 11'i test etmek ve sonra yedi ve 12'yi test etmek ya da her neyse

23:17.650 --> 23:18.700
kombinasyonlar?

23:18.700 --> 23:25.510
Test konusunda ne kadar iyi olursanız, yeterli kapsama alanı sağlamak için gerçekten kaç teste ihtiyacınız olduğunu fark edeceksiniz.

23:25.510 --> 23:31.180
Sağlayabileceğiniz minimum test sayısının ne olduğu konusunda çok fazla sanat ve bilim var.

23:31.180 --> 23:34.720
Etkinizi ve sahip olduğunuz kod kapsamını en üst düzeye çıkarabilir misiniz?

23:34.750 --> 23:40.030
Bu özel atölye çalışmasının bir parçası olarak bahsetmek istediğim şeylerden biri de

23:40.030 --> 23:41.830
parametrelendirilmiş testler.

23:41.830 --> 23:48.460
Yani bunu kopyalayıp aşağıya yapıştırmak ve değerleri değiştirerek altı tanesini toplamak yerine

23:48.460 --> 23:55.780
ve 11 veya 0 ve negatif on, unity'den aynı testi çalıştırmasını isteyebiliriz, ancak bazı farklı

23:55.780 --> 23:56.530
değerler.

23:56.530 --> 23:58.750
Burada pek çok farklı seçeneğiniz var.

23:58.750 --> 24:00.340
Sadece bir tanesini gösteriyorum.

24:00.340 --> 24:02.800
Ama şuraya bir göz atalım.

24:03.730 --> 24:10.090
Diyoruz ve birlikte bu değerler olduğunda sonucun doğru olduğunu varsayıyoruz.

24:10.090 --> 24:15.640
Bu yüzden yöntem adları biraz daha belirsiz çünkü parametrelendirilmiş, mutlaka bilmiyorum.

24:15.640 --> 24:18.430
Bu 5 ve 10'un 15 olduğunu test edecek mi?

24:18.460 --> 24:24.250
Daha önce yaptığım beş ve on yerine buraya dikkat edin.

24:24.280 --> 24:29.890
Bu özel dili kullandığım yöntemin gövdesinde, değer kaynağı adı verilen bir şey kullanıyorum.

24:29.890 --> 24:31.210
Ve sonra içeri aktarıyorum.

24:31.210 --> 24:37.090
Unity'nin yaptığı şey, bu ilk geçiş değerlerini buraya doldurmaktır.

24:37.090 --> 24:38.740
Diyelim ki beş.

24:38.770 --> 24:41.290
Sonra buradan başka bir değer kaynağı alır.

24:41.320 --> 24:48.010
Diyelim ki biri on ve bunların toplamının beş artı on olduğunu varsayıyor.

24:48.010 --> 24:52.960
Yani her çalıştığında, gördüğümüz son testin eşdeğerini yapacak.

24:52.960 --> 24:59.050
Ancak tek bir değer kümesine sabit kodlanmış olmak yerine, bunları karıştıracak ve çeşitli değerler gösterecektir

24:59.050 --> 24:59.560
onlardan.

24:59.560 --> 25:02.460
Şimdi tekrar, bunu biçimlendirebileceğiniz birçok farklı yol var.

25:02.460 --> 25:06.670
Bu yüzden unity'de parametrelendirilmiş testler için belgelere bakmak istersiniz.

25:06.670 --> 25:08.920
Ama burada benim özel durumuma bakalım.

25:08.950 --> 25:11.350
Bu değer kaynakları A ve b değerleridir.

25:11.350 --> 25:14.770
Sadece burada bulunan birkaç diziye atıfta bulunuyorlar.

25:14.770 --> 25:20.980
Ve yapacağı şey sadece adım adım ilerlemek ve bir ve bir, negatif iki ve

25:20.980 --> 25:23.530
negatif iki, negatif üç ve negatif üç ve bunları geçirin.

25:23.560 --> 25:30.070
Bunları istediğiniz şekilde düzenleyebilir ve belki yedi, 11 tane yapabileceğiniz farklı senaryoları test edebilirsiniz.

25:30.070 --> 25:30.670
ve 12.

25:30.700 --> 25:32.230
İstediğiniz her şeyi test edebilirsiniz.

25:32.260 --> 25:35.020
Artık orada sonsuz miktarda test yapmak zorunda değilsiniz.

25:35.020 --> 25:37.450
İşte burada sanat ve bilim bir araya geliyor.

25:37.450 --> 25:43.960
Bazı senaryolarda birkaç negatif değeri sıfır ve birkaç pozitif değeri test etmek isteyebilirsiniz.

25:43.990 --> 25:48.820
Belki yaptığınız şey matematik temelli değildir ve bunu başka bir şekilde düşünmek istiyorsunuzdur, ancak yaptığınız şey

25:48.820 --> 25:51.370
köşe vakaları denilen şeyleri aramak.

25:51.370 --> 25:57.250
Örneğin, bir bölme yöntemi uyguluyorsanız ve bunu matematiksel olarak test etmek istiyorsanız

25:57.250 --> 25:59.740
sıfıra bölme hakkında bir meydan okuma.

25:59.740 --> 26:03.970
Dolayısıyla, sıfır değerini geçtiğinizi görmek ve bunu zarif bir şekilde ele almak istersiniz.

26:03.970 --> 26:09.040
Üretim kodunuzun içinde bulunduğu özel etki alanını gerçekten bilmeniz gerekir.

26:09.040 --> 26:09.730
Test etmek için.

26:09.730 --> 26:14.020
Ama burada her birinden birkaç pozitif ve negatif ve bunun gibi şeyler.

26:15.200 --> 26:17.950
Şimdi bunun unity editöründe nasıl göründüğüne bakalım.

26:17.960 --> 26:19.670
Burada ne yaptığına dikkat edin.

26:19.670 --> 26:24.980
Aslında elimizdeki tüm kombinasyonlara göre 49 test çalıştırıyor.

26:24.980 --> 26:28.850
Böylece size değerlerin ne zaman olduğunu gösterir ve sonra içeri geçer.

26:28.850 --> 26:30.430
Bu gerçekten güzel.

26:30.440 --> 26:37.430
Şimdi bu çıktıya bakarken fark edebilirsiniz ki %100 test etmek benim için önemli olacak.

26:37.430 --> 26:38.800
ve -100.

26:38.810 --> 26:39.320
Harika.

26:39.320 --> 26:45.890
Sonra geri dönüp bu örnek değerleri ekleyin, eğer sadece sabit bir değer yerine başka şeyler yapmak istiyorsanız

26:45.890 --> 26:46.610
kodlanmış liste.

26:46.610 --> 26:50.510
Rastgele bir değer seçmek istiyorsanız, orada sahip olduğunuz birçok başka seçenek vardır.

26:50.510 --> 26:53.180
Yine, parametrelendirilmiş testler hakkında biraz araştırma yapın.

26:53.360 --> 26:57.860
İsterseniz oyun modu testini de inceleyebilirsiniz, ancak bu daha ilginç olacağından

26:57.860 --> 27:02.000
diğer örneklerle devam edip bu çalıştayı sonlandıracağız.

27:02.000 --> 27:02.840
Teşekkürler.

27:09.660 --> 27:13.260
Merhaba ve bu Unity Birim testi atölyesine hoş geldiniz.

27:13.260 --> 27:16.830
Örnek olarak benim veri yükleyicim Basic'e bakacağız.

27:16.830 --> 27:17.420
Hadi başlayalım.

27:17.430 --> 27:20.280
İşte bu demoda unity'yi açacağım.

27:20.280 --> 27:25.650
Çekirdek örnek projemizi açın ve temel veri yükleyicimin sahnesine bir göz atın.

27:25.650 --> 27:31.500
Şimdi, bir çeşit veri yüklemesi yapmayı seçmemin nedeni, sadece ne hakkında konuşmaktır

27:31.500 --> 27:39.900
çok güvenilir ve yalıtılmış olmasını umduğumuz birim testlerimiz hızlı bir şekilde çalışırsa

27:39.900 --> 27:42.000
kendi test metodolojileri?

27:42.000 --> 27:47.760
Ya diğer sistemlere bağlıysa, örneğin sadece bir parçayı test edebileceğimizi nasıl bilebiliriz?

27:47.790 --> 27:55.740
Genel olarak birim testi, bir sınıfın bir yöntemi olarak düşünebileceğiniz tek bir birimin test edilmesidir.

27:55.740 --> 28:01.740
Ancak çoğu zaman kodumuz birbirine bağlı birden fazla sınıftan oluşur ve bu da karar vermeyi zorlaştırabilir

28:01.740 --> 28:05.100
onları nasıl ayıracağımızı ve izole olarak nasıl test edeceğimizi.

28:05.100 --> 28:11.280
Ayrıca, grafik oluşturma, işleme gibi eşzamansız bir şeye bağlı olan bir sisteminiz olabilir.

28:11.280 --> 28:14.760
ses veya bu durumda bir arka uç sunucusunu çağırmak.

28:14.760 --> 28:22.380
Bu yüzden burada bir URL'ye aktardığınız verileri yükleyen çok basit bir örnek oluşturdum, sadece bir web sayfasını çağırıyor

28:22.380 --> 28:24.630
ve bu web sayfasının metnini geri alır.

28:24.660 --> 28:31.410
Bu en basit örnektir, ancak bunun herhangi bir sunucu mantığı olduğunu düşünebilirsiniz.

28:31.410 --> 28:36.540
oyununuzdan yüksek bir skor, oyuncu verilerini yüklemek için çağrı, çok oyunculu ile ilgili bir şey.

28:36.540 --> 28:41.250
Belki de bunların hepsi bazı eşzamansız ağ trafiğine bağlı olabilir.

28:41.340 --> 28:42.330
Bir göz atalım.

28:42.420 --> 28:44.250
İşte örneklemdeyiz.

28:44.250 --> 28:46.290
Temel veri yükleyicim var.

28:46.290 --> 28:46.890
Yükle.

28:46.890 --> 28:47.940
Oynat tuşuna basalım.

28:50.730 --> 28:51.990
Bu özel demoda.

28:52.020 --> 28:56.550
Bu özel demoda çok ilginç şeyler yok.

28:56.580 --> 28:58.950
Oynanışta çok ilginç bir şey olmuyor.

28:59.220 --> 29:02.940
Burada konsola gideceğiz ve bu sahnenin kullanıcı arayüzü olmadığını göreceğiz.

29:02.970 --> 29:09.300
Unity konsoluna bakın ve sonra sadece sunucudan döndürülenlerin uzunluğunu gösteriyor.

29:09.300 --> 29:13.200
Sıfır olmayan herhangi bir şey hey, bir sayfa yüklendi anlamına gelir.

29:13.200 --> 29:14.670
Çok hafif.

29:14.670 --> 29:15.690
Basit bir test.

29:15.690 --> 29:19.190
Hata denetimi ya da bu tür şeylere yerleşik olarak sahip değilim.

29:19.200 --> 29:23.640
Sadece bu demonun basitliği adına başarılı olduğunu varsayar.

29:23.670 --> 29:27.780
Üretim kodu yapıyorsanız ve sunucuları çağırıyorsanız, çok daha fazla işlevsellik eklemek istersiniz

29:27.780 --> 29:28.410
ona.

29:28.410 --> 29:32.770
Bu, oldukça basit ve o kadar da ilginç olmayan çalışma zamanı deneyimidir.

29:32.790 --> 29:38.550
Şimdi buradaki test çalıştırıcısına bakarsak, kategorimizi veri yükleyicim temel olacak şekilde ayarlayabiliriz.

29:38.550 --> 29:42.360
Yani bize sadece bu belirli kodla ilgili testleri gösterir.

29:42.360 --> 29:44.160
Ve sonra düzenleme moduna geçiyoruz.

29:44.160 --> 29:48.210
Burada yine oyun modumuz var ama bunu kendi başınıza keşfedebilirsiniz.

29:48.210 --> 29:52.230
Bu özel demo için düzenleme modunun daha ilginç olduğunu düşünüyorum.

29:52.230 --> 29:54.660
Bu yüzden hepsini çalıştıracağım.

29:56.330 --> 29:58.350
Ve başarılı olduğumuzu görebiliyoruz.

29:58.370 --> 30:04.520
Bu, load async sonucunun yüklendiğinde doctype içerdiğini söylüyor.

30:04.520 --> 30:06.500
Şimdi buna biraz göz atalım.

30:06.630 --> 30:08.780
Buraya gideceğiz ve kaynağımızı açacağız.

30:10.200 --> 30:11.820
Ve işte test.

30:11.940 --> 30:17.640
İlk olarak My Data Loader temelimizin bir örneğini oluşturduğumuzu gösteriyor.

30:17.940 --> 30:21.660
Sonra yüklendiğinde dinleriz.

30:22.610 --> 30:25.880
Sunucudan geri yüklenen verileri kontrol edeceğiz.

30:25.890 --> 30:30.800
Yine, bu sadece bir web sayfasını çağırıyor ve web sayfasının kaynak kodu ne olursa olsun, onu bir

30:30.800 --> 30:32.030
Büyük bir metin bloğu.

30:32.030 --> 30:34.370
Bu yüzden bazı HTML şeylerine benzeyecek.

30:34.370 --> 30:39.920
Ve bunu oluştururken baktığımda, bir parçası olarak doctype yazdığını fark ettim.

30:39.920 --> 30:45.530
Yani Doctype çok önemli bir şey değil, kesinlikle unity dünyasında değil, ama sadece düşündüm

30:45.530 --> 30:49.640
Bir web sayfasından bir şey geri alıp almadığımı söyleyen küçük bir testti.

30:49.640 --> 30:53.030
Sizin için anlamlı olan başka herhangi bir alt dizeyi test etmeyi düşünebilirsiniz.

30:53.120 --> 31:00.020
Son olarak, burada test ettiğimiz eylemi yapıyorum ve eşzamansız çağrıyı buraya yüklüyorum

31:00.020 --> 31:01.340
ve URL'yi iletin.

31:01.370 --> 31:05.690
Şimdi URL'nin GitHub sayfasının URL'si olduğuna dikkat edin.

31:05.690 --> 31:07.280
Ama bu o kadar da önemli değil.

31:07.430 --> 31:08.600
Orada benzersiz bir şey yok.

31:08.600 --> 31:15.620
Eğer google.com gibi bir test yapmak isterseniz, sadece gidip google.com'u arayacak ve kaynağı alacaktır

31:15.620 --> 31:16.820
kodu geri alıyoruz.

31:16.820 --> 31:22.220
Burada üretim kodunda ne yaptığıma gerçekten odaklanmak istemiyorum, çünkü kuşkusuz bu bir

31:22.220 --> 31:23.330
Basit bir örnek.

31:23.330 --> 31:28.640
Ben sadece unity içinde asenkron bir şeyler yapmanın bir yolu olmasını istedim.

31:29.800 --> 31:32.500
Anlayabilmemiz için kaynak koduna bakalım.

31:33.520 --> 31:33.970
İşte.

31:33.970 --> 31:34.540
Ne yapıyoruz?

31:34.540 --> 31:38.740
Yükle dediğimde, URL'nin boş olmadığından emin olun diyorum.

31:39.130 --> 31:44.320
Sonra devam ediyorum ve Unity'nin yerleşik işlevi olan web isteğini kullanıyorum.

31:44.320 --> 31:51.520
Bunun üzerine istek gönder çağrısı yapıyorum ve ardından sonucu indirme işleyicisinin metni olarak ayarlıyorum.

31:51.550 --> 31:53.830
Bu sadece süper ucuz ve kolay bir yol.

31:53.830 --> 31:57.010
Basit verileri çevrimiçi aramak için unity tarafından önerilir.

31:57.040 --> 31:58.570
Çok basit ve anlaşılır.

31:58.600 --> 32:02.860
Şimdi bu, burada gerçekte neyi test ettiğimiz sorusunu gündeme getiriyor?

32:03.280 --> 32:09.580
Veri yükleyicim adında özel bir sınıfım var, ancak içinde büyük ölçüde mevcut bazı unity

32:09.610 --> 32:12.160
unity web isteğinin işlevselliği.

32:12.190 --> 32:16.060
Sonra bir web sayfasını, bu durumda GitHub'ı çağırıyorum.

32:16.060 --> 32:17.650
Ve bu da işin içinde.

32:17.650 --> 32:22.810
GitHub bir şekilde gün boyunca kapalı olsaydı, bu test başarısız olurdu.

32:22.840 --> 32:24.100
Bu uygun mu?

32:24.100 --> 32:31.000
Birim testim gerçekten kendi metodolojimi, kendi işlevselliğimi test etmekle ilgiliyse, aşağıdakileri dikkate almamalıyım

32:31.000 --> 32:32.050
başarısız bir test.

32:32.050 --> 32:34.840
İlgisiz bir bağımlılık başarısız olursa.

32:34.840 --> 32:36.610
Ama burada durum böyle.

32:36.610 --> 32:38.640
GitHub kapalı olsaydı başarısız olurdum.

32:38.650 --> 32:44.440
Ayrıca, burada unity tarafından yerleşik işlevsellik olan Unity web isteğini kullanıyorum.

32:44.470 --> 32:50.920
Her durumda %100 çalışmasını umuyoruz, ancak kodumun çalışması ve

32:50.920 --> 32:52.210
kodu çalışmıyor.

32:52.210 --> 32:54.520
Yani burada gri bir alan var.

32:54.520 --> 32:59.680
Sınıflarınızı tasarlamayı ve ardından bu sınıflar üzerindeki testleri tasarlamayı düşündüğünüzde, nasıl

32:59.680 --> 33:01.990
Aslında neye odaklanmanız gerektiğini biliyor musunuz?

33:01.990 --> 33:04.390
Test, genel olarak konuşursak.

33:04.390 --> 33:09.550
Ve birim testi sanatına nasıl yaklaşılacağı konusunda yazılmış kitaplar ve kitaplar var.

33:09.550 --> 33:15.370
Ancak genel olarak konuşmak gerekirse, bağımlılıklarınızı azaltmak ve sayıyı basitleştirmek istersiniz

33:15.370 --> 33:17.530
test ettiğiniz kod satırlarının sayısı.

33:17.530 --> 33:24.490
Yani daha az kod daha iyidir çünkü daha basit ve odaklıdır ve tam olarak hangi kodun izole olduğunu bilirsiniz.

33:24.490 --> 33:26.020
test ettiğiniz kod.

33:26.020 --> 33:28.000
Yani bu mükemmel bir örnek.

33:28.000 --> 33:32.950
Ancak bizim için bu, başlamak ve eşzamansız kod çalıştırma hakkında konuşmak için harika bir yol.

33:32.950 --> 33:35.020
Bu yüzden şimdilik bu örneği sonlandırıyoruz.

33:42.300 --> 33:44.460
Merhaba ve Unity için Birim Testine hoş geldiniz.

33:44.490 --> 33:48.120
Burada gelişmiş sürümdeki veri yükleyicime bakacağız.

33:48.120 --> 33:54.270
Bu demoyu çalışırken görmek için unity Download'u açacağız ve Source örnek projesini kullanacağız.

33:54.270 --> 33:55.020
Bu parkur.

33:55.020 --> 33:57.120
Ve burada önemli bir sahneye göz atacağız.

33:57.120 --> 33:59.310
Bu, My Data yükleyicisinin gelişmiş halidir.

33:59.310 --> 34:05.310
Burada bahsedeceğim kavramlardan bazıları, gördüğümüz gibi bağımlılık enjeksiyonunu ve son ikameyi içerir.

34:05.310 --> 34:11.250
İşte unity'nin içindeyiz Verilerim yükleyicisi için sahneyi hazırladım ve burada gitmeye hazırım.

34:11.250 --> 34:16.170
Bu yüzden devam edeceğiz ve atölyedeki bu sahnelerin çoğu için bu sahneyi çalıştıracağız.

34:16.170 --> 34:20.940
Üretim sahnesini yönetmek ilginç bir şey değil, ancak sizi her zaman bunu yapmaya teşvik ediyorum

34:20.940 --> 34:21.990
bir başlangıç noktası olarak.

34:21.990 --> 34:28.410
Burada, yüklenen verinin uzunluğunun şu olduğunu söyleyen basit konsol günlüğünü görüyoruz.

34:28.440 --> 34:32.220
Bu değer çok önemli değildir, ancak bir göz atmak isterseniz bu örnek sınıfı inceleyebilirsiniz

34:32.220 --> 34:32.550
İşte.

34:32.550 --> 34:34.290
Bunun için testi çalıştıralım.

34:36.660 --> 34:40.200
Burada kategorimi gelişmiş veri yükleyicime ayarladım.

34:40.200 --> 34:44.430
Yani sadece bununla ilgili testleri ve sadece düzenleme modunda görüyoruz.

34:44.460 --> 34:47.430
Ayrıca kendi zamanınızda göz atabileceğiniz bir oyun modu testi de var.

34:47.430 --> 34:49.710
Ancak burada düzenleme modunun daha ilginç olduğunu düşünüyorum.

34:49.710 --> 34:51.600
Bu yüzden hepsini koşacağım.

34:57.250 --> 35:01.540
Ve burada iki testimiz olduğunu görüyoruz ve ikisi de yeşil onay ile geçiyor, bu harika.

35:01.570 --> 35:06.590
Hem load async hem de mock load async'e bakalım ve nasıl çalıştıklarına bir göz atalım.

35:06.610 --> 35:08.350
İşte örnek kodun içindeyiz.

35:08.350 --> 35:11.260
Eğer son videodan itibaren takip ettiyseniz ki umarım etmişsinizdir.

35:11.290 --> 35:18.760
Burada incelediğimiz, bir web sunucusuna gerçek bir çağrı kullanan yöntemin üzerinden geçtik, yükler

35:18.760 --> 35:21.000
veriyi geri alır ve değerini kontrol eder.

35:21.010 --> 35:24.460
Bu, üretim kullanım durumunun ne olacağına yakından benziyor mu?

35:24.460 --> 35:26.950
Ancak buradaki bazı sorunlardan bahsetmiştik.

35:26.980 --> 35:31.150
Kodumu mu test ediyorum yoksa altındaki Unity Web Hizmetini mi test ediyorum?

35:31.180 --> 35:35.260
Bunu mu test ediyorum yoksa github.com'un arka ucunu mu test ediyorum?

35:35.260 --> 35:42.130
Ve eğer kararlı bir sunucuysa, testlerinizi kendi özel kodunuza odaklamak ve en az

35:42.130 --> 35:43.900
ve mümkün olduğunca az bağımlılık.

35:43.900 --> 35:46.060
Yani bununla ilgili bazı sorunlar var.

35:46.090 --> 35:51.990
Bu konuda yaptığım ilk şey bağımlılık enjeksiyonu hakkında düşünmek oldu.

35:52.000 --> 35:58.630
Diyelim ki üretimde şunu çağırdığım ve bunun uygulandığı bir yol olmasını istiyorum

35:58.630 --> 36:00.480
Unity web hizmetini kullanıyor.

36:00.490 --> 36:04.780
Sonra test için, belki de buna yaklaşmak istediğim ikinci bir yol olmasını istiyorum.

36:04.810 --> 36:11.890
Şimdi, kod tabanınızda hata ayıklama eşittir doğru mu yoksa üretim mi gibi bir şey söyleyen bir bayrağınız olabilir

36:11.890 --> 36:12.790
eşittir yanlış mı?

36:12.790 --> 36:17.360
Ve üretim kodunuzda bazı şeyleri test modunda yapın, bazı şeyleri yapmayın.

36:17.380 --> 36:21.930
Kod tabanlarında bunun çok olduğunu görüyorum, ancak bu genellikle iyi bir uygulama değildir.

36:21.940 --> 36:27.880
Üretim kodunuzu gerçekten sadece testler için olan şeylerle kirletiyorsunuz, bu yüzden uygun değil.

36:27.910 --> 36:29.320
Bu daha iyi bir çözüm.

36:29.320 --> 36:30.700
Ne yaptığımıza bir göz atalım.

36:31.270 --> 36:37.450
Önceki temel örnekte, bir ağ hizmeti kavramına sahip değildim ve

36:37.450 --> 36:38.220
Burada.

36:38.230 --> 36:41.560
Biz sadece yarattık ve her zaman tek yönlü çalıştı.

36:41.560 --> 36:45.760
Ama buradaki bağımlılık enjeksiyonuna ben karar veriyorum.

36:45.760 --> 36:49.170
İşte bunun işe yarayabileceği bazı özel yollar.

36:49.180 --> 36:53.380
İşte birkaç farklı şekilde değiştirebileceğim bazı mantık.

36:53.380 --> 36:56.020
Burada bir satırda bildiriyorum ve sonra içeri aktarıyorum.

36:56.020 --> 36:59.560
Böylece birkaç farklı ağ hizmetine sahip olduğunuzu hayal edebilirsiniz.

36:59.560 --> 37:04.120
Bir tanesi sadece test için, bir tanesi sadece üretim için, bir tanesi de sadece

37:04.120 --> 37:08.680
belirli bir arka uç sunucusu için uygun olan bir yerel disk.

37:08.680 --> 37:09.460
Vesaire.

37:09.490 --> 37:12.160
Bunun üretimde de kullanım alanları vardır.

37:12.160 --> 37:14.060
Bu bağımlılık enjeksiyonu fikri.

37:14.080 --> 37:16.360
Şimdi buna neden bağımlılık enjeksiyonu diyoruz.

37:16.360 --> 37:26.080
Bunun nedeni, gelişmiş veri yükleyicimin her zaman tek bir şey yapması yerine, aşağıdakilere karar veren bazı bilgileri iletmemdir

37:26.080 --> 37:27.610
nasıl çalışacağını.

37:27.610 --> 37:34.090
Yani burada her şeyi bilen sınıfın kendisi yerine, bu durumda bir bağımlılığı

37:34.090 --> 37:36.250
Unity Web İstek Ağı hizmeti.

37:36.250 --> 37:42.610
Şimdi bu yapının nasıl oluşturulduğuna bir göz atalım ve daha sonra bunun bizim için neden yararlı olduğunu görelim.

37:42.610 --> 37:43.300
Test.

37:43.390 --> 37:47.140
İşte My Data loader advanced için tam kaynak kodu.

37:47.170 --> 37:49.420
Şimdi burada odaklanmak istediğim iki şey var.

37:49.420 --> 37:53.530
Birincisi, yapıcıda bu bağımlılığı aktarıyorum.

37:53.560 --> 38:01.060
Şimdi bağımlılık enjeksiyonu ve bu bağımlılık enjeksiyonu kavramından esnek sınıfların nasıl oluşturulacağı

38:01.060 --> 38:03.700
gerçekten bu sınıfın kapsamı dışındadır.

38:03.730 --> 38:06.220
Gidip bakmanız için gerçekten iyi bir şey.

38:06.220 --> 38:12.730
Google'da unity için D I veya unity için bağımlılık enjeksiyonu gibi bir şey veya hatta bağımlılık

38:12.730 --> 38:17.410
Nesne yönelimli programlamada enjeksiyon ve bu genel kavramlardan biraz daha fazlasını görün.

38:17.410 --> 38:23.160
Ancak, biraz aşina olduğunuzu varsayarak, özellikle de az önce yaptığım açıklama göz önüne alındığında, orada verdim,

38:23.170 --> 38:24.460
Devam edelim.

38:24.490 --> 38:31.810
Şimdi bunu bir bağımlılık olarak buraya aktarıyorum ve depoluyorum, o zaman çekirdek işlevselliğimizi her çağırdığımda

38:31.840 --> 38:38.560
Asenkron yüklemeye hazır olduğumda, ağ hizmetime şunu söylerim

38:38.560 --> 38:39.730
async yüklemek için.

38:39.730 --> 38:47.020
Şimdi, bir arka uç sunucusu için asenkron yükleme yapan bir ağ hizmeti geçtiğimi hayal edebilirsiniz

38:47.020 --> 38:48.820
belirli bir teknolojinin.

38:48.850 --> 38:50.410
Bu satır bunu yapacaktır.

38:50.650 --> 38:56.920
Eğer diske yazma veya diskten okuma işlemini farklı bir tür olarak yapan başka bir şey girersem

38:56.920 --> 38:59.980
ağ hizmetinde, burada gerçekten değişecek olan satır budur.

38:59.980 --> 39:06.130
Böylece veri yükleyicimin 2 ya da 3 farklı sürümünün burada gelişmiş olması gerekmiyor.

39:06.130 --> 39:11.130
Bunun yerine, söz konusu ayrıntıyı benzersiz bir şekilde ele alan özel bir uygulama aktarıyorum.

39:11.140 --> 39:15.130
Kodunuzun daha esnek olmasını sağlamak için çok güçlü bir yoldur.

39:15.130 --> 39:23.410
Şimdi, bir bağımlılığı aktarmaktan ve işlevselliği nasıl sarabildiğinden bahsettiğimize göre

39:23.410 --> 39:26.650
Burada, bu özel durum için kaynağın ne olduğuna bakalım.

39:26.650 --> 39:31.240
Burada aynı sınıf dosyasında konuşmam gereken birkaç şey var.

39:31.240 --> 39:33.580
Birincisi, bir arayüz oluşturdum.

39:33.700 --> 39:41.230
I ağ hizmetinin buradaki arayüzü tamam diyor, uygulanabilir olarak kabul edilmek isteyen herkes

39:41.230 --> 39:47.020
Burada aktarılacak bağımlılığın bazı yöntem ya da yöntemlere sahip olması gerekir.

39:47.020 --> 39:51.970
Ve bu durumda, sadece yüklemenin asenkron olması ve bir dize URL'si alması gerekir.

39:51.970 --> 39:52.720
İşte bu kadar.

39:52.750 --> 39:56.620
Eğer arayüzlere çok aşina değilseniz.

39:56.940 --> 39:58.560
Lütfen arayüzleri kontrol edin.

39:58.560 --> 40:04.290
C-sharp'ta veya unity'de sınıflara karşı arayüzler gibi bir şeye bakabilirsiniz ve çok şey göreceksiniz

40:04.290 --> 40:05.130
örneklerin.

40:05.130 --> 40:11.970
Ancak buradaki önemli bir ayrım, arayüzün genel API'nin ne olduğunu tanımlaması, ancak

40:11.970 --> 40:13.980
uygulama hakkında endişelenmek.

40:14.100 --> 40:17.530
Uygulama burada genel bir sınıfta beyan edilir.

40:17.560 --> 40:19.710
Şimdi muhtemelen daha aşina olduğunuz sınıflar.

40:20.010 --> 40:24.570
Ve burada yaptığımız şey, bunun belirli bir çeşidini uygulamaktır.

40:24.600 --> 40:30.360
Bu özel tattaki ağ hizmeti size önceki videodan çok tanıdık gelecektir.

40:30.390 --> 40:32.760
Bu tam olarak aynı uygulamadır.

40:33.030 --> 40:40.130
Sadece unity web isteğini kullanıyoruz ve ardından web isteği gönderme metodolojisini uyguluyoruz.

40:40.140 --> 40:45.510
Şimdi buraya geri gelen kaynak koduna baktığımıza göre, tamam, sadece

40:45.510 --> 40:48.270
işlevselliğin bir kısmını yerine getiren özel bir sınıf.

40:48.270 --> 40:50.520
Ve bu özel sınıfı oraya aktarıyoruz.

40:50.520 --> 40:55.010
Ancak artık çok daha esnek olan gelişmiş bir veri yükleyici sınıfımız var.

40:55.020 --> 40:59.720
Şimdi, özellikle test dünyasında bağımlılık enjeksiyonu neden önemlidir?

40:59.730 --> 41:05.370
Birim testlerimiz için unity içinde kullanabileceğimiz harika bir yardımcı programımız var.

41:05.370 --> 41:10.800
Bu N substitute adında bir kütüphanedir ve örnek projeye dahil edilmiştir.

41:10.800 --> 41:13.980
Diğerinin hemen altındaki başka bir test yöntemine göz atalım.

41:13.980 --> 41:17.880
Ve bu, bir sınıfın mock'u olarak adlandırılan şeyi kullanacak.

41:17.880 --> 41:23.280
Burada gelişmiş My Data yükleyicisinin çok benzer bir yaratımına sahibiz.

41:23.280 --> 41:29.070
Ve unity web istek sürümünü iletmek yerine, oldukça görünen bir şey yapacağız

41:29.100 --> 41:29.880
Burada bir gariplik var.

41:29.880 --> 41:32.940
Yedek kütüphane kullanacağız.

41:32.940 --> 41:40.260
Ve burada yapacağımız şey, bu iki satırda anında hey diyeceğiz, git oluştur

41:40.260 --> 41:45.000
İhtiyacım olan işlevselliği yerine getirebilecek bir sınıf.

41:45.000 --> 41:51.990
Ancak bu bir sahte sınıf olduğu için, sunucuyu aramak zorunda değildir.

41:51.990 --> 41:57.450
Bunun yerine yapacağı şey, önemli anlarda bize öngörülebilir bir değer döndürmektir.

41:57.450 --> 42:06.660
Şimdi hatırlayın, buradaki akışımız testin veri yükleyiciye verilerin içindeki bir URL'yi yüklemesini söylemesidir

42:06.660 --> 42:10.740
loader, ağ hizmetine gidip bir URL yüklemesini söyler.

42:10.770 --> 42:17.430
Bu son adım, sonuç olarak yarım saniye sürer, gider ve sunucudan yükler ve geri döner

42:17.460 --> 42:18.870
bir dizi geri.

42:18.870 --> 42:23.760
Yani sahte bir durumda ihtiyacım olan tek şey tamam, bir sunucu bile çağırma.

42:23.760 --> 42:27.330
Tam bunu aradığımda bana bir ip geri veriyorsun.

42:27.330 --> 42:36.750
Yani burada bu dille şunu söylüyorum: load async'i her çağırdığımda ve herhangi bir dizeyi ilettiğimde

42:36.750 --> 42:41.460
URL için, ardından taklit edilen veri kelimesini döndürün.

42:41.760 --> 42:48.060
Sonra burada, kontrol etmek yerine istediğim beklenen sonucu aldığımdan emin olabilirim

42:48.060 --> 42:52.020
daha önce yaptığım gibi dönüşte doctype'a sahip olduğunu.

42:52.020 --> 42:55.740
Sahte verileri buradan kontrol edebilirim.

42:55.740 --> 43:04.380
Burada gördüğümüz şey çok basit bir örnek ve kullanışlı görünmeyebilir, ancak bir

43:04.380 --> 43:11.580
sadece veri yüklemediğimiz, yüklediğimiz, okuduğumuz, yazdığımız, dönüştürdüğümüz daha karmaşık bir örnek

43:11.580 --> 43:14.850
Verileri, biraz, belki 5 veya 6 farklı yöntem kullanarak.

43:14.850 --> 43:21.150
Bunların hepsi çok farklı sistemlere işaret ediyor olabilir, ancak gerçekten test etmek istediğimizde sadece

43:21.150 --> 43:30.330
veri yükleyicisi, daha sonra bu diğer sistemler için taklit edilmiş yetenekleri geçici olarak iletmek istiyoruz

43:30.330 --> 43:34.230
Böylece elimizdekilere odaklanabiliriz.

43:34.260 --> 43:36.450
Şimdi ne olacağına bir göz atalım.

43:36.450 --> 43:38.940
Bu yüzden yüklemeyi async olarak çağırıyorum.

43:38.940 --> 43:46.050
Olacak olan şey, içerideki bu sistemin öngörülen değeri döndürmesidir.

43:46.050 --> 43:50.220
Ve veri yükleyici daha sonra yüklendi diyecektir.

43:50.220 --> 43:56.160
Ve sonuç değerinin olmasını beklediğimiz değer olmasını sağlayacaktır.

43:56.160 --> 44:00.330
Şimdi bunu unity editörünün içinde çalıştıralım.

44:00.330 --> 44:01.800
Bu yüzden hepsini çalıştıracağız.

44:04.100 --> 44:05.480
Ve oldukça hızlı çalışıyor.

44:05.480 --> 44:11.270
Aslında bir sunucuyu çağıran load async'i çalıştırırsam bile karşılaştıralım.

44:15.200 --> 44:16.220
Hızlıydı.

44:16.250 --> 44:20.690
Sonra herhangi bir sunucuyu çağırmayan mock load async'i çağırırsam.

44:24.630 --> 44:29.840
Videodan anlaşılmayabilir, ancak MOC'yi aramak çok daha hızlıdır.

44:29.850 --> 44:35.150
Bu da mantıklı çünkü aslında bir sunucuyu arayıp sonuç beklemiyoruz.

44:35.160 --> 44:38.640
Yani bu sadece bize birkaç saniye kazandırmak için değil.

44:38.670 --> 44:42.270
Testlerimizi tasarlarken odaklanmamız gereken yine bu.

44:42.300 --> 44:44.790
Aslında neyi test etmek istiyoruz?

44:44.790 --> 44:46.920
Ve sonra onu izole etmek istiyoruz.

44:46.920 --> 44:51.160
Yani aslında bir Unity Web Hizmetleri sınıfını test etmiyoruz.

44:51.180 --> 44:53.610
GitHub arka ucunu test etmiyoruz.

44:53.700 --> 44:57.470
Birkaç sistemin birlikte test edilmesine entegrasyon testi denir.

44:57.480 --> 44:59.550
Bu uygun bir test türüdür.

44:59.550 --> 45:03.660
Ancak bu, burada bahsettiğimiz birim testinin dışında kalıyor.

45:03.660 --> 45:08.430
Yine, mümkün olduğunca az bağımlılığa, az kod satırına inmek.

45:08.430 --> 45:09.450
Bunu düşünebilirsin.

45:09.450 --> 45:17.880
İşte bu kadar, yedek kütüphaneyi nasıl kullanacağımızı ve ayrıca bir mock'u nasıl yapabileceğimizi inceledik.

45:17.880 --> 45:19.710
arka uç sunucusuna bir çağrı.

45:19.710 --> 45:20.550
Teşekkürler.

45:26.450 --> 45:29.420
Merhaba ve unity için birim testlerine hoş geldiniz.

45:29.450 --> 45:30.710
Burada atölyedeyiz.

45:30.710 --> 45:34.850
Ve bu sefer karaktere temel bir biçimde göz atacağız.

45:34.850 --> 45:37.070
Bakacağımız birkaç farklı şey olacak.

45:37.100 --> 45:39.800
Temel bilgilerle başlayıp daha ileri bir seviyeye geçeceğiz.

45:39.800 --> 45:41.480
Şimdi bu demonun nasıl çalıştığına bir göz atalım.

45:41.480 --> 45:42.920
Unity editörünün içinde.

45:42.920 --> 45:45.830
Unity'yi açacağız, örnek projemizi açacağız.

45:45.830 --> 45:49.760
Sonra da konuyla ilgili bir ya da daha fazla sahne oynayacağız.

45:49.760 --> 45:55.670
Sahne temel karakter olacak ve ben Monobehaviour hakkında bir şey olarak konuşacağım

45:55.670 --> 46:01.160
test edilip edilemeyeceği ve oynatma moduna karşı düzenleme modu, daha önce de bahsettiğim bir şey

46:01.160 --> 46:02.450
Parkurun başlarında.

46:02.450 --> 46:04.010
Buraya geri getireceğiz ve bunun hakkında konuşacağız.

46:04.010 --> 46:06.380
İşte projede temel karaktere bakıyoruz.

46:06.380 --> 46:07.760
Devam edelim ve sahneyi çalıştıralım.

46:13.120 --> 46:20.020
Yaptığımız atölye çalışmalarının çoğunda, kesinlikle hiçbir şeyin olmadığı oldukça sıkıcı bir sahne vardı.

46:20.050 --> 46:22.830
biraz daha fazlası var.

46:22.840 --> 46:28.470
Burada oynat tuşuna bastığımızda, ekranın ortasında beyaz bir küpün oluştuğunu görüyoruz.

46:28.480 --> 46:31.030
Ok tuşlarımı kullanabilir ve hareket edebilirim.

46:31.030 --> 46:37.930
Kuşkusuz burada çok basit bir örnek verilmiş olsa da, bu daha karmaşık bazı durumlardan bahsetmek içindir

46:37.930 --> 46:40.600
unity içinde test etmenin yönleri.

46:40.630 --> 46:45.730
Önceki sahnelerde, grafik oluşturma veya girdi alma konusunda endişelenmiyorduk.

46:45.970 --> 46:52.840
Son çalıştayda birkaç farklı bağımlılığı test etmek arasındaki farktan bahsetmiştik

46:52.840 --> 46:53.590
Birlikte.

46:53.590 --> 46:58.780
Örneğin, içinde ikinci bir yöntemi çağıran bir yöntem, içinde üçüncü bir yöntemi çağırır.

46:58.810 --> 47:00.490
Bunlar bağımlılıklar.

47:00.520 --> 47:06.790
Burada benzer bir konudan bahsediyoruz, ancak karakterimi her hareket ettirmek istediğimde önce

47:06.790 --> 47:13.750
Unity'nin giriş sistemini dinlemesini isteyin, ardından Unity'nin Monobehaviour dönüşüm hareketini kullanın.

47:13.750 --> 47:14.190
Doğru.

47:14.200 --> 47:18.820
Yani burada birkaç farklı bağımlılık ya da farklı sınıflar kullanıyoruz.

47:21.360 --> 47:24.630
Burada hareket etmek için ok tuşlarını kullanabiliyorum.

47:25.750 --> 47:27.190
Ve hepsi bu kadar.

47:29.010 --> 47:32.100
Ama fikir şu ki, eskisinden biraz daha fazlasını yapıyoruz.

47:32.190 --> 47:34.650
Bunu test etmenin sonuçları hakkında konuşalım.

47:34.650 --> 47:41.190
Test çalıştırıcısında kategoriyi temel karakterimize ayarladım, ki bu harika.

47:41.220 --> 47:46.800
Ardından oynatma modu testlerinin yanı sıra düzenleme modu testlerini de görmek için geçiş yapabiliyorum.

47:46.830 --> 47:53.100
Her ikisinden de bazılarına sahip olduğumuzu görebiliriz, ancak tek bir davranış söz konusu olduğu için

47:53.100 --> 47:54.600
oyun moduna daha fazla odaklanın.

47:54.630 --> 48:01.230
Şimdi, atölye çalışmalarının her birine en az bir düzenleme modu testi ve en az bir oyun modu testi ekledim

48:01.260 --> 48:03.420
elimizdeki sahne için test.

48:03.450 --> 48:09.030
Bunu burada tekrar yaptım, ancak gerçekte neyi test ettiğinize bağlı olarak, şunu düşünmek istersiniz

48:09.030 --> 48:13.470
düzenleme modu için mi daha uygun yoksa oyun modu için mi daha uygun?

48:13.500 --> 48:18.510
Buna nasıl yaklaşacağınız ve kodunuzu nasıl daha iyi tasarlayacağınız konusunda bir sanat ve bilim var.

48:18.510 --> 48:19.170
Test edilebilir.

48:19.200 --> 48:26.010
Ancak bu konuyla ilgili genel bir bakış açısı, Monobehaviour işlevselliğini kullanıyorsanız,

48:26.010 --> 48:32.460
Bu daha çok bir oyun modu testine benziyor, daha fazla unity kütüphanesi, özellikle çalışma zamanında

48:32.460 --> 48:36.840
üretiminizde kullanıyorsanız, bunların oyun modu testleri olduğunu düşünmek istersiniz.

48:36.870 --> 48:40.410
Bu kesin bir kural değildir, ancak düşünmeye başlamak için iyi bir yoldur.

48:40.650 --> 48:42.490
Testlerimizi burada çalıştıralım.

48:42.510 --> 48:45.300
Oyun modum var ve hepsini çalıştıracağım.

48:48.880 --> 48:49.210
Tamam.

48:49.240 --> 48:52.060
Orayı çalıştırmak birkaç saniye sürdü ama hepsini aldık.

48:52.090 --> 48:58.060
Bir oyun modu testi çalıştırdığınızda aslında olan şey, yepyeni boş bir sahne oluşturmak ve

48:58.060 --> 49:01.840
içinde sadece bir test çalıştırır ve onu yok eder.

49:01.840 --> 49:09.040
Ve bir sahne tarafından sağlanan dünya alanına sahip olduğumuzu garanti eden yepyeni bir sahne yaratır.

49:09.040 --> 49:16.000
Ancak yeni bir sahnenin tazeliği, etkileyebilecek herhangi bir bağımlılık veya eski bilgiye sahip değildir.

49:16.000 --> 49:16.630
Test.

49:16.630 --> 49:18.230
Bu şekilde kurulmasını seviyoruz.

49:18.250 --> 49:25.030
Şimdi, yaptığım şeyler hareket etmek, anahtar kodla hareket etmek ve belirli bir yere hareket etmek.

49:25.030 --> 49:27.640
Şimdi test etmek için bu hamleye bir göz atalım.

49:29.650 --> 49:31.990
Aslında, önce üretim koduna bir göz atalım.

49:31.990 --> 49:34.960
Eğer buraya gidersem ve temel örneğe bakarsam.

49:36.760 --> 49:38.560
Bu üretim kodu.

49:38.560 --> 49:40.720
Testlere geçmeden önce buna bir göz atalım.

49:40.720 --> 49:43.960
Burada tek yaptığım bir ilkel oluşturmak.

49:43.990 --> 49:49.030
Eğer bunu yapmak isterseniz buraya bir prefabrik yüklemeyi de düşünebilirsiniz.

49:49.030 --> 49:54.010
Ancak bizi yavaş yavaş çalışma zamanı ve unity'nin tüm karmaşıklıklarına sokmak istedim.

49:54.010 --> 49:56.140
Yani burada bir prefabrik kullanmıyorum.

49:56.140 --> 50:00.130
Sadece bir satır kod ile sıfırdan yepyeni bir küp oluşturuyorum.

50:00.130 --> 50:06.820
Sadece organizasyon açısından ona bir isim veriyorum ve ardından monobehaviour bileşenini ekliyorum

50:06.820 --> 50:08.620
gerçekten test etmek istediğim.

50:08.650 --> 50:14.770
Sonra yaptığım şeylerden biri onu 000 noktasına taşımak ve sonra bunu göstermek

50:14.770 --> 50:16.300
ekrandaki değer.

50:16.300 --> 50:18.850
Şimdi kaynak koduna bir göz atalım.

50:21.530 --> 50:22.960
İşte temel karakter.

50:22.970 --> 50:24.770
Bu, Monobehaviour'u genişletir.

50:24.800 --> 50:32.730
Şimdi, eğer unity'ye aşina iseniz, muhtemelen en iyi uygulama olarak Monobehaviours'u her zaman kullanıyorsunuzdur.

50:32.750 --> 50:35.600
Bilinçli düşünmeye başlamak istiyorsunuz.

50:35.600 --> 50:40.660
Ne zaman tek bir davranış kullanmak uygun olur ve ne zaman farklı bir şey kullanabilirim?

50:40.670 --> 50:46.580
Başlangıçtaki geliştiriciler olarak, her şeyi tek davranışlı bir çocuk olarak yaratırız, ancak zamanla ve deneyimle

50:46.580 --> 50:49.900
monobehaviours kullanmanın artıları ve eksileri olduğunun farkındasınızdır.

50:49.910 --> 50:54.620
Eksilerinden biri, tarihsel olarak, yol boyunca test etmenin daha zor olmasıdır.

50:54.620 --> 50:56.570
Unity bu oyun modu testlerini sağladı.

50:56.570 --> 51:00.950
Artık Playmode'u kesinlikle test edebiliriz ve Monobehaviours'u test edebiliriz.

51:00.950 --> 51:03.630
Bu harika ama yine de bazı dezavantajları var.

51:03.650 --> 51:08.330
Yine, Monobehaviour kaputun altında daha fazla birlik sistemine dayanacaktır.

51:08.330 --> 51:13.700
Ve özel kodumuzu test etmeye çalışırken, sorunun nerede olabileceğinden emin olamayabiliriz.

51:13.730 --> 51:15.720
Bu bizim kodumuz mu yoksa Unity'nin kodu mu?

51:15.740 --> 51:18.110
Yani yine, burada birkaç bağımlılık var.

51:18.140 --> 51:22.280
Bunların hepsi tamam, ancak sınıflarınızı tasarlarken ve

51:22.280 --> 51:23.690
testlerinizi tasarlıyorsunuz.

51:24.110 --> 51:27.080
Yani bir hareket hızımız var.

51:27.110 --> 51:28.460
Bir hareket tipimiz var.

51:28.460 --> 51:31.390
Bu sadece bastığım ok tuşunun yönü.

51:31.400 --> 51:33.680
Sonra Unity'nin güncellemesini kullanırız.

51:33.710 --> 51:36.530
Şimdi gerçekten iki kez kontrol edeyim.

51:38.720 --> 51:39.230
Gerçekten.

51:39.230 --> 51:44.960
Buradaki güncelleme döngüsü, kullandığım tek büyük monobehaviour işlevidir.

51:44.990 --> 51:49.130
Bu kodun geri kalanının mutlaka bir monobehaviour içinde olması gerekmez.

51:49.220 --> 51:53.560
Ayrıca Unity'nin giriş sistemini kullanıyorum, bu yüzden bu ikinci bir bağımlılık.

51:53.570 --> 51:56.760
Şimdi güncellemenin her karesinde ne yaptığımı görelim.

51:56.780 --> 51:59.360
Bu yöntemi burada girdiye göre hareket olarak adlandırıyorum.

51:59.390 --> 52:04.340
Kullanıcının klavyede belirli bir tuşa veya tuşlara basıp basmadığını kontrol ediyorum.

52:04.340 --> 52:08.360
Ve sonra burada anahtar koduna göre hareket et diyorum.

52:09.710 --> 52:16.220
Tek yapmamız gereken, eğer şu anda sola doğru hareket ediyorsak, o zaman sol yön için bir vektörde hareket edelim demek.

52:16.220 --> 52:19.820
Şu anda sağa doğru hareket ediyorsak ve yukarı ve aşağı için vb.

52:19.820 --> 52:24.860
Böylece dört ok tuşunu kullanarak dört yönde de hareket edebilirsiniz.

52:24.860 --> 52:26.420
Yani oldukça basit bir kod.

52:26.420 --> 52:30.440
Ve daha önce kendi özel karakterinizi yarattıysanız, aşağıdaki gibi bir şey ayarlamaya aşina olursunuz

52:30.440 --> 52:30.980
Bu kadar.

52:34.010 --> 52:35.870
Burada iki yöntemimiz var.

52:35.870 --> 52:41.240
Biri belirli bir noktaya hareket etmemizi diğeri ise bir birim hareket etmemizi sağlar.

52:41.240 --> 52:44.090
Diyelim ki bir birim sağa kaydırmak istedim.

52:44.090 --> 52:48.490
Bir birim, bir birim, bir birim geçebilirim.

52:48.500 --> 52:53.740
Eğer doğrudan uzayda belirli bir noktaya gitmek istersem, bu "move to" olacaktır.

52:53.750 --> 52:59.810
Dolayısıyla, özel bir karakter sınıfında ihtiyaç duyacağınız tek yöntemler bunlar olmayabilir, ancak

52:59.810 --> 53:01.100
Bazıları oldukça yaygın.

53:01.100 --> 53:07.850
Bu yüzden bu dersi, bazı işlevleri test etmek için temel, uygun bir çalışma yolu olarak bununla bitireceğiz.

53:07.850 --> 53:13.340
Düzenleme moduna veya oynatma modundaki diğer testlere göz atmak isterseniz, devam edin

53:13.340 --> 53:14.230
ve bunu yap.

53:14.240 --> 53:15.830
Bir sonraki videoya geçiyorum.

53:15.830 --> 53:16.580
Teşekkürler.

53:22.920 --> 53:26.060
Merhaba ve Unity için Birim Testine hoş geldiniz.

53:26.070 --> 53:30.060
Bu atölye çalışmasında karakter sınıfını gelişmiş bir versiyonda inceliyoruz.

53:30.060 --> 53:31.980
Şimdi bu demonun nasıl çalıştığına bir göz atalım.

53:31.980 --> 53:32.310
İşte.

53:32.310 --> 53:33.990
Birliğimizi açacağız.

53:34.020 --> 53:36.000
Örnek projemizi açacağız.

53:36.000 --> 53:41.190
Ve burada karakterin gelişmiş durumu için içerideki bir sahneye göz atacağız.

53:41.190 --> 53:44.310
Kod ayrımı hakkında biraz konuşmak istiyorum.

53:44.340 --> 53:49.110
Daha önce atölye çalışmalarından birinde, sahip olabileceğiniz farklı bağımlılıklardan bahsetmiştim.

53:49.110 --> 53:51.360
Örneğin, bir arka uç sunucusunu çağırıyorsanız.

53:51.360 --> 53:58.530
Ve bu durumda, arka ucu çağırmak zorunda kalmamak için bir yedek kütüphane kullandık.

53:58.560 --> 54:04.890
Burada da benzer bir tartışma söz konusu, belirli bir bağımlılıkla ilgili bağımlılığın ne olduğuna bakıyoruz.

54:04.890 --> 54:11.640
test senaryosu ve bu farklı bağımlılıkların nasıl farkında olacağız ve bu konuda ne yapmak istiyoruz?

54:11.640 --> 54:12.240
Burada mı?

54:12.240 --> 54:14.400
Yedek kütüphaneyi kullanmayacağız.

54:14.430 --> 54:18.960
Monobehaviour'umuzu diğer kodlardan ayırmayı düşüneceğiz ve bir göz atacağız.

54:19.170 --> 54:20.940
İşte birlik içindeyiz.

54:21.270 --> 54:22.440
Bir üretim sınıfımız var.

54:22.440 --> 54:23.250
Bir göz atalım.

54:23.250 --> 54:23.850
Koşuyorum.

54:27.540 --> 54:30.510
Burada, ok tuşlarımızla hareket edebileceğimizi görüyoruz.

54:30.510 --> 54:34.050
Tıpkı temel örnekte olduğu gibi, son kullanıcı deneyimi aynıdır.

54:34.050 --> 54:39.330
Ve burada ilginç bir örnek var, kod için yaptığımız bazı değişiklikler

54:39.330 --> 54:44.250
Sistemlerimizin kalitesi ve test edilebilirliği son kullanıcıyı etkilemek zorunda değildir.

54:44.280 --> 54:45.350
Bu olumlu.

54:45.360 --> 54:48.270
Şimdi üretim koduna bir göz atalım.

54:48.270 --> 54:50.340
Gelişmiş karakter örneğini açacağız.

54:50.340 --> 54:51.890
İşte tam bir örnek.

54:51.900 --> 54:57.830
Bu örnek sınıfın içinde yaptığımız şey, küp için bir ilkel oluşturmaktır.

54:57.840 --> 55:00.270
Organizasyonun hatırına ona bir isim veriyoruz.

55:00.390 --> 55:08.010
Ardından, burada tüm işlevselliğimize sahip bir bileşen eklediğimiz tek bir satır yerine

55:08.010 --> 55:09.180
İki adım.

55:09.450 --> 55:14.700
Bu bana biraz My Data loader örneğinde gördüğümüz bağımlılık enjeksiyonunu hatırlatıyor.

55:14.700 --> 55:17.970
Ancak bu, farklı bağımlılıkları olan farklı bir kullanım durumudur.

55:17.970 --> 55:22.920
Yani sadece bir bileşen ekle satırı yerine bileşen ekliyoruz.

55:22.920 --> 55:28.260
Ve sonra kendi monobehaviour olmayan karakter gelişmiş sınıfımızı oluşturuyoruz.

55:28.260 --> 55:30.540
Ve Monobehaviour'a geçiyoruz.

55:30.540 --> 55:35.370
Bu yüzden, gelişmiş karakterin kullanacağı bağımlılığı aktarıyoruz.

55:35.400 --> 55:41.910
Artık gelişmiş karakter tek bir davranış değildir ve bu nedenle nasıl istediğimiz konusunda daha fazla esnekliğe sahibiz

55:41.910 --> 55:42.480
test etmek için.

55:42.510 --> 55:45.780
Örneğin düzenleme modunda daha kolay test edebiliriz.

55:45.930 --> 55:51.000
Yine, Monobehaviours kullandığınızda bu, oyun modu testleri için daha uygundur.

55:51.030 --> 55:53.940
Bu kesin bir kural değil, ama bu da düşünmenin bir yolu.

55:53.940 --> 56:00.660
Yani burada, monobehaviour'umuzu monobehaviour olmayanlardan ayırarak birkaç seçeneğimiz daha var.

56:00.690 --> 56:06.060
Şimdi hala burada bir oyun modu ortamındayız çünkü bu üretim kodu.

56:06.060 --> 56:08.970
Şimdi kaynak kodumuzun nasıl değiştiğini görelim.

56:08.970 --> 56:11.010
İşte burada gelişmiş karakterdeyiz.

56:11.040 --> 56:13.220
Oldukça tanıdık geldiğini göreceksiniz.

56:13.230 --> 56:17.790
Buradaki kodun çoğu önceki temel örnek gibi olacaktır.

56:17.800 --> 56:19.080
Birkaç istisna var.

56:19.090 --> 56:25.710
Birincisi, gelişmiş karakterin kurucusunda Monobehaviour'a bir referans alacak olmasıdır.

56:25.710 --> 56:30.900
Bunun nedeni, Monobehaviour hakkında, özellikle de dönüşümüyle ilgili bazı şeyleri bilmeye ihtiyaç duymasıdır

56:30.900 --> 56:31.710
Pozisyon.

56:31.830 --> 56:38.400
İkinci satırı kullanmamız ve Monobehaviour'a bir referans söylememiz gereken bir durum da vardır

56:38.400 --> 56:40.830
karakter ilerledikçe bize geri dönecek.

56:40.860 --> 56:47.460
Bu sadece Monobehaviour'un güncelleme çağrısı yaptığında bize doğru hareketi yapmamızı söyleyebilmesi içindir.

56:47.490 --> 56:52.950
Bunu düzenleyebileceğiniz başka yollar da var, ancak basitlik açısından monobehaviour

56:52.950 --> 56:54.360
ve bu şekilde ele alıyorum.

56:54.660 --> 56:57.150
Bakalım kod tabanında başka ne gibi değişiklikler göreceğiz.

56:58.510 --> 57:00.820
Hareket türü temel ile aynıdır.

57:00.850 --> 57:03.040
Girişe göre hareket aynıdır.

57:03.940 --> 57:08.260
Burada anahtar koduna göre hareket aynı olmasa da çok benzerdir.

57:09.300 --> 57:15.630
Ve sonra burada aşağıya doğru hareket et ve hareket et ile, pozisyonu aldığımızı ve ayarladığımızı fark edebilirsiniz

57:15.630 --> 57:18.300
Monobehaviour'un dönüşümü üzerine.

57:18.300 --> 57:25.260
Yani burada da çoğunlukla monobehaviour olmayan bir sınıfımız var ve herhangi bir bağımlılık olmadan yapabileceği şeyi yapıyor.

57:25.260 --> 57:30.810
ve sadece en gerekli noktalarda Monobehaviour'a hitap eder.

57:30.840 --> 57:36.840
Bu ayrım, eğer yapabilseydik sadece tek bir davranışı nasıl test edebileceğimizi düşünmemize yardımcı olmaya başlar,

57:36.840 --> 57:39.910
Eğer yapabilseydik, sadece monobehaviour olmayanları nasıl test edebilirdik?

57:39.930 --> 57:45.240
Şimdi, bu mükemmel bir örnek değil, çünkü bu bir tür orta adımdır.

57:45.240 --> 57:47.040
bunları nasıl düzgün bir şekilde ayırabiliriz.

57:47.040 --> 57:48.600
Ama bunun iyi bir öğrenme olduğunu düşünüyorum.

57:48.600 --> 57:52.500
Gelişmiş karakter için buradaki kaynak koduna bakın.

57:52.500 --> 57:56.550
Bunu kendi zamanınızdaki temel karakterle karşılaştırın ve aradaki farkları görün.

57:56.730 --> 57:59.580
O zaman yaptığımız örneğe bir göz atalım.

57:59.580 --> 57:59.970
Tekrar.

57:59.970 --> 58:01.500
İşte gördüğümüz örnek.

58:01.500 --> 58:02.670
Yani bu iki çizgi.

58:02.670 --> 58:03.900
Bu gerçekten anahtar.

58:03.930 --> 58:09.960
Oyun nesnemize gelişmiş Monobehaviour karakterinin bir bileşenini ekleyeceğiz.

58:09.960 --> 58:12.270
Ve sonra yeni bir gelişmiş karakter oluşturacağız.

58:12.270 --> 58:13.440
Bu ayrı bir adım.

58:13.440 --> 58:17.010
Böylece bu iki şeyi ayrı ayrı test edebileceğimizi hayal edebilirsiniz.

58:17.010 --> 58:19.320
Şimdi birbirlerine oldukça bağımlılar.

58:19.350 --> 58:24.000
Birinin diğerine doğrudan bağlı olmaması için bunu düzenleyebileceğimiz yollar var.

58:24.000 --> 58:30.330
Ya da veri yükleyici örneğinde yaptığımız gibi bir şey yapabilir ve bir yedek kütüphane kullanabiliriz, böylece

58:30.330 --> 58:32.730
bunun yerine bağımlılıkta mocking yapıyoruz.

58:32.730 --> 58:38.400
Ancak yine de, sadece bir monobehaviour'u nasıl ayıracağımızı öğrenmenin basitliği için, sanırım

58:38.400 --> 58:39.210
buradaki durum.

58:39.210 --> 58:44.100
Bu testleri düzenleme modu ve oynatma modu ile kendi zamanınızda çalıştırabilir ve buna bir göz atabilirsiniz.

58:44.370 --> 58:50.460
Ama bana kalırsa, monobehaviour ve monobehaviour olmayanları ayırmadaki farklılıklar hakkında konuşmayı bitirdik.

58:50.490 --> 58:51.120
Teşekkürler.

58:57.320 --> 58:59.600
Merhaba ve Unity için Birim Testine hoş geldiniz.

58:59.630 --> 59:02.630
Bu atölye çalışmamızda karakter fiziği hakkında konuşuyoruz.

59:02.660 --> 59:09.110
Şimdi önceki atölye çalışmalarında çok basit bir karakter örneğinden yavaşça okla hareket eden

59:09.110 --> 59:14.960
Monobehaviour ve monobehaviour olmayan endişeleri ayıran gelişmiş örneğin anahtarları.

59:14.960 --> 59:20.900
Ve burada, fizik gibi başka bir birlik sistemine bağlı olursak ne olacağı hakkında konuşacağız.

59:20.900 --> 59:26.720
Ve ayrıca bu özel örnekte fizik kullandığımızda hareketimiz daha bulanık hale gelir.

59:26.720 --> 59:30.890
Yani sola tıklamıyorum ve hemen bir konuma tıklıyor.

59:30.890 --> 59:32.930
Zaman içinde yavaşça hareket eder.

59:32.930 --> 59:37.100
Zaman içinde yavaşça değişen değeri nasıl test edebiliriz?

59:37.100 --> 59:40.220
Bu yüzden kaynak kodda bu şeylerden birkaçı hakkında konuşacağız.

59:40.220 --> 59:45.290
Bu demoya bir göz atmak için unity editörümüzü ve örnek projemizi açıyoruz.

59:45.290 --> 59:48.020
Buradaki sahne karakter fiziği sahnesi olacak.

59:48.020 --> 59:51.720
Ve bakacağımız şeylerden biri de bu bulanık değerlerin nasıl test edileceğidir.

59:51.740 --> 59:58.640
Tekrar söylüyorum, bulanık değerler benim için anlık olması gerekmeyen değerlerdir.

59:58.640 --> 1:00:05.960
A'dan B'ye, zaman içinde yavaşça hareketlenirler, örneğin bir nesnenin konumu veya yavaş yavaş

1:00:05.960 --> 1:00:06.890
sayıyor.

1:00:06.920 --> 1:00:12.110
Bunların hepsi bir şeyi zaman içinde test edebilmek isteyeceğiniz alanlardır ve bizim kolay bir yaklaşımımız var

1:00:12.110 --> 1:00:13.250
Bunu yapmak için buradayım.

1:00:13.250 --> 1:00:17.750
Bunu çözmenin tek yolu bu değil, ancak yol boyunca öğrenmemize yardımcı olduğunu düşünüyorum.

1:00:17.750 --> 1:00:18.770
Bir göz atalım.

1:00:18.770 --> 1:00:20.420
İşte unity projesindeyiz.

1:00:20.420 --> 1:00:22.940
Karakter fiziği örneğimiz açık.

1:00:22.940 --> 1:00:24.500
Devam edelim ve sahneyi çalıştıralım.

1:00:30.610 --> 1:00:33.520
Şimdi burada ok tuşlarını kullanarak hareket edebiliyorum.

1:00:37.390 --> 1:00:42.970
Ve atölyedeki önceki örneklerde, solda yaptığım her tıklamanın üzerine tıkladığını gördük

1:00:42.970 --> 1:00:48.430
okuna tıklandığında konum anlık olarak değişirdi, ancak burada daha yumuşak bir hareket var.

1:00:49.060 --> 1:00:54.250
Farklı trafiği hangi yöne gitmesi gerektiği konusunda yönlendirmek için hala tüm ok tuşlarını kullanabilirim, ancak fikir

1:00:54.250 --> 1:00:58.030
Zaman içinde yavaş hareket etmesi şu anda gerçekten yeni bir durum.

1:00:58.030 --> 1:01:03.790
Unity'de bunu yapmanın pek çok yolu var, ancak ben sadece konuşmak için fizik sistemini kullanmayı seçtim

1:01:03.790 --> 1:01:08.920
Birkaç tane daha birlik sistemi işin içine girerse ne olacağı hakkında biraz.

1:01:08.920 --> 1:01:10.960
Neyle gerildiğimizi hatırlıyor musun?

1:01:10.960 --> 1:01:18.130
Ve buradaki fikir, ideal bir dünyada, birim testinizin en az sayıda satırı test etmesini sağlamaktır.

1:01:18.130 --> 1:01:21.760
bağımlılık, aynı anda en az kod satırı.

1:01:21.760 --> 1:01:25.600
Ancak çoğu zaman üretim kodumuz bu kadar basit değildir.

1:01:25.600 --> 1:01:27.520
Farklı şeylere bağlıyız.

1:01:27.520 --> 1:01:33.370
Veri yükleyicim ve buradaki önceki karakter örnekleriyle, bazı işleme yollarını gördük

1:01:33.370 --> 1:01:35.080
bu farklı bağımlılıklar.

1:01:35.200 --> 1:01:38.260
Bu diğerlerinden biraz daha karmaşık bir örnek.

1:01:38.290 --> 1:01:40.240
Şimdi üretim koduna bir göz atalım.

1:01:40.240 --> 1:01:43.120
Bu yüzden burada karakter fiziği örneğine bakacağız.

1:01:44.530 --> 1:01:45.790
Bunu açıyor muyuz?

1:01:47.210 --> 1:01:50.570
Ve burada bir ilkel karakter oluşturuyoruz.

1:01:51.320 --> 1:01:59.840
Burada oyun nesnesini önce ilkel için küp görünümünde oluşturuyoruz ve ardından

1:01:59.840 --> 1:02:03.500
karakter fiziği tek davranışının bileşeni.

1:02:03.500 --> 1:02:07.070
Ve sonra orada aldığımız ayrı bir karakter fiziği dersimiz var.

1:02:07.070 --> 1:02:12.740
Yani zaten tek bir monobehaviour sınıfından ikiye ayrılıyoruz.

1:02:12.740 --> 1:02:18.350
Bu, kodumuzu daha basit hale getirmenin ve orada her birini tek bir amaç için kullanmanın iyi bir yoludur.

1:02:18.350 --> 1:02:25.640
Önceki örnekte ihtiyacımız olan Monobehaviour işlevselliğinin çoğunun sadece güncelleme olduğunu gördük.

1:02:25.640 --> 1:02:27.680
Gerçekten halletmemiz gereken tek şey buydu.

1:02:27.710 --> 1:02:33.110
Bu nedenle, güncelleme dışındaki tüm şeyleri ikinci sınıfa taşıyarak, artık daha kolay

1:02:33.110 --> 1:02:33.740
Test.

1:02:36.450 --> 1:02:39.570
Sonra bu basit örnekte, belirli bir konuma geçtik.

1:02:39.600 --> 1:02:43.710
Şimdi testleri çalıştıralım ve ardından üretim koduna bir göz atalım.

1:02:43.740 --> 1:02:46.500
Şimdi seçilenleri çalıştırmaya bir göz atalım.

1:02:48.580 --> 1:02:49.830
Hepsi orada çalışıyor.

1:02:49.850 --> 1:02:50.850
Her şey geçiyor.

1:02:50.870 --> 1:02:52.640
Bu sadece oyun modu testi.

1:02:52.640 --> 1:02:57.110
Ancak, eğer tekrar bakmak isterseniz düzenleme modu testlerimiz de var, çünkü biz

1:02:57.110 --> 1:02:58.950
tek davranışlı şeylerle uğraşmak.

1:02:58.970 --> 1:03:01.340
Bir oyun modu kullanmak daha uygun geliyor.

1:03:01.340 --> 1:03:02.990
Yani burada yaptığım yaklaşım bu.

1:03:02.990 --> 1:03:06.470
Ancak hangi sistemleri test etmek istediğinize karar vermek size ve projenize bağlıdır.

1:03:06.500 --> 1:03:08.230
Düzenleme modu ve hangilerini test etmek istediğinizi.

1:03:08.240 --> 1:03:08.840
Oyun modu.

1:03:15.570 --> 1:03:21.000
Şimdi bu testleri gördüğümüze göre, sınıfın kaynak koduna hızlıca bir göz atalım.

1:03:21.000 --> 1:03:22.660
Sonra da üstteki bazı testlere bakacağız.

1:03:22.710 --> 1:03:22.860
Tamamdır.

1:03:22.860 --> 1:03:24.780
İşte karakter fiziğindeyiz.

1:03:24.810 --> 1:03:28.870
Son gördüğümüz gelişmiş karaktere oldukça benzediğini göreceğiz.

1:03:28.890 --> 1:03:32.850
Yine Monobehaviour ve monobehaviour olmayan sınıfı ayırdık.

1:03:32.850 --> 1:03:36.630
İşte işin çoğunu yapan monobehaviour olmayan sınıf.

1:03:36.660 --> 1:03:42.840
Burada kurucunun içinde Monobehaviour'a bir referans aldığına ve onu sakladığına dikkat edin ve sonra

1:03:42.840 --> 1:03:47.670
ayrıca Monobehaviour'a burada bu sınıfa bir referans aktarır.

1:03:47.670 --> 1:03:51.900
Böylece her güncelleme yaptığında hareketi çağırabilir.

1:03:51.930 --> 1:03:53.970
Şimdi bunu organize etmenin farklı yolları var.

1:03:53.970 --> 1:03:57.810
Burada birbirimize olan sabit kodlanmış bağımlılığı bile kaldırabilirsiniz.

1:03:57.810 --> 1:04:01.350
Ancak bu örnekte basitlik adına bu çok uygundur.

1:04:01.740 --> 1:04:02.790
Koddan aşağı iniyorum.

1:04:02.790 --> 1:04:05.820
Yine, çoğu bölümde gelişmiş gibi.

1:04:05.850 --> 1:04:08.670
Fiziğin kullanıldığı yerleri belirtmek istiyorum.

1:04:08.670 --> 1:04:16.920
Yani burada harekette, sadece bir örnek üzerinde kodlanmış pozisyona göre hareket etmek yerine Taneous güncellemesi,

1:04:16.950 --> 1:04:20.340
burada hareket pozisyonunu kullanacağız.

1:04:20.340 --> 1:04:25.890
Ve sonra Add force altında, ki bu benim yaptığım yeni bir yöntem, fiziğe dayalı olarak hareket edecek

1:04:25.890 --> 1:04:26.580
Kuvvetler.

1:04:26.580 --> 1:04:30.630
Bunun bir blok olduğunu ve bir taraftan ittiğimizi düşünün.

1:04:30.630 --> 1:04:36.390
Ve sonra sürtünme, kütle ve yerçekimine dayanarak, biliyorsunuz ki

1:04:36.390 --> 1:04:39.240
burada kuvvet ekleyerek daha bulanık bir tepki verebiliriz.

1:04:39.240 --> 1:04:45.570
Ve burada, aynı sınıf dosyasının en üstünde fizik tekli davranışını gördüğümüz kuvvet ekleyerek hareket ediyoruz

1:04:45.600 --> 1:04:46.590
ilan edildi.

1:04:46.590 --> 1:04:52.560
Son atölyede gördüğümüz gelişmiş karakterin oldukça benzer görünmesi oldukça tanıdık,

1:04:52.560 --> 1:04:55.350
ama burada depoladığımız sert bir cisim var.

1:04:55.350 --> 1:05:02.010
Ve sonra bu sınıf uyandığında, katı gövdeyi bağlarız ve sonra bazı fizik ayarlarını yaparız

1:05:02.010 --> 1:05:02.670
değerler.

1:05:02.670 --> 1:05:09.450
Yani tüm fiziği yapan tek bir davranışa sahip olmak yerine bir tür özetleme yapmayı düşünürsek

1:05:09.450 --> 1:05:14.220
ve hareketi bir araya getirerek, monobehaviour'u monobehaviour olmayanlardan ayırdık.

1:05:14.250 --> 1:05:20.520
Daha sonra Monobehaviour içinde güncelleme döngüsünü yaparız ve bazı fizik şeyleriyle de ilgileniriz.

1:05:20.610 --> 1:05:26.550
Sonra diğerinden, monobehaviour olmayan, istediğimiz gibi hareket edebiliyoruz ve karakter girişi alabiliyoruz,

1:05:26.580 --> 1:05:28.470
bu yüzden klavye girişi ve bunun gibi şeyleri alın.

1:05:28.470 --> 1:05:32.940
Yani burada oldukça iyi bir ayrım var ve ihtiyacımız olan şeyle devam etmemizi sağlıyor.

1:05:34.100 --> 1:05:37.820
Bu konuda belirtmek istediğim başka bir şey varsa yüksek sesle düşünmeme izin verin.

1:05:38.330 --> 1:05:40.430
Evet.

1:05:40.430 --> 1:05:42.620
Bu yüzden buradaki fikirle dalga geçtim.

1:05:42.620 --> 1:05:50.720
Her sınıfın birbirine bağlı olduğu kodlanmış bağımlılığı azaltmak istiyorsanız ve

1:05:50.720 --> 1:05:56.270
My Data loader örneğinde gördüğümüz esneklikten daha fazlasını elde etmek için, kesinlikle

1:05:56.270 --> 1:05:58.670
arayüzler ve bu şekilde ele alın.

1:05:58.970 --> 1:06:00.680
Ama burada bunu yapmamıza gerek yok.

1:06:00.680 --> 1:06:03.370
Geri dönüp örneği bir kez daha çalıştıracağız.

1:06:03.380 --> 1:06:07.700
Unity'de koşuyoruz ve ok tuşlarıyla hareket ediyoruz.

1:06:07.730 --> 1:06:13.130
Son birkaç videoda karmaşıklığı azaltmanın örneklerini gördük.

1:06:13.130 --> 1:06:17.870
Böylece farklı bağımlılıkları azaltarak kodumuzu ayırmak için biraz esneklik sağlar.

1:06:17.870 --> 1:06:23.480
Yani bu örnekte girdi, fizik, tekli davranışlar ya da bunun gibi şeyler kullanarak

1:06:23.480 --> 1:06:24.620
Sanırım burada işimiz bitti.

1:06:24.650 --> 1:06:25.340
Teşekkürler.

1:06:31.470 --> 1:06:31.730
Merhaba.

1:06:31.740 --> 1:06:37.470
Bu, şimdiye kadar atölyede olmasını istediğim farklı konuların çoğunu kapsıyor, ancak

1:06:37.470 --> 1:06:39.990
Gelecekte daha fazla konu için bolca yer var.

1:06:39.990 --> 1:06:42.390
Şimdiye kadar yapılan atölye çalışmalarında gördük.

1:06:42.390 --> 1:06:49.350
Bu en basit örnek test çalıştırıcısını öğrenmek, playmode testlerini, edit mode testlerini nasıl yapabileceğimizi görmek,

1:06:49.380 --> 1:06:54.870
oynatma modu ve düzenleme modu arasındaki farklar ve neden test etmek isteyeceğiniz hakkında biraz bilgi edinmek

1:06:54.870 --> 1:06:57.350
birinde ya da diğerinde ya da her ikisinde.

1:06:57.360 --> 1:07:03.510
Daha sonra, eşzamansız işlevselliğe sahip olduğumuzda sahip olduğumuz bazı seçenekleri de gördük veya

1:07:03.510 --> 1:07:05.460
diğer sistemlere bağımlı.

1:07:05.460 --> 1:07:09.990
Testin iyiliği için bu bağımlılığı azaltmak için ne yapabiliriz?

1:07:10.020 --> 1:07:15.180
Yol boyunca, bağımlılık enjeksiyonu ve bağımlılıkları ayırma hakkında bazı farklı şeyler öğreniyoruz.

1:07:15.180 --> 1:07:16.650
kodumuzun endişeleri.

1:07:16.680 --> 1:07:22.710
Bu ilkeler zaten üretim kodunda kullanışlıdır ve bazı yolları görmeye başlıyoruz

1:07:22.710 --> 1:07:29.850
Kodunuzu daha test edilebilir olacak şekilde hazırladığınızda, aynı zamanda iyi tasarlanmış bir kod da oluşturmuş oluruz

1:07:29.850 --> 1:07:31.080
üretim için.

1:07:31.080 --> 1:07:37.710
Dolayısıyla, bağımlılık enjeksiyonuna sahip olmak, çalışma zamanında kullanabileceğiniz esnekliği sağlayarak karmaşıklığı azaltır

1:07:37.710 --> 1:07:44.370
İhtiyaç duyduğunuzda farklı bağımlılıkların esnek çeşitlerini aktararak sistemlerinizin.

1:07:44.400 --> 1:07:51.960
Ayrıca monolitik büyük bir monobehaviour'u sadece monobehaviour'dan ihtiyacımız olana ayırarak gördük

1:07:51.960 --> 1:07:58.620
ve diğer kodu daha hafif, tek davranışlı olmayan bir sınıfa taşıyarak yine biraz esneklik elde ediyoruz

1:07:58.620 --> 1:08:03.570
üretimde yararlı olan ve aynı zamanda burada test dünyasında bize yardımcı olan.

1:08:03.570 --> 1:08:10.170
Bence genel olarak gördüğümüz zorluklardan bazıları, birden fazla bağımlılığınız olduğunda ne olduğudur

1:08:10.200 --> 1:08:14.670
veya belirli bir yöntemden çağrılan çok sayıda sistem.

1:08:15.060 --> 1:08:20.700
Bu, o yöntemin şişirilmiş ve çok fazla şey yaptığının bir işareti olabilir veya

1:08:20.700 --> 1:08:23.130
yalın ve uygun bir şekilde tasarlanmış.

1:08:23.130 --> 1:08:28.800
Ancak bu işlevselliği test ederken bazı ek düşünce ve değerlendirmelere ihtiyacımız var.

1:08:28.800 --> 1:08:31.050
Umarım bu sizin için faydalı olmuştur.

1:08:31.050 --> 1:08:38.130
Bu seride de daha fazla konuyu ele almayı dört gözle bekliyorum ve bunlar ilerleyen zamanlarda tekrar eklenecek.

1:08:38.130 --> 1:08:38.610
Zaman.

1:08:38.610 --> 1:08:39.750
Tekrar teşekkürler.
