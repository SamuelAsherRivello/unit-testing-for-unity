WEBVTT

00:00.050 --> 00:02.970
Merhaba ve unity ile Sürekli Entegrasyona hoş geldiniz.

00:02.990 --> 00:08.600
Bu, birim testi ve birim testinin iş akışlarınıza nasıl uyum sağlayabileceği hakkında bilgi edinmenin bir parçasıdır.

00:08.630 --> 00:14.510
Bu bölümde, konuya kısa bir giriş yapacağız ve ardından Unity Cloud derlemesine bakacağız

00:14.510 --> 00:21.530
unity projeleriniz için sürekli entegrasyon ve sürekli dağıtım kurmanın bir yolu olarak.

00:21.560 --> 00:28.550
Oyun oluşturmak için yazılım geliştirme yaşam döngüsünde gördüğümüz gibi, unity en ağırlıklı olarak kullanılır

00:28.550 --> 00:31.970
geliştirme, test ve dağıtım aşamalarında.

00:32.000 --> 00:36.650
Birim testi yapmaktan bahsettiğimizde, bunu burada beşinci ve altıncı adımlara ekliyoruz.

00:36.650 --> 00:41.180
Ve sürekli entegrasyon ve sürekli dağıtımdan bahsederken, gerçekten şunlara bakıyoruz

00:41.180 --> 00:47.770
testlerimizi otomatikleştirmek ve üretim iş akışlarımıza katlamak için bu adımların üçünde de.

00:47.780 --> 00:51.360
Peki sürekli entegrasyon ve sürekli dağıtım nedir?

00:51.380 --> 00:59.120
CI CD olarak adlandırılan bu yöntem kod hatalarını ve kusurları azaltarak her DevOps iş akışı için çok önemli hale gelir.

00:59.450 --> 01:06.530
Geliştirici işlemleri genellikle projenizin test edildiği son aşama veya aşamalardır,

01:06.560 --> 01:10.580
canlı yayına geçmek ve canlı deneyime yeni güncellemeler eklemek.

01:10.610 --> 01:17.510
CI CD, kod değişikliklerinizi sık sık entegre etme, otomatik olarak entegre etme uygulamalarını içerir.

01:17.510 --> 01:20.930
kodu ve ardından son kullanıcılarınıza derlemeleri yayınlamak.

01:20.930 --> 01:25.730
Yani bunların hepsini birlikte yapıyorsanız, tam CI CD sürecini gerçekleştirmiş olursunuz.

01:25.730 --> 01:30.590
Ancak birini veya diğerini de yapabilir veya iş akışının kendiniz için önemli alanlarına odaklanabilirsiniz.

01:30.590 --> 01:30.860
Şimdi.

01:30.890 --> 01:37.940
CI CD, Unity'ye özgü değildir ve Unity'nin profesyonel gelişimi ve kullanıldığı yıllar boyunca

01:37.940 --> 01:45.650
sektörde, giderek daha fazla üçüncü taraf size sürekli entegrasyon ve

01:45.650 --> 01:47.960
unity içinde sürekli dağıtım.

01:47.990 --> 01:55.220
Kodu tutmak veya kodu depolamak için kullanılan teknolojilerden bazıları GitHub ve GitLab'dır.

01:55.220 --> 02:00.170
ve sürüm kontrolüne sahipsiniz, ancak bunun için kullanabileceğiniz başka işlemler de var.

02:00.170 --> 02:02.480
Ancak burada başka teknolojiler de var.

02:02.480 --> 02:11.480
Ve sonra circle CI veya game CI, code Magic bamboo, Unity Cloud Build, Jenkins gibi araçlar.

02:11.510 --> 02:17.300
Bunlar, kodunuzun sürüm kontrolünün yapıldığı her yerin üzerine inşa edilmiş teknolojilerdir ve

02:17.300 --> 02:21.590
iş akışı için doğru eylemlere neden olacak doğru tetikleyicileri eklemek.

02:21.620 --> 02:26.690
Bu videoyla en alakalı olan ikisi sizin için mantıklı, çünkü benim kullandığım şey

02:26.720 --> 02:32.600
GitHub, Unity Cloud'da oluşturacağımız repoyu barındırmak için, derleme işlemini yapacak araç olarak

02:32.600 --> 02:33.770
bina ve test.

02:33.770 --> 02:39.980
CI CD'nin sürekli entegrasyon ve sürekli teslimat uygulamalarını birleştirdiğinden bahsetmiştik.

02:39.980 --> 02:44.810
Yani entegrasyon, yeni kodunuzu üretime koymakla ilgilidir.

02:44.810 --> 02:49.250
Buna test etmek, inşa etmek ve koda dahil etmek de dahildir.

02:49.370 --> 02:54.740
Sürekli teslimat veya sürekli dağıtım olarak da adlandırılır.

02:54.740 --> 02:58.310
Bu, söz konusu kodun derleme hedefine teslim edilmesini otomatikleştirir.

02:58.310 --> 02:59.380
Yani bu farklı.

02:59.390 --> 03:02.900
Bu sadece kodunuzu projeye koymak değildir, bu CI'dır.

03:03.140 --> 03:05.990
Bu, onu son kullanıcılarınızın ellerine teslim etmektir.

03:05.990 --> 03:07.490
İşte CD bu.

03:07.550 --> 03:13.280
Şimdi kursun bu noktasına kadar, birim testinin aşağıdaki unsurları şekillendirmeye yardımcı olmak için inanılmaz derecede yararlı olduğunu gördük

03:13.280 --> 03:18.290
Kodumuzun nasıl olgunlaştığını ve daha sonra kesinlikle bu kodu nasıl koruduğumuzu ve hata ayıkladığımızı.

03:18.290 --> 03:20.720
Ve testleri manuel olarak yapıyorduk.

03:20.720 --> 03:26.450
Yani bu, bazı otomatik testler oluştursak bile, çalışma zamanı deneyimini ya

03:26.450 --> 03:27.950
bir kullanıcı ve hataları arayın.

03:27.950 --> 03:30.980
Bu şekilde manuel olarak test etmenin bir yolu var.

03:30.980 --> 03:36.470
Yaptığımız diğer şey ise Unity Test Runner'daki düğmeye manuel olarak tıklamak

03:36.470 --> 03:38.330
Bu testleri çalıştırmak için pencere.

03:38.330 --> 03:40.850
Şimdi el kitabı için bazı madde işaretlerine bir göz atalım.

03:40.880 --> 03:46.520
Her şeyden önce, herhangi bir otomatik işlemin gerçekleşeceğini garanti etmiyoruz, bu nedenle herhangi bir sonucu garanti edemeyiz.

03:46.550 --> 03:51.530
Otomatik bir alternatife göre daha güvenilmez ve hataya meyillidir.

03:51.620 --> 03