WEBVTT

00:00:00.050 --> 00:00:02.970
Merhaba, birlik ile Sürekli Entegrasyona hoş geldiniz.

00:00:02.990 --> 00:00:08.600
Bu, birim testi ve birim testinin iş akışlarınıza uyma yolları hakkında bilgi edinmenin bir parçasıdır.

00:00:08.630 --> 00:00:14.510
Bu bölümde konuya kısa bir giriş yapıp ardından Unity Cloud buildine bakacağız.

00:00:14.510 --> 00:00:21.530
Birlik projeleriniz için sürekli entegrasyon ve sürekli dağıtım ayarlamanın bir yolu olarak.

00:00:21.560 --> 00:00:28.550
Oyun oluşturmaya yönelik yazılım geliştirme yaşam döngüsünde gördüğümüz gibi, en ağırlıklı olarak birlik kullanılır

00:00:28.550 --> 00:00:31.970
geliştirme, test etme ve dağıtım aşamalarında.

00:00:32.000 --> 00:00:36.650
Birim testi yapmaktan bahsettiğimizde, bunu burada beşinci ve altıncı adımlara ekliyoruz.

00:00:36.650 --> 00:00:41.180
Sürekli entegrasyon ve sürekli dağıtımdan bahsettiğimizde, gerçekten

00:00:41.180 --> 00:00:47.770
testlerimizi otomatikleştirme ve üretim iş akışlarımıza dahil etme yollarının her üçünde de.

00:00:47.780 --> 00:00:51.360
Peki sürekli entegrasyon ve sürekli dağıtım nedir?

00:00:51.380 --> 00:00:59.120
CI CD'si, kod hatalarını ve kusurlarını azaltarak onu her DevOps iş akışı için önemli hale getirir.

00:00:59.450 --> 00:01:06.530
Geliştirici işlemleri genellikle projenizin test edildiği son aşama veya aşamalardır.

00:01:06.560 --> 00:01:10.580
canlı yayına geçiyoruz ve canlı deneyime yeni güncellemeler ekliyoruz.

00:01:10.610 --> 00:01:17.510
CI CD'si, kod değişikliklerinizi sıklıkla entegre etme, otomatik olarak entegre etme uygulamalarını içerir.

00:01:17.510 --> 00:01:20.930
kodlayın ve ardından derlemeleri son kullanıcılarınıza yayınlayın.

00:01:20.930 --> 00:01:25.730
Yani bunların hepsini bir arada yapıyorsanız, CI CD işleminin tamamını gerçekleştirmiş olursunuz.

00:01:25.730 --> 00:01:30.590
Ancak bunlardan birini veya diğerini de yapabilir veya iş akışının önemli alanlarına kendiniz odaklanabilirsiniz.

00:01:30.590 --> 00:01:30.860
Şimdi.

00:01:30.890 --> 00:01:37.940
CI CD'si Unity'ye özgü olmayıp, Unity'nin mesleki gelişimi ve kullanıldığı yıllarda

00:01:37.940 --> 00:01:45.650
Sektörde giderek daha fazla sayıda üçüncü taraf size sürekli entegrasyon sağlayacak araçlar ekledi ve

00:01:45.650 --> 00:01:47.960
birlik içinde sürekli konuşlandırma.

00:01:47.990 --> 00:01:55.220
Kodu tutmak veya kodu nerede saklamak için kullanılan teknolojilerden bazıları GitHub ve GitLab'dır.

00:01:55.220 --> 00:02:00.170
çevrimiçi olarak var ve sürüm kontrolü var, ancak bunun için kullanabileceğiniz başka işlemler de var.

00:02:00.170 --> 00:02:02.480
Ancak burada başka teknolojiler de var.

00:02:02.480 --> 00:02:11.480
Ve sonra Circle CI veya oyun CI, Code Magic Bamboo, Unity Cloud Build, Jenkins gibi araçlar.

00:02:11.510 --> 00:02:17.300
Bunlar, kodunuzun sürüm kontrolünün yapıldığı her yerin üzerine inşa edilmiş teknolojilerdir ve

00:02:17.300 --> 00:02:21.590
iş akışı için doğru eylemleri gerçekleştirmek üzere doğru tetikleyicileri bağlamak.

00:02:21.620 --> 00:02:26.690
Bu videoyla en alakalı olan siz ikiniz için mantıklı çünkü ben bunu kullandım.

00:02:26.720 --> 00:02:32.600
Unity Cloud'da oluşturacağımız repoyu barındıracak GitHub, bunu yapacak araç olarak oluşturulacak

00:02:32.600 --> 00:02:33.770
inşaat ve test.

00:02:33.770 --> 00:02:39.980
CI CD'nin sürekli entegrasyon ve sürekli teslimat uygulamalarını birleştirdiğinden bahsetmiştik.

00:02:39.980 --> 00:02:44.810
Yani entegrasyon, yeni kodunuzu üretime koymakla ilgilidir.

00:02:44.810 --> 00:02:49.250
Bu, onu test etmeyi, oluşturmayı ve koda eklemeyi içerir.

00:02:49.370 --> 00:02:54.740
Sürekli teslimat veya sürekli dağıtım olarak da adlandırılmaktadır.

00:02:54.740 --> 00:02:58.310
Bu, söz konusu kodun derleme hedefine teslimini otomatikleştirir.

00:02:58.310 --> 00:02:59.380
Yani bu farklı.

00:02:59.390 --> 00:03:02.900
Bu sadece kodunuzu projeye koymak değil, bu CI'dır.

00:03:03.140 --> 00:03:05.990
Bu, onu son kullanıcılarınızın eline bırakıyor.

00:03:05.990 --> 00:03:07.490
İşte CD budur.

00:03:07.550 --> 00:03:13.280
Kursun bu noktasına kadar birim testinin şekillendirmeye yardımcı olmak açısından inanılmaz derecede yararlı olduğunu gördük.

00:03:13.280 --> 00:03:18.290
kodumuzun nasıl olgunlaştığını ve ardından kesinlikle bu kodu nasıl koruyup hatalarını ayıkladığımızı.

00:03:18.290 --> 00:03:20.720
Ve testi manuel olarak yapıyoruz.

00:03:20.720 --> 00:03:26.450
Bu, bazı otomatik testler oluştursak bile çalışma zamanı deneyimini şu şekilde oynayacağımız anlamına gelir:

00:03:26.450 --> 00:03:27.950
bir kullanıcı ve hataları arayın.

00:03:27.950 --> 00:03:30.980
Bu şekilde manuel olarak test etmenin bir yolu vardır.

00:03:30.980 --> 00:03:36.470
Yaptığımız diğer şey ise Unity Test Runner'daki düğmeye manuel olarak tıklamak.

00:03:36.470 --> 00:03:38.330
Bu testleri çalıştırmak için pencere.

00:03:38.330 --> 00:03:40.850
O halde el kitabı için bazı madde işaretlerine bir göz atalım.

00:03:40.880 --> 00:03:46.520
Her şeyden önce, herhangi bir otomatik işlemin gerçekleşeceğini garanti etmiyoruz, dolayısıyla herhangi bir sonucu garanti edemiyoruz.

00:03:46.550 --> 00:03:51.530
Otomatik bir alternatife göre daha güvenilmez ve hataya açıktır.

00:03:51.620 --> 00:03:57.530
Bu tekrarlanan görevler arada bir sizin tarafınızdan yürütülüyor, bunu yapmayı hatırlıyor, bakıyor

00:03:57.530 --> 00:03:59.840
Her şeyin enerji gerektirdiği sonuçlara özenle.

00:03:59.840 --> 00:04:02.120
Ve bu tekrarlayan görevler sıkıcı olabilir.

00:04:02.120 --> 00:04:05.930
İşler sıkıcı olduğunda geliştiriciler bunları atlayabilir veya daha az sıklıkta yapabilir.

00:04:05.930 --> 00:04:11.690
Ve son olarak, eğer test etmeyi unutursak projemizin nasıl olduğuna dair iyi bir güncellenmiş durumumuz olmaz.

00:04:11.690 --> 00:04:12.110
yapmak.

00:04:12.110 --> 00:04:18.350
Ancak bu testleri ayarlarken sahip olduğumuz en iyi uygulamaların tümünü alırsak ve aynı zamanda otomatikleştirirsek

00:04:18.350 --> 00:04:24.140
bu görevlerin yürütülmesinden ve hatta kodumuzun son kullanıcılarımıza teslim edilmesinden faydalanabiliriz

00:04:24.140 --> 00:04:25.430
daha fazla fayda sağlar.

00:04:25.610 --> 00:04:29.150
Örneğin burada güvenilir, tekrarlayan bir sürecimiz var.

00:04:29.150 --> 00:04:35.990
Otomatik CI CD kurulumumuz olduğunda, seçebileceğimiz hızlı ve ilgili geri bildirime sahibiz ve göreceğiz

00:04:36.020 --> 00:04:37.670
her yapıyı tetikleyen şey.

00:04:37.670 --> 00:04:43.670
Ancak bunu git repo'ya yapılan her taahhüt için yapmak istiyorsak, o zaman git repo'ya her taahhüt verdiğimizde,

00:04:43.700 --> 00:04:48.620
test çalıştırılır, yapı doğrulanır ve bu konuda bilgilendiriliriz.

00:04:48.620 --> 00:04:51.920
Yani ihtiyaçlarınızın ne olduğuna bağlı olarak bunu daha sık veya daha az sıklıkta yapabilirsiniz.

00:04:51.950 --> 00:04:54.740
Kodunuza daha fazla güven duymanızı sağlar, böylece daha az risk oluşur.

00:04:54.740 --> 00:04:57.980
Yani sistemleri yeniden düzenlemeye gittiğinizde veya yeni özellikler eklediğinizde.

00:04:57.980 --> 00:04:59.780
Ve son olarak birine sahip olarak.

00:05:00.340 --> 00:05:04.630
Derlemeler herkesin kullanımına açık ve daha sonra bunu otomatikleştiriyor.

00:05:04.630 --> 00:05:10.870
Kod tabanımızda bu güvenin ve güvenliğin temelleri var ve bu da bize daha kolay bir şekilde işlem yapmamızı sağlıyor.

00:05:10.870 --> 00:05:12.360
başkalarıyla işbirliği yapın.

00:05:12.370 --> 00:05:18.340
Projeyi istikrarlı tutmak için kimlerin katkısının devam ettiğini bilebileceğiz ki bu inanılmaz bir şey.

00:05:18.340 --> 00:05:22.060
Bir takımda çalışırken sahip olmanız gereken etkili bilgiler.

00:05:22.060 --> 00:05:29.800
Yani buraya bir adım geri dönersek, görsel bir şekilde baktığımızda, sürekli entegrasyon kod birleştirmelerdir,

00:05:29.800 --> 00:05:31.240
kod oluşturulur.

00:05:31.270 --> 00:05:36.010
Daha sonra sürekli teslimatta testlerimizin başarılı olup olmadığına bakıyoruz.

00:05:36.040 --> 00:05:42.910
Daha sonra onu henüz son kullanıcılar için hazır olmayan bir hazırlama ortamına taşıyoruz.

00:05:42.910 --> 00:05:44.020
ama neredeyse orada.

00:05:44.020 --> 00:05:48.400
Son kullanıcılara dağıtmadan önce sürecin gerçekten iyi çalıştığından emin oluyoruz.

00:05:48.430 --> 00:05:55.930
Artık, sahip olmanızdan bağımsız olarak otomatik testler yapabilir ve bu test sonuçlarının otomatik olarak teslim edilmesini sağlayabilirsiniz.

00:05:55.930 --> 00:06:01.750
sürüm kontrolünde kodunuzu nasıl programladığınıza ilişkin belirli bir akış.

00:06:01.750 --> 00:06:08.920
Ancak buradaki potansiyel uyum ve bağlantılardan bahsetmek gerekirse, bu neyin farklı olabileceğini gösteriyor

00:06:08.920 --> 00:06:10.690
farklı dallarda taahhütte bulunur.

00:06:10.690 --> 00:06:16.240
Sürüm kontrolünde git kullanıyorum, o yüzden burada git kullanıyormuşum gibi davranalım ve bir ana veya ana makinem var

00:06:16.240 --> 00:06:17.110
orada şube.

00:06:17.110 --> 00:06:21.580
Daha sonra tüm geliştirme çalışmalarımı ikinci bir geliştirici dalında yapıyorum.

00:06:21.580 --> 00:06:28.420
Ve ne zaman yeni bir özellik yaratmak istesem, geliştirmeden ayrılıp ona bir isim veririm.

00:06:28.420 --> 00:06:35.420
özellik, ana menü, hızlı düğme diyelim ve sonra gidip o ana menüyü eklerdim, çık

00:06:35.440 --> 00:06:41.770
düğmesine basın ve o dalın yalnızca söz konusu özellik için gereken değişiklikleri kapsadığından emin olun.

00:06:41.890 --> 00:06:45.310
Diyelim ki en altta bir numaralı özelliğim vardı.

00:06:45.310 --> 00:06:46.510
Ben bunu bitirmiştim.

00:06:46.540 --> 00:06:52.570
Otomatik CI CD sürecini çalıştırabileceğimiz potansiyel yerlerden bazıları burada verilmiştir.

00:06:52.570 --> 00:06:58.330
Her şeyden önce, en alttan başlayarak, geliştirme özelliği dalımı her taahhüt ettiğimde,

00:06:58.330 --> 00:07:04.450
Tüm testlerin çalıştığından ve her şeyin çalıştığından emin olmak için otomatik bir yapı başlatabilirim

00:07:04.450 --> 00:07:05.560
özellikle iyi.

00:07:05.560 --> 00:07:06.730
Bu bir numara.

00:07:06.760 --> 00:07:13.210
Daha sonra ikinci adımda bunu daha büyük bir özelliğe geri döndürebilirim ve onu tekrar bununla birleştirirken

00:07:13.210 --> 00:07:18.940
geliştirme şubesinde, potansiyel olarak tüm farklı hedefleri tutturan otomatik bir yapı testi yapmak istiyorum

00:07:18.940 --> 00:07:19.750
platformlar.

00:07:19.750 --> 00:07:26.290
Bu, otomatik testin iOS'taki, Android'deki, cihazdaki birlik düzenleyicisinin içinde çalıştırılabileceği anlamına gelir.

00:07:26.290 --> 00:07:27.040
cihazda değil.

00:07:27.040 --> 00:07:28.780
Orada birçok farklı seçeneğiniz var.

00:07:29.500 --> 00:07:35.350
Son olarak, bu gelişme gerçekleştiğinde şube hazırdır ve en son özelliklerin tümüne sahiptir ve

00:07:35.350 --> 00:07:38.980
bunun ana dalda nasıl çalışacağını test etmek istiyoruz.

00:07:38.980 --> 00:07:46.480
Orada üç numaramız var, bunu en üst sıraya koymadan önce ana veya

00:07:46.480 --> 00:07:53.620
ana dal, yapabileceğim şey ana daldan tekrar gelişmek için birleştirmek, sonra emin olmak

00:07:53.620 --> 00:07:59.320
Geliştirme dalında her şey iyi çalışıyor ve ancak bu iyi çalışırsa, o zaman taahhüt ediyorum

00:07:59.320 --> 00:08:00.520
ana veya ana dal.

00:08:01.220 --> 00:08:07.160
Yani bu belirli adımları belirli bir sırayla gerçekleştirmeniz gerekmediğini görebilirsiniz, ancak

00:08:07.160 --> 00:08:11.440
Bu iş akışı boyunca istediğiniz kadar çok veya az test yardımı alabilirsiniz.

00:08:11.450 --> 00:08:15.440
Bu bilgiyi birkaç farklı şekilde görmek için başka bir üst düzey özet.

00:08:15.440 --> 00:08:21.350
Bu, özellikle buradaki Unity Cloud oluşturma talimatlarına yöneliktir, ancak verilen adımların üst düzeyde olduğunu düşünüyorum.

00:08:21.350 --> 00:08:21.850
yeterli.

00:08:21.860 --> 00:08:24.290
Bu çoğu rakip için de geçerli.

00:08:24.320 --> 00:08:27.830
Yapmak istediğiniz ilk şey yapı otomasyonunuzu ayarlamaktır.

00:08:27.830 --> 00:08:32.810
Böylece derleme otomasyonunu kodunuzun bulunduğu sürüm kontrolüne yönlendirirsiniz.

00:08:32.810 --> 00:08:38.090
Benim durumumda bu, Unity Cloud yapısını bağlamak ve onu sahip olduğum GitHub'a bağlamak olacaktır.

00:08:38.090 --> 00:08:39.440
proje için repo.

00:08:39.470 --> 00:08:42.080
Daha sonra hangi tetikleyiciye sahip olacağınıza karar verirsiniz.

00:08:42.110 --> 00:08:49.490
Bu, projenizde belirli bir dalda değişiklik yapmak veya bir daldan birleşme olabilir

00:08:49.490 --> 00:08:53.240
başka bir şubeye geçebilir veya istediğiniz farklı kuralları oluşturabilirsiniz.

00:08:53.270 --> 00:08:59.990
Buradaki fikir, onu manuel olarak çalıştırmak değil, bunun yerine geliştirme sürecinizin bir kısmına sahip olmaktır.

00:08:59.990 --> 00:09:01.610
otomatik olarak tetikler.

00:09:01.610 --> 00:09:03.140
Yani burada iki numara olacak.

00:09:03.170 --> 00:09:09.260
Daha sonra kodu serbest bıraktığınızda, kodu taahhüt ettiğinizde, birleştirdiğinizde bazı tetikleyicilerde üç numara

00:09:09.260 --> 00:09:13.100
Kod, ne karar verirseniz verin, yapı otomatik olarak oluşturulur.

00:09:13.100 --> 00:09:16.700
Ve üçüncü adımda testin de yürütüleceği yer yer alır.

00:09:16.700 --> 00:09:21.980
Ve son olarak proje devreye alındığında ekip bilgilendirilir.

00:09:21.980 --> 00:09:29.660
Bu örnek akışta, bu anların her birinde, isteyen herkesin abone olabileceğini gördük.

00:09:29.660 --> 00:09:34.490
bu özellik dalının bununla birleştirildiğini belirten bir e-posta.

00:09:34.490 --> 00:09:39.020
Bu gerçekten benim uzmanlık alanım değil, bu yüzden oradaki hiçbir bildirimi dinlemeyeceğim.

00:09:39.020 --> 00:09:46.310
Ancak tüm geliştiriciler belki de bununla birleştirilen herhangi bir şey için sistem aracılığıyla bilgilendirilmek isteyeceklerdir.

00:09:46.310 --> 00:09:52.820
son ana veya ana dal ve CI CD sisteminin bu önemli adımlarda orada olması,

00:09:52.820 --> 00:09:58.700
ünitenizin testlerinin hepsinin başarılı olduğunu, hiçbirinin başarısız olmadığını ve projenizin başarıyla çalıştığını

00:09:58.700 --> 00:09:59.510
inşa eder.

00:09:59.510 --> 00:10:04.940
Testlerin tamamının geçebileceği, belki de yapının geçemeyeceği senaryoların olduğunu hayal edebilirsiniz.

00:10:04.940 --> 00:10:05.510
iş.

00:10:05.510 --> 00:10:12.080
Belki bozuk bir kod veya test kapsamı olmayan bozuk bir varlık vardır.

00:10:12.080 --> 00:10:12.530
henüz.

00:10:12.530 --> 00:10:18.470
Ve projenin inşa süreci sırasında hata vermesi gerçeği çok sağlam bir parça

00:10:18.470 --> 00:10:19.910
sahip olunması gereken hata ayıklama bilgileri.

00:10:19.940 --> 00:10:25.370
Ayrıca soruna neden olan saati, tarihi ve şubeyi de bileceksiniz, böylece nerede olduğuna odaklanmanıza yardımcı olacaksınız.

00:10:25.370 --> 00:10:27.320
Sorunun çözümü için nereye bakılacağı.

00:10:27.320 --> 00:10:29.900
Ve sonunda proje başarıyla uygulamaya konulacaktı.

00:10:29.900 --> 00:10:35.870
Projenin oluşturulduğunu bilmemiz açısından CI CD'sinin bizim için önemli olduğunu gördük, ancak bu

00:10:35.870 --> 00:10:38.900
özellikle birim testiyle güçlü birleşim.

00:10:38.900 --> 00:10:44.570
Yani sadece inşa etmekle kalmadı, aynı zamanda tüm geçen testlerle ve birim testlerinin bir özetiyle de inşa edildi, çünkü bu

00:10:44.570 --> 00:10:46.160
tüm dersin konusu.

00:10:46.190 --> 00:10:52.370
Projeniz daha fazla komut dosyası, sınıf ve yöntemle büyüdükçe, bunu sağlamak zorlaşır.

00:10:52.370 --> 00:10:56.360
kodunuzun bir bölümündeki değişiklik başka bir yerde işleri bozmaz.

00:10:56.390 --> 00:11:00.950
Otomatik test, kodunuzun beklendiği gibi çalışıp çalışmadığını kontrol etmenize yardımcı olur.

00:11:00.980 --> 00:11:07.130
Test yapmak, sorunların ne zaman ve nerede ortaya çıktığını anında tespit ederek size zaman kazandırır,

00:11:07.130 --> 00:11:14.240
Kullanıcıların manuel olarak test etmesini beklemek yerine, ne kadar geç bulursanız çok daha pahalı hale gelir

00:11:14.240 --> 00:11:14.930
bu hatalar.

00:11:14.930 --> 00:11:16.460
Yani sisteme sahip olmak oldukça iyi.

00:11:16.460 --> 00:11:21.400
Mantığa oldukça aykırı bir şeyin de 8020 kuralı olduğunu hatırlıyoruz.

00:11:21.410 --> 00:11:29.300
Zamanımızın %80'inde hataları düzeltmek ve mevcut kod tabanımızı korumak üzerinde çalışıyoruz ve

00:11:29.300 --> 00:11:33.740
Zamanımızın %20'si yeni özellikler ve yeni işlevler eklediğimiz yerdir.

00:11:33.770 --> 00:11:38.900
Çoğu zaman günümüzün çoğunun yeni özellikler eklemekle geçtiğini düşünüyoruz, bu yüzden bunu yerleştirmek istiyoruz.

00:11:38.900 --> 00:11:40.370
zihinsel enerjimiz.

00:11:40.370 --> 00:11:49.250
Ancak araştırmalardan şunu görüyoruz ki, iyi test birimi test uygulamalarına sahip olmak, iyi otomatikleştirilmiş testlere sahip olmak,

00:11:49.280 --> 00:11:56.210
CI CD sistemine sahip olmak, %80'inizin verimliliğini büyük ölçüde etkiler ve artırır.

00:11:56.210 --> 00:12:01.550
Yani iş akışınızdaki değişikliklerle en fazla etkiyi nerede yaratabileceğinize bakıyor.

00:12:01.550 --> 00:12:09.190
Ci CD'sinin kendisini yapmanın bir örneğine bakmadan önce, buradaki en basit sınıf türünü özetleyelim.

00:12:09.200 --> 00:12:14.180
Bazı toplama ve çıkarma işlemleri yapan bir matematik sistemimiz olduğunu hayal edin.

00:12:16.120 --> 00:12:23.620
Sonra burada ayrı bir dosya ve test niteliğini kullanan ayrı bir sınıf olan bir birim testimiz var.

00:12:23.620 --> 00:12:24.070
Burada.

00:12:24.100 --> 00:12:30.640
Bu, gördüğümüz son sınıfın bir örneğini yakalayacak, belirli bir birimi veya yöntemi test etmesini sağlayacak

00:12:30.640 --> 00:12:38.530
bu sisteme yönelik istenmeyen girdilere ve istenmeyen çıktılara karşı dikkatli olmak ve

00:12:38.530 --> 00:12:40.810
iddia edilen sonuç elde ettiğimiz sonuçtur.

00:12:40.840 --> 00:12:45.550
Şimdi, Unity Cloud Build durumunda, projenizde buna benzer testler ayarladığınızda ve

00:12:45.550 --> 00:12:52.120
projenin kendisini CI CD sisteminde yapılandırdınız, manuel olarak yapabilmeyi bekleyebilirsiniz

00:12:52.120 --> 00:12:57.700
veya bu durumda web tabanlı Unity Cloud Build'i ziyaret ederek bu yapıları otomatik olarak çalıştırın.

00:12:57.730 --> 00:12:58.420
alet.

00:12:58.450 --> 00:13:01.750
Yapının hedef platform için oluşturulduğunu gördünüz mü?

00:13:01.750 --> 00:13:04.780
Bu durumda Windows masaüstü 64 bit'i test ediyoruz.

00:13:04.810 --> 00:13:09.850
Düzenleme modu testlerinin tamamının, oynatma modu testlerinin tamamının geçtiğini görüyoruz.

00:13:09.880 --> 00:13:14.320
Karar verdiğiniz tetikleyiciye göre tüm bunlar sizin için otomatik olarak gerçekleşir.

00:13:14.320 --> 00:13:16.530
Yani bu fevkalade faydalı.

00:13:16.540 --> 00:13:20.230
Daha sonra ekipte ilgilenenler bir e-posta alabilir.

00:13:20.230 --> 00:13:26.080
Orada takımdan birinin bir derleme yaptığını gösteren küçük bir e-posta parçası var.

00:13:26.110 --> 00:13:30.610
Derleme tetiklendi çünkü bu şube o şubeyle veya her ne ise onunla birleştirildi.

00:13:30.640 --> 00:13:32.340
Ve işte sonuçlar.

00:13:32.350 --> 00:13:35.820
Bir web sayfasına tıklamanıza veya e-postada özetlemenize olanak sağlayabilirler.

00:13:35.830 --> 00:13:42.940
Şimdi bu CI CD konusunun yanı sıra birim testinin temelleri, bunların temelleri, ileri konular

00:13:42.940 --> 00:13:48.880
ayrıca saf işlevler hakkında konuşmak ve bazı ileri düzey konular için bireysel atölye çalışmaları düzenlemek gibi

00:13:48.880 --> 00:13:51.310
sahneler, prefabrik yapılar ve ayarlanabilir parçalar gibi.

00:13:51.310 --> 00:13:55.450
Bunların hepsi bu kursun bir parçası. Aşağıdaki bağlantıya göz atabilirsiniz.

00:13:55.450 --> 00:13:59.920
Henüz kursa katılmadıysanız fragmanlara göz atın.

00:13:59.920 --> 00:14:02.800
Kursa kaydolun ve öğrenmeye bugün başlayın.

00:14:02.800 --> 00:14:07.330
Zaten kursun öğrencisiyseniz ve bu videoyu kursun içinde buluyorsanız,

00:14:07.330 --> 00:14:11.260
Öğrenci olduğunuz için teşekkür ederim ve sizi gelecek derslerde de görmeyi sabırsızlıkla bekliyorum.

00:14:11.260 --> 00:14:17.620
Yani genel olarak burada görebildiğimiz şey, birim testinin başlı başına muazzam bir şey olduğudur.

00:14:17.620 --> 00:14:24.550
Harcadığınız geliştirme alanlarında daha fazla verimliliğe sahip olmanıza yardımcı olan güçlü bir araç

00:14:24.550 --> 00:14:25.850
çok zaman.

00:14:25.870 --> 00:14:33.160
Genel geliştirme çabalarının %80'inin mevcut sistemlerin bakımı ve hata ayıklaması olduğunu gördüğümüzü unutmayın.

00:14:33.160 --> 00:14:39.040
Bunun hayatımızın ne kadar büyük bir alanı olduğunun farkına vardığımız için, bunun gibi araçlara sahip olmamız harika.

00:14:39.040 --> 00:14:46.960
Unity Cloud Build gibi araçları veya diğer topluluk araçlarını içeren birlik Birim testi ve CI CD'si

00:14:46.960 --> 00:14:53.890
bize tüm bu avantajları sağlayın ve bu test sonuçlarının, derleme sonuçlarının ve

00:14:53.890 --> 00:14:56.200
yapıların teslimi.