WEBVTT

00:00:00.020 --> 00:00:02.750
Merhaba ve birlik için Birim testine hoş geldiniz.

00:00:02.780 --> 00:00:10.010
Burada sürekli entegrasyon ve sürekli entegrasyon yapmanın popüler bir yolu olarak Unity Cloud Build'den bahsedeceğiz.

00:00:10.010 --> 00:00:11.270
birlik ile dağıtım.

00:00:11.300 --> 00:00:17.480
Böylece birim testinin ve performans için otomatikleştirilmiş bir süreç kurmanın muazzam faydalarını gördük.

00:00:17.480 --> 00:00:18.620
bu birim testleri.

00:00:18.650 --> 00:00:23.640
Kullanabileceğiniz popüler seçeneklerden biri Unity'nin Bulut yapısıdır.

00:00:23.660 --> 00:00:25.820
Bu, birliğin kendisi tarafından sunulmaktadır.

00:00:25.850 --> 00:00:31.040
Ayrıca size göstermek üzere olduğum şeyin birçok üçüncü taraf veya topluluk temelli alternatifi de var.

00:00:31.070 --> 00:00:37.820
Çünkü bulut yapısı birliğe özgüdür, birlik tarafından oluşturulmuştur ve oldukça kolay çalışır.

00:00:37.820 --> 00:00:43.280
Burada buna odaklanacağım ancak burada gördüğünüz adımların çoğu birbirine çok benzer olacaktır.

00:00:43.280 --> 00:00:45.560
bazı rekabetçi araçların oluşturulmasında.

00:00:45.560 --> 00:00:49.100
Yani Unity Cloud Build, birlik oluşturma otomasyonu sunar.

00:00:49.100 --> 00:00:55.750
Kaliteli oyunlar yapmak, sık sık test edilmeye ve yayınlanmaya hazır bir CI CD hattına sahip olmak anlamına gelir.

00:00:55.760 --> 00:01:00.440
Derleme işlem hattınızı bulutta otomatikleştirin ve geliştirmenin birlik içinde ilerlemesini sağlayın.

00:01:00.440 --> 00:01:01.460
Otomasyon oluşturun.

00:01:01.460 --> 00:01:03.530
Bu videoda tüm süreci ele alacağız.

00:01:03.530 --> 00:01:07.880
Ancak Unity Cloud Build, hizmet olarak web tabanlı bir yazılımdır.

00:01:07.910 --> 00:01:12.710
Maliyeti var ama bugün kullanacağımız ücretsiz bir başlangıç ​​seviyesi var.

00:01:12.740 --> 00:01:17.870
Yapılacak çok fazla inşaatı olan ve binalarının bekleme süresini en aza indirmek isteyen şirketler

00:01:17.870 --> 00:01:23.480
Bu hizmet için ücretli katmanlar veya bir alternatif bulmak en uygunudur.

00:01:23.870 --> 00:01:27.350
Unity Cloud yapısını kullandığınızda web tabanlıdır.

00:01:27.350 --> 00:01:30.710
Bahsettiğim gibi, derleme geçmişini açıyorsunuz ve oluştur'a tıklıyorsunuz.

00:01:30.710 --> 00:01:36.350
Manuel olarak bir test yapmak istiyorsanız veya bu yapıları planlayabiliyorsanız, bunlara sahip olabilirsiniz, örneğin:

00:01:36.350 --> 00:01:42.260
yalnızca ana şubenizde olur, ancak her gece saat 1'de gerçekleşir ve otomatik olarak oluşturulur

00:01:42.260 --> 00:01:43.310
günde bir kez.

00:01:43.340 --> 00:01:45.190
Ayrıca bir tetikleyici de ayarlayabilirsiniz.

00:01:45.200 --> 00:01:52.220
Ayrıca tetikleyicileri belirli kriterlere göre otomatik olarak oluşturulacak şekilde de ayarlayabilirsiniz.

00:01:52.220 --> 00:01:56.540
kod bir daldan diğerine aktarılırsa, onu otomatik olarak çalıştırır.

00:01:56.540 --> 00:01:57.920
Yani orada bazı seçenekleriniz var.

00:01:57.920 --> 00:02:02.570
Ve bu yapıyı manuel veya otomatik olarak başlattığınızda, siz ve ekibinizin tüm üyeleri

00:02:02.570 --> 00:02:08.300
isteyen ekip başarılı derlemeleri, başarısız derlemeleri veya hangi seviye olursa olsun onaylayan bir e-posta alacaktır.

00:02:08.300 --> 00:02:09.200
istediğiniz bilgi.

00:02:09.230 --> 00:02:10.940
Bunun bir demosunu çalışırken görelim.

00:02:10.940 --> 00:02:17.180
Şimdi zaten bir proje hazırladım ve Unity ile iyi çalışıp çalışmadığını test ettim.

00:02:17.180 --> 00:02:17.600
Bulut.

00:02:17.600 --> 00:02:19.310
Bunu inşa et ve bitir.

00:02:19.310 --> 00:02:22.550
Sistemin nasıl çalıştığını anlayabilmem için bu çalışmaların bir kısmını yaptım.

00:02:22.550 --> 00:02:25.990
Ayrıca bu sunumda gördüğümüz bazı ekran görüntülerini de almak için.

00:02:26.000 --> 00:02:32.750
Ancak yapacağım şey süreci sıfırdan başlatmak, böylece ilgili her adımı görebilirsiniz.

00:02:32.780 --> 00:02:38.150
Şimdi projeyi kendim yaratmayacağım ama bunun üzerine tüm otomasyonu yapacağım.

00:02:38.150 --> 00:02:44.780
İşte birim testlerin ve tüm farklı örnek sahnelerin eklendiği birlik projemiz.

00:02:44.780 --> 00:02:49.760
Bu kursa ait tek projedir ve kurs kaynakları bölümünde bağlantısı verilmiştir.

00:02:49.760 --> 00:02:55.460
Sayfanın gerçekten hazır olduğunu doğrulamak için burayı GitHub'da bulabiliriz.

00:02:55.460 --> 00:02:57.170
Ve onu birlik içinde açacağım.

00:02:57.170 --> 00:02:59.390
İşte birlik içindeki projedeyiz.

00:02:59.420 --> 00:03:01.430
Burada Inspector'da görebiliriz.

00:03:01.430 --> 00:03:07.070
Görmeye başlamak için projenin farklı alanlarına tıklayabileceğimiz bazı bağlantılarımız var

00:03:07.070 --> 00:03:12.290
bazı örneklerin yanı sıra kursa ve örnek proje bağlantısına tıklayarak ulaşabilirsiniz.

00:03:12.380 --> 00:03:15.830
Ayrıca tüm birim testlerinin test çalıştırıcısının içinde geçtiğini de test edebiliriz.

00:03:15.830 --> 00:03:16.850
Hadi bunu yapalım.

00:03:19.000 --> 00:03:21.610
148 testin tamamının geçtiğini görebilirsiniz.

00:03:21.760 --> 00:03:27.340
Yapmak istediğim başka bir şey de derleme ayarlarına gitmek ve eğer zaten orada değilse,

00:03:27.340 --> 00:03:33.280
buna eklemek için bu sahneyi Cloud Build için Oluşturma Ayarlarında tutun; bunu taahhüt edeceğimden emin olacağım

00:03:33.280 --> 00:03:34.030
depoya.

00:03:34.060 --> 00:03:37.900
Artık bu oluşturma süreçlerinin her biri oldukça farklı çalışıyor.

00:03:37.930 --> 00:03:45.670
Unity Cloud Build, geçici bir yapı olarak kabul edilebilmesi için en az bir sahne oluşturmak istiyor

00:03:45.670 --> 00:03:46.660
işlem.

00:03:46.660 --> 00:03:49.060
İşte bu yüzden orada bir sahneye ihtiyaç var.

00:03:49.060 --> 00:03:52.540
Ve o sahne oldukça basit, oldukça boş.

00:03:52.570 --> 00:03:56.530
Sadece çok az işlevselliği test etmek için oradadır.

00:03:56.560 --> 00:04:02.410
İsterseniz daha kapsamlı bir sahneniz de olabilir ve yapılacak tek test bu olsun.

00:04:02.410 --> 00:04:08.620
ancak düzenleme modunda ve oynatma modundaki birim test kapsamımın bunu benim için yaptığını varsayıyorum.

00:04:08.620 --> 00:04:12.410
Yani oraya sürüklediğim oldukça boş bir test sahnem var.

00:04:12.430 --> 00:04:14.550
Burada Birlik Merkezinin açıldığını görüyoruz.

00:04:14.560 --> 00:04:19.780
Genellikle oturum açarız, ancak yepyeni bir hesap oluşturabilmek için bilerek oturumu kapattım.

00:04:19.810 --> 00:04:24.550
Zaten birlik içinde kullanmak üzere bir hesap oluşturduysanız bu adımı atlayabilirsiniz.

00:04:24.550 --> 00:04:26.310
Sadece tamamlanmış olduğunu gösteriyorum.

00:04:26.320 --> 00:04:30.820
Burada yapmanız gereken benzersiz bir şey yok, özellikle de henüz bulut oluşturma.

00:04:30.910 --> 00:04:33.690
Yani burada yapacağım şey bir hesap oluşturmak olacak.

00:04:33.700 --> 00:04:40.000
Daha sonra en temel kurulum tamamlandıktan sonra Cloud birlik.com'a gideceğim.

00:04:40.000 --> 00:04:43.240
Ve burası bazı ek yapılandırmalar yapmam gereken yer.

00:04:43.240 --> 00:04:47.500
Böylece GitHub'da gösterdiğim projem otomatik olarak oluşturuldu.

00:04:47.950 --> 00:04:51.970
Şimdi bu adımları zaten yaptım, ancak hepsini görebilmemiz için bunları sıfırdan tekrar yapacağım

00:04:51.970 --> 00:04:52.300
Burada.

00:04:52.300 --> 00:04:57.990
Bu yüzden kenar çubuğundaki projelere gideceğim ve ardından yeni bir proje almak için yeni'ye tıklayacağım.

00:04:58.000 --> 00:05:06.010
Bu birim testini birlik iki olarak adlandıracağım çünkü zaten kullandığım bir tane var.

00:05:06.040 --> 00:05:08.520
Bu, 13 yaşın altındaki çocukları hedef alacak mı?

00:05:08.530 --> 00:05:09.520
Hayır, olmayacak.

00:05:14.670 --> 00:05:15.480
Tamam aşkım.

00:05:15.720 --> 00:05:17.290
Şimdi bu ayrıntılardan bazılarına bakalım.

00:05:17.310 --> 00:05:25.470
Proje adımız var, proje kimliğimiz var, uygulama içi satın almalar için Google lisans anahtarımız yok

00:05:25.470 --> 00:05:26.060
henüz.

00:05:26.070 --> 00:05:32.730
Gördüğümüz bu kontrol paneli, Unity'nin hizmetlerinden sunduğu her türlü farklı özelliği sunuyor.

00:05:32.760 --> 00:05:34.950
Burada öyle şeyler yapmamıza gerek yok.

00:05:35.040 --> 00:05:35.310
Elbette.

00:05:35.340 --> 00:05:38.460
Artık proje oluşturulduğuna göre burada geliştirme operasyonlarına gideceğiz.

00:05:41.900 --> 00:05:44.420
Yapabileceğimiz şeylerden biri otomasyon oluşturmaktır.

00:05:44.420 --> 00:05:46.640
Yapı otomasyonu ayarlarına gideceğiz.

00:05:46.760 --> 00:05:49.790
İşte burada derleme otomasyonu ayarlarıyla karşınızdayız.

00:05:49.910 --> 00:05:52.760
Burada bazı genel bilgileri görebiliriz.

00:06:00.250 --> 00:06:00.760
Evet.

00:06:01.480 --> 00:06:03.370
Kaynak kontrolüne gideceğim.

00:06:05.470 --> 00:06:09.010
Kaynak kontrolünde açılır menü var, Git Hub'ı seçebiliriz.

00:06:09.140 --> 00:06:09.430
Tamam aşkım.

00:06:09.460 --> 00:06:13.660
Bu bize git'ten kişisel bir erişim jetonuna ihtiyacımız olduğunu söylüyor.

00:06:13.690 --> 00:06:14.020
Tamam aşkım.

00:06:14.020 --> 00:06:19.490
Yapmamız gereken buradaki Unity Cloud fatura hesabımızı GitHub hesabımıza bağlamak.

00:06:19.510 --> 00:06:26.950
Bu şekilde oluşturma süreci kodumuzun nerede yaşadığını bilir ve belirli olayları dinleyebilir, örneğin

00:06:26.950 --> 00:06:32.480
Unity Cloud derlemesine izin vermek için kod güncellendiğinde veya birleştirildiğinde vb.

00:06:32.500 --> 00:06:38.220
Buradaki ayarlara gideceğiz ve GitHub'ımızdan kişisel bir erişim belirteci alacağız.

00:06:38.230 --> 00:06:42.180
Yani bu, GitHub kişisel erişim belirtecinizi oluşturup sağladığını söylüyor.

00:06:42.190 --> 00:06:46.960
Repo okuma kuruluşu kapsamını seçmeniz gerekir.

00:06:50.800 --> 00:06:55.330
Yani reponun olduğu yer için bir GitHub hesabına ihtiyacınız olacak.

00:06:55.360 --> 00:06:57.760
Burada kurduğum repo olmasına gerek yok.

00:06:57.760 --> 00:07:02.590
Bunu kendi başınıza çalıştırabilirsiniz, ancak kişisel erişim jetonunu almak için bu önemli bir şeydir.

00:07:02.590 --> 00:07:04.270
hesabınıza özel.

00:07:04.300 --> 00:07:06.910
Burada eğitmen olarak benimle hiçbir ilgisi yok.

00:07:07.030 --> 00:07:12.010
Böylece buradan profile gidebilir ve ayarlara inebiliriz.

00:07:16.450 --> 00:07:20.320
Daha sonra burada, yan tarafta Geliştirici Ayarlarına gidiyoruz.

00:07:30.250 --> 00:07:33.580
Daha sonra kişisel erişim belirteçleri altında klasike gidebiliriz.

00:07:35.260 --> 00:07:38.000
Yakın zamanda oluşturduğum bir tane var zaten orada.

00:07:38.020 --> 00:07:42.130
Bu proje okuma org ve repo'dur.

00:07:42.460 --> 00:07:45.460
Yeni bir jeton oluşturacağım ve buna bir isim vereceğim.

00:07:45.460 --> 00:07:51.040
Unity Cloud derleme belirteci olacak.

00:07:54.200 --> 00:07:56.480
Son kullanma tarihi vermeyeceğim.

00:07:56.480 --> 00:07:58.910
Yani burada repo'yu seçeceğim.

00:07:59.120 --> 00:08:03.860
Bu ayarlardan birkaçında oku, oku ve oku seçeceğim.

00:08:04.760 --> 00:08:07.250
Bunların hepsi gerekli olmayabilir.

00:08:07.250 --> 00:08:08.450
Belki daha azını yapabilirsin.

00:08:08.450 --> 00:08:09.530
Ama bunu yapacağım.

00:08:13.200 --> 00:08:13.530
Tamam aşkım.

00:08:13.560 --> 00:08:15.780
Daha sonra değeri oradan kopyalıyoruz.

00:08:22.760 --> 00:08:25.490
Değeri yapıştırıyoruz ve yetkilendiriyoruz.

00:08:32.850 --> 00:08:33.750
Birimi seç.

00:08:33.750 --> 00:08:35.040
Birlik testi.

00:08:36.210 --> 00:08:38.670
Şimdi buradaki konfigürasyonlara bakalım.

00:08:40.080 --> 00:08:47.070
Hızlı bir hedef kurulumu yapacağız ve Windows 64'ü seçeceğiz.

00:08:47.580 --> 00:08:55.290
Şimdi, son projeniz Android, iOS gibi belirli hedef cihazların kullanıcıları tarafından oynatılıyorsa,

00:08:55.320 --> 00:08:59.520
vesaire, erkenden bunların hepsi için derlemeler yapmak isteyebilirsiniz.

00:08:59.550 --> 00:09:02.850
Burada seçebileceğimiz birçok farklı şeyin olduğunu görebiliriz.

00:09:02.880 --> 00:09:08.760
Tipik olarak, bir Windows derlemesinin bir Windows makinesinde çalışmasını sağlamada en az sürtünme vardır, bu nedenle

00:09:08.760 --> 00:09:09.930
Sadece bunu seçiyorum.

00:09:16.830 --> 00:09:17.160
Burada.

00:09:17.160 --> 00:09:19.260
Kurmak istediğimiz şubeyi seçeceğiz.

00:09:19.290 --> 00:09:22.350
Şimdi burada proje alt klasör yolunu görüyoruz.

00:09:22.350 --> 00:09:23.550
Ve bu isteğe bağlıdır.

00:09:23.550 --> 00:09:30.030
Ancak varlıklarınız ve proje ayarlarınız deponuzun kök klasöründe değilse şunu öneririz diyor:

00:09:30.030 --> 00:09:31.740
klasör yolunu girme.

00:09:31.770 --> 00:09:34.230
Burada projeme bir göz atalım.

00:09:34.260 --> 00:09:43.380
Şimdi repo burada ve benim kongrem şu ki, birlik projem her zaman bir repo eğik çizgi birlik eğik çizgi altında

00:09:43.410 --> 00:09:44.750
örneğin varlıklar.

00:09:44.760 --> 00:09:49.200
Daha büyük projelerde bu ayrımın orada olmasının her zaman yararlı olduğunu görüyorum.

00:09:49.200 --> 00:09:53.070
Peki her ölçekteki tüm projelere bu şekilde mi başlayacağım?

00:09:53.160 --> 00:09:58.660
Bu birlik klasörünün içinde tanıdık varlıkları, paketleri ve proje ayarlarını görebiliriz.

00:09:58.680 --> 00:10:02.040
Artık bu üç klasör hemen kök dizinizde.

00:10:02.070 --> 00:10:07.860
Herhangi bir özel yapılandırmaya ihtiyacınız yoktur, ancak bu üç klasör kök dizinizde değilse o zaman

00:10:07.860 --> 00:10:10.500
Bunların tam olarak nereden geldiğini ele almamız gerekiyor.

00:10:12.180 --> 00:10:15.570
Yani benim durumumda bu sadece birlik eğik çizgisidir.

00:10:16.780 --> 00:10:19.140
O zaman birlik versiyonundan bahsedebiliriz.

00:10:19.150 --> 00:10:26.290
Şimdi, birlik versiyonunun otomatik olarak tespit edilmesinin muhtemelen iyi bir fikir olduğunu düşünüyorum.

00:10:26.290 --> 00:10:31.250
depoya aktarılan en son sürüme dayalı bir sürüm.

00:10:31.270 --> 00:10:37.720
Ancak, yönlendirmem nedeniyle bunun benim için işe yaramayacağından şüpheleniyorum, bu yüzden otomatik algılamayı açacağım

00:10:37.750 --> 00:10:38.560
kapalı.

00:10:39.530 --> 00:10:48.530
Ve her zaman en son 2022'yi kullan diyeceğim çünkü projem bunun üzerine inşa ediliyor ve bunu kullanacağım

00:10:48.530 --> 00:10:50.900
burada bir Windows sunucusu kullanın.

00:10:51.870 --> 00:10:57.570
iOS veya Android için herhangi bir derleme yapmıyorum, dolayısıyla ek yapılandırmanın avantajlarından yararlanmama gerek yok

00:10:57.570 --> 00:10:57.930
Orası.

00:10:57.930 --> 00:11:00.690
Ancak iOS öğeleri için Xcode sürümü burada.

00:11:00.690 --> 00:11:04.170
Örneğin, yapılandırma yaparken bu tür şeylerin çoğunu atlayabilirsiniz.

00:11:05.060 --> 00:11:10.720
Artık derleme yapılandırmasına devam ederken az çok güçlü bir bilgisayar seçmeme olanak tanıyor.

00:11:10.730 --> 00:11:14.060
Burada herhangi bir ücretli yapı yapmayı düşünmüyorum.

00:11:14.090 --> 00:11:18.590
Bu gerçek bir kullanım durumu için tasarlanmamıştır, bu yüzden bunun hakkında çok fazla düşünmeyeceğim.

00:11:18.590 --> 00:11:24.440
Yalnızca uygun olan ücretsiz katmanı kullanacağım, ardından burada bahsettiğim ekran görüntülerimden birini seçebilirim.

00:11:24.440 --> 00:11:29.300
Tekrarlanan bir derleme zamanlamasını otomatik olarak oluşturun veya yapılandırın.

00:11:30.300 --> 00:11:30.820
Mhm.

00:11:31.200 --> 00:11:35.880
Diyelim ki deponuz güncellendiğinde otomatik olarak derleme yapmak istedim.

00:11:37.090 --> 00:11:39.300
Daha sonra bu konfigürasyonu kaydedeceğiz.

00:11:45.430 --> 00:11:47.230
Tamam, bunu orada bulduk.

00:11:50.480 --> 00:11:55.580
Şimdi yapı otomasyonunun ayarlarına devam ederek, önbelleğe alma altında şunları yapabileceğimizi görebiliriz:

00:11:55.580 --> 00:11:56.660
önbelleğe almayın.

00:11:57.290 --> 00:12:01.280
Yalnızca kütüphaneyi önbelleğe alın veya tüm projeyi önbelleğe alın.

00:12:01.430 --> 00:12:09.890
Önbellek kullanmamayı seçersek her derleme daha fazla zaman alır ancak hata olasılığı daha az olur

00:12:09.890 --> 00:12:13.230
çünkü eski önbellek dosyalarını kullanmıyor.

00:12:13.250 --> 00:12:20.750
Yalnızca kütüphane dizinini önbelleğe alırsam, o zaman ilk yapıdan hiçbir şekilde yararlanılmayacaktır çünkü ilk derleme odur.

00:12:20.750 --> 00:12:27.800
projeyi oluşturmanız ve önbelleğe almanız gerekir, ancak bundan sonra oluşturulan her proje, olduğundan daha hızlı olacaktır.

00:12:27.800 --> 00:12:32.900
ilki çünkü bunu her seferinde yeniden inşa etmeye gerek yok.

00:12:33.020 --> 00:12:39.260
Bunu yapmanın tehlikelerinden biri, potansiyel olarak bazı eski dosyaları kullanması ve

00:12:39.260 --> 00:12:44.240
kötü sonuç, ancak genel olarak bu riski mümkün olduğunca anlıyoruz.

00:12:44.240 --> 00:12:47.660
Ve benim yaklaşımım kütüphane dizinini önbelleğe almak olacaktır.

00:12:47.660 --> 00:12:57.230
Ve eğer projenin neden inşa edilemediğinden veya yerelinizde testlerin neden geçtiğinden emin değilseniz

00:12:57.230 --> 00:13:01.520
birlik editörü, ancak bulut yapısından geçmiyorlar, o zaman belki önbelleği kapatırdım

00:13:01.520 --> 00:13:02.720
bu durum.

00:13:03.390 --> 00:13:04.890
Yani burada sadece nakit kullanacağım.

00:13:04.890 --> 00:13:05.640
Kütüphane.

00:13:09.610 --> 00:13:11.500
Sonra burada yapı tüketimi altında.

00:13:11.500 --> 00:13:16.490
Bu yapılar potansiyel olarak kullandıkça öde senaryosunun bir parçası olduğundan.

00:13:16.510 --> 00:13:18.130
Bu bilgilere bir göz atın.

00:13:18.160 --> 00:13:24.250
Size gerçek dünyadan biraz tasarruf etmek için yapılarınızın ne kadar hızlı inşa edilebileceğine dair her türlü sınırlamayı eklemek istiyorsunuz

00:13:24.250 --> 00:13:24.700
para.

00:13:24.730 --> 00:13:30.220
Burada yapı konfigürasyonlarında test etmek için bakmak istediğimiz bazı seçeneklerin olduğunu görebiliriz.

00:13:30.400 --> 00:13:34.210
Yani eğer buraya kaydırırsam derleme çıktısını görürüz.

00:13:34.240 --> 00:13:44.080
Daha önce gördüğümüz önbellekleme bölümünü, bazı özel bağımlılık ayarlarını, komut dosyası kancalarını ve

00:13:44.080 --> 00:13:44.620
Daha.

00:13:45.130 --> 00:13:50.110
İhtiyaçlarımız için buraya ulaşmak istediğimiz önemli şey testlerin yapılmasıdır.

00:13:50.110 --> 00:13:54.310
Düzenleme modu testlerini ve oynatma modu testini gerçekleştireceğiz.

00:13:54.340 --> 00:14:01.840
Test başarısız olursa derlemeyi başarısız olarak işaretlemek isteriz, böylece yalnızca kodu iletir ve teslim ederiz.

00:14:01.840 --> 00:14:03.820
tüm testlerimizden geçmiştir.

00:14:04.000 --> 00:14:08.080
Başarısız olduğu bilinen bir testinizin olduğu bir durumla karşılaşabilirsiniz.

00:14:08.080 --> 00:14:11.020
Neden başarısız olduğunu biliyorsunuz ve düzeltmeyi planlıyorsunuz.

00:14:11.020 --> 00:14:17.590
Dolayısıyla, o anlarda tüm yapının başarısız olmasını değil, başarısız testlere sahip olmayı seçebilirsiniz.

00:14:17.590 --> 00:14:21.160
Yani konfigürasyonunuzun bu şekilde görünmesi muhtemelen en iyisidir.

00:14:21.190 --> 00:14:28.420
Artık buradaki Derleme geçmişi sayfasına gittiğimde, yerel olarak derleme yapmama ve derlemeyi buraya yüklememe olanak tanıyor

00:14:28.420 --> 00:14:36.040
böylece onu dağıtabilir veya sürekli geliştirmeyi veya dağıtımı devralabilirsiniz.

00:14:36.550 --> 00:14:42.040
Veya derlemeyi burada otomatik olarak yapabilirsiniz, bence bu muhtemelen kullanım durumudur.

00:14:42.040 --> 00:14:48.100
Bu yüzden, ana dal güncellendiğinde otomatik olarak oluşturmayı seçtiğimi unutmayın.

00:14:48.100 --> 00:14:49.840
Yani bu otomatik olarak gerçekleşecektir.

00:14:49.840 --> 00:14:56.530
Herhangi bir değişiklikten bağımsız olarak her gece saat 1'de otomatik bir derleme yapabilirdim.

00:14:56.560 --> 00:14:57.640
Bunu her zaman yapabilirsin.

00:14:57.640 --> 00:14:59.410
O halde şimdi devam edelim ve bir yapı oluşturalım.

00:15:19.390 --> 00:15:24.040
Ve burada başarılı bir yapının sonuçlarını görebiliriz.

00:15:24.070 --> 00:15:27.840
Artık genellikle e-posta yoluyla bildirim alırsınız.

00:15:27.850 --> 00:15:30.610
Burada bunu yapabileceğiniz yapılandırma ayarları var.

00:15:30.610 --> 00:15:35.890
Böylece derleme sunucusunun ne yaptığını gerçekten düşünmeden gününüze devam edebilirsiniz.

00:15:35.890 --> 00:15:42.130
Ve yalnızca başarısız bir testi veya başarısız bir derlemeyi onaylayan bir e-posta aldığınızda tepki verirsiniz.

00:15:42.880 --> 00:15:48.010
Belirli bir hafta boyunca gelen trafiğin çoğunun bu bildirimden gelmesini beklersiniz

00:15:48.010 --> 00:15:52.390
sistem evet, başka bir yapının çalıştığını ve iyi çalıştığını doğruluyor.

00:15:54.760 --> 00:15:59.830
Yani sadece buraya kaydırarak tüm günlüğün genel bir görünümünü görebiliriz, bu da faydalı olacaktır.

00:15:59.830 --> 00:16:01.060
bazı sorunlarınız varsa.

00:16:01.060 --> 00:16:06.880
Yalnızca en alakalı hataları gösterecek olan kompakt günlükte hata ayıklamanız gerekir.

00:16:07.990 --> 00:16:09.610
Ve daha fazla bilgi de var.

00:16:09.610 --> 00:16:15.550
Nasıl gittiğine dair birçok farklı rapor görebilirsiniz ve ardından testlerle ilgili olarak hangilerinin olduğunu görebilirsiniz.

00:16:15.550 --> 00:16:21.520
testler geçti ve eğer geçemeyenler varsa, derinlemesine araştırıp bunların nasıl çalıştırılacağını anlayabilirsiniz.

00:16:21.520 --> 00:16:29.620
Başarısız bir bildirim görürseniz bir iş akışı açmak için zaman planlamak isterim

00:16:29.620 --> 00:16:32.140
projenin özel yapısı.

00:16:32.140 --> 00:16:36.330
Sürüm kontrolünün neresinde olursa olsun, orada duruyor, belki bazı kodları bir araya getiriyor.

00:16:36.340 --> 00:16:42.370
Bunu yerel olarak açardım ve ardından testi birliğin içinden çalıştırırdım, hata ayıklayabilirdim

00:16:42.370 --> 00:16:42.790
onlara.

00:16:43.270 --> 00:16:49.930
Projenizin bulut yapısını otomatikleştirmek için Unity Cloud Build'i kurmanız da bu kadar

00:16:49.960 --> 00:16:56.170
belirli olaylar tarafından tetiklenen düzenli bir programa göre veya bunu kontrol panelinde manuel olarak yaparak.

00:16:56.170 --> 00:17:01.780
Tüm bu senaryolarda, geçmişteki tüm yapılarımızın güzel bir geçmişini elde ederiz.

00:17:01.780 --> 00:17:08.500
Bu otomatik sistemi kurarak, umarım çoğunlukla başarılı mesajlar karşınıza çıkar,

00:17:08.530 --> 00:17:14.740
size kod tabanının ne zaman ve nerede bozulduğuna dair yeterli bilgiyi verir, böylece içeri girip şunları yapabilirsiniz:

00:17:14.740 --> 00:17:16.060
sorunları düzeltin.

00:17:16.150 --> 00:17:18.310
Unity Cloud Build'i kurmak için bu kadar.

00:17:18.310 --> 00:17:19.060
Teşekkürler.