WEBVTT

00:00.290 --> 00:04.310
Hello and welcome to the unit Testing for Unity Workshop Series.

00:04.460 --> 00:06.770
Here we're going to be looking at prefabs.

00:06.800 --> 00:10.940
Now up until this moment in the course we have not tested prefabs.

00:10.970 --> 00:16.460
In the moments where I did want to test some monobehaviours, I created them from scratch using code

00:16.460 --> 00:18.080
as shown in the previous videos.

00:18.080 --> 00:24.440
But of course, a major fundamental building block in unity game development is the prefab.

00:24.680 --> 00:32.300
Prefabs allow you to gather together various assets and functionality, put them in your project, and

00:32.300 --> 00:38.020
easily reuse them either by dragging them into the scene so you save them in the scene and they're there,

00:38.030 --> 00:40.690
or by dynamically creating them with code.

00:40.700 --> 00:43.040
Now, why would we want to test these prefabs?

00:43.040 --> 00:48.800
Well, in a very light form, imagine that your game uses a character prefab in an enemy prefab, perhaps

00:48.800 --> 00:49.900
multiple of each.

00:49.910 --> 00:58.280
You can have a unit test that creates just the player and validates that it doesn't throw any exceptions,

00:58.400 --> 01:04.970
just that alone gives you a little bit more confidence that the asset works well over time.

01:04.970 --> 01:10.670
And as you're collaborating with different non-programming talent, including level designers and artists,

01:10.700 --> 01:14.030
you know that those prefabs have not accidentally been broken.

01:14.030 --> 01:17.870
You can make some assumptions on the structure by using a test.

01:17.870 --> 01:22.760
You can make assumptions on the serialized fields and check that they're properly populated, and you

01:22.760 --> 01:25.400
can make assumptions on behavior of course, as well.

01:25.400 --> 01:31.160
In the earlier character example, which did not use prefabs, I had a character script and I would

01:31.160 --> 01:36.770
check to make sure that it could move properly around the world when I call it move by or move to functionality.

01:36.770 --> 01:43.730
As you create complex prefabs with dependencies, you'd be able to call functionality on those prefabs

01:43.730 --> 01:44.300
as well.

01:44.300 --> 01:47.990
Now, tests can cover a small unit of code.

01:48.140 --> 01:54.680
In the ideal world you have few lines and maybe no dependencies all the way up to a more complex system,

01:54.680 --> 01:59.810
which if you know what you're doing when you're doing your unit testing, you can faithfully have a

01:59.810 --> 02:06.200
test that executes over some dependencies as well, and gives you some assurance that those systems

02:06.200 --> 02:07.490
are working well together.

02:07.520 --> 02:14.120
A prefab is indeed probably your more complex on the end of that spectrum, and you're going to be testing

02:14.120 --> 02:14.270
that.

02:14.270 --> 02:21.560
The prefab can make use of its own custom components as well as unity components like rigidbody.

02:21.560 --> 02:26.750
So be aware as you're setting these tests up that you're not testing too large of a system.

02:26.750 --> 02:34.160
If, for example, your hero character is using rigid body and a custom flying component, you may want

02:34.160 --> 02:38.060
to test the custom flying component separately in its own unit test.

02:38.060 --> 02:42.980
Remember, there's always benefits to being able to break down and have less dependencies in your unit

02:42.980 --> 02:43.460
testing.

02:43.460 --> 02:49.550
But that said, we can indeed create a test that runs on an entire prefab, including its dependencies

02:49.550 --> 02:50.240
if we see fit.

02:50.240 --> 02:52.370
Let's take a look at an example of this in the code.

02:52.940 --> 02:54.640
Here we are inside unity.

02:54.650 --> 02:59.720
If I look at the test runner window here in the category, I have it set already to prefab.

02:59.720 --> 03:05.510
And down here in this folder we're able to see that there's a prefab example.

03:05.510 --> 03:10.520
Let's go ahead and open up the scene and just take a look at that scene running I'll go ahead and run

03:10.520 --> 03:10.850
it.

03:13.540 --> 03:18.130
So when I run that scene, a ball falls down with physics and slides along the floor.

03:18.160 --> 03:21.420
It's not that particular behavior that we're interested in.

03:21.430 --> 03:27.760
I just wanted to put an enemy prefab in the scene, see it exist in the production code here.

03:27.760 --> 03:34.750
Simulating this would be your larger game menu, settings, scene, whatever it is, and having some

03:34.750 --> 03:39.730
dependency on one or more mono behaviors on a on a prefab.

03:39.940 --> 03:43.340
So with that set up, let's take a look at how we would go about testing it.

03:43.360 --> 03:49.480
Now in this scene I have a editor test and also a runtime test.

03:49.480 --> 03:55.450
But since this is testing more unity behavior and we've seen that mono behaviors, for example, are

03:55.450 --> 03:57.400
something you want to test only at runtime.

03:57.400 --> 03:59.470
Let's focus just on the play mode test here.

03:59.470 --> 04:00.820
So I'm going to uncheck that one.

04:01.600 --> 04:06.820
And here I've got a few different things we can do when this play mode test run, I check that the enemy

04:06.820 --> 04:08.380
itself is not null.

04:08.410 --> 04:10.420
That's the amount of behavior script.

04:10.450 --> 04:16.330
Then I test that the game object it's sitting on is not null, and we would generally assume that if

04:16.330 --> 04:18.460
the enemy exists, the game object does as well.

04:18.460 --> 04:20.740
But this is just a further test on that.

04:20.740 --> 04:23.410
And then finally we can check that the rigid body is not null.

04:23.410 --> 04:27.670
So here we're checking mostly the structure of what we've got there.

04:27.670 --> 04:33.940
But you could also check serialized fields, initialized public values, some of the behavior functionality

04:33.940 --> 04:35.230
by calling methods on it.

04:35.230 --> 04:36.430
You can do that on your own.

04:36.430 --> 04:41.350
Expand what you see here and add your own testing functionality on top of new production code.

04:41.380 --> 04:44.200
Get your feet wet with that and see how it goes for you.

04:44.230 --> 04:46.120
Let's take a look at the source code here.

04:46.270 --> 04:47.620
Here's the play mode test.

04:47.620 --> 04:52.090
I'll take a look at those three tests, and then talk about the setup that's needed specifically for

04:52.090 --> 04:52.900
prefabs.

04:52.900 --> 04:55.270
So here we've got a very simple test.

04:55.300 --> 04:58.960
We have the arrange, act and assert paradigm that we're used to seeing.

04:58.960 --> 05:03.070
Notice that the arrange and act are suspiciously missing here.

05:03.070 --> 05:06.820
And all I'm doing is checking that the enemy is not null.

05:06.820 --> 05:10.210
In the next test that enemy game object is not null.

05:10.210 --> 05:13.240
And finally, that enemy rigidbody is not null.

05:13.270 --> 05:14.620
In the case of the rigid body.

05:14.620 --> 05:20.830
That's a public field that I've created and it's serialized, and I assume a properly set up prefab

05:20.830 --> 05:25.150
of that would already have that serialized field declared and populated.

05:25.150 --> 05:26.560
So it all passes.

05:26.560 --> 05:27.760
So everything's going good.

05:27.760 --> 05:29.800
Now, how do we get the prefab here?

05:29.800 --> 05:31.900
Notice that we're using play mode testing.

05:31.900 --> 05:37.840
As we've seen a play mode test runs in its own dynamically created empty scene.

05:37.840 --> 05:41.680
So anything that we want to do on that, we have to manually set up ourselves.

05:41.680 --> 05:46.000
So we're going to take advantage of the text fixture and some of the things we can do with the test

05:46.000 --> 05:46.300
fixture.

05:46.300 --> 05:53.230
So one of the things we can do up here is we're going to set up a reference to how long to delay allowing

05:53.230 --> 05:57.340
the prefab to be instantiated, the path to the enemy prefab itself.

05:57.340 --> 05:59.710
Notice the path there begins with assets.

05:59.710 --> 06:01.300
That's going to be important in a second.

06:01.300 --> 06:03.520
And then I have a reference to the private enemy.

06:03.550 --> 06:09.010
Now, in addition to the test attribute that we've used quite a bit, there's a setup attribute that

06:09.010 --> 06:11.860
will run once before every test method.

06:11.860 --> 06:19.570
So here what we want to do before every test method is we simply load that asset at the path we.

06:20.380 --> 06:26.560
Get a reference to the enemy sitting on that game object once we instantiate it, and then we wait a

06:26.590 --> 06:31.450
three seconds or some arbitrary amount of time, actually realize that it doesn't need three seconds.

06:31.450 --> 06:33.250
It probably needs one frame.

06:33.250 --> 06:35.590
So you could experiment with what you do there.

06:35.890 --> 06:38.800
I just wait up to, I think, a half a second here.

06:38.830 --> 06:44.260
The reason we need that is that I've seen that when you do game object dot instantiate, you need to

06:44.260 --> 06:50.080
wait an entire frame for the awake to be called and the start to be called on that game object.

06:50.080 --> 06:55.420
So depending what you're doing in that awake and that start in your monobehaviour, you may need to

06:55.420 --> 06:56.800
wait a little bit longer.

06:56.800 --> 07:03.550
I would guess waiting 2 or 3 frames across all the board on all your situations would probably be enough.

07:03.550 --> 07:08.230
But here I'm just doing a half a second and you can fool around with that and see if it meets your needs.

07:08.230 --> 07:10.300
Then down here I use the Teradyne attribute.

07:10.300 --> 07:13.840
This is called once after each of the test methods.

07:13.840 --> 07:15.970
So in the setup we create the prefab.

07:16.000 --> 07:17.200
Then the test gets run.

07:17.200 --> 07:19.630
And in the teardown what I do is clean it up.

07:19.630 --> 07:26.470
Now you could also as an alternative you could do the setup and the teardown equivalents within every

07:26.470 --> 07:27.400
single test.

07:27.400 --> 07:29.050
If you wanted to do that, you could.

07:29.080 --> 07:33.190
But I'm taking advantage of being able to reuse some existing methods here.

07:33.190 --> 07:36.520
So I only declare the setup once and the teardown once.

07:36.520 --> 07:40.270
And I know dependably those are going to be called before and after every test method.

07:40.270 --> 07:41.320
So that's it.

07:41.320 --> 07:45.190
Let's take a look at the enemy script itself just to see how that's set up.

07:45.190 --> 07:47.590
So the enemy is a very simple monobehaviour.

07:47.590 --> 07:52.390
I don't really need to do anything to make it testable, but just to have something exciting here to

07:52.390 --> 07:53.290
be able to test.

07:53.290 --> 07:57.940
I have a serialized field of rigidbody, and then I have a test that assumes it's populated.

07:57.940 --> 08:01.960
Now, looking at the code, you can see that there's nothing that actually populates it.

08:01.960 --> 08:08.320
But if we go look in unity and click on the prefab, we'll see that the prefab is what makes that association.

08:08.320 --> 08:09.400
So let's check that now.

08:09.400 --> 08:11.740
So back here in unity we go down.

08:11.740 --> 08:13.570
We look at the enemy prefab.

08:13.570 --> 08:17.860
And we can see here on the right the prefab has an enemy script.

08:17.860 --> 08:20.380
And it already has the rigid body declared.

08:20.410 --> 08:23.110
If somehow I was to forget that.

08:23.110 --> 08:29.140
Or perhaps someone on your team breaks this aspect of the prefab, then let's run those tests again.

08:32.310 --> 08:35.310
And we can see that the rigid body is null has failed.

08:35.310 --> 08:41.680
So that's a very simple example of a system that you've got that functions and then it breaks.

08:41.700 --> 08:47.370
Now if you're a unity game developer and you've worked on teams before, I'm sure you've had the experience

08:47.370 --> 08:51.810
that you or someone that you work with has accidentally broken a prefab.

08:51.840 --> 08:53.320
It's a very common workflow.

08:53.340 --> 08:56.460
You might not see any errors in the unity editor.

08:56.460 --> 09:01.200
You might even be able to play the game, and in certain circumstances, you don't see the effect of

09:01.230 --> 09:06.990
that until the final moment when that particular rigid body is being used or the functionality that's

09:06.990 --> 09:08.130
missing is being called.

09:08.130 --> 09:13.110
So this is a wonderful way that you can have everyone on your team follow the following workflow.

09:13.200 --> 09:19.650
Hey, any time you're going to pull from git and do some changes to the assets level, design, etcetera,

09:19.680 --> 09:26.940
make sure you open the test runner window and simply hit run selected or run all and execute them all.

09:26.970 --> 09:28.620
You'll see everything pass well.

09:28.620 --> 09:34.800
Then before you commit your work again, do it again and if and when you've noticed that someone commits

09:34.800 --> 09:40.710
something that passed the tests but broke something, you want to add a new unit test that perhaps tests

09:40.710 --> 09:47.760
for the enemies flying script existing or whatever is the offending part, and then you now have a legacy

09:47.760 --> 09:52.320
of a little more testing that makes sure that particular instance doesn't happen again.

09:52.320 --> 09:56.760
You don't necessarily have to test for every single thing of the prefab up front.

09:56.760 --> 10:01.470
You want to look at your team's workflows and identify some low hanging fruit for things that could

10:01.470 --> 10:03.120
be fixed most easily.

10:03.120 --> 10:04.950
Then add some light tests for that.

10:04.980 --> 10:10.950
It's very easy once you have this test here for one particular prefab to run it on a bunch of prefabs,

10:10.950 --> 10:16.650
you could, in theory have one testing script that tests a large number of different prefabs, doing

10:16.650 --> 10:22.200
the little bit of just making sure no null refs are happening, no exceptions are thrown.

10:22.440 --> 10:26.340
The game objects exist, the prefab can be found.

10:26.340 --> 10:28.920
You could do that all within one if you wanted to.

10:28.950 --> 10:34.530
What I'm showing here is one particular script for one particular prefab, and you can decide how to

10:34.530 --> 10:35.400
scale that up.

10:35.670 --> 10:36.870
That's it for this.

10:36.870 --> 10:40.410
Talk about using prefabs and unit testing together.

10:40.410 --> 10:41.190
Thanks.
