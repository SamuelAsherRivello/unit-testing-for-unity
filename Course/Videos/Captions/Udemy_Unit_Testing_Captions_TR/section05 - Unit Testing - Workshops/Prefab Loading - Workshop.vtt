WEBVTT

00:00.290 --> 00:04.310
Merhaba ve Unity için Birim Testi Atölye Serisine hoş geldiniz.

00:04.460 --> 00:06.770
Burada prefabriklere bakacağız.

00:06.800 --> 00:10.940
Kursun bu anına kadar prefabrikleri test etmedik.

00:10.970 --> 00:16.460
Bazı monobehaviour'ları test etmek istediğim anlarda, bunları kod kullanarak sıfırdan oluşturdum

00:16.460 --> 00:18.080
önceki videolarda gösterildiği gibi.

00:18.080 --> 00:24.440
Ancak elbette, unity oyun geliştirmede önemli bir temel yapı taşı prefabriktir.

00:24.680 --> 00:32.300
Prefabrikler, çeşitli varlıkları ve işlevleri bir araya getirmenize, bunları projenize koymanıza ve

00:32.300 --> 00:38.020
Bunları sahneye sürükleyerek kolayca yeniden kullanabilirsiniz, böylece sahneye kaydedersiniz ve orada kalırlar,

00:38.030 --> 00:40.690
ya da bunları dinamik olarak kodla oluşturarak.

00:40.700 --> 00:43.040
Şimdi, neden bu prefabrikleri test etmek isteyelim?

00:43.040 --> 00:48.800
Çok hafif bir biçimde, oyununuzun bir düşman prefabriğinde bir karakter prefabriği kullandığını düşünün, belki

00:48.800 --> 00:49.900
Her birinin katları.

00:49.910 --> 00:58.280
Sadece oyuncuyu oluşturan ve herhangi bir istisna atmadığını doğrulayan bir birim testiniz olabilir,

00:58.400 --> 01:04.970
Sadece bu bile varlığın zaman içinde iyi çalıştığına dair size biraz daha fazla güven verir.

01:04.970 --> 01:10.670
Ve seviye tasarımcıları ve sanatçılar da dahil olmak üzere programcı olmayan farklı yeteneklerle işbirliği yaptığınız için,

01:10.700 --> 01:14.030
bu prefabriklerin yanlışlıkla kırılmadığını biliyorsunuz.

01:14.030 --> 01:17.870
Bir test kullanarak yapı hakkında bazı varsayımlarda bulunabilirsiniz.

01:17.870 --> 01:22.760
Serileştirilmiş alanlar üzerinde varsayımlarda bulunabilir ve bunların doğru şekilde doldurulup doldurulmadığını kontrol edebilirsiniz ve

01:22.760 --> 01:25.400
elbette davranışlar üzerinde de varsayımlarda bulunabilir.

01:25.400 --> 01:31.160
Prefabreleri kullanmayan önceki karakter örneğinde, bir karakter komut dosyam vardı ve

01:31.160 --> 01:36.770
move by veya move to işlevini çağırdığımda dünya etrafında düzgün bir şekilde hareket edebildiğinden emin olmak için kontrol edin.

01:36.770 --> 01:43.730
Bağımlılıkları olan karmaşık prefabrikler oluşturdukça, bu prefabrikler üzerinde işlevsellik çağırabilirsiniz

01:43.730 --> 01:44.300
aynı zamanda.

01:44.300 --> 01:47.990
Artık testler küçük bir kod birimini kapsayabilir.

01:48.140 --> 01:54.680
İdeal dünyada birkaç satıra sahip olursunuz ve belki de daha karmaşık bir sisteme kadar hiç bağımlılığınız olmaz,

01:54.680 --> 01:59.810
Eğer birim testlerinizi yaparken ne yaptığınızı biliyorsanız, bir

01:59.810 --> 02:06.200
Bazı bağımlılıklar üzerinde de çalışan ve size bu sistemler hakkında biraz güvence veren test

02:06.200 --> 02:07.490
birlikte iyi çalışıyorlar.

02:07.520 --> 02:14.120
Bir prefabrik gerçekten de muhtemelen bu spektrumun sonunda daha karmaşıktır ve test edeceksiniz

02:14.120 --> 02:14.270
Bu.

02:14.270 --> 02:21.560
Prefabrik, kendi özel bileşenlerinin yanı sıra rigidbody gibi unity bileşenlerini de kullanabilir.

02:21.560 --> 02:26.750
Bu nedenle, bu testleri hazırlarken çok büyük bir sistemi test etmediğinizi unutmayın.

02:26.750 --> 02:34.160
Örneğin, kahraman karakteriniz sert gövde ve özel bir uçan bileşen kullanıyorsa, şunları isteyebilirsiniz

02:34.160 --> 02:38.060
özel uçan bileşeni kendi birim testinde ayrı olarak test etmek için.

02:38.060 --> 02:42.980
Unutmayın, biriminizi parçalara ayırabilmenin ve daha az bağımlılığa sahip olmanın her zaman faydaları vardır

02:42.980 --> 02:43.460
Test.

02:43.460 --> 02:49.550
Ancak bununla birlikte, bağımlılıkları da dahil olmak üzere tüm bir prefabrik üzerinde çalışan bir test oluşturabiliriz

02:49.550 --> 02:50.240
eğer uygun görürsek.

02:50.240 --> 02:52.370
Bunun koddaki bir örneğine göz atalım.

02:52.940 --> 02:54.640
İşte birliğin içindeyiz.

02:54.650 --> 02:59.720
Buradaki kategoride test çalıştırıcı penceresine bakarsam, zaten prefabrik olarak ayarlanmış olduğunu görürüm.

02:59.720 --> 03:05.510
Ve burada bu klasörde bir prefabrik örneği olduğunu görebiliyoruz.

03:05.510 --> 03:10.520
Devam edelim ve sahneyi açalım ve çalıştırdığım sahneye bir göz atalım.

03:10.520 --> 03:10.850
o.

03:13.540 --> 03:18.130
Bu sahneyi çalıştırdığımda, bir top fizik kurallarına göre yere düşüyor ve zemin boyunca kayıyor.

03:18.160 --> 03:21.420
İlgilendiğimiz şey bu özel davranış değil.

03:21.430 --> 03:27.760
Sadece sahneye bir düşman prefabrik koymak istedim, burada üretim kodunda var olduğunu görün.

03:27.760 --> 03:34.750
Bunu simüle etmek, daha büyük oyun menünüz, ayarlarınız, sahneniz, her neyse ve bazı

03:34.750 --> 03:39.730
bir prefabrik üzerindeki bir veya daha fazla mono davranışa bağımlılık.

03:39.940 --> 03:43.340
Bu hazırlıkla birlikte, bunu nasıl test edeceğimize bir göz atalım.

03:43.360 --> 03:49.480
Şimdi bu sahnede bir editör testim ve bir de çalışma zamanı testim var.

03:49.480 --> 03:55.450
Ancak bu daha çok unity davranışını test ettiğinden ve örneğin mono davranışlarının

03:55.450 --> 03:57.400
sadece çalışma zamanında test etmek istediğiniz bir şey.

03:57.400 --> 03:59.470
Burada sadece oyun modu testine odaklanalım.

03:59.470 --> 04:00.820
Bu yüzden onun işaretini kaldıracağım.

04:01.600 --> 04:06.820
Ve burada bu oyun modu test çalıştırıldığında yapabileceğimiz birkaç farklı şey var, düşmanın

04:06.820 --> 04:08.380
kendisi null değildir.

04:08.410 --> 04:10.420
Bu davranış senaryosunun miktarı.

04:10.450 --> 04:16.330
Sonra üzerinde bulunduğu oyun nesnesinin null olmadığını test ediyorum ve genellikle eğer

04:16.330 --> 04:18.460
düşman varsa, oyun nesnesi de vardır.

04:18.460 --> 04:20.740
Ama bu sadece bunun bir başka testi.

04:20.740 --> 04:23.410
Ve son olarak katı cismin boş olmadığını kontrol edebiliriz.

04:23.410 --> 04:27.670
Yani burada çoğunlukla elimizdeki yapıyı kontrol ediyoruz.

04:27.670 --> 04:33.940
Ancak serileştirilmiş alanları, ilklendirilmiş genel değerleri ve bazı davranış işlevlerini de kontrol edebilirsiniz

04:33.940 --> 04:35.230
yöntemleri çağırarak.

04:35.230 --> 04:36.430
Bunu kendi başınıza yapabilirsiniz.

04:36.430 --> 04:41.350
Burada gördüklerinizi genişletin ve yeni üretim kodunun üzerine kendi test işlevselliğinizi ekleyin.

04:41.380 --> 04:44.200
Ayaklarınızı bununla ıslatın ve sizin için nasıl gittiğine bakın.

04:44.230 --> 04:46.120
Kaynak koduna bir göz atalım.

04:46.270 --> 04:47.620
İşte oyun modu testi.

04:47.620 --> 04:52.090
Bu üç teste bir göz atacağım ve ardından özellikle aşağıdakiler için gereken kurulumdan bahsedeceğim

04:52.090 --> 04:52.900
Prefabrikler.

04:52.900 --> 04:55.270
Yani burada çok basit bir testimiz var.

04:55.300 --> 04:58.960
Görmeye alışık olduğumuz düzenle, harekete geç ve iddia et paradigmasına sahibiz.

04:58.960 --> 05:03.070
Burada arrange ve act kelimelerinin şüpheli bir şekilde eksik olduğuna dikkat edin.

05:03.070 --> 05:06.820
Ve tek yaptığım düşmanın null olup olmadığını kontrol etmek.

05:06.820 --> 05:10.210
Bir sonraki testte düşman oyun nesnesi null değil.

05:10.210 --> 05:13.240
Ve son olarak, düşman katı cisim boş değil.

05:13.270 --> 05:14.620
Rijit gövde durumunda.

05:14.620 --> 05:20.830
Bu, oluşturduğum ve serileştirdiğim genel bir alan ve düzgün bir şekilde ayarlanmış bir prefabrik olduğunu varsayıyorum

05:20.830 --> 05:25.150
bu serileştirilmiş alan zaten bildirilmiş ve doldurulmuş olacaktır.

05:25.150 --> 05:26.560
Yani hepsi geçiyor.

05:26.560 --> 05:27.760
Yani her şey yolunda gidiyor.

05:27.760 --> 05:29.800
Şimdi, prefabrik yapıyı buraya nasıl getireceğiz?

05:29.800 --> 05:31.900
Oynatma modu testini kullandığımıza dikkat edin.

05:31.900 --> 05:37.840
Gördüğümüz gibi, bir oyun modu testi dinamik olarak oluşturulan kendi boş sahnesinde çalışır.

05:37.840 --> 05:41.680
Dolayısıyla, bu konuda yapmak istediğimiz her şeyi kendimiz manuel olarak ayarlamamız gerekiyor.

05:41.680 --> 05:46.000
Bu yüzden metin fikstüründen ve test ile yapabileceğimiz bazı şeylerden yararlanacağız

05:46.000 --> 05:46.300
Fikstür.

05:46.300 --> 05:53.230
Burada yapabileceğimiz şeylerden biri, izin vermeyi ne kadar geciktireceğimize dair bir referans oluşturmaktır

05:53.230 --> 05:57.340
örneklenecek prefabrik, düşman prefabrikin kendisine giden yol.

05:57.340 --> 05:59.710
Yolun varlıklar ile başladığına dikkat edin.

05:59.710 --> 06:01.300
Bu birazdan önemli olacak.

06:01.300 --> 06:03.520
Ve sonra özel düşmana bir referansım var.

06:03.550 --> 06:09.010
Şimdi, oldukça sık kullandığımız test niteliğine ek olarak, bir de kurulum niteliği var.

06:09.010 --> 06:11.860
her test yönteminden önce bir kez çalışacaktır.

06:11.860 --> 06:19.570
Yani burada her test yönteminden önce yapmak istediğimiz şey, bu varlığı basitçe yüklediğimiz yola yüklemektir.

06:20.380 --> 06:26.560
Oyun nesnesini oluşturduktan sonra bu nesnede oturan düşmana bir referans alırız ve sonra bir

06:26.590 --> 06:31.450
Üç saniye ya da keyfi bir süre, aslında üç saniyeye ihtiyacı olmadığını fark eder.

06:31.450 --> 06:33.250
Muhtemelen bir kareye ihtiyacı var.

06:33.250 --> 06:35.590
Yani orada ne yaptığınızı deneyebilirsiniz.

06:35.890 --> 06:38.800
Sanırım yarım saniye kadar bekledim.

06:38.830 --> 06:44.260
Buna ihtiyaç duymamızın nedeni, oyun nesnesi nokta instantiate yaptığınızda

06:44.260 --> 06:50.080
awake'in çağrılması ve start'ın o oyun nesnesi üzerinde çağrılması için tüm bir kareyi bekleyin.

06:50.080 --> 06:55.420
Dolayısıyla, uyanıkken ne yaptığınıza ve tekli davranışınıza nasıl başladığınıza bağlı olarak, şunları yapmanız gerekebilir

06:55.420 --> 06:56.800
Biraz daha bekle.

06:56.800 --> 07:03.550
Tüm durumlarınızda 2 veya 3 kare beklemenin muhtemelen yeterli olacağını tahmin ediyorum.

07:03.550 --> 07:08.230
Ancak burada sadece yarım saniye yapıyorum ve bununla dalga geçip ihtiyaçlarınızı karşılayıp karşılamadığını görebilirsiniz.

07:08.230 --> 07:10.300
Sonra burada Teradyne özelliğini kullanıyorum.

07:10.300 --> 07:13.840
Bu, her test yönteminden sonra bir kez çağrılır.

07:13.840 --> 07:15.970
Böylece kurulumda prefabrik oluşturuyoruz.

07:16.000 --> 07:17.200
Sonra test çalıştırılır.

07:17.200 --> 07:19.630
Ve sökme işleminde yaptığım şey onu temizlemek.

07:19.630 --> 07:26.470
Şimdi alternatif olarak kurulum ve söküm eşdeğerlerini her

07:26.470 --> 07:27.400
tek test.

07:27.400 --> 07:29.050
Eğer bunu yapmak istiyorsanız, yapabilirsiniz.

07:29.080 --> 07:33.190
Ancak burada mevcut bazı yöntemleri yeniden kullanabilmenin avantajını kullanıyorum.

07:33.190 --> 07:36.520
Bu yüzden sadece bir kez kurulum ve bir kez de söküm beyan ediyorum.

07:36.520 --> 07:40.270
Ve bunların her test yönteminden önce ve sonra çağrılacağını biliyorum.

07:40.270 --> 07:41.320
İşte bu kadar.

07:41.320 --> 07:45.190
Nasıl kurulduğunu görmek için düşman senaryosunun kendisine bir göz atalım.

07:45.190 --> 07:47.590
Yani düşman çok basit tek bir davranıştır.

07:47.590 --> 07:52.390
Test edilebilir hale getirmek için gerçekten bir şey yapmama gerek yok, sadece burada heyecan verici bir şey olması için

07:52.390 --> 07:53.290
test edebilmek.

07:53.290 --> 07:57.940
Seri hale getirilmiş bir rigidbody alanım var ve sonra bunun doldurulduğunu varsayan bir testim var.

07:57.940 --> 08:01.960
Şimdi, koda baktığınızda, aslında onu dolduran hiçbir şey olmadığını görebilirsiniz.

08:01.960 --> 08:08.320
Ancak unity'ye girip prefabriğe tıklarsak, prefabriğin bu ilişkiyi kuran şey olduğunu görürüz.

08:08.320 --> 08:09.400
Şimdi kontrol edelim.

08:09.400 --> 08:11.740
Birlik içinde aşağı iniyoruz.

08:11.740 --> 08:13.570
Düşman prefabriklerine bakıyoruz.

08:13.570 --> 08:17.860
Ve burada sağ tarafta prefabrikte bir düşman betiği olduğunu görebiliyoruz.

08:17.860 --> 08:20.380
Ve halihazırda rijit gövde beyan edilmiş durumda.

08:20.410 --> 08:23.110
Eğer bir şekilde bunu unutursam.

08:23.110 --> 08:29.140
Ya da belki ekibinizden biri prefabriğin bu yönünü bozar, o zaman bu testleri tekrar çalıştıralım.

08:32.310 --> 08:35.310
Ve rijit gövdenin boş olduğunu görebiliyoruz.

08:35.310 --> 08:41.680
Yani bu, işleyen ve sonra bozulan bir sisteme dair çok basit bir örnektir.

08:41.700 --> 08:47.370
Eğer bir unity oyun geliştiricisiyseniz ve daha önce ekiplerde çalıştıysanız, eminim bu deneyimi yaşamışsınızdır

08:47.370 --> 08:51.810
sizin ya da birlikte çalıştığınız birinin yanlışlıkla bir prefabriği kırması.

08:51.840 --> 08:53.320
Bu çok yaygın bir iş akışıdır.

08:53.340 --> 08:56.460
Unity editöründe herhangi bir hata görmeyebilirsiniz.

08:56.460 --> 09:01.200
Hatta oyunu oynayabilirsiniz ve bazı durumlarda, oyunun etkisini görmezsiniz.

09:01.230 --> 09:06.990
son ana kadar belirli bir katı cismin kullanıldığı veya işlevselliğin

09:06.990 --> 09:08.130
kayıp aranıyor.

09:08.130 --> 09:13.110
Bu, ekibinizdeki herkesin aşağıdaki iş akışını takip etmesini sağlamanın harika bir yoludur.

09:13.200 --> 09:19.650
Hey, git'ten çekeceğiniz ve varlık seviyesinde, tasarımda vb. bazı değişiklikler yapacağınız her zaman,

09:19.680 --> 09:26.940
test runner penceresini açtığınızdan ve sadece seçileni çalıştır veya tümünü çalıştır düğmesine basıp hepsini çalıştırdığınızdan emin olun.

09:26.970 --> 09:28.620
Her şeyin yolunda gittiğini göreceksiniz.

09:28.620 --> 09:34.800
Sonra çalışmanızı tekrar işlemeden önce, tekrar yapın ve eğer birisinin

09:34.800 --> 09:40.710
Testleri geçen ancak bir şeyleri bozan bir şey varsa, belki de testleri test eden yeni bir birim testi eklemek istersiniz

09:40.710 --> 09:47.760
düşmanlar için uçan komut dosyası mevcut veya rahatsız edici kısım her neyse, ve sonra artık bir mirasınız var

09:47.760 --> 09:52.320
Bu belirli örneğin bir daha yaşanmayacağından emin olmak için biraz daha fazla test.

09:52.320 --> 09:56.760
Prefabrikteki her bir şeyi önceden test etmek zorunda değilsiniz.

09:56.760 --> 10:01.470
Ekibinizin iş akışlarına bakmak ve aşağıdakileri yapabilecek bazı düşük asılı meyveleri belirlemek istersiniz

10:01.470 --> 10:03.120
en kolay şekilde düzeltilebilir.

10:03.120 --> 10:04.950
O zaman bunun için bazı hafif testler ekleyin.

10:04.980 --> 10:10.950
Burada belirli bir prefabrik için bu testi yaptıktan sonra bir grup prefabrik üzerinde çalıştırmak çok kolaydır,

10:10.950 --> 10:16.650
Teorik olarak, çok sayıda farklı prefabriği test eden tek bir test betiğine sahip olabilirsiniz.

10:16.650 --> 10:22.200
null ref'lerin olmadığından, istisnaların atılmadığından emin olmak için birazcık.

10:22.440 --> 10:26.340
Oyun nesneleri mevcut, prefabrik bulunabilir.

10:26.340 --> 10:28.920
İsterseniz bunların hepsini bir arada yapabilirsiniz.

10:28.950 --> 10:34.530
Burada gösterdiğim şey, belirli bir prefabrik için belirli bir komut dosyasıdır ve nasıl yapılacağına siz karar verebilirsiniz

10:34.530 --> 10:35.400
Bunu ölçeklendir.

10:35.670 --> 10:36.870
Bu kadar.

10:36.870 --> 10:40.410
Prefabrikleri ve birim testlerini birlikte kullanma hakkında konuşun.

10:40.410 --> 10:41.190
Teşekkürler.
