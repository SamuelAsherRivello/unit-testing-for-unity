WEBVTT

00:00.320 --> 00:03.950
Merhaba ve Unity Workshops için birim testine hoş geldiniz.

00:03.950 --> 00:06.800
Ve burada sahne yüklemesine bakacağız.

00:06.800 --> 00:12.860
Şimdi geleneksel olarak birim testini düşündüğümüzde, en küçük kod birimini

00:12.860 --> 00:15.530
en az satır ve en az bağımlılık.

00:15.530 --> 00:21.530
Yani bu basitlik spektrumunun diğer ucunda karmaşıklık vardır.

00:21.530 --> 00:27.710
Unity'nin içindeki önemli temel nesnelerden biri de sahnenin kendisidir.

00:28.220 --> 00:35.150
Bir oyun deneyiminde oyuncu olarak gördüğünüz her şey bir sahnenin içindedir.

00:35.150 --> 00:39.950
Böylece bir sahne içindeki tek tek komut dosyalarını veya öğeleri birim testine tabi tutabiliriz.

00:39.950 --> 00:44.210
Ya da burada göstereceğimiz gibi, tüm sahnenin kendisini test edebiliriz.

00:44.210 --> 00:45.710
Bunu neden yapalım ki?

00:45.710 --> 00:48.110
Her şeyden önce, bu güzel bir duman testi.

00:48.140 --> 00:53.630
Sahnenin yüklenip yüklenmediğini ve istisna olmadan yüklenip yüklenmediğini görmenin basit bir yolu.

00:53.630 --> 00:54.980
Bu bile tek başına buna değer.

00:54.980 --> 00:56.690
Yapabileceğimiz şeyler hakkında düşünelim.

00:56.720 --> 01:00.770
Sahne yapısı ve içinde hangi nesnelerin bulunduğu hakkında varsayımlarda bulunabiliriz.

01:00.770 --> 01:04.340
O sahnedeki şeylerin davranışları hakkında varsayımlarda bulunabiliriz.

01:04.340 --> 01:11.210
Ve gerçekten harika bulduğum bir iş akışı, bu testleri geride bırakabilir ve programcı olmayanların

01:11.210 --> 01:15.590
Ekibinizdeki kişiler işlerini yapmadan önce ve sonra testleri yaparlar.

01:15.590 --> 01:21.590
Belki de bir seviye tasarımcısı, yeni seviyelerin eklendiğini bilerek daha güvenle çalışabilir.

01:21.590 --> 01:25.490
mevcut sahneleri veya mevcut seviyelerdeki revizyonları kırın.

01:25.490 --> 01:31.450
Hiçbir sahneyi de bozmayın ve sanat ekibiniz bazı sahneleri değiştirecek olsalar

01:31.460 --> 01:37.400
varlıklar veya yeni varlıklar eklemek, programcının bakış açısından hiçbir şeyin bozulmadığını gösterir.

01:37.400 --> 01:39.200
Peki bu iş akışı neye benziyor?

01:39.200 --> 01:45.680
Burada bir oyun modu testi oluşturabilmenin ve tüm sahneyi bir oyun moduna yükleyebilmenin bir örneğini göstereceğim.

01:45.680 --> 01:49.070
Bu oyun modu testini yapın ve varsayımları kullanarak bazı varsayımlarda bulunun.

01:49.070 --> 01:56.030
Örneğin, bir sahne yükleyebilir ve giriş sahnesinde menünün düzgün bir şekilde görüntülendiğini kontrol edebilirsiniz.

01:56.030 --> 01:57.620
Bir oyun sahnesindeyiz.

01:57.650 --> 02:03.080
Arka plan öğesinin, kahramanın ve tüm düşmanların uygun şekilde örneklendiğinden emin olun

02:03.080 --> 02:03.470
An.

02:03.470 --> 02:08.900
Şimdi, belirli bir sahnede mümkün olan büyük karmaşıklığa kapı açtığımız için

02:08.900 --> 02:15.380
bir sahnede her şeyi test etmek istemeniz çok zor görünüyor, ancak yine de bence çok

02:15.380 --> 02:22.490
Sadece sahneyi yükleyen ve istisna olmaksızın 1 veya 2 temel öğenin orada olduğundan emin olan muhafazakar test.

02:22.490 --> 02:27.400
Thrown, ekibinize değer katacak harika bir düşük asılı meyvedir.

02:27.410 --> 02:28.580
İçeri bir göz atalım.

02:28.580 --> 02:29.240
Birlik.

02:29.510 --> 02:31.910
Burada çekirdek örnek projenin içindeyiz.

02:31.940 --> 02:33.440
Şimdi test çalıştırıcı penceresinde.

02:33.440 --> 02:35.450
Burada birçok farklı kategorimiz var.

02:35.450 --> 02:42.140
Sahne yüklemeyi seçtim ve bazı editör ve çalışma zamanı testlerimiz olduğunu görebilirsiniz.

02:42.140 --> 02:48.380
Çünkü sahneler ve burada test etmeyi seçtiğim şeyler tipik çalışma zamanı davranışıyla ilgilidir

02:48.380 --> 02:50.240
birlik Monobehaviours.

02:50.240 --> 02:54.470
Örneğin, ben sadece çalışma zamanı testine, oyun modu testine odaklanacağım.

02:54.470 --> 02:56.470
Bu yüzden düzenleme modu testini devre dışı bırakacağım.

02:56.480 --> 02:58.220
Elimizdekilere bir göz atalım.

02:58.220 --> 03:04.970
Yani yapacağımız şey, bu testi her çalıştırdığımızda şunu kontrol etmek olacak

03:04.970 --> 03:12.500
Giriş sahnesinin içinde ana oyun karakterimizi simüle eden bir kahraman var, giriş sahnesi

03:12.500 --> 03:15.020
herhangi bir istisna atılmadan yüklenir.

03:15.260 --> 03:17.720
Ve sonra bunu oyun sahnesi için tekrarlayacağız.

03:17.930 --> 03:23.480
Tüm sahnelerinizi sistematik bir şekilde test edebilecek tek bir testiniz olduğunu hayal edebilirsiniz.

03:23.480 --> 03:30.950
Burada yapmayı seçtiğim şey, istediğimiz işlevlerin her biri için bir test yapılandırmak, bir

03:30.950 --> 03:36.770
kahraman için bir tane, istisnalar için bir tane ve bunu her bir sahne için tek bir test içinde yapmak

03:36.770 --> 03:37.310
Yapı.

03:37.310 --> 03:40.610
Ancak siz ve ekibinizin ne yapmak istediğine bağlı olarak bunu nasıl ölçeklendireceğinize karar verebilirsiniz.

03:40.640 --> 03:41.840
Şu testleri yapayım.

03:41.840 --> 03:42.920
Her şey oradan geçiyor.

03:42.920 --> 03:44.690
Biraz konsol trafiğimiz olduğunu görebilirsiniz.

03:44.690 --> 03:45.920
Kaynak koduna bir göz atalım.

03:45.920 --> 03:50.990
Yani bu testte sahne bir girişinin, ki bu sahnelerden birinin adıdır

03:50.990 --> 03:57.710
projesinde, sahne yüklendiğinde kahramanın null olmadığını varsayacağız, bazı en küçük

03:57.710 --> 04:01.280
birim testi, sahneyi yüklemek ve bunu iyi ve güzel bir şekilde yapmak.

04:01.280 --> 04:02.540
Burada güzel bir iş akışı var.

04:02.540 --> 04:06.140
Biraz kurulum gerektiriyor, bu yüzden kurulumun ne olduğundan bahsedelim.

04:06.140 --> 04:09.380
İlk olarak, görmek için sahne yöneticisini dinleyeceğim.

04:09.380 --> 04:14.840
Yüklemek istediğim sahne yüklendi mi, o zaman sahneyi buraya yükleyeceğim.

04:14.840 --> 04:21.830
Sahne adları için statik bir değişken oluşturdum, böylece sahne adlarını izole edebilmem ve

04:21.830 --> 04:23.360
Gerekirse bunları güncellerim.

04:23.390 --> 04:26.090
Sonra burada oturup sahne yüklenirken bekleyeceğim.

04:26.090 --> 04:31.580
Bu, sahne yüklenene kadar bu konuda hiçbir şey varsaymamamı veya iddia etmememi sağlar.

04:31.580 --> 04:33.020
Oldukça hızlı gerçekleşir.

04:33.020 --> 04:37.640
O zaman burada sahneye dair herhangi bir iç gözlem yapabileceğim.

04:37.670 --> 04:43.700
Yapabileceğim çok güçlü bir şey, yüklendikten sonra tüm sahneye bakmak ve herhangi bir

04:43.700 --> 04:45.320
belirli bir senaryonun varlığı.

04:45.320 --> 04:52.730
Eğer o sahnede hero adında bir prefabrik veya bireysel bir hero betiği olsaydı, bu bir değer döndürecekti.

04:52.730 --> 04:57.020
Ayrıca tüm kahramanların veya tüm düşmanların bir listesini de alabilirim.

04:57.020 --> 04:59.840
Birden fazla varsa, bunların üzerinde yineleme yapabilirim ve

04:59.940 --> 05:01.670
Ve istediğim testi yapabiliyorum.

05:01.680 --> 05:03.960
Burada bilerek zayıf bir test yapıyorum.

05:03.990 --> 05:06.780
Tek yaptığım kahramanın null olmadığından emin olmak.

05:06.810 --> 05:14.100
Örneğin, bir sanatçı veya seviye tasarımcısı belirli bir sahnedeki kahramanı yanlışlıkla silmişse, bu

05:14.100 --> 05:14.730
başarısız olur.

05:14.730 --> 05:17.680
Elementlerin orada olduğundan emin olmak için güzel bir test oldu.

05:17.700 --> 05:23.550
Unity içindeki bir sistemin oldukça karmaşık olabileceğini ve sahnelerinizin oldukça karmaşık olabileceğini hayal edebilirsiniz

05:23.550 --> 05:24.000
çok.

05:24.030 --> 05:26.820
Yüzlerce hatta binlerce nesneniz olabilir.

05:26.820 --> 05:33.060
Bunların her biri için bir iddia yapmak istemeyebilirsiniz, ancak nasıl yaptığınıza bağlı olarak

05:33.060 --> 05:38.460
sahnenizi düzenleyerek, arka plan, kullanıcı arayüzü gibi bazı basit şeyleri kontrol edebilirsiniz,

05:38.490 --> 05:45.360
ve buraya birkaç satır ekleyerek tek başına kolay bir test gerçekleştirilebilecek bir düşman listesi ve

05:45.360 --> 05:50.340
o zaman siz ve ekibiniz kod üzerinde çalıştıkça ve sürümünüze taahhütlerde bulundukça daha fazla güvene sahip olursunuz

05:50.340 --> 05:53.790
kimsenin yanlışlıkla bir şeyi kırmadığı kontrol deposu.

05:53.790 --> 06:00.630
Unutmayın, şu anda yaptığınız şey, sahneyi veya tüm sahneleri oynatmak ve

06:00.630 --> 06:05.780
Burada bir şeylerin eksik veya bozuk olduğunu görsel olarak tespit etmediğinizden emin olun.

06:05.790 --> 06:07.930
Otomatik olmak çok çok daha sorunsuzdur.

06:07.950 --> 06:09.290
Diğer testlere bir göz atalım.

06:09.300 --> 06:16.080
Burada sahneyi yükleyen bir tane var ve sonra herhangi bir istisna atmadığından emin olun.

06:17.110 --> 06:20.960
Ardından diğer tüm sahneler için aynı iki testi tekrarlıyoruz.

06:20.980 --> 06:25.630
Şimdi bu test sahnesinin üst kısmına bir göz atalım ve bazı ek kurulumları görelim

06:25.660 --> 06:26.230
gerekli.

06:26.260 --> 06:32.410
Bir şey var ki, sahneleri kodla yüklediğimiz için, bunların unity derleme ayarlarında bulunması gerekiyor.

06:32.410 --> 06:35.530
Bu, testte olduğu kadar üretimde de geçerlidir.

06:35.560 --> 06:41.110
Artık siz ve ekibiniz her zaman güncellendiğinden emin olabilir ve bunu manuel olarak

06:41.110 --> 06:41.950
unity editör.

06:41.950 --> 06:44.950
Şimdi bunu unity içinde nasıl yapacağımıza bir göz atalım.

06:44.980 --> 06:46.840
Dosya Oluşturma Ayarları'na gidin.

06:46.840 --> 06:50.020
Ve burada ihtiyacınız olan tüm sahnelerin listesi var.

06:50.050 --> 06:53.710
Şimdi eğer oraya bir tane eklemeyi unutursanız, test başarısız olur.

06:53.710 --> 06:59.380
Bu nedenle, bu özel adımı hatırlamamızı istemek yerine, ekibiniz bunu yapmak istiyorsa sorun değil

06:59.380 --> 07:04.030
Bunu otomatikleştiriyorum ve eklemek istediğimiz sahneleri dinamik olarak ekliyorum.

07:04.060 --> 07:10.990
Bunu yapmanın yolu, unity'nin burada ne zaman kullanılabilir hale getirdiği bazı mevcut arayüzleri kullanmaktır

07:10.990 --> 07:13.930
derleme kurulurken ve derleme temizlenirken.

07:13.960 --> 07:18.550
Bunlar daha önceki testlerde gördüğümüz bazı özelliklerden farklıdır, ancak o zaman bu konuya girmeyeceğim

07:18.550 --> 07:19.720
Buradaki karmaşıklık.

07:19.720 --> 07:25.960
Ancak kurulumda yaptığım şeyin iki test sahnemizi derleme ayarlarına eklemek olduğunu bilin.

07:26.290 --> 07:32.020
Ve burada temizlik kısmında, eklenen iki tanesini geri alıyorum ya da kaldırıyorum.

07:32.230 --> 07:35.890
Şimdi bunu organize etmenin birçok farklı yolu var, ancak kaynak koda bir göz atabilirsiniz

07:35.890 --> 07:37.520
ve orada yapmak istediğiniz başka bir şey olup olmadığına bakın.

07:37.540 --> 07:44.800
Burada testte, test edilebilir sahnelerden herhangi birinde sahneyi yükle'yi çağırabileceğimi varsayıyorum

07:44.800 --> 07:46.150
ve gitmeye hazırız.

07:46.150 --> 07:47.110
İşte bu kadar.

07:47.140 --> 07:52.660
Kurulumu oldukça kolaydır ve burada örnek projede verilenleri temel alırsanız, şunları yaparsınız

07:52.660 --> 07:57.750
oyun prodüksiyonunuz için sahnelerinizi test edebilme konusunda hızlı bir başarı elde edin.

07:57.760 --> 07:58.660
Teşekkürler.
