WEBVTT

00:02.920 --> 00:07.120
Şimdi bir adım geriye gidelim ve burada temel bir örneğe hızlıca bakalım.

00:07.120 --> 00:09.100
Yani bu bir birim testi değil.

00:09.100 --> 00:16.270
Bu da test kodu değil, üretim kodu olarak değerlendirebileceğim bir birlik sınıfını temsil ediyor.

00:16.270 --> 00:19.990
Ve bu sizin belki de bir matematik oyununuz olabilir.

00:19.990 --> 00:23.890
İki şey yapan çok basit bir matematik sistemi sınıfım.

00:23.890 --> 00:26.140
Toplama ve çıkarma yapabilir.

00:26.140 --> 00:27.820
Yani ekleme yöntemimiz var.

00:27.820 --> 00:31.300
Bir int tamsayı a ve b geçtiğime dikkat edin.

00:31.300 --> 00:33.970
Bunları topluyorum ve bu değeri döndürüyorum.

00:33.970 --> 00:40.540
Şimdi eğer bu sizin oyununuzda kullanılıyorsa ve aslına uygun çalıştığından emin olmak istiyorsanız, sadece

00:40.540 --> 00:48.640
oyununuzu oynayın ve başarılı bir ekleme işlemi uygulamasının size ekranda vermesini umarsınız,

00:48.640 --> 00:50.500
sonuçları değerlendirmek kolay.

00:50.500 --> 00:52.210
Ama durum her zaman böyle değildir.

00:52.210 --> 00:59.470
Belki de bu A ve B ve C'yi yanlışlıkla ekliyordur ve belki de puan sisteminizin bunu fark etmeyebilirsiniz

00:59.470 --> 01:05.470
kötü matematik yaparak 1'den 2'ye ve 4'e yükseliyor ve siz bunu yakalayamıyorsunuz.

01:05.500 --> 01:11.920
Birim testi eklemenin güzel yanı, karşılaşabileceğinizden daha fazla durumu test edebilmenizdir

01:11.920 --> 01:15.370
ve bunu daha sistematik bir şekilde yapmak.

01:15.370 --> 01:18.400
İlk birim testimize hızlıca bir göz atalım.

01:18.400 --> 01:21.850
Ve buradaki sistemin üstünde bir birim testi olacak.

01:22.870 --> 01:25.540
Yani bu ayrı bir sınıf.

01:25.540 --> 01:31.060
Ve kod tabanını buraya koyarak, projenizde belirli bir noktada görüyoruz.

01:31.060 --> 01:36.600
Ve okla gösterildiği gibi yöntemi test ile işaretleyerek, unity ona biraz farklı davranacaktır.

01:36.610 --> 01:42.880
Bunun üretim kodunuzun içinden herhangi bir yerde çağrılmasına gerek yoktur, ancak içinde ne kadar kolay olduğuna bakın

01:42.880 --> 01:43.570
vücutta.

01:43.570 --> 01:49.960
Burada arrange, act ve assert metodolojisini kullandığımızı görüyoruz ve bu metodolojiyi daha derinlemesine inceleyeceğiz

01:49.960 --> 01:50.380
Orada.

01:50.380 --> 01:53.950
Bu sadece düşüncelerinizi düzenlemenize yardımcı olan isteğe bağlı bir yaklaşımdır.

01:53.950 --> 01:56.380
Bu yüzden önce sınıfın bir örneğini oluşturuyoruz.

01:56.380 --> 01:59.020
Sonra bu sınıfta bir yöntem çağırırız.

01:59.020 --> 02:04.990
Ve sonra bunun beklenen sonucumuz olacağını iddia eder ya da varsayarız.

02:05.020 --> 02:12.010
Şimdi bu test, iddia doğruysa geçecek ve iddia yanlışsa başarısız olacaktır.

02:12.040 --> 02:18.820
Şimdi, beş ve onu geçip 15'e döndüğünü kontrol etmek aptalca görünebilir, çünkü yine bizim uygulamamız

02:18.820 --> 02:20.110
kod çok basit.

02:20.110 --> 02:26.080
Ancak bunlar temel fikirlerdir ve bunları daha büyük sınıflara uyguladığımızda

02:26.080 --> 02:26.800
Önemli.

02:26.920 --> 02:28.900
Kursa genel bakışımız bu şekilde.

02:28.900 --> 02:31.240
Burada ne öğrendiğimizi bir düşünelim.

02:31.240 --> 02:35.980
Birim testinin bir proje için nasıl ve neden önemli olduğu hakkında biraz konuştuk.

02:35.980 --> 02:39.640
Oyun geliştirmede bunun neden oldukça nadir olduğu hakkında biraz ipucu verdim.

02:39.670 --> 02:45.490
Bunun bir nedeni, oyun geliştiricileri olarak yeni özellikler eklemeyi sevmemiz ve bunun biraz

02:45.490 --> 02:48.070
daha çok bizi yavaşlatmak gibi.

02:48.070 --> 02:53.500
Ancak 80'e 20 kuralına baktığımızda, aslında oldukça şaşırdığımızı görüyoruz

02:53.500 --> 02:59.800
oyun geli̇şti̇ri̇ci̇leri̇ olarak hayatimizin çoğu mevcut özelli̇kleri̇ düzeltmek ve sürdürmekle geçi̇yor, yeni̇ özelli̇kler eklemekle deği̇l

02:59.800 --> 03:00.490
yenileri.

03:00.490 --> 03:07.420
Dolayısıyla bunu fark etmek ve birim testinin bu yeni özellikleri oluşturmamıza yardımcı olacağını görmek

03:07.420 --> 03:13.630
Projemizde harcadığımız bakımın %80'inde bize çok daha fazla kod güveni verir.

03:13.630 --> 03:19.210
Bir oyun geliştiricisi olarak size kolayca fayda sağlayacaktır ve öğrenmesi harika bir beceridir.

03:19.210 --> 03:20.500
Öyleyse başlayalım.
