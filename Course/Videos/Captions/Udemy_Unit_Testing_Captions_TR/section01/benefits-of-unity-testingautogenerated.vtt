WEBVTT

00:03.320 --> 00:08.780
Birim testi ile ilgili bu teori bölümünde şimdiye kadar gördüğümüz bazı faydaları özetleyelim.

00:08.780 --> 00:11.940
Yani faydaları arasında kodunuza güven katmak da vardır.

00:11.960 --> 00:12.830
Bu ne anlama geliyor?

00:12.830 --> 00:19.070
Ekibiniz bu kod tabanı hakkında düşündükçe, 101. kodun bu kadar önemli olduğunu daha çok hissediyor demektir.

00:19.070 --> 00:21.080
özelliği bir şeyleri bozmayacaktır.

00:21.110 --> 00:26.060
Güven eksikliği olduğunda, özellikle belirli alanlarda özellik eklemekten biraz çekinirsiniz

00:26.060 --> 00:32.300
kod tabanının oldukça gevşek bir şekilde bir arada tutulduğunu ve yeni bir kod satırının

00:32.330 --> 00:33.320
Bir şeyleri kır.

00:33.320 --> 00:36.080
Ayrıca daha cesur yeniden düzenlemelere de olanak tanır.

00:36.080 --> 00:41.270
Şimdi, örneğin, oyununuzdaki belirli bir sistemi yeniden düzenleyecekseniz ve

00:41.270 --> 00:46.040
test yok, süreç oyunu oynamak ve takımınızın oynamasını sağlamak olacaktır.

00:46.070 --> 00:49.880
Refactor'un tüm işlerini yapın, sonra oyununuzu tekrar oynayın.

00:49.910 --> 00:53.690
Bu manuel testin sorunu daha fazla zaman almasıdır.

00:53.690 --> 00:59.960
Refactor öncesi ve sonrası testlerin aynı olduğundan emin olmak daha zordur ve test

00:59.960 --> 01:02.450
aynı bölgelerde de.

01:02.990 --> 01:10.340
Dolayısıyla, yeniden düzenlemeden önce bu sistemleri kapsayan bazı birim testlerine sahip olarak testleri çalıştırabilirsiniz,

01:10.370 --> 01:14.960
her şeyin geçtiğini, orada sahip olduğunuz otomasyonun iyi çalıştığını görün.

01:14.960 --> 01:18.350
Daha sonra aynı testleri yeniden düzenledikten sonra çalıştırın.

01:18.380 --> 01:21.650
Yol boyunca bazı testlerin başarısız olduğunu görebilirsiniz.

01:21.650 --> 01:23.390
Bazı değişiklikler yapabiliyorsunuz.

01:23.390 --> 01:24.380
Test geçildi.

01:24.380 --> 01:30.860
Hatta yeni testler bile ekleyebilirsiniz çünkü refactor bunlara ihtiyaç duyar ve kodunuz artık daha da

01:30.860 --> 01:34.130
Bu refactor'dan sonra daha fazla kod güveniyle daha iyi bir yer.

01:34.310 --> 01:36.170
Bu aynı zamanda zaman kazandırır.

01:36.170 --> 01:41.480
Birim testine başlarken bunun fazladan bir şey olduğunu hissedeceksiniz, hatta belki de.

01:41.480 --> 01:45.950
Bazı sistemlerde biraz gereksiz gibi geliyor, ancak bu konuda esneyeceğiz.

01:45.950 --> 01:51.650
Bu alan üzerinde çalışacağız ve birim testlerinizi nasıl ve ne zaman eklemek istediğinizi göreceğiz.

01:51.680 --> 01:56.810
Her geliştirici kendi tarzını bulacaktır ve bir ekip olarak bir araya gelip bazı

01:56.810 --> 01:59.000
Hepinizin takip edebileceği en iyi uygulamalar.

01:59.980 --> 02:04.720
Buradaki sonuçlar, daha önce de belirttiğim gibi kod tabanınızda daha fazla güven ve sağlamlığa sahip olmanızı sağlayacaktır,

02:04.720 --> 02:10.450
ve kod tabanınız üzerindeki etkisi sadece testlerle aynı eski kod değildir.

02:10.480 --> 02:15.040
Testin doğası, kodunuzu nasıl tasarladığınızı etkileyecektir.

02:15.070 --> 02:22.360
Test edilebilir kod oluşturmak için, işlerin daha küçük birimlerde veya içinde daha az kod bulunan daha küçük sınıflarda çalışması gerekir,

02:22.360 --> 02:27.550
Bu da bizi her sınıf ve yöntem için tek bir amaca sahip olmaya teşvik eder ki bu da iyi bir tasarım uygulamasıdır.

02:27.550 --> 02:30.010
Bunu yazılım tasarımı bölümünde göreceğiz.

02:30.010 --> 02:34.630
Ayrıca, özellikle test güdümlü geliştirme hakkında konuştuğumuzda, daha basit çözümleri teşvik eder.

02:34.660 --> 02:41.290
Şimdi bu otomatik teste sahip olmak, yani kod tabanınızın bir parçası olarak otomatik olarak yapılan birim testleri

02:41.290 --> 02:47.760
periyodik olarak çağrılır ve yeniden denenir, burada size gerçekten en iyi faydayı sağlayacak olan şey budur.

02:47.770 --> 02:54.100
Şimdi, bazı ekipler konuşmamızın odak noktası olacak olan unity içindeki birim testini kullanacak

02:54.100 --> 02:54.550
Buraya.

02:54.550 --> 03:02.230
Ayrıca bu beceriyi kullanarak git deponuzun veya diğer sürüm kontrol sisteminizin otomatik olarak

03:02.230 --> 03:09.280
Bu testler önemli anlarda, belki günlük veya gecelik olarak ya da ekibiniz belirli bir işe her giriştiğinde

03:09.280 --> 03:11.260
dalı, testi tekrar çalıştıracaktır.

03:11.260 --> 03:17.110
Yani bunun çağrılma sıklığını artırmanın zarif yolları var ve o zaman sadece

03:17.110 --> 03:20.020
Tüm testler geçerse kodunuzu birleştirin.
