WEBVTT

00:02.840 --> 00:04.730
Peki neden birim testi yapıyoruz?

00:04.880 --> 00:06.200
Bu alıntıyla başlamak isterim.

00:06.200 --> 00:07.050
Burada okuyacağım.

00:07.070 --> 00:14.150
Aldığımız her karar, ister teknoloji, ister süreç, ister insan olsun, bir yatırım biçimi olarak görülebilir.

00:14.510 --> 00:19.040
Bu yatırımların bir maliyeti var ve karşılığını alacaklarına inanıyoruz.

00:19.250 --> 00:24.950
Dolayısıyla, oyun geliştirmeye zaten aşina iseniz ve bazı işlevleri elde edebiliyorsanız

00:24.950 --> 00:29.480
Aklınızdaki projeleri hayata geçirin ve bunları oyununuzu oynayan oyuncularla paylaşın,

00:29.480 --> 00:32.520
birim testinin değerinin ne olduğu tam olarak açık olmayabilir.

00:32.540 --> 00:38.060
Birim testi her şeyden önce isteğe bağlı bir etkinlik olarak düşünülmelidir.

00:38.060 --> 00:39.640
üretim kodunuza.

00:39.650 --> 00:47.210
Bir bakıma, son kullanıcılarınız bu işlevselliği asla görmez, ancak fikir ve bu işlevsellikten elde edilen faydalar

00:47.210 --> 00:53.960
Birim testlerinin, özellikle de test odaklı geliştirmenin, bu yatırımın karşılığını vereceğini umuyoruz.

00:53.990 --> 01:01.010
Daha güvenilir bir şekilde çalışan, daha sağlam, ama aynı zamanda daha güvenilir olan sınıflarımız ve sistemlerimiz olacak.

01:01.010 --> 01:08.330
daha az hataya açıktır ve kullanıcılarınız için daha hızlı ve güvenli bir şekilde daha fazla özellik eklemenize olanak tanır

01:08.330 --> 01:11.670
becerilerinizden biri olarak birim testi ile hız.

01:11.690 --> 01:15.190
Şimdi, bu birim testi dünyasında, pek çok farklı terim var.

01:15.200 --> 01:18.320
Burada gördüklerimizden bazıları, sadece birkaç tanesini okuyacağım.

01:18.320 --> 01:23.660
Kompozisyon ve soyutlama, sınıflarınızın ve mimarilerinizin uyum sağlama şekline atıfta bulunur

01:23.660 --> 01:24.470
Birlikte.

01:24.710 --> 01:29.120
Sınıflar ve yöntemler sadece nesne yönelimli programlamanın temelleridir.

01:29.120 --> 01:34.630
Sonra mock ve assertion ve range act ve assert gibi şeyler de.

01:34.640 --> 01:37.850
Bunlar özellikle birim testine atıfta bulunan şeylerdir.

01:37.850 --> 01:42.500
Burada gördüğümüz tüm terimleri gayri resmi bir şekilde ele alacağız.

01:42.500 --> 01:44.810
Muhtemelen onları şimdi ikinci bölümde ele alacağız.

01:44.810 --> 01:46.040
Profesyonel gelişim.

01:46.040 --> 01:52.010
Unity içinde bir oyun geliştiricisi olarak başladığınızda, unity aracını öğrenmek, teoriyi öğrenmek

01:52.010 --> 01:56.840
Birliğin ve tabii ki Do diyez kodlamasının arkasında, mezun olduğunuzu fark ediyorsunuz.

01:56.840 --> 02:01.700
Bu farklı konulardan geçtikçe kavramlar giderek daha karmaşık hale geliyor.

02:01.730 --> 02:06.050
OOP'deki sınıflar gibi şeyler, geliştirme sürecinin başlarında öğrenilen şeylerdir.

02:06.050 --> 02:13.340
Kariyerinizin ilerleyen dönemlerinde, projelerinizi daha modüler, yeniden kullanılabilir, eklenebilir hale getirmeye daha fazla odaklanacaksınız.

02:13.370 --> 02:18.800
Burada esas olan test etmek ve daha sonra büyük ölçüde projelerinizin mimarisi hakkında konuşmak.

02:18.830 --> 02:25.460
İyi mimariye sahip bir projenin işareti, 101. özelliği eklediğinizde

02:25.460 --> 02:26.900
sahip olduğun diğer her şeyi kır.

02:26.930 --> 02:33.050
Şimdi, burada kariyerinde ilerleyen genç bir geliştiricinin olası yollarından birini görüyoruz.

02:33.050 --> 02:38.600
Ve burada bahsettiğimiz becerilerin gerçekten de insanları harekete geçiren şeyler olması özellikle ilginçtir.

02:38.600 --> 02:42.890
Başlangıç seviyesindeki bir geliştiriciden kıdemsiz bir geliştiriciye.

02:42.890 --> 02:49.070
Beceri setinize eklediğiniz bu tür pratik bilgiler size gerçekten yardımcı olacaktır

02:49.070 --> 02:55.040
Mevcut rolünüzde terfi edin veya başka alanlarda katkıda bulunmak için yeni roller ve fırsatlar bulun

02:55.040 --> 02:55.790
Takımlar.

02:55.820 --> 03:02.030
Şimdi, programlama dünyasında ve özellikle de oyun geliştirmede her ekip birim testi kullanmıyor,

03:02.030 --> 03:07.670
Diğer bazı programlama platformlarında ve paradigmalarında olduğu kadar sık bulamazsınız, ancak

03:07.670 --> 03:08.870
burada da aynı derecede önemli.

03:08.870 --> 03:11.150
Şimdi birim testinin neden önemli olduğuna bakalım.

03:11.150 --> 03:12.460
Burada okuyacağım.

03:12.470 --> 03:19.100
Projeniz daha fazla komut dosyası, sınıf ve yöntemle büyüdükçe, aşağıdakileri sağlamanız zorlaşır

03:19.100 --> 03:23.810
Kodunuzun bir bölümündeki bir değişiklik başka bir yerde bir şeyi bozmaz.

03:23.900 --> 03:28.850
Otomatik test, kodunuzun beklendiği gibi çalışıp çalışmadığını kontrol etmenize yardımcı olur.

03:29.150 --> 03:35.870
Test, geliştirme sürecinde ortaya çıkar çıkmaz sorunların nerede ve ne zaman ortaya çıktığını bularak zaman kazandırır,

03:35.870 --> 03:42.290
Manuel testlere güvenmek yerine, hatta son kullanıcılarınızı beklemek daha pahalı olsa da

03:42.290 --> 03:47.030
oyun oyuncuları bir hatayı bildirmek için, hatalarınızı erken bulmanın değeri hakkında biraz konuşalım.

03:47.030 --> 03:54.410
Şimdi, geliştiriciler olarak çoğumuz oyun geliştirme sürecinin yeni özellikler eklemekten ibaret olduğunu düşünüyoruz

03:54.410 --> 03:59.540
ve bunları ne kadar hızlı eklerseniz, son kullanıcılarınıza o kadar fazla değer sunduğunuzu hissediyorsunuz.

03:59.570 --> 04:05.300
Şimdi, bu bir projeye başlamanın eğlenceli bir yolu olsa da, hepimiz özellik eklemenin getirdiği sonuçları biliyoruz

04:05.300 --> 04:13.160
Geliştirme sürecinin başlarında, özellikle de iyi tasarlanmamış, iyi mimarileştirilmemiş bir kod tabanının üzerinde çok hızlı

04:13.160 --> 04:14.210
ya da iyi test edilmiş.

04:14.210 --> 04:21.620
Oyun geliştirme endüstrisinde yapılan araştırmalar 80 üzeri 20 kuralı gibi bir şey gösteriyor.

04:21.620 --> 04:25.250
geliştirme hataları özelliklerinizin sadece %20'sinden kaynaklanır.

04:25.250 --> 04:29.780
Çekirdek karmaşıklığı genellikle kod tabanının dar bir köşesinde yer alır.

04:29.780 --> 04:36.080
Proje, organizasyon ya da bunların eksikliği, tekrar eden muazzam sorunlara neden olabilir.

04:36.110 --> 04:42.050
Aynı eski yangınlarla tekrar tekrar mücadele etmek zorunda kalıyorsunuz, çünkü tasarımınız ve

04:42.050 --> 04:46.070
o bölgenin güvenli bir şekilde geliştiğini kanıtlamak için test etmek.

04:47.120 --> 04:49.770
Geliştirme zamanının %80'i kodlama bakımıdır.

04:49.790 --> 04:55.190
Şimdi bunu duymak korkutucu bir şey, ancak büyük kod tabanında gördüğümüz şey bu.

04:55.220 --> 05:01.100
Bir oyunu altı ay içinde piyasaya sürdüğünüzü ve hata ayıklarken 1 veya 2 yıl daha desteklediğinizi düşünün

05:01.100 --> 05:03.210
düzeltmeler ve yeni özellikler ekleme.

05:03.230 --> 05:05.800
Bu çok basit bir oyun örneğidir.

05:05.810 --> 05:12.020
Bu süreçte bile, bir geliştiriciye harcadığınız zamanın %80'inin bunları eklemek olmadığını görüyoruz.

05:12.020 --> 05:12.890
yeni özellikler.

05:12.890 --> 05:20.030
Eski sistemlerdeki hataları daraltmak ve bulmak ve ilk altı ay olarak yeniden düzenleme yapmak.

05:20.060 --> 05:24.050
Mimarlık, mimarlığın ikinci altı ayına uymayabilir.

05:24.080 --> 05:29.300
Projeniz büyüyecek ve ekibiniz öğrenecek, bu nedenle değişiklikler yapacaksınız

05:29.300 --> 05:30.150
Yol boyunca.

05:30.170 --> 05:31.430
Sorun yok.

05:31.460 --> 05:33.950
Bu değişiklikler genellikle yeniden düzenleme olarak adlandırılır.

05:33.950 --> 05:39.860
Refactoring, kodunuzu daha verimli hale getirmek ve son tüketicilerinize aynı değeri sunmaktır.

05:39.890 --> 05:45.530
Her refactor, üstüne yeni özellikler eklemek için yeni bir başlangıç noktasına sahip olmanızı sağlar.

05:45.530 --> 05:52.460
Yani burada gördüğümüz şey, test yapmak için iyi uygulamalar oluşturmanın, bu konuda yardımcı olacağıdır.

05:52.460 --> 05:56.450
Kod bakımı, zamanımızın çoğunu harcadığımız %80'lik kısma yardımcı olacaktır.

05:56.450 --> 06:02.480
Daha önce de belirttiğim gibi, yazılım hatalarının maliyetinin zaman içinde arttığına bir göz atalım.

06:02.480 --> 06:08.420
Şimdi, araştırmanın bu özel dilimi gösteriyor ki, eğer bir meslektaşınızla aşağıdakiler hakkında konuşuyorsanız

06:08.420 --> 06:13.250
bir oyun özelliğine sahipseniz ve içinizden biri sorun olabilecek bir şeye işaret ederse, bunu düzeltiyorlar,

06:13.280 --> 06:15.420
Bu konuşma çok ucuz.

06:15.440 --> 06:22.340
Buna x kadar zaman ve çaba diyelim ve bunu uygularken çok düşük bir zaman ve çaba harcarsınız.

06:22.340 --> 06:28.430
projesinde, aynı hatayı kodladıktan sonra bulmak daha zor ve daha zordur.

06:28.430 --> 06:30.860
ve düzelttiğinizden emin olun.

06:30.860 --> 06:36.860
Testinizi yaptıktan sonra bunu müşterilerinize test etmeleri için iletirsiniz ve sonra gönderirsiniz.

06:36.860 --> 06:38.400
son oyun oyuncularınıza.

06:38.420 --> 06:41.000
Aynı sorunu bulan bir oyun oyuncusunu hayal edin.

06:41.030 --> 06:44.330
Bu konuda hayal kırıklığına uğrayacaklar.

06:44.330 --> 06:47.510
Belki de bu, oyun hakkındaki düşüncelerini olumsuz etkiliyordur.

06:47.510 --> 06:50.060
Hatta bir oyuncu olarak onları kaybedebilirsiniz.

06:50.060 --> 06:55.400
Ancak seslerini duyurabilen bir kişilerse ve müşteri desteği için iyi bir kanalınız varsa ve bunu gönderiyorlarsa,

06:55.430 --> 07:00.950
hata biletleme sisteminize girer, sonunda atanır, sonunda düzeltilir, belki de

07:00.950 --> 07:06.950
düzgün bir şekilde düzeltilir veya düzeltilmez ve sonra bu güncellemeyi son kullanıcılara gönderirsiniz, bu kullanıcının

07:06.980 --> 07:08.270
ihtiyaçlar ele alınmıştır.

07:08.300 --> 07:09.590
Çok daha pahalı.

07:09.590 --> 07:10.210
Sonunda.

07:10.220 --> 07:15.480
Birim testlerinin her şeyden önce yazılımımızı daha iyi tasarlamamıza olanak sağladığını göreceğiz.

07:15.500 --> 07:22.550
İkinci olarak, projenize testler koyun, böylece bu otomatik testler bu hatayı daha erken bulacaktır.

07:22.550 --> 07:28.130
Belki de entegrasyon aşamasında, burada gördüğümüz gibi, ilk aşamada düzeltmek kadar iyi değildir.

07:28.130 --> 07:32.240
ama projenin yayınlanmasını beklemekten çok daha iyi.

07:32.480 --> 07:38.090
Burada vurgulanan en iyi uygulamalardan bazıları sürdürülebilir kod oluşturmak, kodun

07:38.090 --> 07:44.150
Kodunuzda sahip olduğunuz otomasyon ve test, hatalarınızı erken ve sık sık yakalamak ve bunları düzeltmek

07:44.150 --> 07:46.490
Yeni özellikler eklemeden önce hatalar.
