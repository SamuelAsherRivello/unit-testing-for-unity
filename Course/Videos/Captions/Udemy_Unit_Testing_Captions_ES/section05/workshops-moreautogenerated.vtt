WEBVTT

00:00.080 --> 00:00.300
Hola

00:00.320 --> 00:06.050
Eso cubre muchos de los diferentes temas que quería tener en el taller hasta ahora, pero hay

00:06.050 --> 00:08.570
mucho espacio para más temas en el futuro.

00:08.570 --> 00:10.940
que hemos visto en los talleres cubiertos hasta ahora.

00:10.940 --> 00:17.930
Este ejemplo más simple aprendiendo el ejecutor de pruebas, viendo cómo podemos hacer pruebas en modo reproducción, pruebas en modo edición,

00:17.960 --> 00:23.420
aprendiendo un poco sobre las diferencias entre el modo reproducción y el modo edición, y por qué querrías hacer pruebas

00:23.420 --> 00:25.930
en uno u otro, o en ambos.

00:25.940 --> 00:32.060
Luego también vimos algunas de las opciones que tenemos cuando tenemos funcionalidad asíncrona, o cuando estamos

00:32.060 --> 00:34.040
dependientes de otros sistemas.

00:34.040 --> 00:38.540
¿Qué podríamos hacer para reducir esa dependencia por el bien de la prueba?

00:38.570 --> 00:43.760
A lo largo del camino, estamos aprendiendo algunas cosas diferentes acerca de la inyección de dependencia y la separación de

00:43.760 --> 00:45.230
las preocupaciones de nuestro código.

00:45.260 --> 00:51.290
Estos principios son útiles en el código de producción de todos modos, y estamos empezando a ver algunas de las maneras

00:51.290 --> 00:58.400
que cuando se prepara el código para ser más comprobable, también estamos creando código que está bien diseñado

00:58.400 --> 00:59.660
para la producción.

00:59.660 --> 01:06.290
Así que tener la inyección de dependencia permite la flexibilidad que puede utilizar en tiempo de ejecución, la reducción de la complejidad

01:06.290 --> 01:12.920
de tus sistemas pasando variedades flexibles de diferentes dependencias cuando lo necesites.

01:12.950 --> 01:20.540
También hemos visto al separar un gran monocomportamiento monolítico en sólo lo que necesitamos del monocomportamiento

01:20.540 --> 01:27.200
y moviendo el resto del código a una clase más ligera que no sea monocomportamiento, obtenemos de nuevo cierta flexibilidad

01:27.200 --> 01:32.150
que es útil en la producción y también nos ayuda aquí en el mundo de las pruebas.

01:32.150 --> 01:38.780
Creo que en general algunos de los retos que estamos viendo son lo que sucede cuando se tienen múltiples dependencias

01:38.780 --> 01:43.250
o muchos sistemas llamados desde un método en particular.

01:43.610 --> 01:49.250
Eso podría ser una señal de que ese método está hinchado y haciendo demasiado, o podría ser una señal de que es

01:49.250 --> 01:51.680
un diseño delgado y apropiado.

01:51.680 --> 01:57.350
Pero necesitamos tener algunas ideas y consideraciones adicionales cuando vayamos a probar esa funcionalidad.

01:57.350 --> 01:59.600
Espero que esto te haya sido útil.

01:59.600 --> 02:06.680
Espero cubrir aún más temas en esta serie también, y se añadirán de nuevo en más de

02:06.680 --> 02:07.190
tiempo.

02:07.190 --> 02:08.300
Gracias de nuevo.
