WEBVTT

00:00.080 --> 00:03.050
Hola y bienvenidos a Unit testing for unity.

00:03.080 --> 00:04.310
Estamos en el taller.

00:04.310 --> 00:08.450
Y en este vamos a echar un vistazo al carácter de forma básica.

00:08.450 --> 00:10.700
Vamos a ver algunos diferentes.

00:10.730 --> 00:13.400
Empezaremos con lo básico y pasaremos a algo más avanzado.

00:13.400 --> 00:15.080
Echemos un vistazo a esta demo en acción.

00:15.080 --> 00:16.520
Dentro del editor unity.

00:16.520 --> 00:19.430
Vamos a abrir unity, abrir nuestro proyecto de ejemplo.

00:19.430 --> 00:23.360
Y luego vamos a jugar una o más escenas relacionadas con el tema aquí.

00:23.360 --> 00:29.270
La escena va a ser el carácter básico, y voy a estar hablando de Monobehaviour como algo

00:29.270 --> 00:34.760
que puede o no puede ser probado, así como el modo de juego frente al modo de edición, algo que he mencionado

00:34.760 --> 00:36.020
anteriormente en el curso.

00:36.050 --> 00:37.640
Lo traeremos aquí de nuevo y hablaremos de ello.

00:37.640 --> 00:39.980
Aquí estamos en el proyecto viendo el carácter básico.

00:39.980 --> 00:41.390
Vamos a ejecutar la escena.

00:46.760 --> 00:53.600
Así que mientras la mayoría de los talleres que hemos hecho ya tenían una escena bastante aburrida donde absolutamente nada

00:53.630 --> 00:56.420
de interés está sucediendo aquí, tenemos un poco más.

00:56.450 --> 01:02.080
Cuando le damos al play ahí, vemos un cubo blanco que se hace crear en el centro de la pantalla.

01:02.090 --> 01:04.640
Puedo usar las flechas del teclado y moverme.

01:04.640 --> 01:11.540
Aunque se trata de un ejemplo muy simple, se trata de hablar de algunas de las funciones más complejas.

01:11.540 --> 01:14.200
aspectos de las pruebas dentro de la unidad.

01:14.210 --> 01:19.340
En las escenas anteriores, no estábamos preocupados por el renderizado de gráficos o la toma de entrada.

01:19.580 --> 01:26.450
En el último taller hablamos de la diferencia entre probar varias dependencias diferentes

01:26.450 --> 01:27.200
juntas.

01:27.200 --> 01:32.390
Por ejemplo, un método que dentro llama a un segundo método que dentro llama al tercero.

01:32.420 --> 01:34.100
Esas son dependencias.

01:34.130 --> 01:40.400
Aquí estamos hablando de un aspecto similar, excepto que cada vez que quiero mover mi personaje, primero

01:40.400 --> 01:47.360
pido escuchar el sistema de entrada de Unity, luego uso el movimiento de transformación Monobehaviour de Unity.

01:47.360 --> 01:47.770
Correcto.

01:47.780 --> 01:52.460
Así que estamos usando diferentes dependencias o diferentes clases.

01:54.970 --> 01:58.240
Aquí puedo usar las flechas para moverme.

01:59.360 --> 02:00.800
Y eso es todo.

02:02.750 --> 02:05.690
Pero la idea es que estamos haciendo un poco más que antes.

02:05.780 --> 02:08.250
Hablemos de las implicaciones de probar eso.

02:08.270 --> 02:14.780
Así que aquí arriba en el ejecutor de pruebas, tengo la categoría establecida a nuestro carácter básico, lo cual es genial.

02:14.810 --> 02:20.420
Entonces puedo cambiar para ver las pruebas del modo de juego así como las pruebas del modo de edición.

02:20.450 --> 02:26.720
Podemos ver que tenemos algo de ambos, pero como hay un monocomportamiento involucrado, voy a

02:26.720 --> 02:28.190
centrarme más en el modo de juego.

02:28.220 --> 02:34.820
Ahora, en cada uno de los talleres, he incluido al menos una prueba del modo edición y al menos una del modo reproducción

02:34.850 --> 02:37.020
para la escena en cuestión.

02:37.040 --> 02:42.620
Lo he hecho de nuevo aquí, pero dependiendo de lo que realmente está probando, usted quiere pensar, es esto

02:42.620 --> 02:47.060
más apropiado para el modo de edición o es más apropiado para el modo de reproducción?

02:47.090 --> 02:52.130
Hay un arte y una ciencia en cómo enfocar eso, y en cómo diseñar tu código para que sea más

02:52.130 --> 02:52.760
comprobable.

02:52.790 --> 02:59.600
Pero una forma general de verlo que es relevante aquí es que si estás usando funcionalidad Monobehaviour,

02:59.600 --> 03:02.270
que suena más como una prueba de modo de juego.

03:02.300 --> 03:08.540
Cuantas más librerías unity, particularmente en tiempo de ejecución, estés usando en tu producción, querrás pensar

03:08.540 --> 03:10.460
sobre esas pruebas de modo de juego.

03:10.490 --> 03:13.970
No es una regla rígida, pero es una buena manera de empezar a pensar en ello.

03:14.240 --> 03:16.110
Hagamos nuestras pruebas.

03:16.130 --> 03:18.890
Tengo el modo de reproducción y voy a ejecutarlo todo.

03:22.470 --> 03:22.800
De acuerdo.

03:22.830 --> 03:25.650
Tardó un par de segundos en ejecutarse, pero los tenemos todos.

03:25.680 --> 03:31.650
Lo que realmente sucede cuando se está ejecutando una prueba de modo de juego es que crea una nueva escena vacía y

03:31.650 --> 03:35.430
ejecuta sólo una prueba dentro de ella, y la destruye.

03:35.430 --> 03:42.630
Y crea una nueva escena garantizando que tenemos el espacio del mundo proporcionado por una escena.

03:42.630 --> 03:49.590
Pero la frescura de una nueva escena que no tiene ninguna dependencia o información obsoleta que pueda influir en

03:49.590 --> 03:50.220
la prueba.

03:50.220 --> 03:51.820
Así que nos gusta cómo está configurado.

03:51.840 --> 03:58.620
Ahora, las cosas que estoy haciendo son moverme, moverme por código clave y moverme a un lugar en particular.

03:58.620 --> 04:01.260
Así que echemos un vistazo a este movimiento para probar.

04:03.240 --> 04:05.580
En realidad, echemos un vistazo primero al código de producción.

04:05.580 --> 04:08.550
Así que si voy aquí y miro el ejemplo básico.

04:10.370 --> 04:12.140
Este es el código de producción.

04:12.140 --> 04:14.330
Vamos a ver que antes de ir a las pruebas.

04:14.330 --> 04:17.570
Aquí todo lo que hago es crear una primitiva.

04:17.600 --> 04:22.610
Usted podría imaginar también la carga de un prefabricado aquí si quería hacer eso.

04:22.610 --> 04:27.620
Pero quería meternos poco a poco en todas las complejidades del runtime y unity.

04:27.620 --> 04:29.750
Así que no estoy usando un prefab aquí.

04:29.750 --> 04:33.740
Simplemente creo un nuevo cubo desde cero con una línea de código.

04:33.740 --> 04:40.430
Le doy un nombre sólo para organizarlo, y luego añado el componente del mono-comportamiento

04:40.430 --> 04:42.230
que quiero probar.

04:42.230 --> 04:48.350
Entonces una de las cosas que estoy haciendo es simplemente moverlo al punto de 000, y luego mostrar que

04:48.350 --> 04:49.910
en la pantalla.

04:49.910 --> 04:52.490
Echemos un vistazo al código fuente.

04:55.160 --> 04:56.540
Aquí está el carácter básico.

04:56.570 --> 04:58.370
Esto extiende Monobehaviour.

04:58.400 --> 05:06.330
Ahora, si estás familiarizado con unity, probablemente uses Monobehaviours todo el tiempo como una buena práctica.

05:06.350 --> 05:09.200
Quieres empezar a pensar a conciencia.

05:09.200 --> 05:14.260
¿Cuándo es apropiado utilizar un comportamiento único y cuándo puedo utilizar algo diferente?

05:14.270 --> 05:20.180
Como desarrolladores principiantes, creamos todo como un hijo del mono-comportamiento, pero con el tiempo y la experiencia

05:20.180 --> 05:23.510
te das cuenta de que hay pros y contras de usar mono-comportamientos.

05:23.510 --> 05:28.220
Uno de los contras es que, históricamente, era más difícil hacer pruebas sobre la marcha.

05:28.220 --> 05:30.170
Unity proporcionó estas pruebas de modo de juego.

05:30.170 --> 05:34.550
Así que ahora sin duda podemos probar Playmode y podemos probar Monobehaviours.

05:34.550 --> 05:37.230
Eso es genial, pero aún hay algunos inconvenientes.

05:37.250 --> 05:41.930
De nuevo, Monobehaviour va a depender de más sistemas de unidad bajo el capó.

05:41.930 --> 05:47.300
Y cuando estamos tratando de probar nuestro código personalizado, es posible que no estemos seguros de dónde puede estar el problema.

05:47.330 --> 05:49.320
¿Es nuestro código o es el código de Unity?

05:49.340 --> 05:51.710
De nuevo, hay algunas dependencias.

05:51.740 --> 05:55.880
Todo esto está bien, pero es algo en lo que querrás pensar cuando diseñes tus clases y como...

05:55.880 --> 05:57.290
estás diseñando tus pruebas.

05:57.710 --> 06:00.680
Así que tenemos una velocidad de movimiento.

06:00.710 --> 06:02.060
Tenemos un tipo de movimiento.

06:02.060 --> 06:04.970
Esta es la dirección de la flecha que estoy pulsando.

06:04.970 --> 06:07.280
Luego usamos la actualización de Unity.

06:07.310 --> 06:10.160
Ahora déjame comprobarlo dos veces.

06:12.330 --> 06:12.810
De verdad.

06:12.810 --> 06:18.540
El bucle de actualización es la única funcionalidad importante del mono comportamiento que estoy usando.

06:18.570 --> 06:22.740
El resto de este código no tiene que estar necesariamente en un mono-comportamiento.

06:22.770 --> 06:27.170
También estoy usando el sistema de entrada de Unity, así que esa es una segunda dependencia.

06:27.180 --> 06:30.370
Veamos que hago en cada frame de actualización.

06:30.390 --> 06:32.940
Llamo a este método de aquí move by input.

06:32.970 --> 06:37.920
Compruebo si el usuario está pulsando una tecla o teclas concretas del teclado.

06:37.920 --> 06:41.970
Y luego llamo a mover por código de tecla aquí abajo.

06:43.280 --> 06:49.820
Todo lo que hacemos es decir, si actualmente nos estamos moviendo a la izquierda, entonces vamos a movernos en un vector para la dirección izquierda.

06:49.820 --> 06:53.420
Si actualmente nos estamos moviendo a la derecha y etcétera para arriba y abajo.

06:53.420 --> 06:58.460
Así que esto te permitiría moverte en las cuatro direcciones usando las cuatro teclas de flecha.

06:58.460 --> 07:00.020
Un código bastante sencillo.

07:00.020 --> 07:04.040
Y si has creado tu propio personaje personalizado antes, estarás familiarizado con la configuración de algo como

07:04.040 --> 07:04.610
esto.

07:07.590 --> 07:09.480
Aquí abajo, tenemos dos métodos.

07:09.480 --> 07:14.850
Uno que nos permite movernos a un punto en particular y otro que nos permite movernos por una unidad.

07:14.850 --> 07:17.700
Digamos que quiero moverme a la derecha una unidad.

07:17.700 --> 07:22.110
Podría pasar una unidad por una unidad por una unidad.

07:22.110 --> 07:27.350
Si quiero moverme directamente a un punto concreto del espacio, ese sería el movimiento a.

07:27.360 --> 07:33.390
Así que estos no son necesariamente los únicos métodos que necesitaría en una clase de caracteres personalizados, pero hay

07:33.390 --> 07:34.710
algunos bastante comunes.

07:34.710 --> 07:41.460
Así que vamos a terminar esta lección aquí con sólo esto como una forma básica y adecuada de trabajo para probar algunas funcionalidades.

07:41.460 --> 07:46.920
Si quieres echar un vistazo al modo de edición o a las otras pruebas que están aquí en el modo de reproducción, adelante

07:46.920 --> 07:47.820
y hazlo.

07:47.850 --> 07:49.440
Pasaré al siguiente vídeo.

07:49.440 --> 07:50.190
Gracias.
