WEBVTT

00:00.050 --> 00:02.240
Hola y bienvenidos a Unit Testing for unity.

00:02.270 --> 00:05.270
Este es nuestro taller hablando sobre la física de los personajes.

00:05.300 --> 00:11.750
Ahora, en los talleres anteriores nos hemos movido lentamente desde un ejemplo de personaje muy simple, moviendonos con flecha

00:11.750 --> 00:17.600
hasta el ejemplo avanzado separando las preocupaciones de Mono comportamiento y no mono comportamiento.

00:17.600 --> 00:22.580
Y aquí en este vamos a hablar de bueno, ¿qué pasa si dependemos de otro sistema de unidad

00:22.580 --> 00:23.540
como la física.

00:23.540 --> 00:29.360
Y también cuando estamos usando la física en este ejemplo en particular nuestro movimiento se vuelve más confuso.

00:29.360 --> 00:33.500
Lo que significa que no hago clic a la izquierda e inmediatamente hace clic en una posición.

00:33.500 --> 00:35.570
Se mueve lentamente con el tiempo.

00:35.570 --> 00:39.740
¿Cómo podríamos probar el valor que cambia lentamente con el tiempo?

00:39.740 --> 00:42.860
Así que vamos a hablar de algunas de esas cosas aquí en el código fuente.

00:42.860 --> 00:47.930
Así que para echar un vistazo a esta demo, vamos a abrir nuestro editor unity y el proyecto de ejemplo.

00:47.930 --> 00:50.660
La escena aquí va a ser la escena de la física del personaje.

00:50.660 --> 00:54.330
Y una de las cosas que vamos a ver es cómo probar esos valores difusos.

00:54.350 --> 01:01.280
Lo llamé de nuevo, valores difusos para mí es valores que no son necesariamente instantáneamente cambiando de

01:01.280 --> 01:02.270
A a B.

01:02.270 --> 01:09.500
Se animan lentamente con el tiempo, como la posición de un objeto o una puntuación que se cuenta gradualmente.

01:09.560 --> 01:14.720
Todas estas son áreas en las que te gustaría ser capaz de probar algo en el tiempo, y tenemos un enfoque fácil

01:14.720 --> 01:15.860
aquí para hacerlo.

01:15.860 --> 01:20.360
No es la única manera de resolverlo, pero creo que nos ayuda a aprender por el camino.

01:20.360 --> 01:21.410
Así que echemos un vistazo.

01:21.410 --> 01:23.060
Aquí estamos en el proyecto unity.

01:23.060 --> 01:25.580
Tenemos abierto el ejemplo de física de personajes.

01:25.580 --> 01:27.140
Vamos a ejecutar la escena.

01:33.260 --> 01:36.170
Ahora puedo moverme usando las flechas del teclado.

01:40.030 --> 01:45.610
Y en ejemplos anteriores aquí en el taller, hemos visto que hace clic sobre cada clic que hice a la izquierda

01:45.610 --> 01:51.040
la posición cambiaba instantáneamente, pero aquí hay un movimiento más suave.

01:51.670 --> 01:56.890
Todavía puedo utilizar todas las teclas de flecha para dirigir el tráfico diferente de la forma en que debe ir, pero la idea

01:56.890 --> 02:00.670
de que se mueva lentamente con el tiempo es realmente la situación novedosa ahora.

02:00.670 --> 02:06.430
Hay un montón de maneras que usted podría hacer eso en la unidad, pero he optado por utilizar el sistema de física sólo para hablar

02:06.430 --> 02:11.530
un poco acerca de lo que sucede si tenemos un poco más de los sistemas de la unidad involucrados.

02:11.530 --> 02:13.570
¿Recuerdas con qué nos hemos estado estirando?

02:13.600 --> 02:20.770
Y como una idea aquí es que en un mundo ideal, usted consigue su unidad de pruebas para probar el menor número de líneas de

02:20.770 --> 02:24.400
dependencia, el menor número de líneas de código a la vez.

02:24.400 --> 02:28.240
Pero muchas veces nuestro código de producción no es tan simplista.

02:28.240 --> 02:30.160
Dependemos de cosas diferentes.

02:30.160 --> 02:35.620
Así que con el cargador My Data y con ejemplos anteriores de caracteres aquí, hemos visto algunas de las formas de

02:35.650 --> 02:37.750
manejar esas diferentes dependencias.

02:37.780 --> 02:40.900
Este es otro ejemplo un poco más complejo que el resto.

02:40.930 --> 02:42.880
Echemos un vistazo al código de producción aquí.

02:42.880 --> 02:45.760
Aquí veremos el ejemplo de la física del personaje.

02:47.240 --> 02:48.440
¿Lo abrimos?

02:49.860 --> 02:53.160
Y aquí tenemos la creación de una primitiva de personaje.

02:53.970 --> 03:02.490
Aquí creamos primero el objeto de juego con el cubo en apariencia para la primitiva, y luego añadimos

03:02.490 --> 03:06.120
el componente del monocomportamiento físico del personaje.

03:06.120 --> 03:09.690
Y luego tenemos una clase separada de la física del personaje que tomamos allí.

03:09.690 --> 03:15.360
Así que ya estamos separando de una clase monolítica de mono-comportamiento en dos.

03:15.360 --> 03:21.000
Así que esa es una buena manera de conseguir nuestro código más simplista y hacer un solo propósito cada uno allí.

03:21.000 --> 03:28.260
Vimos en el ejemplo anterior que la mayor parte de la funcionalidad Monobehaviour que necesitábamos era sólo la actualización.

03:28.260 --> 03:30.330
Eso es lo único de lo que realmente necesitábamos ocuparnos.

03:30.330 --> 03:35.760
Así que moviendo todas las cosas no actualización en la segunda clase, ahora tenemos algo que es más fácil de

03:35.760 --> 03:36.360
probar.

03:39.080 --> 03:42.210
Entonces, en este sencillo ejemplo, nos movemos a una posición particular.

03:42.230 --> 03:46.340
Ahora vamos a ejecutar las pruebas y luego vamos a echar un vistazo al código de producción.

03:46.370 --> 03:49.130
Así que aquí vamos a echar un vistazo a la ejecución de los seleccionados.

03:51.190 --> 03:52.480
Ya está todo funcionando.

03:52.500 --> 03:53.500
Todo pasa.

03:53.520 --> 03:55.290
Ahora es sólo la prueba del modo de juego.

03:55.290 --> 03:59.760
Pero también tenemos pruebas de modo de edición si quieres profundizar y echar un vistazo de nuevo, porque estamos

03:59.760 --> 04:01.600
tratando con cosas de mono-comportamiento.

04:01.620 --> 04:03.990
Parece más apropiado usar un modo de reproducción.

04:03.990 --> 04:05.610
Así que ese es el enfoque que he hecho aquí.

04:05.610 --> 04:09.090
Pero depende de ti y de tu proyecto decidir qué sistemas quieres probar.

04:09.120 --> 04:10.860
Modo edición y cuáles quieres probar.

04:10.890 --> 04:11.430
Modo Play.

04:18.220 --> 04:23.620
Así que ahora que hemos visto estas pruebas, echemos un vistazo rápido al código fuente de la clase.

04:23.620 --> 04:25.300
Y luego vamos a ver algunas de las pruebas en la parte superior.

04:25.330 --> 04:25.510
De acuerdo.

04:25.510 --> 04:27.380
Así que aquí estamos en la física de caracteres.

04:27.400 --> 04:31.520
Vamos a ver que es bastante similar a la avanzada de carácter que vimos por última vez.

04:31.540 --> 04:35.470
De nuevo hemos separado la clase Monobehaviour de la que no lo es.

04:35.470 --> 04:39.250
Así que aquí está la clase no mono-comportamiento que está haciendo la mayor parte del trabajo.

04:39.280 --> 04:45.460
Fíjate que dentro de su constructor toma una referencia al Monobehaviour y la almacena y luego

04:45.460 --> 04:50.320
también pasa al Monobehaviour una referencia a esta clase.

04:50.320 --> 04:54.550
Esto es para que pueda llamar al movimiento cada vez que haga una actualización.

04:54.580 --> 04:56.620
Ahora hay diferentes maneras de organizar eso.

04:56.620 --> 05:00.460
Incluso podrías eliminar la dependencia codificada que tenemos entre nosotros.

05:00.460 --> 05:04.000
Pero en aras de la simplicidad en este ejemplo, esto es muy apropiado.

05:04.360 --> 05:05.410
Bajando por el código.

05:05.410 --> 05:08.470
De nuevo, es como el avanzado en la mayoría de las partes.

05:08.500 --> 05:11.290
Quiero señalar dónde se usa la física.

05:11.290 --> 05:19.540
Así que aquí en el movimiento, en lugar de sólo mover por la posición hardcoded sobre una instancia Taneous actualización,

05:19.570 --> 05:22.960
vamos a utilizar la posición de movimiento aquí.

05:22.960 --> 05:28.510
Y luego en Añadir fuerza, que es un nuevo método que hice que se va a mover sobre la base de la física

05:28.510 --> 05:29.200
fuerzas.

05:29.200 --> 05:33.250
Así que imagina que esto es un bloque y estamos dando un empujón en un lado.

05:33.250 --> 05:39.010
Y a continuación, sobre la base de la fricción y la masa y la gravedad, usted sabe que hay algún tipo de consecuencia que tiende a

05:39.010 --> 05:41.890
a ser una reacción más borrosa aquí usando la fuerza de adición.

05:41.890 --> 05:48.220
Y nos estamos moviendo por add force aquí arriba en la parte superior del mismo archivo de clase vemos la física monobehaviour

05:48.220 --> 05:49.240
es declarado.

05:49.240 --> 05:55.210
Es bastante familiar en el sentido de que el mismo carácter avanzado que vimos en el último taller se parece bastante,

05:55.210 --> 05:58.000
pero tenemos un cuerpo rígido aquí que estamos almacenando.

05:58.000 --> 06:04.630
Y luego, cuando esta clase se despierta, hacemos un poco de fijación del cuerpo rígido y, a continuación, establecer algunos física

06:04.630 --> 06:05.320
valores.

06:05.320 --> 06:12.070
Así que si pensamos en una especie de recapitulación en lugar de tener un mono-comportamiento que hace toda la física

06:12.070 --> 06:16.840
y el movimiento juntos, hemos separado el mono-comportamiento del no mono-comportamiento.

06:16.870 --> 06:23.130
Entonces dentro del Monobehaviour hacemos el bucle de actualización y también nos encargamos de algunas cosas de física.

06:23.140 --> 06:29.200
Luego desde el otro, el que no es Monobehaviour, podemos movernos como queramos y tomar la entrada del personaje,

06:29.200 --> 06:31.110
por lo que tomar la entrada de teclado y cosas por el estilo.

06:31.120 --> 06:35.560
Es una separación bastante buena y nos pone en marcha con lo que necesitamos.

06:36.740 --> 06:40.430
Déjame pensar en voz alta si hay algo más que quiera mencionar sobre esto.

06:40.970 --> 06:43.070
Um, si.

06:43.070 --> 06:45.230
Así que me burlé de la idea aquí.

06:45.230 --> 06:53.030
Si quisieras reducir la dependencia codificada que tenemos, cada clase dependiendo de la otra

06:53.030 --> 06:58.910
y obtener más de la flexibilidad que vimos en el ejemplo del cargador My Data, sin duda podría declarar

06:58.910 --> 07:03.320
interfaces y abordarlo de esa manera, pero no necesitamos hacer eso aquí.

07:03.320 --> 07:06.020
Volveremos a ejecutar el ejemplo una vez más.

07:06.020 --> 07:10.340
Así que aquí en unity estamos corriendo y tenemos las teclas de flecha moviéndose.

07:10.370 --> 07:15.770
En los últimos vídeos hemos visto ejemplos de reducción de la complejidad.

07:15.770 --> 07:20.480
Así que reduciendo diferentes dependencias algo de flexibilidad para separar nuestro código.

07:20.480 --> 07:26.120
Así que por el bien de este ejemplo aquí utilizando la entrada y la física y monobehaviours o cosas por el estilo I

07:26.120 --> 07:27.250
creo que ya hemos terminado.

07:27.260 --> 07:27.980
Gracias.
