WEBVTT

00:00.140 --> 00:01.400
Diseño de software.

00:01.400 --> 00:02.360
Visión general.

00:02.510 --> 00:05.980
Empecemos con la teoría de los principios de diseño.

00:06.020 --> 00:10.620
Los desarrolladores veteranos pueden hacer que parezca fácil, pero el código limpio no se escribe por casualidad.

00:10.640 --> 00:17.330
Para crear buenos proyectos hay que utilizar principios sólidos, buenos flujos de trabajo y patrones productivos.

00:17.330 --> 00:18.540
en tu proceso.

00:18.560 --> 00:21.300
En primer lugar, hablemos de los principios de diseño.

00:21.320 --> 00:24.920
Estas son las filosofías que conducen a un desarrollo de software productivo.

00:24.920 --> 00:32.420
Los beneficios incluyen una planificación más rápida, una comunicación clara y concentración durante el desarrollo.

00:32.570 --> 00:37.310
La historia de la informática está llena de estos principios de diseño.

00:37.340 --> 00:39.750
Repasaré algunos de los más populares.

00:39.770 --> 00:46.070
Esta es una excelente oportunidad para que investigues por tu cuenta los que te resulten nuevos, y para que

00:46.070 --> 00:49.280
profundizar en las que ya conoces.

00:49.280 --> 00:56.150
Empecemos con los principios sólidos, donde cada letra de sólido corresponde a un principio de diseño.

00:56.330 --> 01:04.430
El principio de responsabilidad única es el deseo general de que cada una de tus clases y estructuras

01:04.430 --> 01:05.990
haga una sola cosa.

01:05.990 --> 01:13.910
El principio abierto cerrado significa que cada clase debe estar abierta a la extensión, pero cerrada a la modificación.

01:13.910 --> 01:19.160
Con la programación orientada a objetos, tienes herencia e interfaces.

01:19.160 --> 01:27.740
El principio de Sustitución de Liskov establece que cualquier subtipo debe ser capaz de ser moldeado como el padre.

01:27.770 --> 01:28.100
tipo.

01:28.100 --> 01:35.900
La segregación de interfaces significa que no debemos aplicar a un tipo dado más interfaces de las necesarias.

01:35.900 --> 01:41.870
Y por último, la inversión de dependencias indica que cuando se trata de código alto y código bajo en

01:41.870 --> 01:49.190
un sistema, el código de alto nivel no debería depender de implementaciones concretas del código de bajo nivel.

01:49.190 --> 01:52.760
En su lugar debería usar algo como interfaces para abstraer eso.

01:52.760 --> 01:55.060
Algunos otros conceptos populares incluyen.

01:55.070 --> 01:56.360
No te repitas.

01:56.360 --> 02:02.840
Este es un recordatorio que usamos como desarrolladores que si te encuentras copiando pegando código literal

02:02.840 --> 02:08.780
o conceptos, puede haber un enfoque sistemático que nos ayude a reutilizar ese código de manera más eficiente.

02:08.810 --> 02:15.500
Keep it simple nos recuerda que no debemos complicar en exceso nuestras soluciones.

02:15.500 --> 02:19.460
Nos recuerda que no construyamos hoy las soluciones del mañana.

02:20.150 --> 02:21.800
En desarrollo iterativo.

02:21.800 --> 02:27.980
Queremos resolver los retos que tenemos ante nosotros ahora con principios sólidos y no diseñar algo que

02:27.980 --> 02:30.080
sea necesariamente a prueba de futuro.

02:30.110 --> 02:36.500
A menudo no sabemos lo que nos deparará el futuro, y diseñar para mañana es una complicación innecesaria.

02:36.500 --> 02:42.800
Practicar los principios aquí expuestos y aplicarlos a tu proyecto te proporcionará automáticamente

02:42.800 --> 02:49.080
más escalabilidad, mantenibilidad y calidad de vida como desarrollador.

02:49.100 --> 02:54.800
Cuando pensamos en estos principios de diseño de software en esta sección en particular, empezamos desde un alto

02:54.800 --> 03:00.570
nivel teórico cosas que pueden ser más universales a través de diferentes plataformas de programación.

03:00.590 --> 03:06.470
Luego nos adentraremos en más de las tuercas y tornillos de cómo se aplica, en particular dentro de la unidad.

03:06.470 --> 03:12.920
Pero te darás cuenta de esta diferencia en la que hablamos a alto nivel y luego concretamente a bajo nivel.

03:12.920 --> 03:18.920
Y a través de eso puedes desarrollar tu propio estilo personal de cuáles de estos principios impactan en tu

03:18.920 --> 03:20.930
vida laboral diaria más que otros.

03:20.960 --> 03:26.510
También llegaremos a reconocer algunos de estos principios a través de las arquitecturas que utilizamos, y

03:26.510 --> 03:29.990
en última instancia, el código que hacemos juntos en las secciones de codificación.

03:30.020 --> 03:31.160
Eso es todo por ahora.

03:31.160 --> 03:31.910
Gracias.
