WEBVTT

00:00:00.020 --> 00:00:02.750
Hola y bienvenido a las pruebas unitarias para Unity.

00:00:02.780 --> 00:00:10.010
Aquí vamos a hablar sobre Unity Cloud Build como una forma popular de realizar integración continua y

00:00:10.010 --> 00:00:11.270
despliegue con unidad.

00:00:11.300 --> 00:00:17.480
Hemos visto los tremendos beneficios de las pruebas unitarias y la configuración de un proceso automatizado para realizar

00:00:17.480 --> 00:00:18.620
esas pruebas unitarias.

00:00:18.650 --> 00:00:23.640
Una de esas opciones populares que puedes usar es la compilación en la nube de Unity.

00:00:23.660 --> 00:00:25.820
Esto lo ofrece la propia unidad.

00:00:25.850 --> 00:00:31.040
También hay muchas alternativas de terceros o basadas en la comunidad a lo que estoy a punto de mostrarles.

00:00:31.070 --> 00:00:37.820
Porque la construcción de la nube es específica de Unity, construida por Unity y funciona con bastante facilidad.

00:00:37.820 --> 00:00:43.280
Me centraré en eso aquí, pero la mayoría de los pasos que estás viendo aquí serían muy similares.

00:00:43.280 --> 00:00:45.560
en la creación de algunas herramientas competitivas.

00:00:45.560 --> 00:00:49.100
Por eso, Unity Cloud Build ofrece automatización de construcción de Unity.

00:00:49.100 --> 00:00:55.750
Crear juegos de calidad significa tener una canalización de CD de CI que esté lista para pruebas y lanzamientos frecuentes.

00:00:55.760 --> 00:01:00.440
Automatice su proceso de construcción en la nube y mantenga el desarrollo avanzando con unidad.

00:01:00.440 --> 00:01:01.460
Construir automatización.

00:01:01.460 --> 00:01:03.530
Entonces, en este video veremos todo el proceso.

00:01:03.530 --> 00:01:07.880
Pero Unity Cloud Build es un software como servicio basado en web.

00:01:07.910 --> 00:01:12.710
Tiene un costo, pero hay un nivel inicial gratuito que usaremos por hoy.

00:01:12.740 --> 00:01:17.870
Las empresas que tienen muchas construcciones por hacer y desean minimizar el tiempo de espera de su edificio

00:01:17.870 --> 00:01:23.480
ser más adecuado con niveles pagos para este servicio o encontrar una alternativa.

00:01:23.870 --> 00:01:27.350
Una vez que esté utilizando la compilación de Unity Cloud, estará basada en la web.

00:01:27.350 --> 00:01:30.710
Como mencioné, abres el historial de compilación y haces clic en compilar.

00:01:30.710 --> 00:01:36.350
Si desea realizar una prueba manualmente o puede programar esas compilaciones, puede tenerlas, por ejemplo,

00:01:36.350 --> 00:01:42.260
Esto sucede solo en su sucursal principal, pero sucede todas las noches a la 1 am y se construirá automáticamente.

00:01:42.260 --> 00:01:43.310
una vez al día.

00:01:43.340 --> 00:01:45.190
También puedes configurar un disparador.

00:01:45.200 --> 00:01:52.220
También puede configurar activadores para que se genere automáticamente en función de ciertos criterios, como cuándo

00:01:52.220 --> 00:01:56.540
El código se envía de una rama a otra, ejecútelo automáticamente.

00:01:56.540 --> 00:01:57.920
Entonces tienes algunas opciones allí.

00:01:57.920 --> 00:02:02.570
Y una vez que inicies esa compilación, ya sea manual o automáticamente, tú y todos los miembros de tu

00:02:02.570 --> 00:02:08.300
El equipo que lo desee recibirá un correo electrónico confirmando las compilaciones exitosas, las compilaciones fallidas o cualquier nivel.

00:02:08.300 --> 00:02:09.200
de información que deseas.

00:02:09.230 --> 00:02:10.940
Veamos una demostración de esto en acción.

00:02:10.940 --> 00:02:17.180
Ahora ya revisé y creé un proyecto, probé que funciona bien con Unity.

00:02:17.180 --> 00:02:17.600
Nube.

00:02:17.600 --> 00:02:19.310
Construye y termina eso.

00:02:19.310 --> 00:02:22.550
Hice parte de ese trabajo para poder entender cómo funciona el sistema.

00:02:22.550 --> 00:02:25.990
Y también para tomar algunas de las capturas de pantalla que hemos visto aquí en esta presentación.

00:02:26.000 --> 00:02:32.750
Sin embargo, lo que voy a hacer es comenzar el proceso desde cero para que puedas ver cada paso involucrado.

00:02:32.780 --> 00:02:38.150
Ahora, no voy a crear el proyecto en sí, pero además haré toda la automatización.

00:02:38.150 --> 00:02:44.780
Así que aquí está nuestro proyecto unity que ya tiene las pruebas unitarias agregadas y todas las diferentes escenas de ejemplo.

00:02:44.780 --> 00:02:49.760
Es el único proyecto de este curso y está vinculado en la sección de recursos del curso.

00:02:49.760 --> 00:02:55.460
Podemos encontrarlo aquí en GitHub simplemente para explorar la página y confirmar que realmente está lista.

00:02:55.460 --> 00:02:57.170
Y lo abriré dentro de la unidad.

00:02:57.170 --> 00:02:59.390
Aquí estamos en el proyecto dentro de la unidad.

00:02:59.420 --> 00:03:01.430
Podemos verlo aquí arriba en el Inspector.

00:03:01.430 --> 00:03:07.070
Tenemos algunos enlaces en los que podemos hacer clic para acceder a diferentes áreas del proyecto para comenzar a ver.

00:03:07.070 --> 00:03:12.290
algunos de los ejemplos, además de hacer clic en el curso y en el enlace del proyecto de muestra.

00:03:12.380 --> 00:03:15.830
También podemos probar que todas las pruebas unitarias pasan dentro del ejecutor de pruebas.

00:03:15.830 --> 00:03:16.850
Así que hagamos eso.

00:03:19.000 --> 00:03:21.610
Puedes ver pasar las 148 pruebas.

00:03:21.760 --> 00:03:27.340
Otra cosa que quiero hacer es ir a la configuración de compilación y, si aún no está allí, quiero

00:03:27.340 --> 00:03:33.280
para agregar esto, mantenga esta escena en Configuración de compilación para Cloud Build, y me aseguraré de confirmarla

00:03:33.280 --> 00:03:34.030
al repositorio.

00:03:34.060 --> 00:03:37.900
Ahora cada uno de estos procesos de construcción funciona de manera bastante diferente.

00:03:37.930 --> 00:03:45.670
Unity Cloud Build quiere crear al menos una escena para que se considere una compilación pasajera.

00:03:45.670 --> 00:03:46.660
proceso.

00:03:46.660 --> 00:03:49.060
Por eso es que necesita una escena allí.

00:03:49.060 --> 00:03:52.540
Y esa escena es bastante simple, bastante vacía.

00:03:52.570 --> 00:03:56.530
Sólo está ahí para probar una funcionalidad mínima.

00:03:56.560 --> 00:04:02.410
También podrías tener una escena más complicada si quisieras, y hacer que esa sea la única prueba que se construya.

00:04:02.410 --> 00:04:08.620
pero supongo que la cobertura de mi prueba unitaria en modo de edición y en modo de reproducción lo hace por mí.

00:04:08.620 --> 00:04:12.410
Entonces tengo una escena de prueba bastante vacía que arrastro allí.

00:04:12.430 --> 00:04:14.550
Aquí vemos el Unity Hub abierto.

00:04:14.560 --> 00:04:19.780
Por lo general, iniciamos sesión, pero yo me desconecté deliberadamente para poder crear una cuenta nueva.

00:04:19.810 --> 00:04:24.550
Si ya creó una cuenta para usar en Unity, puede omitir este paso.

00:04:24.550 --> 00:04:26.310
Sólo lo muestro completo.

00:04:26.320 --> 00:04:30.820
No hay nada especial que deba hacer aquí, específicamente la creación de la nube por el momento.

00:04:30.910 --> 00:04:33.690
Entonces, lo que haré aquí es crear una cuenta.

00:04:33.700 --> 00:04:40.000
Luego, una vez completada la configuración más básica, iré a Cloud unity.com.

00:04:40.000 --> 00:04:43.240
Y aquí es donde necesito hacer alguna configuración adicional.

00:04:43.240 --> 00:04:47.500
Para que mi proyecto que mostré en GitHub se construya automáticamente.

00:04:47.950 --> 00:04:51.970
Ahora ya hice estos pasos, pero los voy a hacer nuevamente desde cero para que podamos verlo todo.

00:04:51.970 --> 00:04:52.300
aquí.

00:04:52.300 --> 00:04:57.990
Así que iré a proyectos aquí en la barra lateral y luego haré clic en nuevo para obtener un nuevo proyecto.

00:04:58.000 --> 00:05:06.010
Llamaré a esta unidad prueba para la unidad dos porque ya tengo una que usé.

00:05:06.040 --> 00:05:08.520
¿Estará dirigido a niños menores de 13 años?

00:05:08.530 --> 00:05:09.520
No, no lo hará.

00:05:14.670 --> 00:05:15.480
Bueno.

00:05:15.720 --> 00:05:17.290
Así que veamos algunos de estos detalles.

00:05:17.310 --> 00:05:25.470
Tenemos el nombre del proyecto, un ícono, una identificación del proyecto, la clave de licencia de Google para compras dentro de la aplicación no está allí.

00:05:25.470 --> 00:05:26.060
todavía.

00:05:26.070 --> 00:05:32.730
Este panel que estamos viendo incluye todo tipo de características diferentes que Unity ofrece en sus servicios.

00:05:32.760 --> 00:05:34.950
No necesitamos hacer nada de eso aquí.

00:05:35.040 --> 00:05:35.310
Está bien.

00:05:35.340 --> 00:05:38.460
Ahora que el proyecto se ha configurado, vamos a pasar a las operaciones de desarrollo aquí.

00:05:41.900 --> 00:05:44.420
Una de las cosas que podemos hacer es crear automatización.

00:05:44.420 --> 00:05:46.640
Iremos a la configuración para la automatización de compilación.

00:05:46.760 --> 00:05:49.790
Así que aquí estamos con la configuración de automatización de compilación.

00:05:49.910 --> 00:05:52.760
Podemos ver información general aquí.

00:06:00.250 --> 00:06:00.760
Sí.

00:06:01.480 --> 00:06:03.370
Iré al control de fuente.

00:06:05.470 --> 00:06:09.010
El control de fuente tiene un menú desplegable, podemos elegir Git Hub.

00:06:09.140 --> 00:06:09.430
Bueno.

00:06:09.460 --> 00:06:13.660
Entonces esto nos dice que necesitamos tener un token de acceso personal de git.

00:06:13.690 --> 00:06:14.020
Bueno.

00:06:14.020 --> 00:06:19.490
Lo que tenemos que hacer es conectar nuestra cuenta de facturación de Unity Cloud aquí con nuestra cuenta de GitHub.

00:06:19.510 --> 00:06:26.950
De esta manera, el proceso de construcción sabe dónde reside nuestro código y puede escuchar ciertos eventos, como

00:06:26.950 --> 00:06:32.480
cuando el código se ha actualizado o fusionado, etcétera, para permitir el permiso para la compilación de Unity Cloud.

00:06:32.500 --> 00:06:38.220
Iremos a la configuración aquí y tomaremos un token de acceso personal de nuestro GitHub.

00:06:38.230 --> 00:06:42.180
Esto dice crea y proporciona su token de acceso personal de GitHub.

00:06:42.190 --> 00:06:46.960
Deberá seleccionar el alcance de la organización de lectura del repositorio.

00:06:50.800 --> 00:06:55.330
Por lo tanto, necesitará una cuenta de GitHub para dondequiera que esté el repositorio.

00:06:55.360 --> 00:06:57.760
No es necesario que sea el repositorio que configuré aquí.

00:06:57.760 --> 00:07:02.590
Podrías ejecutar esto por tu cuenta, pero para obtener ese token de acceso personal, eso es algo

00:07:02.590 --> 00:07:04.270
específico para su cuenta.

00:07:04.300 --> 00:07:06.910
Nada que ver conmigo como instructor aquí.

00:07:07.030 --> 00:07:12.010
Entonces podemos ir aquí hasta el perfil y bajar a configuración.

00:07:16.450 --> 00:07:20.320
Luego aquí abajo vamos a Configuración de desarrollador.

00:07:30.250 --> 00:07:33.580
Luego, en tokens de acceso personal, podemos pasar al clásico.

00:07:35.260 --> 00:07:38.000
Ya tengo uno allí que creé recientemente.

00:07:38.020 --> 00:07:42.130
Este es el proyecto read org y repo.

00:07:42.460 --> 00:07:45.460
Generaré un nuevo token, así que le daré un nombre.

00:07:45.460 --> 00:07:51.040
Será el token de compilación de Unity Cloud.

00:07:54.200 --> 00:07:56.480
No le daré caducidad.

00:07:56.480 --> 00:07:58.910
Así que aquí elegiré repositorio.

00:07:59.120 --> 00:08:03.860
Elegiré leer, leer y leer en algunas de estas configuraciones.

00:08:04.760 --> 00:08:07.250
Puede que esto no sea todo necesario.

00:08:07.250 --> 00:08:08.450
Quizás podrías hacer menos.

00:08:08.450 --> 00:08:09.530
Pero haré esto.

00:08:13.200 --> 00:08:13.530
Bueno.

00:08:13.560 --> 00:08:15.780
Luego copiamos el valor de allí.

00:08:22.760 --> 00:08:25.490
Pegamos el valor y autorizamos.

00:08:32.850 --> 00:08:33.750
Elige mi unidad.

00:08:33.750 --> 00:08:35.040
Prueba de unidad.

00:08:36.210 --> 00:08:38.670
Ahora veamos las configuraciones aquí.

00:08:40.080 --> 00:08:47.070
Haremos una configuración rápida del objetivo y elegiremos Windows 64.

00:08:47.580 --> 00:08:55.290
Ahora, si su proyecto final está siendo reproducido por usuarios de dispositivos de destino particulares como Android, iOS,

00:08:55.320 --> 00:08:59.520
etcétera, es posible que desees crear compilaciones para todos ellos desde el principio.

00:08:59.550 --> 00:09:02.850
Aquí podemos ver que tenemos muchas cosas diferentes para seleccionar.

00:09:02.880 --> 00:09:08.760
Normalmente, existe la menor fricción para lograr que una compilación de Windows funcione en una máquina con Windows, por lo que

00:09:08.760 --> 00:09:09.930
Sólo elijo ese.

00:09:16.830 --> 00:09:17.160
Aquí.

00:09:17.160 --> 00:09:19.260
Elegiremos la rama que queremos construir.

00:09:19.290 --> 00:09:22.350
Ahora aquí vemos la ruta de la subcarpeta del proyecto.

00:09:22.350 --> 00:09:23.550
Y esto es opcional.

00:09:23.550 --> 00:09:30.030
Pero dice que si sus activos y la configuración del proyecto no están en la carpeta raíz de su repositorio, le recomendamos

00:09:30.030 --> 00:09:31.740
ingresando la ruta de la carpeta.

00:09:31.770 --> 00:09:34.230
Echemos un vistazo a mi proyecto aquí.

00:09:34.260 --> 00:09:43.380
Ahora aquí está el repositorio y mi convención es que mi proyecto de unidad siempre está bajo una barra de repositorio barra de unidad

00:09:43.410 --> 00:09:44.750
activos, por ejemplo.

00:09:44.760 --> 00:09:49.200
En proyectos más grandes siempre es útil tener esa separación ahí.

00:09:49.200 --> 00:09:53.070
Entonces, ¿todos los proyectos de todas las escalas los comienzo de esta manera?

00:09:53.160 --> 00:09:58.660
Dentro de esa carpeta de unidad podemos ver los activos, paquetes y configuraciones del proyecto familiares.

00:09:58.680 --> 00:10:02.040
Ahora estas tres carpetas están inmediatamente en tu raíz.

00:10:02.070 --> 00:10:07.860
No necesita ninguna configuración personalizada, pero si estas tres carpetas no están en su raíz, entonces

00:10:07.860 --> 00:10:10.500
Es necesario abordar exactamente de dónde provienen.

00:10:12.180 --> 00:10:15.570
Entonces, en mi caso, es solo una barra unitaria.

00:10:16.780 --> 00:10:19.140
Entonces podemos hablar de la versión unity.

00:10:19.150 --> 00:10:26.290
Ahora, creo que detectar automáticamente la versión de Unity probablemente sea una buena idea para que pueda compilar

00:10:26.290 --> 00:10:31.250
uno basado en la última versión que se haya incluido en el repositorio.

00:10:31.270 --> 00:10:37.720
Sin embargo, sospecho que no me funciona debido a mi ruta, así que activaré la detección automática.

00:10:37.750 --> 00:10:38.560
apagado.

00:10:39.530 --> 00:10:48.530
Y diré que siempre use la última versión de 2022 porque en eso se basa mi proyecto y lo haré.

00:10:48.530 --> 00:10:50.900
utilice un servidor de Windows aquí.

00:10:51.870 --> 00:10:57.570
No estoy haciendo ninguna compilación para iOS o Android, por lo que no necesito aprovechar la configuración adicional.

00:10:57.570 --> 00:10:57.930
allá.

00:10:57.930 --> 00:11:00.690
Pero la versión de Xcode para iOS ya está aquí.

00:11:00.690 --> 00:11:04.170
Por ejemplo, puedes omitir muchas de esas cosas mientras configuras.

00:11:05.060 --> 00:11:10.720
Ahora, mientras continúa con la configuración de compilación, me permite elegir una computadora más o menos potente.

00:11:10.730 --> 00:11:14.060
No busco hacer ninguna compilación paga aquí.

00:11:14.090 --> 00:11:18.590
Esto no está pensado para un caso de uso real, así que no voy a pensar demasiado en ello.

00:11:18.590 --> 00:11:24.440
Usaré el nivel gratuito elegible y luego podré elegir aquí como una de mis capturas de pantalla a las que aludo.

00:11:24.440 --> 00:11:29.300
Cree o configure automáticamente un programa de compilación repetido.

00:11:30.300 --> 00:11:30.820
Mmmm.

00:11:31.200 --> 00:11:35.880
Digamos que quería compilar automáticamente cuando se actualice su repositorio.

00:11:37.090 --> 00:11:39.300
Luego vamos a guardar esa configuración.

00:11:45.430 --> 00:11:47.230
Bien, lo tenemos ahí.

00:11:50.480 --> 00:11:55.580
Ahora, continuando con la configuración de la automatización de compilación, podemos ver que en el almacenamiento en caché podemos tener

00:11:55.580 --> 00:11:56.660
no cache.

00:11:57.290 --> 00:12:01.280
Caché, solo la biblioteca o caché de todo el proyecto.

00:12:01.430 --> 00:12:09.890
Si elegimos no tener caché, cada compilación llevará más tiempo, pero habrá menos posibilidades de error.

00:12:09.890 --> 00:12:13.230
porque no utiliza ningún archivo de caché más antiguo.

00:12:13.250 --> 00:12:20.750
Si guardo en caché solo el directorio de la biblioteca, entonces la primera compilación no se beneficiará porque primero

00:12:20.750 --> 00:12:27.800
necesita construir el proyecto y almacenarlo en caché, pero luego cada proyecto que se construya después será más rápido que

00:12:27.800 --> 00:12:32.900
el primero porque no es necesario reconstruirlo cada vez.

00:12:33.020 --> 00:12:39.260
Uno de los peligros de hacer esto es que podría estar utilizando algunos archivos antiguos y dando un

00:12:39.260 --> 00:12:44.240
mal resultado, pero generalmente entendemos ese riesgo como posible.

00:12:44.240 --> 00:12:47.660
Y mi enfoque sería almacenar en caché el directorio de la biblioteca.

00:12:47.660 --> 00:12:57.230
Y si alguna vez no está seguro de por qué el proyecto no se puede construir o por qué las pruebas pasan en su local

00:12:57.230 --> 00:13:01.520
editor de Unity, pero no pasan la compilación en la nube, entonces tal vez apagaría el caché en

00:13:01.520 --> 00:13:02.720
esa situación.

00:13:03.390 --> 00:13:04.890
Entonces aquí solo usaré efectivo.

00:13:04.890 --> 00:13:05.640
Biblioteca.

00:13:09.610 --> 00:13:11.500
Luego aquí bajo consumo de construcción.

00:13:11.500 --> 00:13:16.490
Dado que estas compilaciones son parte de un escenario potencialmente de pago por uso.

00:13:16.510 --> 00:13:18.130
Echa un vistazo a esta información.

00:13:18.160 --> 00:13:24.250
Desea agregar algún tipo de límite a la rapidez con la que se pueden construir sus compilaciones, para ahorrar algo del mundo real.

00:13:24.250 --> 00:13:24.700
dinero.

00:13:24.730 --> 00:13:30.220
Aquí, en las configuraciones de compilación, podemos ver que hay algunas opciones que queremos analizar para probar.

00:13:30.400 --> 00:13:34.210
Entonces, si me desplazo hacia abajo aquí, vemos el resultado de la compilación.

00:13:34.240 --> 00:13:44.080
Vemos la sección de almacenamiento en caché que vimos antes, algunas configuraciones de dependencia específicas, enlaces de script y

00:13:44.080 --> 00:13:44.620
más.

00:13:45.130 --> 00:13:50.110
Lo importante que queremos alcanzar aquí para nuestras necesidades es ejecutar las pruebas.

00:13:50.110 --> 00:13:54.310
Ejecutaremos las pruebas del modo de edición y la prueba del modo de reproducción.

00:13:54.340 --> 00:14:01.840
Queremos marcar que la compilación falló si la prueba falla, de modo que solo impulsemos y entreguemos el código que

00:14:01.840 --> 00:14:03.820
ha pasado todas nuestras pruebas.

00:14:04.000 --> 00:14:08.080
Es posible que tenga una situación en la que tenga una prueba conocida que falle.

00:14:08.080 --> 00:14:11.020
Sabes por qué falla y planeas solucionarlo.

00:14:11.020 --> 00:14:17.590
Por lo tanto, puede optar por realizar pruebas fallidas, no fallar toda la compilación en esos momentos.

00:14:17.590 --> 00:14:21.160
Así que tener una configuración así es probablemente lo mejor.

00:14:21.190 --> 00:14:28.420
Ahora, cuando voy a la página Historial de compilación aquí, me permite compilar localmente y cargar la compilación aquí.

00:14:28.420 --> 00:14:36.040
para que pueda distribuirlo o hacer que el desarrollo o implementación continuo se haga cargo.

00:14:36.550 --> 00:14:42.040
O puede hacer la compilación aquí automáticamente, lo que creo que probablemente sea el caso de uso mucho más probable.

00:14:42.040 --> 00:14:48.100
Recuerde que elegí compilar automáticamente cada vez que se actualiza la rama principal.

00:14:48.100 --> 00:14:49.840
Entonces eso sucedería automáticamente.

00:14:49.840 --> 00:14:56.530
Podría haber hecho todas las noches a la 1 am hacer una compilación automática independientemente de los cambios.

00:14:56.560 --> 00:14:57.640
Siempre puedes hacer eso.

00:14:57.640 --> 00:14:59.410
Así que sigamos adelante y hagamos una compilación ahora.

00:15:19.390 --> 00:15:24.040
Y aquí podemos ver los resultados de una construcción exitosa.

00:15:24.070 --> 00:15:27.840
Ahora normalmente recibirás una notificación por correo electrónico.

00:15:27.850 --> 00:15:30.610
Hay ajustes de configuración aquí donde puedes hacer eso.

00:15:30.610 --> 00:15:35.890
Por lo tanto, puede continuar con su día sin pensar realmente en lo que está haciendo el servidor de compilación.

00:15:35.890 --> 00:15:42.130
Y solo reacciona cuando recibe un correo electrónico que confirma una prueba fallida o una compilación fallida.

00:15:42.880 --> 00:15:48.010
En el transcurso de una semana determinada, se esperaría que la mayor parte del tráfico entrante provenga de esa notificación.

00:15:48.010 --> 00:15:52.390
El sistema confirma que sí, otra compilación funcionó y funcionó bien.

00:15:54.760 --> 00:15:59.830
Con solo desplazarnos hacia abajo aquí, podemos ver una descripción general del registro completo, lo cual será útil.

00:15:59.830 --> 00:16:01.060
si tienes algunos problemas.

00:16:01.060 --> 00:16:06.880
Debe depurar el registro compacto, que mostrará sólo los errores más relevantes.

00:16:07.990 --> 00:16:09.610
Y también hay más información.

00:16:09.610 --> 00:16:15.550
Puede ver muchos informes diferentes sobre cómo fue y luego, con respecto a las pruebas, puede ver cuáles

00:16:15.550 --> 00:16:21.520
Las pruebas pasaron y, si alguna no pasó, podrá profundizar y descubrir cómo hacer que funcionen.

00:16:21.520 --> 00:16:29.620
Bueno, un flujo de trabajo, si ves una notificación fallida, lo que yo haría es programar un tiempo para abrir

00:16:29.620 --> 00:16:32.140
esa construcción particular del proyecto.

00:16:32.140 --> 00:16:36.330
En cualquier lugar del control de versiones, está sentado, tal vez fusionando algún código.

00:16:36.340 --> 00:16:42.370
Lo abriría localmente y luego ejecutaría la prueba desde dentro de Unity, pudiendo depurar

00:16:42.370 --> 00:16:42.790
a ellos.

00:16:43.270 --> 00:16:49.930
Eso es todo aquí para configurar Unity Cloud Build para automatizar una compilación en la nube de su proyecto, ya sea

00:16:49.960 --> 00:16:56.170
en un cronograma regular activado por eventos particulares, o hacerlo manualmente dentro del tablero.

00:16:56.170 --> 00:17:01.780
Dentro de todos esos escenarios, obtenemos una buena historia de todas nuestras compilaciones en el pasado.

00:17:01.780 --> 00:17:08.500
Entonces, al tener este sistema automatizado configurado y, con suerte, recibir mensajes en su mayoría exitosos,

00:17:08.530 --> 00:17:14.740
le brinda suficiente información sobre cuándo y dónde se rompe el código base para que pueda ingresar y poder

00:17:14.740 --> 00:17:16.060
solucionar cualquier problema.

00:17:16.150 --> 00:17:18.310
Eso es todo para configurar Unity Cloud Build.

00:17:18.310 --> 00:17:19.060
Gracias.