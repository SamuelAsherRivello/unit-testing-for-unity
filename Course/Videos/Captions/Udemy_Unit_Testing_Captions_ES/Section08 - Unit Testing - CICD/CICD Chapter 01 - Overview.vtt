WEBVTT

00:00:00.050 --> 00:00:02.970
Hola y bienvenidos a la Integración Continua con Unity.

00:00:02.990 --> 00:00:08.600
Esto es parte del aprendizaje sobre las pruebas unitarias y las formas en que las pruebas unitarias pueden adaptarse a sus flujos de trabajo.

00:00:08.630 --> 00:00:14.510
En esta sección, haremos una breve introducción del tema y luego veremos la compilación de Unity Cloud.

00:00:14.510 --> 00:00:21.530
como una forma de configurar la integración continua y la implementación continua para sus proyectos de Unity.

00:00:21.560 --> 00:00:28.550
Como hemos visto en el ciclo de vida del desarrollo de software para la creación de juegos, unity se utiliza predominantemente

00:00:28.550 --> 00:00:31.970
en las fases de desarrollo, prueba y despliegue.

00:00:32.000 --> 00:00:36.650
Cuando hablamos de realizar pruebas unitarias, las agregamos aquí en los pasos cinco y seis.

00:00:36.650 --> 00:00:41.180
Y cuando hablamos de integración continua e implementación continua, realmente buscamos

00:00:41.180 --> 00:00:47.770
en esos tres pasos para automatizar nuestras pruebas y incorporarlos a nuestros flujos de trabajo de producción.

00:00:47.780 --> 00:00:51.360
Entonces, ¿qué es la integración continua y el despliegue continuo?

00:00:51.380 --> 00:00:59.120
CI CD, como se le llama, reduce los errores y defectos de código, lo que lo hace crucial para cada flujo de trabajo de DevOps.

00:00:59.450 --> 00:01:06.530
Las operaciones del desarrollador suelen ser la etapa o etapas finales en las que se prueba su proyecto.

00:01:06.560 --> 00:01:10.580
estar en vivo y agregar nuevas actualizaciones a la experiencia en vivo.

00:01:10.610 --> 00:01:17.510
CI CD implica prácticas de integración frecuente de los cambios de código, integrando automáticamente esos

00:01:17.510 --> 00:01:20.930
código y luego lanzar compilaciones a sus usuarios finales.

00:01:20.930 --> 00:01:25.730
Entonces, si haces todo eso juntos, estás haciendo el proceso completo de CI CD.

00:01:25.730 --> 00:01:30.590
Pero también puedes hacer una cosa u otra o centrarte en áreas clave del flujo de trabajo por ti mismo.

00:01:30.590 --> 00:01:30.860
Ahora.

00:01:30.890 --> 00:01:37.940
CI CD no es exclusivo de Unity, y durante los años de desarrollo profesional y uso de Unity

00:01:37.940 --> 00:01:45.650
En la industria, cada vez más terceros han agregado herramientas para brindarle integración continua y

00:01:45.650 --> 00:01:47.960
despliegue continuo dentro de la unidad.

00:01:47.990 --> 00:01:55.220
Algunas de las tecnologías que se utilizan son GitHub y GitLab para guardar el código o almacenar el código donde

00:01:55.220 --> 00:02:00.170
Lo tienes en línea y control de versiones, pero también hay otras operaciones que puedes usar para eso.

00:02:00.170 --> 00:02:02.480
Pero también existen otras tecnologías.

00:02:02.480 --> 00:02:11.480
Y luego herramientas como Circle CI o Game CI, Code Magic Bamboo, Unity Cloud Build, Jenkins.

00:02:11.510 --> 00:02:17.300
Estas son tecnologías creadas sobre cualquier lugar donde se controle la versión de su código y puedan

00:02:17.300 --> 00:02:21.590
para conectar los desencadenantes correctos para provocar las acciones correctas para el flujo de trabajo.

00:02:21.620 --> 00:02:26.690
Eso tiene sentido para ustedes dos que son más relevantes para este video, porque es lo que he usado, es

00:02:26.720 --> 00:02:32.600
GitHub para alojar el repositorio que vamos a crear en Unity Cloud, compilarlo como la herramienta que hará el

00:02:32.600 --> 00:02:33.770
construcción y pruebas.

00:02:33.770 --> 00:02:39.980
Entonces hemos mencionado que CI CD combina las prácticas de integración continua y entrega continua.

00:02:39.980 --> 00:02:44.810
Entonces, la integración consiste en poner el nuevo código en producción.

00:02:44.810 --> 00:02:49.250
Eso incluye probarlo, construirlo e incorporarlo al código.

00:02:49.370 --> 00:02:54.740
La entrega continua o despliegue continuo, como también se le llama.

00:02:54.740 --> 00:02:58.310
Esto automatiza la entrega de ese código al objetivo de compilación.

00:02:58.310 --> 00:02:59.380
Entonces esto es diferente.

00:02:59.390 --> 00:03:02.900
No se trata simplemente de poner su código en el proyecto, eso es CI.

00:03:03.140 --> 00:03:05.990
Esto es ponerlo en manos de sus usuarios finales.

00:03:05.990 --> 00:03:07.490
Entonces ese es el CD.

00:03:07.550 --> 00:03:13.280
Hasta este punto del curso, hemos visto que las pruebas unitarias son increíblemente útiles para ayudar a dar forma

00:03:13.280 --> 00:03:18.290
cómo madura nuestro código y luego, ciertamente, cómo mantenemos y depuramos ese código.

00:03:18.290 --> 00:03:20.720
Y hemos estado haciendo las pruebas manualmente.

00:03:20.720 --> 00:03:26.450
Eso significa que aunque creamos algunas pruebas automatizadas, jugamos la experiencia de tiempo de ejecución como

00:03:26.450 --> 00:03:27.950
un usuario y buscar errores.

00:03:27.950 --> 00:03:30.980
De esa manera, hay una forma de realizar la prueba manualmente.

00:03:30.980 --> 00:03:36.470
Y la otra cosa que estamos haciendo es hacer clic manualmente en el botón en Unity Test Runner.

00:03:36.470 --> 00:03:38.330
ventana para ejecutar esas pruebas.

00:03:38.330 --> 00:03:40.850
Así que echemos un vistazo a algunos puntos del manual.

00:03:40.880 --> 00:03:46.520
En primer lugar, no garantizamos que se realice ningún proceso automatizado, por lo que no podemos garantizar ningún resultado.

00:03:46.550 --> 00:03:51.530
Es menos confiable y propenso a errores que una alternativa automatizada.

00:03:51.620 --> 00:03:57.530
Estas tareas repetitivas, ejecútelas usted mismo de vez en cuando, recuerde hacerlo, mire

00:03:57.530 --> 00:03:59.840
diligentemente en los resultados que todo requiere energía.

00:03:59.840 --> 00:04:02.120
Y estas tareas repetitivas pueden resultar aburridas.

00:04:02.120 --> 00:04:05.930
Y cuando las cosas son aburridas, los desarrolladores pueden omitirlas o hacerlas con menos frecuencia.

00:04:05.930 --> 00:04:11.690
Y, por último, si nos olvidamos de realizar la prueba, entonces no tendremos ningún buen estado actualizado sobre cómo está nuestro proyecto.

00:04:11.690 --> 00:04:12.110
haciendo.

00:04:12.110 --> 00:04:18.350
Sin embargo, si tomamos todas las mejores prácticas que tenemos para configurar esas pruebas y también automatizamos

00:04:18.350 --> 00:04:24.140
la ejecución de esas tareas e incluso la entrega de nuestro código a nuestros usuarios finales, podemos aprovechar

00:04:24.140 --> 00:04:25.430
de más beneficios.

00:04:25.610 --> 00:04:29.150
Por ejemplo, aquí tenemos un proceso repetitivo confiable.

00:04:29.150 --> 00:04:35.990
Cuando tenemos la configuración automática de CI CD, tenemos comentarios rápidos y relevantes que podemos elegir y veremos

00:04:36.020 --> 00:04:37.670
qué desencadena cada construcción.

00:04:37.670 --> 00:04:43.670
Pero si queremos hacerlo para cada confirmación de un repositorio de git, entonces cada vez que hagamos una confirmación de un repositorio de git,

00:04:43.700 --> 00:04:48.620
Se ejecuta la prueba, se verifica la compilación y se nos notifica al respecto.

00:04:48.620 --> 00:04:51.920
Así que podrías hacerlo con mayor o menor frecuencia dependiendo de cuáles sean tus necesidades.

00:04:51.950 --> 00:04:54.740
Le brinda más confianza en su código, por lo que hay menos riesgo.

00:04:54.740 --> 00:04:57.980
Entonces, cuando entras en refactorización de sistemas o agregas nuevas funciones.

00:04:57.980 --> 00:04:59.780
Y por último tener uno.

00:05:00.340 --> 00:05:04.630
Compilaciones disponibles para todos y luego automatizarlas en la parte superior.

00:05:04.630 --> 00:05:10.870
Tenemos una base de confianza y seguridad en nuestro código base que nos permite más fácilmente

00:05:10.870 --> 00:05:12.360
colaborar con otros.

00:05:12.370 --> 00:05:18.340
Podremos saber quiénes contribuyen a mantener estable el proyecto, lo cual es increíblemente

00:05:18.340 --> 00:05:22.060
información eficaz que debes tener cuando trabajas en un equipo.

00:05:22.060 --> 00:05:29.800
Entonces, volviendo aquí, mirando de manera visual, la integración continua es el código que se fusiona, el

00:05:29.800 --> 00:05:31.240
se construye el código.

00:05:31.270 --> 00:05:36.010
Luego, en la entrega continua, verificamos que nuestras pruebas hayan pasado.

00:05:36.040 --> 00:05:42.910
Luego lo trasladamos a un entorno de prueba, que es un lugar que aún no está listo para los usuarios finales.

00:05:42.910 --> 00:05:44.020
pero ya casi llegamos.

00:05:44.020 --> 00:05:48.400
Y nos aseguramos de que el proceso funcione realmente bien antes de implementarlo para los usuarios finales.

00:05:48.430 --> 00:05:55.930
Ahora, puede realizar pruebas automatizadas y entregar automáticamente los resultados de esas pruebas, independientemente de tener

00:05:55.930 --> 00:06:01.750
cualquier flujo particular sobre cómo programa su código en el control de versiones.

00:06:01.750 --> 00:06:08.920
Pero solo para hablar sobre la posible alineación y conexiones aquí, esto muestra lo que podría ser diferente.

00:06:08.920 --> 00:06:10.690
se compromete en diferentes ramas.

00:06:10.690 --> 00:06:16.240
En el control de versiones estoy usando git, así que supongamos que estoy usando git aquí y tengo un main o master.

00:06:16.240 --> 00:06:17.110
sucursal allí.

00:06:17.110 --> 00:06:21.580
Y luego hago todo mi trabajo de desarrollo en una segunda rama de desarrollador.

00:06:21.580 --> 00:06:28.420
Y luego, cada vez que quiero crear una nueva función, me desvío del desarrollo y le doy un nombre.

00:06:28.420 --> 00:06:35.420
como digamos función, menú principal, botón rápido, y luego iría y agregaría ese menú principal para salir.

00:06:35.440 --> 00:06:41.770
y asegúrese de que esa rama solo se refiera a los cambios necesarios para esa característica en particular.

00:06:41.890 --> 00:06:45.310
Entonces digamos que tengo la característica número uno en la parte inferior.

00:06:45.310 --> 00:06:46.510
Lo había terminado.

00:06:46.540 --> 00:06:52.570
Estos son algunos de los lugares potenciales donde podríamos ejecutar el proceso de CD de CI automatizado.

00:06:52.570 --> 00:06:58.330
En primer lugar, comenzando desde abajo, cada vez que me comprometo con mi rama de funciones de desarrollo,

00:06:58.330 --> 00:07:04.450
Podría iniciar una compilación automatizada para asegurarme de que todas las pruebas se ejecuten y que todo esté funcionando.

00:07:04.450 --> 00:07:05.560
particularmente bien.

00:07:05.560 --> 00:07:06.730
Ese es el número uno.

00:07:06.760 --> 00:07:13.210
Luego, podría devolverlo a una función más grande en el paso número dos y, a medida que lo fusiono nuevamente con eso

00:07:13.210 --> 00:07:18.940
rama de desarrollo, quiero hacer una prueba de compilación automatizada, alcanzando potencialmente todos los objetivos diferentes

00:07:18.940 --> 00:07:19.750
plataformas.

00:07:19.750 --> 00:07:26.290
Eso significa que la prueba automatizada podría ejecutarse dentro del editor de Unity en iOS, en Android, en el dispositivo,

00:07:26.290 --> 00:07:27.040
no en el dispositivo.

00:07:27.040 --> 00:07:28.780
Tienes muchas opciones diferentes allí.

00:07:29.500 --> 00:07:35.350
Luego, por último, cuando esa rama se desarrolle, esté lista y tenga todas las características más recientes, y

00:07:35.350 --> 00:07:38.980
Queremos probar cómo funcionaría eso en la rama maestra.

00:07:38.980 --> 00:07:46.480
Tenemos el número tres allí donde antes de ir a enviarlo a la línea superior, allí está el principal o el

00:07:46.480 --> 00:07:53.620
rama maestra, lo que podría hacer es fusionar desde la rama principal nuevamente para desarrollar, luego asegurarme de que

00:07:53.620 --> 00:07:59.320
todo funciona bien en la rama de desarrollo y solo si funciona bien, entonces me comprometo a

00:07:59.320 --> 00:08:00.520
la rama principal o master.

00:08:01.220 --> 00:08:07.160
Así que puedes ver que no es necesario seguir estos ciertos pasos en ningún orden en particular, pero puedes

00:08:07.160 --> 00:08:11.440
Obtenga ayuda para las pruebas tanto como desee a lo largo de este flujo de trabajo.

00:08:11.450 --> 00:08:15.440
Otro resumen de alto nivel solo para ver esta información de diferentes maneras.

00:08:15.440 --> 00:08:21.350
Esto es específicamente para las instrucciones de compilación de Unity Cloud aquí, pero creo que los pasos dados son de alto nivel.

00:08:21.350 --> 00:08:21.850
suficiente.

00:08:21.860 --> 00:08:24.290
Esto también se aplica a la mayoría de los competidores.

00:08:24.320 --> 00:08:27.830
Lo primero que debe hacer es configurar la automatización de su compilación.

00:08:27.830 --> 00:08:32.810
Entonces apunta la automatización de compilación al control de versiones donde se encuentra su código.

00:08:32.810 --> 00:08:38.090
En mi caso, eso sería conectar la compilación de Unity Cloud y conectarla a GitHub donde tengo una

00:08:38.090 --> 00:08:39.440
repositorio para el proyecto.

00:08:39.470 --> 00:08:42.080
Luego decides qué disparador tener.

00:08:42.110 --> 00:08:49.490
Quizás se trate de realizar un cambio en su proyecto en una rama específica o fusionarse desde una rama.

00:08:49.490 --> 00:08:53.240
en otra rama, o puede configurar las diferentes reglas que desee.

00:08:53.270 --> 00:08:59.990
La idea aquí es no ejecutarlo manualmente, sino que parte de su proceso de desarrollo

00:08:59.990 --> 00:09:01.610
disparar automáticamente.

00:09:01.610 --> 00:09:03.140
Entonces ese sería el número dos aquí.

00:09:03.170 --> 00:09:09.260
Luego el número tres en algún disparador cuando liberas el código, cuando confirmas el código, cuando fusionas

00:09:09.260 --> 00:09:13.100
el código, decidas lo que decidas, la compilación se crea automáticamente.

00:09:13.100 --> 00:09:16.700
Y en el paso tres es donde también se ejecutará la prueba.

00:09:16.700 --> 00:09:21.980
Y finalmente, el equipo recibe una notificación cuando se implementa el proyecto.

00:09:21.980 --> 00:09:29.660
Entonces, en ese flujo de ejemplo, que acabamos de ver en cada uno de esos momentos, quien quiera puede suscribirse a

00:09:29.660 --> 00:09:34.490
un correo electrónico que dice que esta rama de funciones se fusionó con esta.

00:09:34.490 --> 00:09:39.020
Esa no es realmente mi área de especialización, por lo que no escucharé ninguna notificación allí.

00:09:39.020 --> 00:09:46.310
Pero todos los desarrolladores tal vez quieran ser notificados a través del sistema sobre cualquier cosa que se fusione con ese

00:09:46.310 --> 00:09:52.820
rama principal o maestra final, y tener ese sistema CI CD allí en esos pasos clave confirmará

00:09:52.820 --> 00:09:58.700
que las pruebas de tu unidad todas pasen, que ninguna falle, y que todo funcione con éxito que tu proyecto

00:09:58.700 --> 00:09:59.510
construye.

00:09:59.510 --> 00:10:04.940
Puedes imaginar que hay escenarios incluso en los que todas las pruebas pasarían, y tal vez la compilación no

00:10:04.940 --> 00:10:05.510
trabajar.

00:10:05.510 --> 00:10:12.080
Tal vez haya algún código roto o algún activo roto que no tenga cobertura de prueba.

00:10:12.080 --> 00:10:12.530
todavía.

00:10:12.530 --> 00:10:18.470
Y el solo hecho de que el proyecto dé un error durante el proceso de construcción es una pieza muy sólida de

00:10:18.470 --> 00:10:19.910
información de depuración para tener.

00:10:19.940 --> 00:10:25.370
También sabrá la hora, fecha y sucursal que causó el problema, lo que le ayudará a concentrarse en dónde

00:10:25.370 --> 00:10:27.320
dónde buscar para solucionar el problema.

00:10:27.320 --> 00:10:29.900
Y finalmente el proyecto se implementaría con éxito.

00:10:29.900 --> 00:10:35.870
Hemos visto que el CI CD es importante para que podamos saber si el proyecto se desarrolló, pero es

00:10:35.870 --> 00:10:38.900
combinación especialmente poderosa con pruebas unitarias.

00:10:38.900 --> 00:10:44.570
Así que no sólo se compiló, sino que se construyó con todas las pruebas aprobadas y un resumen de las pruebas unitarias, ya que eso es

00:10:44.570 --> 00:10:46.160
el tema de todo el curso.

00:10:46.190 --> 00:10:52.370
A medida que su proyecto crece con más scripts, clases y métodos, se vuelve difícil garantizar que

00:10:52.370 --> 00:10:56.360
un cambio en una parte de su código no rompe cosas en otra parte.

00:10:56.390 --> 00:11:00.950
Las pruebas automatizadas le ayudan a comprobar que su código funciona como se esperaba.

00:11:00.980 --> 00:11:07.130
Las pruebas le ahorran tiempo al descubrir cuándo y dónde ocurren los problemas tan pronto como se presentan.

00:11:07.130 --> 00:11:14.240
en lugar de esperar a que los usuarios realicen pruebas manuales, se vuelve mucho más costoso cuanto más tarde lo encuentre

00:11:14.240 --> 00:11:14.930
estos errores.

00:11:14.930 --> 00:11:16.460
Entonces tener el sistema es bastante bueno.

00:11:16.460 --> 00:11:21.400
Y recordamos que algo bastante contradictorio es la regla 8020.

00:11:21.410 --> 00:11:29.300
Es que el 80% del tiempo trabajamos para corregir errores y mantener nuestra base de código existente, y

00:11:29.300 --> 00:11:33.740
El 20% del tiempo es cuando agregamos nuevas características y nuevas funcionalidades.

00:11:33.770 --> 00:11:38.900
A menudo pensamos que pasamos la mayor parte del día agregando nuevas funciones, así que ahí es donde queremos ubicar

00:11:38.900 --> 00:11:40.370
nuestra energía mental.

00:11:40.370 --> 00:11:49.250
Sin embargo, según la investigación, vemos que tener buenas prácticas de prueba unitaria, tener buenas pruebas automatizadas,

00:11:49.280 --> 00:11:56.210
Tener un sistema CI CD impacta enormemente y mejora la eficiencia de su 80%.

00:11:56.210 --> 00:12:01.550
Por lo tanto, realmente se trata de determinar dónde puede lograr el mayor impacto con los cambios en su flujo de trabajo.

00:12:01.550 --> 00:12:09.190
Entonces, antes de ver un ejemplo de cómo hacer el CD ci en sí, recapitulemos el tipo de clase más simple aquí.

00:12:09.200 --> 00:12:14.180
Imaginemos que tenemos un sistema matemático que hace algunas sumas y algunas restas.

00:12:16.120 --> 00:12:23.620
Luego aquí tenemos una prueba unitaria, que es un archivo separado y una clase separada que usa el atributo de prueba.

00:12:23.620 --> 00:12:24.070
aquí.

00:12:24.100 --> 00:12:30.640
Esto tomará una instancia de la última clase que vimos, la creará y probará una unidad o método en particular.

00:12:30.640 --> 00:12:38.530
de ello, siendo cauteloso con las entradas y salidas no deseadas a ese sistema, y ​​verificando que el

00:12:38.530 --> 00:12:40.810
El resultado afirmado es el que obtenemos.

00:12:40.840 --> 00:12:45.550
Ahora, en el caso de Unity Cloud Build, cuando tienes pruebas como esa configuradas en tu proyecto y

00:12:45.550 --> 00:12:52.120
Si tiene el proyecto configurado en el sistema CI CD, puede esperar poder configurarlo manualmente.

00:12:52.120 --> 00:12:57.700
o ejecutar esas compilaciones automáticamente visitando Unity Cloud Build en este caso, que es una plataforma web

00:12:57.730 --> 00:12:58.420
herramienta.

00:12:58.450 --> 00:13:01.750
¿Ves que la compilación se creó para la plataforma de destino?

00:13:01.750 --> 00:13:04.780
En este caso, estamos probando el escritorio de Windows de 64 bits.

00:13:04.810 --> 00:13:09.850
Vemos que pasan todas las pruebas del modo edición y pasan todas las pruebas del modo reproducción.

00:13:09.880 --> 00:13:14.320
Todo eso sucede automáticamente según el desencadenante que hayas decidido.

00:13:14.320 --> 00:13:16.530
Entonces esto es increíblemente útil.

00:13:16.540 --> 00:13:20.230
Luego, aquellos miembros del equipo que estén interesados ​​pueden recibir un correo electrónico.

00:13:20.230 --> 00:13:26.080
Hay un pequeño fragmento de un correo electrónico que muestra: "Oye, alguien del equipo hizo una compilación".

00:13:26.110 --> 00:13:30.610
La compilación se activó porque esta rama se fusionó con esa rama o lo que fuera.

00:13:30.640 --> 00:13:32.340
Y aquí están los resultados.

00:13:32.350 --> 00:13:35.820
Pueden permitirle hacer clic en una página web o resumirla en el correo electrónico.

00:13:35.830 --> 00:13:42.940
Ahora este tema de CI CD, así como los conceptos básicos de las pruebas unitarias, los fundamentos de las mismas, temas avanzados.

00:13:42.940 --> 00:13:48.880
además, como hablar de funciones puras y manejar talleres individuales para algunos temas avanzados.

00:13:48.880 --> 00:13:51.310
como escenas, prefabricados y ajustables.

00:13:51.310 --> 00:13:55.450
Todo es parte de este curso. Aquí puedes consultar el enlace a continuación.

00:13:55.450 --> 00:13:59.920
Si aún no estás en el curso, mira los avances.

00:13:59.920 --> 00:14:02.800
Inscríbase en el curso y comience su aprendizaje hoy.

00:14:02.800 --> 00:14:07.330
Y si ya eres estudiante del curso y encuentras este video dentro del curso mismo,

00:14:07.330 --> 00:14:11.260
Gracias por ser estudiante y espero verte también en futuras clases.

00:14:11.260 --> 00:14:17.620
Entonces, en general, lo que hemos podido ver es que las pruebas unitarias en sí mismas son tremendamente

00:14:17.620 --> 00:14:24.550
poderosa herramienta que te ayuda a tener más eficiencias en las áreas de desarrollo donde estás gastando

00:14:24.550 --> 00:14:25.850
mucho tiempo.

00:14:25.870 --> 00:14:33.160
Recuerde que el 80% que vimos del esfuerzo general de desarrollo es mantenimiento y depuración de sistemas existentes.

00:14:33.160 --> 00:14:39.040
Entonces, dado que reconocemos cuán grande es un área de nuestra vida, es fantástico que tengamos herramientas como

00:14:39.040 --> 00:14:46.960
Unity Unit testing y CI CD con herramientas como Unity Cloud Build u otras herramientas comunitarias para poder

00:14:46.960 --> 00:14:53.890
Bríndenos todos estos beneficios y automatice la entrega de estos resultados de pruebas, los resultados de construcción y

00:14:53.890 --> 00:14:56.200
la entrega de las propias construcciones.