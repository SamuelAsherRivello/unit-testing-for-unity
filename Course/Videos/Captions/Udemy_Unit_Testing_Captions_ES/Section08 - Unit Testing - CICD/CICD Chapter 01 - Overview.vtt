WEBVTT

00:00.050 --> 00:02.970
Hola y bienvenido a Integración Continua con unity.

00:02.990 --> 00:08.600
Esto es parte del aprendizaje sobre pruebas unitarias y las formas en que las pruebas unitarias pueden encajar en tus flujos de trabajo.

00:08.630 --> 00:14.510
En esta sección, vamos a hacer una breve introducción del tema, y luego vamos a ver Unity Cloud build

00:14.510 --> 00:21.530
como una forma de configurar la integración continua y el despliegue continuo para tus proyectos Unity.

00:21.560 --> 00:28.550
Como hemos visto en el ciclo de vida de desarrollo de software para la creación de juegos, unity se utiliza más predominantemente

00:28.550 --> 00:31.970
en las fases de desarrollo, pruebas y despliegue.

00:32.000 --> 00:36.650
Cuando hablamos de hacer pruebas unitarias, estamos añadiendo que en los pasos cinco y seis aquí.

00:36.650 --> 00:41.180
Y cuando estamos hablando de integración continua y despliegue continuo, realmente estamos buscando

00:41.180 --> 00:47.770
en los tres de esos pasos en formas de automatizar nuestras pruebas y doblado en nuestros flujos de trabajo de producción.

00:47.780 --> 00:51.360
¿Qué es la integración continua y el despliegue continuo?

00:51.380 --> 00:59.120
CI CD, como se le llama, reduce los errores y defectos de código, por lo que es crucial para cada flujo de trabajo DevOps.

00:59.450 --> 01:06.530
Las operaciones de desarrollo son típicamente la etapa final o etapas en las que su proyecto está siendo probado,

01:06.560 --> 01:10.580
y se añaden nuevas actualizaciones a la experiencia en vivo.

01:10.610 --> 01:17.510
CI CD implica prácticas de integración frecuente de sus cambios de código, integrando automáticamente que

01:17.510 --> 01:20.930
código, y luego liberar las compilaciones a sus usuarios finales.

01:20.930 --> 01:25.730
Así que si estás haciendo todo eso junto, estás haciendo el proceso completo de CI CD.

01:25.730 --> 01:30.590
Pero también puedes hacer una cosa u otra o centrarte en áreas clave del flujo de trabajo para ti solo.

01:30.590 --> 01:30.860
Ahora.

01:30.890 --> 01:37.940
CI CD no es exclusivo de Unity, y durante los años de desarrollo profesional de Unity y siendo utilizado

01:37.940 --> 01:45.650
en la industria, más y más terceros han añadido herramientas para darle integración continua y

01:45.650 --> 01:47.960
despliegue continuo dentro de unity.

01:47.990 --> 01:55.220
Algunas de las tecnologías que se utilizan son GitHub y GitLab para mantener el código o para almacenar el código donde

01:55.220 --> 02:00.170
lo tienes en línea, y el control de versiones, pero hay otras operaciones que puedes usar también para eso.

02:00.170 --> 02:02.480
Pero también hay otras tecnologías.

02:02.480 --> 02:11.480
Y luego herramientas como circle CI o game CI, code Magic bamboo, Unity Cloud Build, Jenkins.

02:11.510 --> 02:17.300
Estas son las tecnologías construidas en la parte superior de donde su código está siendo controlado por versiones, y ser capaz de

02:17.300 --> 02:21.590
conectar los disparadores adecuados para provocar las acciones correctas para el flujo de trabajo.

02:21.620 --> 02:26.690
Eso tiene sentido para ti dos que son más relevantes para este video, porque es lo que he usado, es

02:26.720 --> 02:32.600
GitHub para alojar el repositorio que vamos a construir en Unity Cloud, construir como la herramienta que va a hacer el

02:32.600 --> 02:33.770
la construcción y las pruebas.

02:33.770 --> 02:39.980
Hemos mencionado que CI CD combina las prácticas de integración continua y entrega continua.

02:39.980 --> 02:44.810
Así que la integración consiste en poner tu nuevo código en producción.

02:44.810 --> 02:49.250
Eso incluye probarlo, construirlo e introducirlo en el código.

02:49.370 --> 02:54.740
La entrega continua o despliegue continuo, como también se le llama.

02:54.740 --> 02:58.310
Esto automatiza la entrega de ese código al objetivo de compilación.

02:58.310 --> 02:59.380
Así que esto es diferente.

02:59.390 --> 03:02.900
Esto no es sólo poner tu código en el proyecto, eso es CI.

03:03.140 --> 03:05.990
Esto es ponerlo en manos de tus usuarios finales.

03:05.990 --> 03:07.490
Esto es el CD.

03:07.550 --> 03:13.280
Ahora, hasta este punto en el curso, hemos visto que las pruebas unitarias son increíblemente útiles para ayudar a formar

03:13.280 --> 03:18.290
cómo madura nuestro código y cómo lo mantenemos y depuramos.

03:18.290 --> 03:20.720
Y hemos estado haciendo las pruebas manualmente.

03:20.720 --> 03:26.450
Así que eso significa que aunque creamos algunas pruebas automatizadas, o bien reproducimos la experiencia en tiempo de ejecución como

03:26.450 --> 03:27.950
un usuario y buscamos errores.

03:27.950 --> 03:30.980
De esa manera hay una forma de probar manualmente.

03:30.980 --> 03:36.470
Y la otra cosa que estamos haciendo es pulsar manualmente el botón en el Unity Test Runner

03:36.470 --> 03:38.330
para ejecutar esas pruebas.

03:38.330 --> 03:40.850
Así que vamos a echar un vistazo a algunas viñetas para el manual.

03:40.880 --> 03:46.520
En primer lugar, no garantizamos que se produzca ningún proceso automatizado, por lo que no podemos garantizar ningún resultado.

03:46.550 --> 03:51.530
Es más poco fiable y propenso a errores que una alternativa automatizada.

03:51.620 --> 03