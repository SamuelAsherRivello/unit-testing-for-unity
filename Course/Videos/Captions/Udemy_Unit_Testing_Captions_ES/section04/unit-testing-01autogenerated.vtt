WEBVTT

00:00.110 --> 00:01.340
Las pruebas unitarias.

00:01.340 --> 00:02.190
Visión general.

00:02.210 --> 00:04.100
Primero, un poco de contexto.

00:04.130 --> 00:11.690
A medida que tus proyectos crecen con más scripts, más métodos, más complejidad, puede ser difícil asegurar

00:11.690 --> 00:14.510
que el nuevo código no rompe el antiguo.

00:14.540 --> 00:19.920
Las pruebas automatizadas pueden ayudar a asegurar que tu código funciona como esperas.

00:19.940 --> 00:25.940
Las pruebas automatizadas nos ayudan a descubrir cómo y dónde se producen los errores en una fase más temprana del proceso.

00:25.940 --> 00:31.010
En lugar de la opción mucho más cara de esperar a que los usuarios finales informen de estos errores.

00:31.010 --> 00:36.210
Así que puedes usar arquitecturas MVC sin pruebas, y puedes usar pruebas sin.

00:36.230 --> 00:37.550
arquitectura MVC.

00:37.550 --> 00:40.990
Entonces, ¿por qué es importante hablar de estos temas juntos?

00:41.000 --> 00:45.380
Porque la combinación de estas dos tecnologías es increíblemente poderosa.

00:45.410 --> 00:51.800
Mediante el uso de una arquitectura como MVC, ayuda a asegurar que su código es más desacoplado, que cada clase

00:51.800 --> 00:55.000
tiene un único propósito y que las soluciones son más simples.

00:55.010 --> 00:57.950
Todos estos son rasgos para un código más comprobable también.

00:57.980 --> 01:04.610
Añadir pruebas a tu proyecto añadirá robustez, más confianza y fomentará soluciones simples,

01:04.610 --> 01:08.930
especialmente cuando se activa con el desarrollo dirigido por pruebas, que vamos a discutir.

01:08.960 --> 01:12.530
Añadir pruebas unitarias a tu proyecto y flujo de trabajo te ahorrará tiempo.

01:12.530 --> 01:15.440
Ahorra planificación, desarrollo y mantenimiento.

01:15.470 --> 01:21.170
Añade más confianza a tu código, y con esa confianza, puedes tener mucha más audacia en

01:21.170 --> 01:22.370
tus Refactores.

01:22.370 --> 01:28.910
Piensa en ejecutar todas tus pruebas antes de una refactorización importante, y después de ahorrarte tiempo y dar

01:28.910 --> 01:31.430
más confianza en que la refactorización funcionó bien.

01:31.460 --> 01:33.620
Probar es tanto un arte como una ciencia.

01:33.620 --> 01:38.360
Con más investigación y más práctica, cada desarrollador puede desarrollar su propio arte.

01:38.360 --> 01:42.980
También, pruebas de bajo nivel que es probar cosas a nivel de unidad.

01:43.370 --> 01:49.040
Métodos individuales, digamos, y las prácticas y la evolución de su software que vendrá de

01:49.070 --> 01:55.970
que fomente también el debate a alto nivel sobre las opciones arquitectónicas, dependencias o

01:55.970 --> 02:00.710
falta de ellas a lo largo de tu código y cómo de acoplados o desacoplados están estos sistemas.

02:00.740 --> 02:06.850
Todo esto es parte de una conversación más amplia que invita a llevar una buena organización a tu software.

02:06.860 --> 02:13.430
Nuestro primer objetivo, especialmente los nuevos en las pruebas, es asegurarnos de que un método específico tiene la deseada

02:13.430 --> 02:14.170
deseados.

02:14.180 --> 02:20.960
Una vez hecho esto, ahora puedes probarlo con condiciones inesperadas y casos de esquina que pueden invitar a la discusión

02:20.960 --> 02:24.230
y análisis sobre la estructura de la propia clase.

02:24.260 --> 02:28.070
A continuación, puedes analizar el propósito del sistema en el que se asienta esa clase.

02:28.070 --> 02:35.330
Y como he mencionado, este tipo de análisis nos da una oportunidad y un formato para mirar a la gran

02:35.330 --> 02:37.160
solución a gran escala que tenemos ante nosotros.

02:37.160 --> 02:42.260
En software, hay muchos tipos diferentes de pruebas, y lo sepas o no, ya estás

02:42.260 --> 02:43.100
haciendo pruebas.

02:43.130 --> 02:46.820
Algunos de los tipos de pruebas más comunes son la prueba de humo.

02:46.850 --> 02:49.910
Se trata de una prueba más bien casual de ¿funciona?

02:49.910 --> 02:50.630
¿Para mí?

02:50.630 --> 02:55.280
Y para muchos de nosotros, este puede ser el único tipo de prueba de proyecto que hagamos.

02:55.900 --> 03:02.920
Cada vez que haces algo de código nuevo, ejecutas la aplicación como un usuario, o juegas al juego como un jugador y tú

03:02.920 --> 03:08.210
¿Ves si ese camino en particular a través de la aplicación o el juego funciona de la manera que yo espero?

03:08.230 --> 03:14.110
Luego están las pruebas de usuario, en las que periódicamente, tal vez después de una compilación semanal, invitas a algunos usuarios

03:14.110 --> 03:16.210
o jugadores a probar el juego.

03:16.240 --> 03:21.760
Aquí lo que buscas no es sólo si tiene errores, sino si cumple las expectativas del usuario.

03:21.760 --> 03:22.970
¿Es divertido jugar?

03:22.990 --> 03:23.710
Cosas por el estilo.

03:23.710 --> 03:30.220
Y con una prueba de unidad, estás mirando una sección muy pequeña de la experiencia, tal vez sólo una única

03:30.220 --> 03:37.000
o una pequeña serie de llamadas mientras los sistemas trabajan juntos y te preguntas, ¿funciona como?

03:37.000 --> 03:37.960
como se pretende que funcione?

03:37.990 --> 03:43.180
Como he mencionado, ya estamos haciendo pruebas de humo como una forma fundamental de abordar los proyectos.

03:43.180 --> 03:45.280
Así que vamos a imaginar un ejemplo sencillo aquí.

03:45.280 --> 03:50.170
Si tuviéramos una aplicación de pulsar el botón que tiene un botón, y cuando lo pulsas, ganas.

03:50.200 --> 03:52.630
Podríamos añadirle algo de código.

03:52.630 --> 03:54.910
Compila y ejecuta la experiencia.

03:54.940 --> 03:59.500
Haz click en el botón uno y mira si muestra el texto de victoria de que has ganado.

03:59.530 --> 04:05.110
Eso sería una prueba de humo, y usted podría pasar eso al usuario y ver si funciona para ellos.

04:05.260 --> 04:11.340
En ambos casos, se trata de una prueba bastante cara de realizar, y es un uso muy limitado del código

04:11.350 --> 04:11.710
aquí.

04:11.710 --> 04:17.470
En este simple ejemplo, puede parecer que podemos capturar todos los casos de uso, pero imagina un juego más grande

04:17.470 --> 04:19.900
con bucles core y meta bucles.

04:20.050 --> 04:24.370
No puedes contar con el desarrollador o el usuario y las pruebas de usuario.

04:24.400 --> 04:30.070
Probar todos los botones, todas las funcionalidades, todas las entradas y todos los resultados potenciales.

04:30.070 --> 04:36.430
Cuando se hace correctamente, las pruebas unitarias pueden capturar más caminos a través del código más rápidamente, y usted

04:36.430 --> 04:39.730
puede ejecutar ese conjunto de pruebas de forma automática con más frecuencia.

04:39.730 --> 04:45.790
Con el tiempo, usted está construyendo una lista de pruebas permanentes que se sientan listo para ser ejecutado, por lo que sabe que los nuevos

04:45.790 --> 04:47.930
no rompe ninguna funcionalidad antigua.

04:47.950 --> 04:54.340
Algunos equipos operan bajo los principios del desarrollo ágil, que incluye una parte de su calendario llamada

04:54.340 --> 04:55.030
un sprint.

04:55.030 --> 05:01.540
Por ejemplo, cada dos semanas, el equipo se compromete a añadir algunas nuevas características cada hora, día, semana,

05:01.540 --> 05:02.420
o sprint.

05:02.440 --> 05:07.510
El equipo puede ejecutar esas pruebas automatizadas de nuevo, es una gran oportunidad para detectar cualquier error.

05:07.510 --> 05:09.790
Entonces, ¿cómo estamos ejecutando estas pruebas exactamente?

05:09.790 --> 05:13.600
Bueno, Unity tiene soporte de pruebas dentro del editor de Unity.

05:13.630 --> 05:19.510
Hay una ventana dedicada que se puede abrir y ejecutar manualmente las pruebas en cualquier momento que desee.

05:19.540 --> 05:21.100
Es un buen punto de partida.

05:21.130 --> 05:25.750
Por supuesto, automatizar esto también es posible, y se recomienda para proyectos más grandes.

05:25.750 --> 05:31.690
Hay maneras de atar esto con su control de versiones, de modo que cada vez que se comprometa o se comprometa a un

05:31.690 --> 05:34.360
cierta rama, puede ejecutar esas pruebas de nuevo.

05:34.600 --> 05:39.020
El propio Unity ofrece algunos servicios, incluyendo Unity Cloud build.

05:39.040 --> 05:45.040
Esto imita ejecutar esas pruebas y construir tu juego, pero hecho en un servidor que lo hace automáticamente

05:45.040 --> 05:47.800
una vez al día o con la frecuencia que tenga sentido.

05:47.800 --> 05:53.620
Ahora en el desarrollo general de unity, estamos familiarizados con dos modos diferentes dentro de la experiencia unity.

05:53.770 --> 05:56.770
Antes de pulsar el botón de reproducción, estamos en modo edición.

05:56.770 --> 05:58.210
Una vez le demos al play.

05:58.210 --> 06:01.420
Hasta que la escena se detenga, estamos en modo reproducción.

06:01.480 --> 06:05.650
Con unity testing, puedes probar en cualquiera de esos dos modos.

06:05.650 --> 06:07.870
Entonces hay varias maneras diferentes de abordar eso.

06:08.260 --> 06:13.480
Algunas de las ideas de prueba que tendrías aquí sería llamar a un método y ver si te da la

06:13.480 --> 06:14.580
resultado esperado.

06:14.590 --> 06:20.470
Digamos que tenemos una clase de sistema matemático con un método add, y sólo tienes que pasar los parámetros conocidos y

06:20.470 --> 06:22.150
ver si coincide con el resultado conocido.

06:22.150 --> 06:27.070
También puede tener pruebas que hacen preguntas específicas acerca de la funcionalidad del editor.

06:27.100 --> 06:33.100
¿Apareció la ventana del editor con el tamaño adecuado, o nuestros objetos del juego, o la cámara con el tamaño adecuado?

06:33.100 --> 06:35.350
antes de que comience la escena?

06:35.350 --> 06:40.900
Hacer pruebas en modo edición cuando se puede es un buen punto de partida, así que hazlo por defecto.

06:40.900 --> 06:46.930
Las pruebas en modo reproducción son increíblemente útiles, pero conllevan la complejidad añadida del código en tiempo de ejecución.

06:47.540 --> 06:47.990
Aquí.

06:47.990 --> 06:53.330
Estás probando no sólo como un determinado método devuelve un resultado, sino que estás probando que dentro de la mayor

06:53.330 --> 06:57.020
ciclo de vida de los objetos del juego y otros conceptos de unity.

06:57.070 --> 07:03.200
Y si aquí se puede probar el código que se basa en despertar, iniciar, actualizar, etcétera, cosas que sólo

07:03.200 --> 07:04.400
se ejecutan en tiempo de ejecución.

07:04.400 --> 07:11.210
Algunas ideas de prueba aquí son para ver si un prefab, una vez instanciado, ejecuta su método de inicio correctamente

07:11.210 --> 07:12.620
sin ninguna excepción.

07:12.620 --> 07:14.780
Puedes probar el código a lo largo del tiempo.

07:15.460 --> 07:19.150
¿Este bucle se ejecuta correctamente después de unos segundos?

07:19.180 --> 07:21.820
Puedes comprobar las interacciones físicas en tiempo de ejecución.

07:21.820 --> 07:28.720
¿Cuántos rebotes tendrá una pelota en tu juego 3D antes de que deje de comprobar el factor de rebote?

07:28.750 --> 07:30.310
Un poco más de contexto aquí.

07:30.310 --> 07:36.830
Así que históricamente, unity no ofrecía pruebas integradas en el editor utilizando la ventana de test runner.

07:36.850 --> 07:37.330
Veremos.

07:37.360 --> 07:43.570
En los muchos años transcurridos desde el lanzamiento de Unity, esta funcionalidad se ha ido añadiendo y ampliando poco a poco como

07:43.570 --> 07:45.100
de la última versión de unity.

07:45.130 --> 07:50.500
Tenemos todo lo que necesitamos para ejecutar los tipos de pruebas que queremos de la forma que queremos.

07:50.500 --> 07:55.900
Nunca ha habido un mejor momento para añadir pruebas unitarias en su flujo de trabajo, y juntos vamos a ver cómo

07:55.900 --> 07:56.770
hacerlo.

07:57.160 --> 07:57.970
Gracias.
