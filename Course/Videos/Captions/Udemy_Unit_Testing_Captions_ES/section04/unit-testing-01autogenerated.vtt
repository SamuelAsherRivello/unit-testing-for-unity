WEBVTT

00:00.110 --> 00:01.340
The unit testing.

00:01.340 --> 00:02.190
Overview.

00:02.210 --> 00:04.100
First, a bit of context.

00:04.130 --> 00:11.690
As your projects grow with more scripts, more methods, more complexity, it can be difficult to ensure

00:11.690 --> 00:14.510
that new code doesn't break any old code.

00:14.540 --> 00:19.920
Automated testing can help ensure that your code is functioning as you expect.

00:19.940 --> 00:25.940
Automated testing helps us by finding out how and where bugs occur earlier in the process.

00:25.940 --> 00:31.010
Instead of the much more expensive option of waiting for your end users to report these bugs.

00:31.010 --> 00:36.210
So you can use MVC architectures without testing, and you can use testing without.

00:36.230 --> 00:37.550
MVC architecture.

00:37.550 --> 00:40.990
So why is it important to talk about these topics together?

00:41.000 --> 00:45.380
It's because the combination of these two technologies is incredibly powerful.

00:45.410 --> 00:51.800
By using an architecture like MVC, it helps ensure that your code is more decoupled, that each class

00:51.800 --> 00:55.000
has a single purpose and that solutions are simpler.

00:55.010 --> 00:57.950
All of these are traits for more testable code as well.

00:57.980 --> 01:04.610
Adding testing to your project will add robustness, more confidence, and it encourages simple solutions,

01:04.610 --> 01:08.930
especially when enabled with test driven development, which we'll discuss.

01:08.960 --> 01:12.530
Adding unit testing to your project and workflow will save time.

01:12.530 --> 01:15.440
It saves planning, development and maintenance.

01:15.470 --> 01:21.170
It adds more confidence to your code, and with that confidence, you can have much more boldness in

01:21.170 --> 01:22.370
your Refactors.

01:22.370 --> 01:28.910
Think about running all of your tests before a major refactor, and then after saving you time and giving

01:28.910 --> 01:31.430
you more confidence that the refactor worked well.

01:31.460 --> 01:33.620
Testing is both an art and a science.

01:33.620 --> 01:38.360
With more research and more practice, each developer can develop their own art.

01:38.360 --> 01:42.980
Also, low level testing that's testing things at the unit level.

01:43.370 --> 01:49.040
Individual methods, let's say, and the practices and evolution of your software that will come from

01:49.070 --> 01:55.970
that encourages higher level discussion as well about the architectural choices, dependencies, or

01:55.970 --> 02:00.710
lack thereof throughout your code and how coupled or decoupled these systems are.

02:00.740 --> 02:06.850
This is all part of a larger conversation which invites bringing good organization to your software.

02:06.860 --> 02:13.430
Our first goal, especially new to testing, is to make sure that a specific method has the desired

02:13.430 --> 02:14.170
results.

02:14.180 --> 02:20.960
Once that's done, you can now test it with unexpected conditions and corner cases that may invite discussion

02:20.960 --> 02:24.230
and analysis over the structure of the class itself.

02:24.260 --> 02:28.070
Then you can look at the purpose of the system that that class sits in.

02:28.070 --> 02:35.330
And as I mentioned, this type of analysis gives us an opportunity and a format to look at the large

02:35.330 --> 02:37.160
scale solution we have before us.

02:37.160 --> 02:42.260
In software, there's many different types of testing, and whether you know it or not, you're already

02:42.260 --> 02:43.100
doing testing.

02:43.130 --> 02:46.820
A few of the most common types of tests are a smoke test.

02:46.850 --> 02:49.910
This is a rather casual test of does it work?

02:49.910 --> 02:50.630
For me?

02:50.630 --> 02:55.280
And for many of us, this may be the only type of project testing we're doing.

02:55.900 --> 03:02.920
Every time you do some new code, you run the app like a user, or play the game like a player and you

03:02.920 --> 03:08.210
see does that particular path through the app or the game work the way I expect it to?

03:08.230 --> 03:14.110
Then there's user testing, where periodically, perhaps after a weekly build, you invite some users

03:14.110 --> 03:16.210
or players to give the game a try.

03:16.240 --> 03:21.760
Here you're looking for not just does it have any bugs, but does it meet the user's expectations?

03:21.760 --> 03:22.970
Is it fun to play?

03:22.990 --> 03:23.710
Things like that.

03:23.710 --> 03:30.220
And with a unit test, you're looking at a very small section of the experience, perhaps just a single

03:30.220 --> 03:37.000
method call or a small series of calls as systems work together and you're asking, does it work as

03:37.000 --> 03:37.960
it's intended to work?

03:37.990 --> 03:43.180
As I mentioned, we're already doing smoke testing as a fundamental way to approach projects.

03:43.180 --> 03:45.280
So let's imagine a simple example here.

03:45.280 --> 03:50.170
If we had a click the button app which has a button, and when you click it, you win.

03:50.200 --> 03:52.630
We could add some code to that.

03:52.630 --> 03:54.910
Compile and run the experience.

03:54.940 --> 03:59.500
Click the one button and see if it shows the victory text of you win.

03:59.530 --> 04:05.110
That would be a smoke test, and you could pass that on to the user and see if it works for them.

04:05.260 --> 04:11.340
In both cases, this is a rather expensive test to perform, and it's a very narrow usage of the code

04:11.350 --> 04:11.710
here.

04:11.710 --> 04:17.470
In this simple example, it may seem like we can capture all the use cases, but imagine a larger game

04:17.470 --> 04:19.900
with core loops and meta loops.

04:20.050 --> 04:24.370
You can't count on the developer or the user and the user testing.

04:24.400 --> 04:30.070
Testing all the buttons, all the functionality, all the input, and all the potential outcomes.

04:30.070 --> 04:36.430
When done properly, unit testing can capture more pathways through the code more quickly, and you

04:36.430 --> 04:39.730
can run that suite of tests automatically more frequently.

04:39.730 --> 04:45.790
Over time, you're building a list of permanent tests that sit ready to be run, so you know that new

04:45.790 --> 04:47.930
code doesn't break any old functionality.

04:47.950 --> 04:54.340
Some teams operate under agile development principles, which includes a chunk of your calendar called

04:54.340 --> 04:55.030
a sprint.

04:55.030 --> 05:01.540
For example, every two weeks, the team commits to adding some new features each hour, day, week,

05:01.540 --> 05:02.420
or sprint.

05:02.440 --> 05:07.510
The team can run those automated tests again, it's a great opportunity to catch any bugs.

05:07.510 --> 05:09.790
So how are we running these tests exactly?

05:09.790 --> 05:13.600
Well, unity has testing support within the unity editor.

05:13.630 --> 05:19.510
There's a dedicated window you can open up and manually execute those tests any time you like.

05:19.540 --> 05:21.100
That's a great place to start.

05:21.130 --> 05:25.750
Of course, automating this is possible too, and recommended for larger projects.

05:25.750 --> 05:31.690
There's ways to tie this in with your version control, so that every time you commit or commit to a

05:31.690 --> 05:34.360
certain branch, it can run those tests again.

05:34.600 --> 05:39.020
Unity itself offers some services, including Unity Cloud build.

05:39.040 --> 05:45.040
This mimics running those tests and building your game, but done on a server automatically doing it

05:45.040 --> 05:47.800
once a day or at whatever frequency makes sense.

05:47.800 --> 05:53.620
Now in general unity development, we're familiar with two different modes being inside the unity experience.

05:53.770 --> 05:56.770
Before we hit the play button, we're in edit mode.

05:56.770 --> 05:58.210
Once we hit play.

05:58.210 --> 06:01.420
Until that scene stops, we're in play mode.

06:01.480 --> 06:05.650
With unity testing, you're able to test in either of those two modes.

06:05.650 --> 06:07.870
Then there's several different ways to approach that.

06:08.260 --> 06:13.480
Some of the testing ideas that you'd have here would be to call a method and see if it gives you the

06:13.480 --> 06:14.580
expected result.

06:14.590 --> 06:20.470
Let's say we have a math system class with an add method, and you just pass in known parameters and

06:20.470 --> 06:22.150
see if it matches the known result.

06:22.150 --> 06:27.070
You can also have tests that ask specific questions about editor functionality.

06:27.100 --> 06:33.100
Did the editor window pop up at the proper sizing or our game objects, or the camera in the proper

06:33.100 --> 06:35.350
position before the scene begins?

06:35.350 --> 06:40.900
Doing testing in edit mode when you can is a great place to start, so do that by default.

06:40.900 --> 06:46.930
Play mode testing is incredibly useful, but it comes with the added complexity of runtime code.

06:47.540 --> 06:47.990
Here.

06:47.990 --> 06:53.330
You're testing not just as a certain method return a result, but you're testing that within the larger

06:53.330 --> 06:57.020
lifecycle of game objects and other unity concepts.

06:57.070 --> 07:03.200
And if it here is you can test code that relies on awake, start, update, etcetera, things that only

07:03.200 --> 07:04.400
execute at runtime.

07:04.400 --> 07:11.210
Some testing ideas here are to see if a prefab, once instantiated, executes its start method properly

07:11.210 --> 07:12.620
without any exceptions.

07:12.620 --> 07:14.780
You can test code over time.

07:15.460 --> 07:19.150
Does this loop execute properly after a few seconds?

07:19.180 --> 07:21.820
You can check runtime physics interactions.

07:21.820 --> 07:28.720
How many bounces will a ball have in your 3D game before it stops testing the bounciness factor?

07:28.750 --> 07:30.310
A little bit more context here.

07:30.310 --> 07:36.830
So historically, unity did not offer testing built into the editor using the test runner window.

07:36.850 --> 07:37.330
We'll see.

07:37.360 --> 07:43.570
In the many years since unity first launched, this functionality was slowly added in and expanded as

07:43.570 --> 07:45.100
of the latest version of unity.

07:45.130 --> 07:50.500
We have everything we need to execute the types of tests we want in the ways we want them.

07:50.500 --> 07:55.900
There's never been a better time to add unit testing into your workflow, and together we'll see how

07:55.900 --> 07:56.770
to do that.

07:57.160 --> 07:57.970
Thanks.
