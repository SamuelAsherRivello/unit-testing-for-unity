WEBVTT

00:00.020 --> 00:01.220
Desarrollo basado en pruebas.

00:01.220 --> 00:04.790
Este es un ejemplo de una clase de prueba con un método de prueba.

00:04.790 --> 00:08.330
Ya en el curso, hemos visto cómo ejecutar una prueba existente.

00:08.360 --> 00:11.080
Hemos visto cómo crear nuevas pruebas desde cero.

00:11.090 --> 00:17.450
El desarrollo dirigido por pruebas, o TDD, es la práctica de añadir pruebas antes de añadir el código de producción.

00:17.450 --> 00:21.180
Para algunos, especialmente los nuevos en las pruebas, esto puede parecer extraño.

00:21.200 --> 00:26.300
Vamos a aprender más acerca de la técnica, y tenga en cuenta que usted puede mezclar la prueba impulsada por el desarrollo tradicional con

00:26.330 --> 00:29.360
pruebas como quieras en tus propios flujos de trabajo.

00:29.390 --> 00:36.500
TDD crea pruebas que especifican y validan lo que el código hará una vez creado.

00:36.950 --> 00:38.120
Este es el flujo de trabajo.

00:38.150 --> 00:39.560
Creas una nueva prueba.

00:39.590 --> 00:44.120
Añades la implementación suficiente para que el código compile.

00:44.120 --> 00:50.180
Dado que hemos añadido el código de producción suficiente para que este código compile, tal vez incluso teniendo un vacío

00:50.210 --> 00:51.260
implementación.

00:51.260 --> 00:53.900
Ejecutamos la prueba y la prueba falla.

00:54.260 --> 01:00.290
Eso es lo esperado, y de hecho es un muy buen punto de partida ver primero una prueba que falla.

01:00.290 --> 01:05.960
Si tenemos más confianza en que la prueba una vez que pasa realmente significa algo, entonces refactorizas

01:05.960 --> 01:09.310
tu código de producción hasta que el código pase y entonces sigues adelante.

01:09.330 --> 01:15.860
TDD no es simplemente el orden de probar primero y escribir el código de producción después.

01:15.860 --> 01:19.060
Es también una forma de pensar sobre tus proyectos.

01:19.070 --> 01:24.080
Algo de esto realmente necesitas practicarlo para sentir los resultados.

01:24.080 --> 01:30.980
Pero lo que encuentro con más experiencia TDD es que piensas en tu nuevo código de manera diferente, eres

01:30.980 --> 01:37.370
más centrado en tu desarrollo, creas más código atómico que hace sólo una cosa.

01:37.370 --> 01:42.020
Y cuando tu código de pruebas pasa, es un pase más significativo.

01:42.050 --> 01:46.280
Otra forma de ver este flujo es que escribes una prueba que falla.

01:46.280 --> 01:51.530
Haces que la prueba pase, y luego refactorizas tu código para cumplir cualquier otro objetivo.

01:51.530 --> 01:54.710
Tienes optimización, estándares de codificación.

01:54.710 --> 01:55.490
Etcétera.

01:55.940 --> 01:57.060
Y luego repites.

01:57.080 --> 01:58.490
Veamos esto en acción.

01:58.490 --> 02:01.210
Abriremos un proyecto unity que ya tiene una prueba.

02:01.220 --> 02:08.690
Utilizaremos TDD para añadir un nuevo test, crearemos suficiente código de producción para que compile, veremos un fallo

02:08.690 --> 02:12.050
y luego refactorizar hasta que obtengamos un resultado satisfactorio.

02:12.820 --> 02:16.090
Aquí estamos en un proyecto unity bastante vacío.

02:16.090 --> 02:22.450
Me he asegurado de que el framework de pruebas ya está añadido en el gestor de paquetes como se ha mostrado antes, y

02:22.450 --> 02:25.390
He copiado una prueba para empezar.

02:25.420 --> 02:28.250
Echemos un vistazo a esa prueba aquí en modo edición.

02:28.270 --> 02:33.660
Tengo una prueba que cubre el método add de una simple clase matemática.

02:33.670 --> 02:35.720
Vamos a ejecutar el test que pasa.

02:35.740 --> 02:37.120
Echemos un vistazo al código.

02:37.120 --> 02:41.300
Y aquí vemos la prueba con la que estamos familiarizados de antes en la presentación.

02:41.320 --> 02:45.160
Ahora vamos a realizar algunas pruebas de desarrollo como se discute aquí.

02:45.190 --> 02:51.280
La idea es que si tuviéramos que ampliar la funcionalidad del sistema de matemáticas, tenemos algunos enfoques.

02:51.310 --> 02:57.010
Podríamos ir a crear ese código de producción sin ninguna prueba y después.

02:57.930 --> 03:01.260
Y después quizás añadimos pruebas, o quizás no.

03:02.310 --> 03:08.400
Sin embargo, con el desarrollo dirigido por pruebas, vamos a probar primero antes de haber añadido cualquier producción

03:08.400 --> 03:08.970
de producción.

03:09.730 --> 03:10.930
Veamos cómo funciona.

03:10.930 --> 03:12.340
Imaginaré que estoy creando.

03:12.910 --> 03:16.600
Imaginemos que el sistema matemático necesita un método de resta.

03:17.830 --> 03:22.150
Ahora bien, este método de resta no existe todavía, como veremos cuando veamos el código fuente.

03:22.950 --> 03:24.780
Pero vamos a hacer una prueba de todos modos.

03:25.650 --> 03:28.980
Empezaré añadiendo el atributo test.

03:29.190 --> 03:33.030
Voy a nombrar el método con lo que está bajo prueba.

03:33.060 --> 03:39.990
Cual es el resultado esperado y en que situación espero que para restar, el resultado sea cinco.

03:40.020 --> 03:45.000
Si paso en diez y cinco, diez menos cinco es cinco.

03:45.030 --> 03:48.870
Para hacer la prueba, instanciaré una nueva copia de mi sistema matemático.

03:49.080 --> 03:52.120
Obtengo el resultado llamando al método resta.

03:52.140 --> 03:56.730
El texto rojo aquí indica que mi editor de código sabe que no hay método de resta.

03:56.730 --> 04:01.200
Y finalmente, esperamos que nuestro método devuelva un valor de cinco.

04:01.230 --> 04:04.980
Como he copiado y pegado esto del ejemplo anterior, dice 15.

04:05.010 --> 04:06.060
Lo cambiaré ahora.

04:06.090 --> 04:08.070
Ahora está comprobando la suposición correcta.

04:08.670 --> 04:13.050
Ahora sabemos que esto no va a compilar, pero guardemos y volvamos a unity.

04:13.080 --> 04:19.530
Observemos dos cosas una, la ventana de la consola muestra correctamente que hay un error de compilación, y

04:19.530 --> 04:24.150
dos, observa que en la ventana del test runner aún no vemos nuestro nuevo método.

04:24.180 --> 04:26.520
Estas son buenas cosas a tener en cuenta en TDD.

04:26.550 --> 04:30.810
El siguiente paso es hacer el código suficiente para que compile.

04:30.840 --> 04:34.570
Es muy importante que no terminemos la implementación en esta fase.

04:34.590 --> 04:36.780
Aquí está el código fuente de nuestro sistema matemático.

04:36.780 --> 04:41.920
Esta es la implementación más simple que puedo hacer para que el código compile.

04:41.940 --> 04:45.610
Fíjate que no termino la implementación correcta.

04:45.630 --> 04:52.480
Ahora en este ejemplo, parece trivial porque sabemos que todo lo que tenemos que hacer es restar a y b.

04:52.500 --> 04:58.320
Sin embargo, normalmente en el desarrollo dirigido por pruebas, la implementación de un método dado sería más compleja

04:58.320 --> 04:59.400
y llevaría más tiempo.

04:59.430 --> 05:03.390
En cualquier caso, siempre nos detenemos aquí una vez que tenemos suficiente para compilar.

05:04.090 --> 05:05.250
Veamos la prueba.

05:05.260 --> 05:07.840
Nuestro editor de código correctamente ya no se muestra.

05:07.840 --> 05:09.010
Restar y rojo.

05:09.460 --> 05:11.260
Vamos a guardar y comprobar la unidad.

05:11.290 --> 05:13.600
Ahora no vemos ningún error de consola.

05:13.630 --> 05:14.170
Estupendo.

05:14.170 --> 05:15.400
Todo está compilando.

05:15.400 --> 05:19.210
Y ahora nuestra ventana del ejecutor de pruebas muestra correctamente el nuevo método de prueba.

05:19.210 --> 05:20.290
Vamos a ejecutar todas las pruebas.

05:20.290 --> 05:26.320
Podemos considerar que las pruebas fallan porque uno o más métodos de prueba fallan.

05:26.320 --> 05:32.290
Cuando miramos cuando seleccionamos el método que falla, vemos alguna pequeña entrada allí vemos un poco de salida

05:32.320 --> 05:34.120
texto que muestra por qué falló.

05:34.240 --> 05:38.410
Está esperando cinco, pero en su lugar devuelve cero.

05:38.410 --> 05:40.420
Ahora, ¿por qué pasamos por esto?

05:40.420 --> 05:46.600
Puede parecer trivial, pero es una distinción importante que crear una prueba que creemos que las pruebas adecuadas

05:46.600 --> 05:49.120
funcionalidad, y primero vemos que falla.

05:49.120 --> 05:55.420
Eso nos da una buena base para saber cuándo una implementación adecuada da un aprobado con confianza.

05:55.420 --> 05:57.040
Añadamos la implementación adecuada.

05:57.040 --> 06:02.050
Aquí asumimos que el primer parámetro que entra sería mayor que el segundo, y simplemente devolvemos

06:02.050 --> 06:04.080
y simplemente devolvemos a menos b.

06:04.090 --> 06:05.560
Vamos a guardar y ejecutar la prueba.

06:07.440 --> 06:12.480
Ahora la prueba se ejecuta bien y hemos completado nuestro primer ejemplo de desarrollo dirigido por pruebas.

06:12.480 --> 06:13.410
Ya está.

06:13.800 --> 06:20.580
Ahora, sé por mi propia experiencia que me tomó tiempo y práctica con las pruebas para realmente sentir el

06:20.580 --> 06:21.390
beneficios.

06:21.420 --> 06:29.820
Mientras hemos tenido una breve visión general con las pruebas unitarias, la creación de pruebas unitarias y el desarrollo dirigido por pruebas,

06:30.420 --> 06:35.070
espero que estés empezando a ver algunos de los beneficios que podrían funcionar bien para ti.

06:35.100 --> 06:39.360
Combinando lo que has aprendido aquí sobre testing con la arquitectura MVC.

06:39.390 --> 06:47.340
Tienes las herramientas para crear proyectos más modulares, escalables, optimizados, robustos y fiables.

06:47.370 --> 06:52.440
La combinación de pruebas y una buena arquitectura es realmente poderosa.

06:52.470 --> 06:53.430
Gracias.
