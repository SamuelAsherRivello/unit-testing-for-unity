WEBVTT

00:00.050 --> 00:03.640
Configuración de la ventana del ejecutor de pruebas y clases de prueba.

00:03.650 --> 00:07.250
El código fuente del framework de pruebas está disponible a través del gestor de paquetes.

00:07.250 --> 00:10.800
Puedes añadir el paquete buscando el test framework.

00:10.820 --> 00:15.530
Importar el marco de pruebas y opcionalmente importar las herramientas de cobertura de código.

00:15.530 --> 00:21.110
El marco de pruebas de la unidad incluye todas las bibliotecas necesarias para probar su código C-sharp ahora como un individuo

00:21.110 --> 00:21.770
o en equipo.

00:21.770 --> 00:26.540
Si eres nuevo en las pruebas, no tienes que probar todo tu código a la vez.

00:26.540 --> 00:32.450
Puedes poco a poco, con el tiempo, empezar a probar cuanto más de tu código esté cubierto con pruebas, mejor.

00:32.450 --> 00:34.020
tendrás más confianza.

00:34.040 --> 00:36.320
Algunas formas de integrarlo en tu equipo.

00:36.320 --> 00:37.640
Así de fácil.

00:37.820 --> 00:44.540
Es añadir pruebas sólo para las nuevas características, o añadir pruebas a los sistemas clave antes de una refactorización importante.

00:44.540 --> 00:48.650
Y una buena forma de empezar es hacer pruebas sólo durante la corrección de errores.

00:48.650 --> 00:55.010
Si un usuario informa de un error, primero se replica la existencia del error con una prueba que falla.

00:55.040 --> 00:57.790
Entonces se corrige el código y el test pasa.

00:57.800 --> 01:03.260
Puedes dejar esta prueba como legado, así te aseguras de que ese fallo no vuelva en el futuro.

01:03.290 --> 01:08.840
El concepto de cobertura de código se refiere a cuánto de tu código base está cubierto con pruebas.

01:08.930 --> 01:16.250
Si tienes una clase y tres métodos en todo tu proyecto, y los tres tienen tests,

01:16.250 --> 01:18.290
entonces tienes una cobertura del 100%.

01:18.290 --> 01:23.480
En general, cuanto mayor sea la cobertura, mejor puedes abrir esa ventana de cobertura de código,

01:23.480 --> 01:30.440
ejecutar tus pruebas y obtener resultados robustos que te muestren no sólo el porcentaje por clase y sistema,

01:30.440 --> 01:36.830
sino que dentro de cada clase, obtienes una lectura línea por línea de qué métodos tienen cobertura y cuáles no.

01:37.130 --> 01:38.300
Es muy útil.

01:38.300 --> 01:43.670
Puedes hacer un seguimiento de cuánto de tu código está siendo probado, localizar cualquier vulnerabilidad que tengas durante tu

01:43.670 --> 01:48.710
proceso de prueba, y también supervisar su creciente cobertura en el tiempo.

01:48.710 --> 01:52.390
Con esas librerías instaladas, puedes crear tu primera prueba.

01:52.400 --> 01:58.730
Abre la ventana del Test Runner, crea una carpeta de test en tus assets, crea tu primera clase y tu

01:58.730 --> 02:03.890
primer método en esa clase en ese momento, esas pruebas se mostrarán en la ventana del Test Runner donde

02:03.890 --> 02:06.350
puedes hacer click en ejecutar y ver como se ejecutan.

02:06.350 --> 02:09.080
Aquí hay un ejemplo de una clase de prueba con un método de prueba.

02:09.110 --> 02:11.780
Fíjate que parece bastante normal en C sostenido.

02:11.780 --> 02:16.850
El atributo de prueba que se muestra entre corchetes es la salsa secreta.

02:16.850 --> 02:22.220
Aquí, el sistema busca cualquier método marcado con ese atributo para considerarlo una prueba.

02:22.220 --> 02:26.600
Como mencioné, probar es una forma de arte y hay muchas maneras diferentes de abordarlo.

02:26.630 --> 02:35.210
Un buen recurso que utilizo es dividir cada método en tres secciones: arrange, act y assert.

02:35.240 --> 02:39.800
En arrange, haces una o más líneas necesarias para configurar la prueba.

02:39.800 --> 02:45.650
En la parte de actuar, ejecutas lo que sea que esté específicamente relacionado con la prueba, y luego

02:45.650 --> 02:46.400
haces la afirmación.

02:46.430 --> 02:49.430
Afirmar significa asumir que algo es cierto.

02:49.430 --> 02:52.280
Así que el marco de pruebas viene en la librería assert.

02:52.280 --> 02:56.450
Imagina que tenemos un sistema matemático personalizado que te permite sumar dos números.

02:56.450 --> 03:01.430
Podríamos afirmar que la suma de cinco más diez es igual a 15.

03:01.430 --> 03:03.860
Y lo consideraríamos una prueba exitosa.

03:03.890 --> 03:06.110
Lo ejecutaríamos y veríamos que pasa.

03:06.110 --> 03:07.520
Veamos esto en acción.

03:07.520 --> 03:10.520
Abriré un proyecto unity que tenga un test preparado.

03:10.550 --> 03:13.940
Echaremos un vistazo a cómo funciona y ejecutaremos el test.

03:14.880 --> 03:17.520
Aquí estamos en un proyecto unity vacío.

03:17.520 --> 03:20.290
Empezaré configurando el marco de pruebas.

03:20.340 --> 03:22.260
Así que abriré el gestor de paquetes.

03:26.800 --> 03:30.830
El gestor de paquetes muestra los paquetes que ya están instalados.

03:30.850 --> 03:36.610
Es posible que el proyecto con el que empiezas ya tenga el test framework añadido.

03:37.190 --> 03:39.960
Pero si no lo tiene, aquí te explicamos cómo puedes añadirlo tú mismo.

03:39.980 --> 03:44.720
Busca en el Registro de Unity el test framework e instala la última versión.

03:44.750 --> 03:51.650
A continuación, para las características adicionales opcionales, buscar en el registro de la unidad para la cobertura de código e instalar.

03:51.980 --> 03:54.320
La cobertura de código tiene algunas muestras opcionales.

03:54.320 --> 03:55.790
No las instalaré aquí.

03:56.590 --> 04:02.020
Ahora revisando los paquetes que tenemos en el proyecto, vemos tanto el framework de pruebas como opcionalmente si

04:02.020 --> 04:04.020
optas por instalarlo, la cobertura de codificación.

04:04.030 --> 04:07.210
Ahora este proyecto es totalmente compatible para tener pruebas unitarias.

04:08.940 --> 04:11.520
Para empezar, abriremos la ventana del ejecutor de pruebas.

04:11.970 --> 04:14.220
La ventana del ejecutor de pruebas tiene dos pestañas.

04:14.250 --> 04:16.230
Modo edición y modo reproducción.

04:16.440 --> 04:21.810
Debido a que no tenemos pruebas añadidas, la ventana es muy útil y ofrece algunas opciones de creación clicables

04:21.810 --> 04:24.270
para hacer pruebas para nosotros en una demostración posterior.

04:24.300 --> 04:26.670
Mostraré cómo crear tests desde cero.

04:26.880 --> 04:30.180
Por ahora, pegaré uno que ya tengo preparado.

04:31.010 --> 04:37.790
La prueba que se muestra aquí fue pegada desde el mini proyecto Max de ejemplo para el curso para ayudarnos a enfocar.

04:37.790 --> 04:40.310
He quitado todo excepto la prueba que queremos ver.

04:40.310 --> 04:45.050
Vamos a explorar la ventana del Ejecutor de la prueba, comenzando con el modo de edición aquí en la pestaña Modo de Edición.

04:45.050 --> 04:49.520
Por defecto, todas las pruebas del proyecto están listadas aquí en la pestaña Modo Edición.

04:49.520 --> 04:55.700
Por defecto, se muestran todas las pruebas disponibles en cualquier lugar de la carpeta assets y de la carpeta packages.

04:55.700 --> 04:59.690
Puede filtrar por categoría para ver sólo algunas de las pruebas.

04:59.690 --> 05:04.760
No tenemos muchas pruebas aquí, pero sólo para demostraciones, voy a elegir la categoría para nuestras muestras.

05:04.760 --> 05:08.600
Ahora la ventana muestra una jerarquía de todas las pruebas organizadas por namespace.

05:08.600 --> 05:15.380
Cuando expando todo a los niveles inferiores, veo la clase de prueba y luego un método de prueba debajo.

05:15.380 --> 05:18.500
Podemos ejecutar todas las pruebas y ver que pasan.

05:18.500 --> 05:22.010
Podemos seleccionar una prueba individual y ejecutar la seleccionada.

05:22.010 --> 05:24.140
Si la prueba pasa o falla.

05:24.140 --> 05:27.470
Tenemos una manera fácil de llegar al código fuente con un menú de clic derecho.

05:30.070 --> 05:31.810
Aquí está el código de prueba completo.

05:32.230 --> 05:34.990
Este es el mismo que vimos antes en la presentación.

05:34.990 --> 05:36.280
Repasemos lo más destacado.

05:36.280 --> 05:40.900
Tenemos un atributo opcional de categoría que ayuda a organizar nuestras pruebas.

05:41.110 --> 05:43.000
Ese desplegable que he mostrado.

05:43.240 --> 05:43.960
Filtros.

05:43.960 --> 05:47.860
Basado en este valor puedes tener muchas clases de prueba que están en la misma categoría.

05:47.890 --> 05:50.830
Usted puede tener muchas clases de prueba que están en la misma categoría.

05:50.830 --> 05:52.330
Luego tenemos el atributo test.

05:52.330 --> 05:57.100
Esto es lo que le dice al marco de pruebas que este método es en realidad un método de prueba.

05:57.820 --> 06:00.590
Sin esto, no aparecerá en la ventana del test runner.

06:00.610 --> 06:05.770
Luego usamos el paradigma familiar pero opcional de arrange, act, y assert.

06:05.800 --> 06:10.060
Esta es sólo una forma que utilizo como una convención para organizar mi lógica de prueba.

06:10.060 --> 06:14.710
También, cuando nombro mis pruebas, elijo nombrarlas basándome en lo que está bajo la prueba.

06:14.740 --> 06:17.560
¿Cuál es la expectativa y cuál es la situación?

06:17.560 --> 06:23.890
Así que aquí estoy probando el método add que el resultado será 15 cuando paso cinco y diez como operandos.

06:23.920 --> 06:25.780
Vamos al modo de reproducción.

06:25.810 --> 06:30.970
La pestaña de modo de juego se ve muy similar, y parece que está mostrando exactamente la misma prueba, pero es

06:30.970 --> 06:31.280
no

06:31.300 --> 06:32.230
Abriré la fuente.

06:32.230 --> 06:34.240
Aquí está el código fuente para una prueba en modo reproducción.

06:34.240 --> 06:35.470
¿En qué se diferencia esto?

06:35.500 --> 06:40.240
La principal diferencia es dónde se encuentra en la ventana del proyecto.

06:40.270 --> 06:41.500
Te lo mostraré en un momento.

06:41.500 --> 06:47.470
Una diferencia opcional que elijo es que para mis pruebas en modo de reproducción, añado la clase con modo de reproducción

06:47.500 --> 06:51.530
test, mientras que en el modo editor sólo añado test.

06:51.550 --> 06:52.870
Eso me ayuda a organizarme.

06:52.900 --> 06:56.560
Ahora aquí para la demostración, estoy probando exactamente el mismo comportamiento.

06:56.560 --> 06:58.870
Una vez en modo edición y otra en modo reproducción.

06:58.870 --> 07:01.150
Probablemente no sea necesario para ti.

07:01.180 --> 07:08.170
En su lugar, pruebe por defecto en modo edición y sólo utilice el modo reproducción cuando necesite capturar la reproducción.

07:08.170 --> 07:13.480
como Start Awake o la funcionalidad del objeto Game.

07:13.510 --> 07:14.860
Detección de colisiones.

07:14.860 --> 07:16.840
Otras cosas que sólo ocurren en tiempo de ejecución.

07:16.840 --> 07:21.040
Como se discutió en el curso, utilizo la misma convención de nomenclatura de métodos que vimos antes.

07:21.040 --> 07:22.060
Anotemos dos.

07:22.150 --> 07:23.920
Observemos dos diferencias clave.

07:23.920 --> 07:29.230
Aquí usamos un atributo de prueba de unidad, no un atributo de prueba como vimos antes.

07:29.230 --> 07:34.300
Y además de arrange, act y assert, hay un paradigma await opcional.

07:34.300 --> 07:41.050
Esto se utiliza aquí sólo para demostrar el hecho de que mientras las pruebas en modo edición se ejecutan de forma sincrónica, play

07:41.050 --> 07:44.590
pueden ejecutarse de forma asíncrona.

07:44.590 --> 07:49.750
Así que si tienes algún código que requiera pruebas asíncronas, el modo play es una gran opción.

07:49.750 --> 07:52.470
Echemos un vistazo a la ventana del proyecto para ver la organización.

07:52.480 --> 07:57.940
Observe que la prueba de modo de edición se encuentra en una carpeta del editor, y observe que la prueba de modo de reproducción se encuentra en un tiempo de ejecución

07:57.940 --> 07:58.330
carpeta.

07:58.330 --> 08:03.490
Esa diferencia, junto con las diferencias en los archivos de definición de ensamblado.

08:03.520 --> 08:09.760
Junto a estas pruebas está cómo el sistema sabe que una es una prueba de editor y otra es una prueba de modo de reproducción.

08:09.790 --> 08:11.220
Ejecutaré la prueba del modo de juego.

08:11.230 --> 08:13.300
Por último, voy a ejecutar la prueba de modo de juego.

08:13.330 --> 08:16.870
La ventana del test runner se comporta igual con una excepción.

08:16.900 --> 08:18.730
Porque se trata de pruebas en modo reproducción.

08:18.730 --> 08:25.570
Unity creará una escena anónima, ejecutará la prueba en aislamiento, y luego destruirá la escena.

08:25.570 --> 08:29.620
Mientras todo esto sucede bastante rápido, usted notará que sucede aquí como yo.

08:29.620 --> 08:35.890
Además como pulso ejecutar todo en lugar de ejecutar todas las pruebas en un milisegundo, por ejemplo, como la edición

08:35.890 --> 08:39.490
puede hacer aquí, tarda varios milisegundos en ejecutarse.

08:39.490 --> 08:46.090
Aquí tenemos la oportunidad de ver una prueba ejecutándose, viendo la ventana del ejecutor de pruebas y viendo lo básico.

08:46.120 --> 08:48.970
A continuación, echemos un vistazo a cómo crearíamos nuestras propias pruebas.
