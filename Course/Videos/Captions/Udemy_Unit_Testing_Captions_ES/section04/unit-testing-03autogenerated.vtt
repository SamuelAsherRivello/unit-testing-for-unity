WEBVTT

00:00.020 --> 00:03.440
Creando pruebas unitarias, clase de prueba y métodos de prueba.

00:03.440 --> 00:07.100
Aquí está el código para una clase de prueba que contiene un método de prueba.

00:07.100 --> 00:12.370
Dentro seguimos el paradigma opcional de arrange, act y assert.

00:12.380 --> 00:14.870
Esa es la convención que uso para todas mis pruebas.

00:14.870 --> 00:18.980
Así que hemos visto cómo es una prueba y cómo ejecutar una prueba existente.

00:19.010 --> 00:20.620
Ahora vamos a crear nuestro propio test.

00:20.630 --> 00:22.550
Abriremos un proyecto vacío.

00:22.580 --> 00:29.690
Abrimos la ventana de test Runner, creamos una carpeta de test, una clase de test, y un método dentro de ese test.

00:29.720 --> 00:31.610
Luego ejecutaremos el test y veremos el resultado.

00:31.610 --> 00:33.920
Aquí estamos en un proyecto bastante vacío.

00:33.920 --> 00:37.310
Ya tengo añadido el framework de pruebas de unity.

00:37.310 --> 00:39.470
Vamos a abrir la ventana del test runner.

00:39.470 --> 00:46.370
Dado que el proyecto no tiene pruebas en modo edición ni pruebas en modo reproducción, cada una de esas pestañas ofrece algunas opciones

00:46.370 --> 00:47.540
para empezar.

00:47.540 --> 00:53.480
En primer lugar, vamos a crear una carpeta de montaje de prueba de modo de edición haciendo clic en el botón que crea una nueva carpeta

00:53.480 --> 00:59.930
en nuestra ventana de proyecto, incluyendo una configuración de ensamblado para probar ensamblados unitarios y la definición del ensamblado

00:59.930 --> 01:07.220
está fuera del alcance de este curso, pero en resumen, esto indica a la unidad que las cosas dentro de este

01:07.220 --> 01:11.630
carpeta dada deben ser compiladas, deben ser compiladas de una manera única.

01:11.630 --> 01:16.310
Así que ahora que tenemos esa carpeta de ensamblado de prueba configurada, podemos crear nuestra primera clase de prueba.

01:16.310 --> 01:21.290
Cada uno de estos pasos se puede hacer manualmente sin utilizar la ventana, pero voy a continuar haciendo clic en el botón

01:21.290 --> 01:26.390
siguiente botón aquí para crear un script de prueba en la carpeta actual en la ventana del proyecto, que crea

01:26.420 --> 01:29.460
una nueva clase de prueba, y nos da dos métodos de prueba.

01:29.480 --> 01:32.350
Fíjate que en la ventana del test runner aparece todo.

01:32.360 --> 01:33.770
Voy a ejecutar todas esas pruebas.

01:33.770 --> 01:35.040
Todas las pruebas pasan.

01:35.060 --> 01:37.160
Echemos un vistazo al código generado.

01:37.160 --> 01:41.990
En este punto, usted es libre de cambiar el nombre de la clase y estos métodos como mejor le parezca.

01:41.990 --> 01:45.530
Y luego, por supuesto, copiar y pegar para añadir más métodos dentro.

01:45.530 --> 01:50.840
No hay límite en el número de métodos de prueba que puede tener en una clase de prueba, pero por lo general se utiliza

01:50.840 --> 01:57.890
la clase para organizar ciertos temas, tal vez una clase de prueba para cada clase de producción, y luego una

01:57.890 --> 02:00.440
método de prueba para cada método.

02:00.440 --> 02:03.290
En producción, quieres probar algo así.

02:03.290 --> 02:07.010
Estos comentarios son generados automáticamente por unity y son bastante útiles.

02:07.520 --> 02:10.310
Voy a repasar lo más destacado aquí usando el test.

02:10.640 --> 02:15.740
Usando el atributo test nos prepara para una prueba normal en modo edición.

02:15.740 --> 02:22.100
Usar el atributo unity test nos permite ejecutar una prueba sobre múltiples fotogramas.

02:22.100 --> 02:26.630
Ahora, he mencionado antes que el uso de unity test es más adecuado para el modo de juego.

02:26.660 --> 02:31.160
Tienes muchas más opciones en cuanto al tipo de funcionalidad asíncrona que puedes hacer allí.

02:31.160 --> 02:38.060
Efectivamente es posible aquí, y como sugiere el comentario, puedes usar yield return null para saltarte un frame.

02:38.060 --> 02:42.920
Por ejemplo, hacer la configuración, luego esperar un fotograma y hacer la prueba.

02:42.920 --> 02:43.910
Algo parecido.

02:43.910 --> 02:46.220
Por ejemplo haciendo el código de configuración.

02:46.220 --> 02:47.660
Esperando un fotograma.

02:48.220 --> 02:52.240
Y luego haciendo la aserción, algo así aquí, de vuelta a unity.

02:52.240 --> 02:54.580
Voy a pasar a la.

02:55.200 --> 02:57.720
Play mode y seguiré los mismos pasos.

02:57.720 --> 03:03.870
En primer lugar, vamos a crear una carpeta de montaje de prueba de modo de juego, y luego voy a crear un script de prueba.

03:03.870 --> 03:04.710
En esta carpeta.

03:04.710 --> 03:09.840
Podemos ver en el test runner que tenemos una clase de prueba que contiene dos métodos de prueba.

03:10.350 --> 03:13.250
Voy a ejecutar todo y vemos que todo pasa.

03:13.260 --> 03:15.230
Echemos un vistazo al código generado.

03:15.240 --> 03:21.870
El código generado aquí es realmente idéntico tanto en modo reproducción como en modo edición.

03:21.900 --> 03:24.120
Los puntos de partida son muy similares.

03:24.120 --> 03:25.050
Ya está.

03:26.390 --> 03:31.910
Estamos empezando a ver que con la ventana del corredor de pruebas y sólo un poco de Do sostenido añadido, nosotros

03:31.910 --> 03:35.110
podemos hacer más cosas con nuestros proyectos unity que antes.

03:35.120 --> 03:40.490
Si eres nuevo en las pruebas unitarias, estarás familiarizado con el uso de unity para crear código en tiempo de ejecución.

03:40.490 --> 03:42.740
Pero probar código es algo diferente.

03:43.300 --> 03:46.660
Nunca es experimentado directamente por los usuarios finales.

03:47.110 --> 03:52.200
Este código sólo se ejecuta en modo de prueba y ni siquiera está empaquetado en tu compilación final.

03:52.210 --> 03:58.790
Empezamos a ver las pruebas ahora como una pequeña ventana a momentos en el tiempo en una aplicación más grande.

03:58.810 --> 04:02.930
Pruebas con un enfoque estrecho para asegurar que obtenemos resultados consistentes.

04:02.950 --> 04:08.200
Hasta ahora, hemos estado hablando sobre todo de añadir nuevas pruebas al código existente.

04:08.230 --> 04:13.300
A continuación, veremos cómo añadir pruebas mientras estamos desarrollando código con el desarrollo dirigido por pruebas.

04:13.330 --> 04:14.110
Gracias.
