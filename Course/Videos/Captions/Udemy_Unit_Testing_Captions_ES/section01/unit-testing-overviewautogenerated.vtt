WEBVTT

00:00.080 --> 00:02.870
Hola y bienvenidos a Unit Testing for unity.

00:02.900 --> 00:04.940
Mi nombre es Samuel Asher Rivello.

00:04.970 --> 00:10.130
Soy un desarrollador de unity e instructor con más de 20 años de experiencia en el desarrollo de juegos.

00:10.130 --> 00:15.720
Mi misión es educar y entretener con tecnología interactiva, incluyendo unity.

00:15.740 --> 00:22.610
He distribuido títulos unity para PC, consolas Xbox y más, y estoy disponible para contratos remotos.

00:22.640 --> 00:29.390
como desarrollador de juegos Unity, instructor de juegos Unity y evangelista de productos.

00:29.420 --> 00:35.660
Mi experiencia profesional incluye ser desarrollador de juegos, director de desarrolladores de juegos, y hacer educación

00:35.660 --> 00:37.120
en el ámbito del desarrollo de juegos.

00:37.130 --> 00:44.450
Mi experiencia docente incluye universidades, aulas, en línea, creación de vídeos de YouTube y haciendo

00:44.450 --> 00:49.910
vídeos y análisis de la experiencia del usuario por primera vez para clientes.

00:49.940 --> 00:52.790
Nuestro tema aquí es Unit Testing para unity.

00:52.820 --> 00:58.580
Unity es un motor de juegos versátil que puede ser utilizado para todo tipo de industrias, incluyendo, por supuesto,

00:58.580 --> 01:06.380
desarrollo de juegos y pruebas unitarias es un subtema que le permite diseñar y probar sus clases y

01:06.380 --> 01:10.040
arquitecturas para que sean más robustas y mantenibles.

01:10.040 --> 01:15.530
La conclusión es que después de este curso, pensarás en la creación de tus clases de una manera nueva,

01:15.530 --> 01:21.050
y también pensarás en la vida y el mantenimiento de tu proyecto, con más confianza.

01:21.050 --> 01:27.800
permitiéndote hacer refactorizaciones y análisis de tus proyectos y escalarlos más fácilmente que nunca.

01:27.830 --> 01:33.110
El curso está dividido informalmente en varias pistas de aprendizaje diferentes en cada momento.

01:33.110 --> 01:40.040
Nos centraremos un poco más en la teoría y los fundamentos detrás de lo que es la técnica o el tema en

01:40.070 --> 01:40.610
mano.

01:40.640 --> 01:42.860
También echaremos un vistazo al editor.

01:42.860 --> 01:47.630
Características únicas que podemos hacer dentro de unity para potenciarnos como desarrolladores de juegos.

01:47.630 --> 01:53.600
Aquí vamos a hablar de las pruebas unitarias y el uso de la ventana Test Runner coninside el editor de la unidad.

01:53.600 --> 01:56.390
Y luego, por supuesto, vamos a sumergirnos en el código.

01:56.390 --> 02:02.090
Vamos a suponer que el código de producción que estamos escribiendo, aunque bastante simple, está a nuestro alcance

02:02.120 --> 02:03.230
de los estudiantes aquí.

02:03.230 --> 02:08.960
Y nos centraremos más en nuevo código de pruebas que acompañe a nuestro código de producción.

02:08.960 --> 02:15.680
Este código de pruebas realizará pruebas automáticas en ese código para darnos más confianza y seguridad en el código

02:15.680 --> 02:20.930
sobre el estado actual de nuestro proyecto, particularmente cuando estamos diseñando así como haciendo refactorizaciones y

02:20.930 --> 02:21.650
mantenimiento.

02:21.650 --> 02:23.510
Echemos un vistazo a los prerrequisitos del curso.

02:23.510 --> 02:25.490
En primer lugar, va a haber algo de software involucrado.

02:25.490 --> 02:30.650
Todo es gratis, desde la unidad hasta el editor de código, pasando por abrir un navegador web para investigar un poco más...

02:30.680 --> 02:31.880
sobre la marcha.

02:31.880 --> 02:33.040
Eso es fácil.

02:33.050 --> 02:36.410
Incluyo instrucciones en este curso para instalar esas cosas que necesitas.

02:36.410 --> 02:39.470
Y para empezar, hablemos de los requisitos previos de conocimiento.

02:39.470 --> 02:43.490
Es importante tener en cuenta que este curso no es para principiantes.

02:43.490 --> 02:48.230
Vamos a hacer algunas suposiciones sobre diseños de clases de programación orientada a objetos.

02:48.230 --> 02:54.320
E incluso hablaremos un poco sobre interfaces con las que algunos desarrolladores principiantes no están familiarizados aquí y

02:54.320 --> 02:55.190
a lo largo del curso.

02:55.190 --> 02:59.570
Si hay algo que usted no entiende que no es parte de nuestro plan de estudios del curso, recomiendo

02:59.570 --> 03:04.760
hacer una pausa en el video e ir a comprobarlo, tal vez 5 o 10 minutos de lectura y luego volver a entrar en

03:04.760 --> 03:05.180
el curso.

03:05.180 --> 03:11.720
Con ese conocimiento, realmente nos estamos centrando en la adición de pruebas unitarias como una nueva capa en la parte superior de nuestra producción

03:11.720 --> 03:12.230
de producción.

03:12.230 --> 03:16.670
No voy a profundizar demasiado en hablar de código de producción en sí, y en el curso vamos a ir a través de

03:16.670 --> 03:23.270
algunos ejemplos sencillos, desde algo así como una calculadora a un simple movimiento de caracteres y un

03:23.270 --> 03:26.480
un poco de cosas sobre la carga de algunos datos de un servidor externo.

03:26.480 --> 03:28.730
Echemos un vistazo juntos a los contenidos del curso.

03:28.730 --> 03:29.960
Voy a seguir leyendo.

03:30.130 --> 03:32.690
Estamos cubriendo la introducción del curso.

03:32.720 --> 03:35.960
Hay toda una sección dando un repaso sobre la unidad.

03:35.960 --> 03:41.570
En esa sección veremos una visión general de unity sobre por qué unity es un motor de juegos popular.

03:41.570 --> 03:45.320
Mientras que la industria del juego es grande e interesante para trabajar.

03:45.320 --> 03:51.200
Y luego vamos a ver algunas cosas acerca de la estructura de la unidad objetos del juego, proyectos, escenas, cosas

03:51.200 --> 03:51.890
como eso.

03:51.890 --> 03:56.690
Para muchos de nosotros, que será la revisión, pero yo recomiendo comprobar que fuera porque algunas de las cosas que

03:56.690 --> 04:01.040
se repetirán más adelante en el curso, y es bueno tener esa conexión fresca.

04:01.550 --> 04:06.800
Luego haremos un poco de diseño de software, hablando de algunos principios de diseño y un poco de...

04:06.800 --> 04:14.300
sobre patrones de diseño, sólo para que entendamos la ciencia y el arte detrás de cómo diseñar un buen rendimiento

04:14.300 --> 04:20.150
código, de modo que una vez que comenzamos la unidad de pruebas en que, vamos a estar hablando un poco acerca de esas eficiencias

04:20.150 --> 04:24.740
y los principios de diseño en la unidad de pruebas fundamentales.

04:24.740 --> 04:27.320
Repasaremos qué es una prueba unitaria.

04:27.350 --> 04:28.820
Por qué quieres hacerlo.

04:28.850 --> 04:30.770
Como hacerlo dentro de unity.

04:30.770 --> 04:37.070
Y eso va a ser un proceso paso a paso para mirar realmente de un proyecto que no tiene pruebas de unidad de la unidad

04:37.070 --> 04:39.140
a la adición de nuestras primeras pruebas de unidad.

04:39.140 --> 04:43.640
Ese es un buen lugar para realmente resolver esos problemas básicos.

04:43.670 --> 04:49.160
A continuación, vamos a pasar a hacer una serie de talleres en los talleres, cada uno de ellos va a ser un poco

04:49.160 --> 04:50.420
más libre.

04:50.540 --> 04:56.720
Sólo voy a compartir mi pantalla y pasar por el núcleo del proyecto de muestra que se incluye para usted.

04:56.720 --> 04:59.560
Y en cada uno de ellos sólo voy a

04:59.750 --> 05:03.890
como una especie de flujo de conciencia explicando la motivación que hay detrás.

05:03.920 --> 05:06.620
Haremos un poco de codificación sobre la marcha en algunos de ellos.

05:06.620 --> 05:08.990
Algunos de los talleres tendrán más código.

05:09.020 --> 05:14.420
En otros, revisaré el código existente, pero en todos ellos, es realmente otra oportunidad...

05:14.420 --> 05:19.700
de añadir una capa más de comodidad y familiaridad con los conceptos.

05:20.060 --> 05:24.800
Durante los talleres, recomiendo abrir el proyecto de ejemplo y seguir adelante y aquí y allá

05:24.800 --> 05:28.910
a través del curso, voy a mencionar que habrá una oportunidad para que algunos temas avanzados.
