WEBVTT

00:00.410 --> 00:03.080
Hola y bienvenidos a Inteligencia Artificial.

00:03.080 --> 00:07.700
Aquí estamos usando inteligencia artificial para ayudarnos a crear código de pruebas unitarias.

00:07.700 --> 00:12.530
Ahora, la incorporación de la IA en el desarrollo de juegos puede agilizar el desarrollo y las pruebas.

00:12.530 --> 00:17.480
Aquí se incluyen algunos de los beneficios, y vamos a centrarnos en las pruebas automatizadas.

00:17.780 --> 00:23.060
La IA puede identificar y corregir rápidamente sus errores, y puede reducir el tiempo de creación de pruebas.

00:23.060 --> 00:28.580
Ahora, el enfoque tradicional sin IA sería crear tu código de producción.

00:28.580 --> 00:34.040
Y luego, si vas a adoptar las pruebas unitarias, crear manualmente esas pruebas sobre la marcha.

00:34.070 --> 00:40.430
Hemos visto en el vídeo anterior cómo la IA puede ayudarnos a crear nuestro código de producción para una parte o la totalidad de un

00:40.430 --> 00:41.060
sistema de juego.

00:41.060 --> 00:47.000
Ahora echemos un vistazo a cómo la IA puede ayudarnos a automatizar el proceso de creación de nuestras pruebas unitarias.

00:47.000 --> 00:52.160
Tenemos un chat GPT chat existente, abierto con la forma en que creamos el código de producción.

00:52.160 --> 00:58.070
Ahora es muy importante que continúe dentro de este mismo chat cuando empiece a hacer las siguientes preguntas

00:58.070 --> 00:59.450
sobre pruebas unitarias.

01:00.370 --> 01:06.670
Si, por ejemplo, quisiera crear un nuevo chat aquí, tendría que volver a introducir el contexto,

01:06.670 --> 01:12.190
tal vez diciendo, hey, me puede crear pruebas unitarias para esta clase y luego pegar en la clase o

01:12.190 --> 01:13.440
clases que están relacionadas?

01:13.450 --> 01:16.030
Pero como ya tenemos contexto aquí, usaré esto.

01:16.030 --> 01:23.680
Así que de la sección anterior, la I nos creó un ejemplo aquí de la utilización de una clase de gestor de producto, añadiendo

01:23.680 --> 01:24.820
algunos productos.

01:24.820 --> 01:31.390
Podrías imaginar que esto es un producto que se vende en una tienda del juego, o un personaje NPC que tiene una tienda

01:31.390 --> 01:35.590
que tal vez te da artículos o los pone en tu inventario, algo así.

01:35.590 --> 01:40.870
Y encima de eso, en el mismo chat tenemos el nos creo el propio gestor de productos.

01:40.870 --> 01:44.490
Así que el jefe de producto ha creado un yo y encima el ejemplo.

01:44.500 --> 01:46.680
Ahora vamos a pedirle que nos de algunas pruebas.

01:46.690 --> 01:51.880
Lo que voy a hacer es pegar una prueba de modo de edición que ya tengo para que conozca el espacio de nombres

01:51.880 --> 01:56.200
y la nomenclatura que me gusta, y luego pedirle que llenar eso con las pruebas pertinentes.

01:56.200 --> 01:57.700
Veamos cómo va aquí.

01:57.700 --> 02:02.080
Dentro de unity tengo un test I y un test playmode.

02:02.110 --> 02:04.660
Vamos a hacer la prueba de modo de edición aquí.

02:04.660 --> 02:05.740
Aquí está.

02:05.740 --> 02:09.610
Aquí podemos ver que tiene una prueba llamada mi prueba.

02:09.640 --> 02:11.620
Abrimos el código fuente y lo vemos aquí.

02:11.620 --> 02:13.480
Tiene el espacio de nombres que me gusta.

02:13.480 --> 02:16.090
Tiene usings supongo que la categoría.

02:16.090 --> 02:21.640
Así que en lugar de pedirle a ChatGPT que nos cree algo desde cero, voy a darle esto

02:21.640 --> 02:22.180
aquí.

02:24.160 --> 02:26.620
Creo que me voy a deshacer de la nomenclatura aquí.

02:27.370 --> 02:29.290
Para no sugerir esa parte.

02:29.320 --> 02:32.710
Así que de vuelta aquí en ChatGPT, voy a decir genial.

02:32.740 --> 02:40.150
Ahora quiero pruebas unitarias sobre la clase Product Manager.

02:40.600 --> 02:49.540
Crear una nueva respuesta con una clase de prueba con uno o más métodos de prueba.

02:52.090 --> 02:54.490
Empieza con este código.

02:55.490 --> 02:57.050
Echemos un vistazo a la respuesta.

02:57.050 --> 03:02.630
Para crear pruebas unitarias para la clase Product Manager, puede utilizar cualquier unidad de un marco de pruebas populares

03:02.630 --> 03:02.780
para.

03:02.990 --> 03:03.500
Net.

03:03.530 --> 03:05.930
A continuación se muestra un ejemplo de la clase de prueba.

03:07.070 --> 03:13.730
Podemos ver que utiliza el espacio de nombres, los comentarios, el nombre de la prueba de categoría, todas las cosas que le di

03:13.730 --> 03:14.060
lo.

03:14.090 --> 03:16.850
Luego hace el resto por sí mismo.

03:16.880 --> 03:19.880
Ahora una cosa que noto es que está creando uno.

03:20.900 --> 03:26.270
Se está creando una variable aquí que va a rellenar en la configuración y tal vez desmontar más tarde.

03:26.270 --> 03:27.800
En realidad, no hace el desmontaje.

03:28.100 --> 03:33.470
Entonces aquí lo que hace en cada una de las pruebas es que utiliza el arreglo, actuar y afirmar, lo que sucede

03:33.470 --> 03:35.090
para que coincida con mi preferencia particular.

03:35.090 --> 03:41.390
Así que me gusta que se acaba de adivinar que sobre la base de la popularidad como una solución general allí, si de alguna manera

03:41.390 --> 03:45.140
Yo tenía una manera diferente que yo quería ir sobre esto, yo podría instruir a que.

03:45.140 --> 03:46.550
Pero por ahora me gusta.

03:46.550 --> 03:52.970
Así que configura el producto de prueba, agrega el producto, y luego se asegura de que el producto devuelve

03:52.970 --> 03:54.410
ese producto en particular.

03:54.410 --> 03:55.760
Así que se ve bien.

03:55.760 --> 03:57.740
Luego prueba cómo eliminar un producto.

03:57.740 --> 04:01.100
Entonces va a crear un producto y añadirlo.

04:01.100 --> 04:06.170
Luego a eliminarlo, luego a asegurarte de que realmente funcionó allí.

04:06.170 --> 04:11.540
Y que no tiene ese producto así.

04:11.570 --> 04:13.790
Obtener productos, devuelve todos los productos.

04:13.790 --> 04:16.130
Así que hace dos y sabe dos.

04:16.130 --> 04:21.230
Ahora, este sería un gran paso para mí para pegar esto en la unidad y asegurarse de que funciona.

04:21.230 --> 04:22.280
Voy a hacerlo.

04:22.280 --> 04:27.800
Y luego voy a volver y pensar, ¿hay otra prueba que podría añadir, o hay alguna refactorización

04:27.800 --> 04:30.500
al código que podríamos hacer sólo para jugar con él un poco más?

04:30.500 --> 04:31.820
Pero me gusta a dónde va esto.

04:31.820 --> 04:33.200
Así que vamos a pegar esto en la unidad.

04:33.230 --> 04:37.820
Guárdalo dentro de unity parece que compila y dentro de unity parece que se está ejecutando.

04:37.820 --> 04:38.990
Vamos a ejecutar la prueba.

04:40.910 --> 04:42.200
Todas las pruebas pasan.

04:42.230 --> 04:43.010
Ahora.

04:43.730 --> 04:45.590
Los nombres de las pruebas que nos ha dado.

04:45.590 --> 04:45.890
Estupendo.

04:45.890 --> 04:51.110
No coincide con mi estilo particular y puedo decidir en este momento, adoptar lo que me da

04:51.110 --> 04:52.730
o sugerir una diferencia.

04:52.730 --> 04:58.040
Así que sólo para jugar con la idea aquí, voy a sugerir que el uso de un esquema de nomenclatura ligeramente diferente.

04:58.040 --> 05:01.610
Pero me encanta la prueba que me dio y me encanta que todos pasan.

05:01.610 --> 05:03.530
Así que vamos muy bien hasta ahora.

05:03.530 --> 05:08.390
Volvamos atrás y juguemos con la idea de dar alguna pequeña sugerencia y veámoslo iterar una vez más

05:08.390 --> 05:08.780
tiempo.

05:08.780 --> 05:11.900
Así que vamos a decirle lo que funciona bien.

05:11.900 --> 05:16.960
Eso funciona y compila y todas las pruebas pasan.

05:16.970 --> 05:25.790
Sin embargo, no me gusta la nomenclatura del método de prueba, así que por favor cambia el formato de add product.

05:25.790 --> 05:28.880
Añadir productos a la lista a un nuevo formato como Añadir producto.

05:28.910 --> 05:32.510
Obtener productos contiene producto cuando producto añadido.

05:33.080 --> 05:38.930
Generalmente me gusta seguir algo como el método bajo prueba el resultado esperado, y luego cuando

05:38.930 --> 05:43.970
sucede esto en particular, a veces la nomenclatura se alarga un poco como se muestra aquí.

05:43.970 --> 05:45.650
A veces no es lo más claro.

05:45.650 --> 05:47.240
Realmente depende del contexto.

05:47.240 --> 05:52.100
Pero además, lo que estoy mostrando aquí es que me gusta la mayor parte de lo que ChatGPT me dio.

05:52.100 --> 05:53.990
Pero quiero sugerir un cambio.

05:53.990 --> 05:57.200
Así que vamos a jugar con esto como el cambio y ver qué resultado obtenemos.

05:57.230 --> 05:58.520
Veamos el resultado.

05:58.520 --> 06:01.040
Dice que ciertamente el renombrado se ve bien.

06:01.070 --> 06:06.110
Menciona que está infiriendo método, nombre, condición, resultado esperado.

06:06.230 --> 06:09.530
En realidad creo que el resultado esperado es la condición.

06:09.530 --> 06:11.660
Pero echemos un vistazo a los resultados aquí.

06:11.660 --> 06:14.270
De nuevo admito que esto es bastante largo.

06:14.270 --> 06:18.170
Pero add product get products contiene el producto.

06:18.170 --> 06:20.480
Cuando el producto es añadido, genial.

06:20.510 --> 06:21.710
Aquí hay uno aún más largo.

06:21.710 --> 06:23.240
Obtener el producto no.

06:23.270 --> 06:28.100
Ahora usted podría argumentar que este no es el mejor esquema de nomenclatura, que como estoy viendo este nombre largo aquí,

06:28.100 --> 06:32.690
Estoy pensando, hey, tal vez no es una buena, pero lo que hemos visto es que somos capaces de recuperarse

06:32.690 --> 06:37.790
y adelante y dar un poco de una sugerencia y ver que ChatGPT funciona bien.

06:37.790 --> 06:41.300
Así que vamos a copiar esto en la unidad y ver cómo funciona.

06:41.300 --> 06:42.110
Así que aquí estamos.

06:42.110 --> 06:42.800
Está en unity.

06:42.800 --> 06:43.520
Está compilado.

06:43.520 --> 06:44.810
Y vamos a ejecutar las pruebas.

06:47.350 --> 06:48.850
Y todo se ve bien aquí.

06:48.850 --> 06:54.490
Así que hemos visto un fantástico caso de uso de la inteligencia artificial, no sólo para hacer que el código de producción como

06:54.490 --> 06:59.200
que hicimos en la lección anterior, sino también para crear nuevas pruebas unitarias sobre ese código de producción.

06:59.200 --> 07:05.440
Aquí, al menos en nuestra sencilla demo, hemos visto que unity ha compilado el código cada vez sin problemas,

07:05.440 --> 07:07.350
y todas nuestras pruebas pasaron.

07:07.360 --> 07:11.110
Si encontraras que el código no compila, podrías decírselo a ChatGPT.

07:11.410 --> 07:16.720
Hey, eso estuvo bastante bien, pero tengo este error y estarías ayudando a educarlo y te daría

07:16.720 --> 07:17.590
una respuesta mejor.

07:17.590 --> 07:19.000
No necesitamos hacer eso aquí.

07:19.000 --> 07:24.460
Además, si algunas o todas las pruebas fallaron, podrías decirle a la unidad que generalmente no veo que el

07:24.460 --> 07:26.350
pruebas fallen, pero es posible.

07:26.350 --> 07:27.490
Así que eso es todo aquí.

07:27.490 --> 07:31.000
Hemos visto un caso de uso fantástico para la IA en las pruebas unitarias.

07:31.030 --> 07:31.750
Gracias.
