WEBVTT

00:00.380 --> 00:02.620
Funciones puras y visión general.

00:02.630 --> 00:06.290
Qué es una función pura, también conocida como método puro.

00:06.290 --> 00:10.250
¿Y por qué es relevante en el proceso de pruebas unitarias?

00:10.280 --> 00:18.320
Se puede pensar en una función pura como aquella que tiene menos efectos y dependencias de otros sistemas no relacionados.

00:18.440 --> 00:24.020
Por no relacionados, me refiero a no directamente relacionados con el código en el cuerpo de la propia función.

00:24.440 --> 00:31.580
Una forma en que podemos verlo aquí como estoy leyendo la pantalla, que los valores de retorno son idénticos para idénticos

00:31.580 --> 00:37.850
argumentos, lo que significa que si usted pasa en un valor como uno de los argumentos, usted siempre va a obtener el

00:37.850 --> 00:41.650
mismo resultado, y en segundo lugar, que no tiene efectos secundarios.

00:41.660 --> 00:50.030
Los efectos secundarios son salidas indirectas u otros sistemas que se ven afectados durante la ejecución de un determinado

00:50.030 --> 00:50.770
método.

00:50.780 --> 00:57.800
Así que cuanto más pura es una función, más aislada e independiente se ejecuta.

00:57.800 --> 01:03.200
Así que en el código de ejemplo incluido para el proyecto de ejemplo, verás algo similar a esto en la sección

01:03.230 --> 01:04.490
C-sharp código base.

01:04.850 --> 01:07.640
Aquí le he puesto un par de colores para que podamos verlo.

01:07.640 --> 01:15.650
Así que imaginemos que tenemos una clase personalizada aquí que se llama Mi Sistema, y un método dentro de ella se llama

01:15.650 --> 01:16.910
Convertir valor.

01:16.940 --> 01:23.810
Tenga en cuenta que hay dos argumentos que paso y los dos valores, y sólo los dos valores son

01:23.810 --> 01:26.630
las entradas directas que afectan a la operación.

01:26.660 --> 01:34.670
No hay un tercer sistema público estático privado estático no relacionado que vemos en el azul allí.

01:34.670 --> 01:36.140
Es muy simple.

01:36.140 --> 01:38.960
Ahora usted podría tener muchas más líneas de código aquí.

01:38.960 --> 01:41.840
No es sólo que esto sea breve, lo que lo hace puro.

01:41.840 --> 01:48.860
Es que vemos que el resultado depende de los argumentos y sólo de esos argumentos.

01:48.860 --> 01:56.930
Así que es muy puro cuando hablamos de las salidas o los efectos secundarios aquí podemos ver que ningún otro

01:56.930 --> 01:58.610
valores se establecen aquí.

01:58.880 --> 02:02.840
Si establecemos algún valor temporal eso está bien en una función pura.

02:02.840 --> 02:09.620
Pero si fuéramos a establecer valores dentro del azul aquí en sistemas no relacionados o en variables estáticas

02:09.620 --> 02:15.620
que tienen una vida útil más allá de este método, esas serían cosas que lo harían menos puro.

02:15.620 --> 02:20.840
Ahora vamos a ver algunas diapositivas más aquí, conseguir un poco de teoría, así como saltar en

02:20.840 --> 02:21.440
el código.

02:21.440 --> 02:27.470
Así que mientras voy introduciendo y reforzando estos conceptos, todos aprenderemos un poco más de la apreciación

02:27.470 --> 02:29.330
de lo que significa ser una función pura.

02:29.330 --> 02:33.140
Así que aquí vemos una explicación aún más profunda.

02:33.140 --> 02:34.310
La leeré en voz alta.

02:34.400 --> 02:41.450
Una función pura es generalmente más fácil de depurar, mantener y probar por unidad debido a los siguientes factores

02:41.450 --> 02:41.930
uno.

02:41.930 --> 02:43.670
No tiene efectos secundarios.

02:43.670 --> 02:49.010
Eso significa que el comportamiento es predecible y consistente basándose únicamente en esa entrada.

02:49.010 --> 02:52.640
Como vimos en el ejemplo, es determinista.

02:52.640 --> 02:57.140
Eso significa que dada una entrada determinada, siempre producimos la misma salida.

02:57.170 --> 03:00.250
Significa que no hay otros valores que no estén relacionados.

03:00.260 --> 03:02.060
No hay aleatoriedad.

03:02.060 --> 03:07.400
Si pasamos los valores tres y diez, siempre obtendremos el valor 30.

03:07.430 --> 03:13.610
En el ejemplo anterior, una función pura también se ejecuta de forma aislada, por lo que no hay necesidad de establecer y

03:13.610 --> 03:15.620
dependencias externas.

03:15.620 --> 03:19.790
Esto podría ser un montón de ejemplos diferentes, pero algunos aquí son bases de datos.

03:19.790 --> 03:27.080
Sistema de archivos recursos de red, otras clases que se crean utilizados por el sistema también.

03:27.080 --> 03:32.600
Y otra razón por la que es tan fácil de depurar y mantener en las pruebas unitarias es porque simplemente hay más simple

03:32.600 --> 03:33.530
pruebas unitarias.

03:33.530 --> 03:37.610
Usted es capaz de proporcionar las entradas y afirmar las salidas específicas.

03:37.610 --> 03:42.560
Hay menos "boilerplate" de creación de cosas alrededor de la prueba en sí.

03:42.560 --> 03:45.080
Y finalmente es modular y reutilizable.

03:45.080 --> 03:51.950
Así que el código que es una función pura y basado en funciones puras tiende a ser más autónomo, portátil,

03:51.950 --> 03:56.170
y más fácil de reutilizar la misma funcionalidad en diferentes contextos.

03:56.180 --> 04:01.910
Ahora, a medida que avanzamos y hablamos de funciones puras, al igual que el tema del curso en su conjunto,

04:01.910 --> 04:08.690
Yo diría que cuando su código es más fácilmente comprobable, que es bueno para el proceso de prueba, pero más

04:08.690 --> 04:12.890
en gran medida indica que el código está mejor diseñado.

04:12.890 --> 04:20.450
Así que incluso si no vamos a probar nuestro código, si nuestro código no tiene efectos secundarios, es más determinista, es

04:20.450 --> 04:28.010
más aislado y modular y reutilizable, que es beneficioso para el propio código de producción.

04:28.010 --> 04:36.110
Así que vemos un flujo y reflujo entre los beneficios de algo que es unidad comprobable, así como los beneficios

04:36.110 --> 04:37.370
de ser código de producción.

04:37.370 --> 04:41.120
Así que si eso es lo que es una función pura, entonces ¿qué es una función no pura?

04:41.120 --> 04:44.410
Bueno, es simplemente una función que no es tan pura.

04:44.420 --> 04:49.190
Tampoco es 100% pura, 100% no pura.

04:49.190 --> 04:53.780
Cuando hablamos de una función determinada, podemos evaluar su nivel de pureza.

04:53.780 --> 04:55.520
Puede estar en algún punto intermedio.

04:55.520 --> 04:59.660
Algunos de los criterios clave de una función no pura es que tiene.

04:59.820 --> 05:03.450
Entradas indirectas, lo que significa que hay algún tipo de estado compartido.

05:03.570 --> 05:10.740
Tal vez pasamos un valor y opera en ese valor, además de utilizar algunas otras dependencias que es impuro

05:10.740 --> 05:13.140
y también tener salidas indirectas.

05:13.170 --> 05:14.700
Recuerda nuestro sencillo ejemplo.

05:14.700 --> 05:16.200
Pronto veremos otro.

05:16.200 --> 05:18.940
Simplemente multiplicaría dos números y lo devolvería.

05:18.960 --> 05:26.460
No estaba estableciendo ningún valor del sistema no relacionado que se quedara estancado como una especie de sistema compartido.

05:26.460 --> 05:26.820
compartido.

05:27.030 --> 05:33.930
Pero aquí, en el caso de una función no pura, puede tener uno o ambos de la idea de entradas indirectas

05:33.960 --> 05:35.040
salidas indirectas.

05:35.040 --> 05:36.690
He aquí un ejemplo muy sencillo.

05:36.690 --> 05:38.430
Esto también está en el proyecto de ejemplo.

05:38.430 --> 05:41.670
Y este es un ejemplo de un sistema que no es puro.

05:41.760 --> 05:43.800
Así que es un poco diferente.

05:43.830 --> 05:47.460
Estamos haciendo la misma operación de multiplicación aquí.

05:47.460 --> 05:50.490
Pero observe aquí el método de conversión de valor.

05:50.490 --> 05:53.910
No toma todos los argumentos que necesita.

05:53.910 --> 05:59.180
Toma un valor y lo multiplica por algún valor existente en el sistema.

05:59.190 --> 06:03.000
Este es un ejemplo de entrada indirecta.

06:03.030 --> 06:09.210
El multiplicador existe antes de llamar al método convertir valor.

06:09.210 --> 06:13.890
Así que esa es la parte de entrada indirecta de una función impura.

06:13.920 --> 06:18.840
Ahora la otra parte de la que hablamos es tener alguna salida indirecta aquí.

06:18.840 --> 06:20.760
No vemos un ejemplo de eso.

06:20.790 --> 06:24.270
No hay ningún estado que haya cambiado y que persista.

06:24.300 --> 06:26.310
Sólo devolvemos un valor simple.

06:26.310 --> 06:29.100
Y devolver un valor no cuenta en contra.

06:29.100 --> 06:32.640
Así que tenemos entrada indirecta pero no salida indirecta.

06:32.640 --> 06:35.880
Pero aún teniendo uno de esos aquí lo hace impuro.

06:35.880 --> 06:38.610
Entonces que hacemos con estas funciones no puras.

06:38.610 --> 06:44.250
Hemos insinuado que las funciones puras son más fáciles de probar y tienen muchos beneficios en su código de producción

06:44.250 --> 06:45.360
de producción.

06:45.360 --> 06:50.330
Bien, si no tenemos una función pura ¿qué podemos hacer al respecto?

06:50.340 --> 06:56.010
Bueno, algunas de las cosas que podríamos hacer, ciertamente podríamos dejarla sola, dejándola como impura.

06:56.010 --> 06:57.720
Y a menudo vamos a hacer eso.

06:57.720 --> 07:03.570
Pero a veces, cuando estamos echando un vistazo a hacer las pruebas unitarias de algo, podríamos ser alentados

07:03.570 --> 07:07.800
a hacer un poco de refactorización para ayudar a que el sistema sea un poco más puro.

07:07.800 --> 07:13.380
Tal vez no podamos conseguirlo al 100%, pero esto es otra vez hablar del arte.

07:13.410 --> 07:18.150
Depende de ti decidir lo puro y lo impuro que quieres que sea tu código.

07:18.180 --> 07:23.580
Ahora, algunos desarrolladores podrían teóricamente acercarse donde quieren que todo sea puro todos los

07:23.580 --> 07:24.210
tiempo.

07:24.510 --> 07:25.620
Ese es un enfoque.

07:25.650 --> 07:29.250
Otro es simplemente crear código como solías crearlo.

07:29.250 --> 07:32.550
Y si resulta ser impuro, dejarlo impuro.

07:32.550 --> 07:38.010
Lo que quiero invitarte a hacer es masajear un poco las ideas, y sentirte cómodo para jugar con

07:38.010 --> 07:42.810
en algún punto intermedio donde puedas tomar algo no puro y hacerlo un poco más puro.

07:42.810 --> 07:47.580
Reconociendo los beneficios de tus pruebas unitarias así como los beneficios de tu código de producción.

07:47.580 --> 07:49.290
Así que vamos a ver lo que podemos hacer aquí.

07:49.290 --> 07:51.990
Podríamos eliminar algunos de los efectos secundarios.

07:52.110 --> 07:56.700
Podríamos eliminar el estado compartido similar a los efectos secundarios.

07:56.730 --> 07:59.580
Podríamos eliminar las dependencias que se utilizan.

07:59.730 --> 08:04.350
Y podemos invitarnos a tener una aserción por prueba.

08:04.380 --> 08:12.270
Ahora eso nos va a ayudar a entender que si una prueba afirma sólo una cosa, entonces nuestro código tiene que

08:12.270 --> 08:15.270
ser bastante simple con el fin de cumplir con esa afirmación.

08:15.360 --> 08:17.640
Así que jugaremos un poco con eso cuando veamos el código.

08:17.640 --> 08:19.050
¿Cómo podemos hacerlo?

08:19.050 --> 08:23.700
Bueno, podemos hacer algo de la refactorización del código de producción, haciendo los pasos que vimos en el

08:23.700 --> 08:24.630
diapositiva anterior.

08:24.630 --> 08:29.730
Y otra es que quiero introducir un nuevo concepto de dobles de prueba en la siguiente sección.

08:29.760 --> 08:30.570
Gracias.
