WEBVTT

00:00.050 --> 00:03.650
Hola y bienvenidos a este taller de Unity Unit testing.

00:03.650 --> 00:07.190
Vamos a ver mi cargador de datos Basic como ejemplo.

00:07.190 --> 00:07.820
Vamos a profundizar.

00:07.820 --> 00:10.670
Así que aquí en esta demo voy a abrir unity.

00:10.670 --> 00:16.040
Abre nuestro proyecto de ejemplo y echa un vistazo a la escena de mi cargador de datos básico.

00:16.040 --> 00:21.890
Ahora la razón por la que he elegido para hacer algún tipo de carga de datos es sólo para hablar de, bueno, lo que

00:21.890 --> 00:30.290
si nuestras pruebas unitarias, que esperamos que sean muy fiables y aislados y se ejecutan rápidamente por el bien de nuestra

00:30.290 --> 00:32.390
propias metodologías de prueba?

00:32.390 --> 00:38.150
¿Y si dependen de otros sistemas, cómo sabemos que podemos probar sólo una parte?

00:38.180 --> 00:46.130
En general, las pruebas unitarias son pruebas de una sola unidad, que se podría pensar como un método de una clase.

00:46.130 --> 00:52.130
Pero a menudo nuestro código es de múltiples clases que dependen juntos, y que puede ser un reto para decidir

00:52.130 --> 00:55.460
cómo separarlas y probarlas de forma aislada.

00:55.460 --> 01:01.640
Además, podrías tener un sistema que dependa de algo asíncrono, como el renderizado de gráficos, renderizado

01:01.640 --> 01:05.150
audio, o en este caso, llamar a un servidor back-end.

01:05.150 --> 01:12.770
Así que he creado un ejemplo muy simple aquí que carga los datos que se pasan en una URL, sólo llama a alguna página web

01:12.770 --> 01:15.020
y obtiene el texto de esa página web.

01:15.050 --> 01:21.800
Así que este es el ejemplo más simple, pero se podría imaginar que se trata de cualquier lógica de servidor llamando a enviar

01:21.800 --> 01:26.930
una alta puntuación de su juego, llamando a cargar los datos del jugador, algo relacionado con multijugador.

01:26.930 --> 01:31.690
Quizás todo eso podría depender de algún tráfico de red asíncrono.

01:31.700 --> 01:32.720
Echemos un vistazo.

01:32.810 --> 01:34.640
Así que aquí estamos en la muestra.

01:34.640 --> 01:36.650
Tenemos mi cargador de datos básico.

01:36.650 --> 01:37.310
Lo cargamos.

01:37.310 --> 01:38.330
Vamos a darle al play.

01:41.030 --> 01:42.380
En esta demo en particular.

01:42.410 --> 01:46.940
No hay demasiadas cosas interesantes en esta demo en particular.

01:46.970 --> 01:49.340
No hay nada demasiado interesante en la jugabilidad.

01:49.610 --> 01:53.330
Iremos a la consola aquí y veremos que esta escena no tiene UI.

01:53.360 --> 01:59.660
Veamos la consola de unity, y entonces solo esta mostrando la longitud de lo que es devuelto desde el servidor.

01:59.660 --> 02:03.590
Cualquier cosa que no sea cero significa hey, cargó una página.

02:03.590 --> 02:05.030
Así que muy ligero.

02:05.030 --> 02:06.080
Prueba simple.

02:06.080 --> 02:09.550
No tengo comprobación de errores o este tipo de cosas incorporadas.

02:09.560 --> 02:14.030
Sólo asume el éxito por el bien de la simplicidad de esta demo.

02:14.060 --> 02:18.170
Si estás haciendo código de producción y estás llamando a servidores, querrás añadir mucha más funcionalidad

02:18.170 --> 02:18.800
a la misma.

02:18.800 --> 02:23.160
Así que esa es la experiencia en tiempo de ejecución, que es bastante simple y no tan interesante.

02:23.180 --> 02:28.940
Ahora, si nos fijamos en el ejecutor de pruebas aquí, podemos establecer nuestra categoría para ser mi cargador de datos básico.

02:28.940 --> 02:32.720
Así que sólo nos muestra las pruebas relacionadas con este código en particular.

02:32.720 --> 02:34.520
Y luego le damos al modo de edición.

02:34.520 --> 02:38.600
Aquí de nuevo tenemos el modo de reproducción, pero puedes explorarlo por tu cuenta.

02:38.600 --> 02:42.620
Creo que para esta demo en particular el modo edición es más interesante.

02:42.620 --> 02:45.050
Así que voy a darle a ejecutar todo.

02:46.660 --> 02:48.740
Y podemos ver que tenemos éxito.

02:48.760 --> 02:54.910
Esto dice que load async result contiene doctype cuando se carga.

02:54.910 --> 02:56.890
Veamos un poco de esto.

02:57.010 --> 02:59.200
Iremos aquí y abriremos nuestra fuente.

03:00.590 --> 03:02.210
Y aquí está la prueba.

03:02.300 --> 03:08.000
Se muestra que en primer lugar crear una instancia de nuestro cargador de datos básicos.

03:08.300 --> 03:12.050
Luego escuchamos cuando se carga.

03:13.000 --> 03:16.260
Comprobaremos los datos cargados desde el servidor.

03:16.270 --> 03:21.190
Una vez más, esto es sólo llamar a una página web, y cualquiera que sea el código fuente de la página web se devuelve como un

03:21.190 --> 03:22.420
una gran mancha de texto.

03:22.420 --> 03:24.760
Así que va a parecer algo de HTML.

03:24.760 --> 03:30.310
Y mientras lo miraba mientras creaba esto, me di cuenta de que decía doctype como parte de él.

03:30.310 --> 03:35.920
Así Doctype no es algo super importante, ciertamente no en el mundo de la unidad, pero yo sólo pensaba

03:35.920 --> 03:40.030
que era una pequeña prueba que me dice si he recibido algo de una página web.

03:40.030 --> 03:43.460
Puedes imaginarte probando cualquier otra subcadena que tenga sentido para ti.

03:43.480 --> 03:50.410
Finalmente, realizo la acción sobre la que estamos probando, y cargo la llamada asíncrona aquí

03:50.410 --> 03:51.700
y paso la URL.

03:51.730 --> 03:58.600
Ahora nota que la URL es la URL de la página de GitHub, pero eso no es tan importante si no hay nada único

03:58.600 --> 03:58.960
allí.

03:58.960 --> 04:06.010
Si quieres probar como el google.com sólo tiene que ir y llamar google.com y obtener la fuente

04:06.010 --> 04:07.210
código fuente.

04:07.210 --> 04:12.610
En realidad no quiero centrarme en lo que estoy haciendo aquí en el código de producción, porque es un admitido

04:12.610 --> 04:13.720
ejemplo simple.

04:13.720 --> 04:19.030
Sólo quería que fuera una manera de conseguir algo asíncrono dentro de la unidad.

04:20.210 --> 04:22.880
Así que vamos a ver el código fuente para que lo entendamos.

04:23.880 --> 04:24.330
Aquí.

04:24.330 --> 04:24.930
Lo que estamos haciendo.

04:24.930 --> 04:29.130
Cuando llamo a cargar, sólo digo, hey, asegúrate de que la URL no está vacía.

04:29.520 --> 04:34.710
Luego sigo adelante y uso la petición web de Unity, que es una funcionalidad incorporada.

04:34.710 --> 04:41.880
Llamo a enviar petición en eso, y luego establezco el resultado para que sea el texto del controlador de descarga.

04:41.910 --> 04:44.220
Esta es una forma super barata y fácil.

04:44.220 --> 04:47.400
Recomendado por unity para llamar datos simples online.

04:47.430 --> 04:48.930
Muy simple y sencillo.

04:48.960 --> 04:53.250
Esto nos lleva a preguntarnos ¿qué estamos probando aquí?

04:53.640 --> 04:59.940
Tengo una clase personalizada llamada mi cargador de datos, pero en su interior estoy dependiendo en gran medida de alguna unidad existente

04:59.970 --> 05:02.550
funcionalidad de unity web request.

05:02.580 --> 05:06.420
Entonces estoy llamando a alguna página web en este caso GitHub.

05:06.420 --> 05:08.040
Y eso es todo.

05:08.040 --> 05:13.170
Si GitHub estuviera de alguna manera fuera de servicio durante el día, esta prueba fallaría.

05:13.200 --> 05:14.490
¿Es eso apropiado?

05:14.490 --> 05:21.390
Si mi prueba unitaria es realmente para probar mi propia metodología, mi propia funcionalidad, no debería considerar

05:21.390 --> 05:22.440
una prueba fallida.

05:22.440 --> 05:25.230
Si alguna dependencia no relacionada falla.

05:25.230 --> 05:27.000
Pero este es el caso.

05:27.000 --> 05:29.030
Fallaría si GitHub estuviera caído.

05:29.040 --> 05:34.830
Además, aquí dentro estoy usando Unity web request que es una funcionalidad incorporada por unity.

05:34.860 --> 05:41.280
Esperamos que funcione el 100% de las veces en todas las situaciones, pero es posible que mi código funcione y

05:41.280 --> 05:42.600
su código no funcione.

05:42.600 --> 05:44.910
Así que aquí hay una zona gris.

05:44.910 --> 05:50.070
Cuando se piensa en el diseño de las clases y luego el diseño de las pruebas en esas clases, ¿cómo se

05:50.070 --> 05:52.350
¿sabes en qué deberías centrarte?

05:52.350 --> 05:54.780
En los exámenes, en general.

05:54.780 --> 05:59.940
Y hay libros y libros escritos sobre este tema de cómo abordar el arte de las pruebas unitarias.

05:59.940 --> 06:05.730
Pero en general, quieres reducir tus dependencias, y quieres simplificar el número...

06:05.730 --> 06:07.920
de líneas de código que estás probando.

06:07.920 --> 06:14.880
Así que menos código es mejor porque es más simple y centrado y usted sabe exactamente en el aislamiento que

06:14.880 --> 06:16.410
código estás probando.

06:16.410 --> 06:22.710
Así que esto no es un ejemplo perfecto, pero para nosotros, es una gran manera de empezar y hablar de asíncrono

06:22.710 --> 06:23.340
código en ejecución.

06:23.340 --> 06:25.440
Así que por ahora vamos a terminar este ejemplo.
