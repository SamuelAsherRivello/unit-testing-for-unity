WEBVTT

00:00.110 --> 00:00.980
Hola y bienvenido.

00:00.980 --> 00:07.040
En este taller, vamos a echar un vistazo al sistema My Math, adentrándonos en lo que es un bonito

00:07.070 --> 00:11.300
ejemplo simple, sólo para familiarizarnos con los fundamentos de las pruebas unitarias.

00:11.300 --> 00:14.720
En esta demo puedes usar el proyecto Core Sample para seguirnos.

00:14.720 --> 00:19.520
Vamos a abrir el editor de la unidad, la apertura de que el núcleo del proyecto de ejemplo, y luego vamos a

00:19.520 --> 00:21.140
abrir y reproducir algunas escenas aquí.

00:21.140 --> 00:26.360
Vamos a ver el sistema My Math, así como la prueba detrás de él, y vamos a hacer una recapitulación

00:26.390 --> 00:31.970
de las pruebas unitarias, sólo un poco de hablar de cualquier concepto básico que veo allí y creo que mencionar.

00:31.970 --> 00:38.450
Y también vamos a hablar de valores parametrizados, que es una forma intermedia que usted puede acercarse a

00:38.450 --> 00:38.960
pruebas.

00:38.960 --> 00:42.620
Y es una buena habilidad adicional para acercarse a las pruebas unitarias.

00:42.620 --> 00:43.640
Vamos a sumergirnos.

00:43.850 --> 00:48.410
Así que aquí estoy dentro del editor de la unidad que les he abierto mi ejemplo de sistema de matemáticas.

00:48.410 --> 00:51.050
Vamos a jugar con la escena.

00:51.080 --> 00:54.710
A veces en estos talleres la escena es más emocionante.

00:54.710 --> 00:56.300
Esta no es tan emocionante.

00:56.300 --> 01:01.730
Vamos a darle al play aquí abajo en la ventana inferior, vemos un texto sencillo que está ayudando

01:01.730 --> 01:07.040
a entender que estamos en la demo de pruebas unitarias, y vamos a reproducir la escena y ver la consola.

01:07.040 --> 01:08.510
Así que vamos a ver la consola.

01:08.600 --> 01:11.210
La consola dice que esta escena no tiene UI.

01:11.630 --> 01:14.510
Veamos la consola de unity aquí estamos en la consola.

01:14.510 --> 01:15.140
Realmente

01:15.140 --> 01:19.880
Nos va a mostrar un valor que ha sido escupido después de una operación exitosa.

01:19.880 --> 01:25.370
Así que esto sería, en código de producción real, una escena mucho más interesante.

01:25.370 --> 01:30.590
Quizás aquí esté ocurriendo el menú del juego o el juego.

01:30.860 --> 01:35.810
Esta es una escena bastante magra aquí donde no hay mucho que ver, pero se puede imaginar que eso podría

01:35.810 --> 01:36.200
ser.

01:36.770 --> 01:41.960
No es particularmente importante que haya una escena de ejecución para las pruebas.

01:41.960 --> 01:47.600
Sólo quiero hablar a menudo sobre el equilibrio entre aquí está su código de producción haciendo su producción

01:47.600 --> 01:48.200
cosa.

01:48.200 --> 01:51.560
Y luego aquí está el código de prueba haciendo su cosa de prueba.

01:51.560 --> 01:57.380
Así que el código de producción, siempre lo experimentamos dándole al play en una escena unity como esta.

01:57.380 --> 02:00.860
Y para hacer nuestras pruebas unitarias hacemos algo diferente.

02:00.860 --> 02:04.040
Lo que hacemos aquí es mirar la ventana del ejecutor de pruebas.

02:04.580 --> 02:08.420
Exploramos la categoría apropiada a lo que queremos mirar aquí.

02:08.420 --> 02:10.550
Estamos mirando el sistema de mis matemáticas.

02:11.630 --> 02:14.090
Y luego le damos a ver.

02:14.090 --> 02:15.350
Vamos a hacer la tarea en modo edición.

02:15.470 --> 02:19.850
Haremos ejecutar todo aquí y todas las pruebas se ejecutarán así.

02:19.880 --> 02:22.120
Ahora no se ha ejecutado la escena.

02:22.130 --> 02:28.490
Se está ejecutando en su propio pequeño universo, ejecutando esas pruebas dentro de una escena.

02:28.490 --> 02:29.360
modo edición.

02:29.360 --> 02:32.860
Así que las pruebas de modo de edición hablando un poco sobre la diferencia allí.

02:32.870 --> 02:38.090
Las pruebas en modo edición se ejecutan en modo edición, que en unity tiene dos modos primarios.

02:38.090 --> 02:43.700
Básicamente, desde el momento en que se pulsa el botón de reproducción hasta el momento en que se pulsa el botón de reproducción, es decir

02:43.700 --> 02:44.360
modo play.

02:44.390 --> 02:47.990
Generalmente es ahí donde el usuario experimenta el juego de la unidad.

02:48.680 --> 02:53.240
En cualquier momento que no estemos en ese modo, estamos en modo edición sentados aquí, estamos en modo edición.

02:53.270 --> 02:59.330
Estas pruebas se ejecutan en modo edición porque no necesitan necesariamente toda la complejidad de un tiempo de ejecución

02:59.330 --> 02:59.870
escena.

02:59.870 --> 03:05.180
Esto nos ayuda a tener una pequeña área aislada más simple donde se ejecutan estos códigos.

03:05.180 --> 03:10.850
Ahora bien, a veces necesitas las comodidades de los monoconductos y la funcionalidad en tiempo de ejecución.

03:10.850 --> 03:14.750
Ahí es donde entra en juego el modo de reproducción.

03:14.750 --> 03:17.330
Y aquí también tenemos algunas pruebas del modo reproducción.

03:17.330 --> 03:22.550
Así que cada vez que haga clic en una de estas casillas de verificación, se puede ver que nos está mostrando algunas listas ligeramente diferentes

03:22.580 --> 03:23.810
de lo que tenemos disponible.

03:23.810 --> 03:26.240
Así que aquí en modo reproducción voy a pulsar ejecutar todo.

03:27.020 --> 03:34.670
Y aquí se está creando una nueva escena, ejecutando una escena en tiempo de ejecución que es sólo para demostración

03:34.670 --> 03:36.380
con cualquier código de prueba que tenga.

03:36.380 --> 03:39.920
Y luego nos devuelve a la escena original en la que estábamos.

03:39.920 --> 03:44.180
Si no tuviéramos la escena guardada, nos avisaría y nos diría, oye, estás a punto de ejecutar un modo de reproducción

03:44.210 --> 03:44.660
prueba.

03:44.690 --> 03:46.430
Vamos a abandonar temporalmente tu escena.

03:46.460 --> 03:48.110
¿Quieres guardar tu escena primero?

03:48.110 --> 03:50.570
Generalmente, es una buena idea, así que ten cuidado con eso.

03:50.600 --> 03:52.370
Ahora veamos el código fuente.

03:52.400 --> 03:56.060
Veamos primero el código de producción en tiempo de ejecución.

03:56.060 --> 03:58.850
Abriremos el ejemplo del sistema My Math.

03:58.880 --> 04:05.810
Cada uno de estos talleres tiene, en general un objeto de juego con un script de ejemplo que patea

04:05.810 --> 04:06.620
todo.

04:06.620 --> 04:12.560
Así que cuando nos fijamos en que, aquí estamos en el editor de código y podemos ver la completa mi sistema de matemáticas

04:12.560 --> 04:13.250
ejemplo.

04:13.250 --> 04:18.740
Ahora bien, este es un mono-comportamiento porque quiero tener las comodidades de código sentado en un objeto de juego.

04:18.740 --> 04:20.230
Y luego dentro del awake.

04:20.240 --> 04:23.450
Aquí voy a simular algo de código de producción.

04:23.450 --> 04:29.210
Ahora es muy sencillo, no hay mucho que hacer, y se parece a la prueba que vamos a hacer

04:29.210 --> 04:34.850
a ver, porque creo la clase desde cero y luego llamo a un método en él, y luego muestro

04:34.850 --> 04:35.600
los resultados.

04:35.600 --> 04:41.390
Pero es importante saber que en un ejemplo de producción, en un proyecto de juego real, este equivalente sería

04:41.390 --> 04:46.640
muchas clases y todas las escenas y todos los prefabricados y toda la complejidad que por lo general tendría

04:46.640 --> 04:47.600
en tu proyecto.

04:47.600 --> 04:50.300
Pero aquí estoy manteniendo a propósito muy magra.

04:50.300 --> 04:51.980
Fíjate en lo que hacemos aquí.

04:51.980 --> 04:53.960
Creamos mi sistema matemático.

04:53.990 --> 04:58.820
Cogemos un par de ints y los rellenamos con los valores cinco y diez.

04:58.820 --> 05:01.010
Y luego llamamos al sistema my Math.

05:01.010 --> 05:03.620
Y pasamos el cinco y el diez juntos.

05:03.620 --> 05:05.570
Y aquí mostramos el resultado.

05:05.570 --> 05:07.100
Así que vamos a seguir adelante y hacer eso.

05:07.100 --> 05:08.540
Y aquí le doy al play.

05:12.600 --> 05:16.600
Y aquí abajo en la ventana de la consola vemos que el resultado es 15.

05:16.620 --> 05:22.290
Ahora, me gusta la simplicidad de este ejemplo de codificación, porque nos hace empezar a pensar en un mundo

05:22.290 --> 05:27.570
donde las pruebas unitarias nunca existieron, ¿cómo puedo estar seguro de que este código es funcional?

05:27.600 --> 05:34.620
Bueno, tal vez este código de mi sistema de matemáticas se utiliza en muchos, muchos lugares de su juego, y simplemente

05:34.620 --> 05:40.020
en cualquier momento que desee ver y validar que este sistema está funcionando bien, usted acaba de jugar el juego y

05:40.020 --> 05:44.160
tu juego puede durar varios minutos, o puede durar varias horas.

05:44.160 --> 05:50.220
Y este sistema en particular que se está probando podría usarse en muchos lugares diferentes, según

05:50.220 --> 05:53.400
de los diferentes comportamientos de los usuarios.

05:53.400 --> 05:55.740
Quizás la hora del día sea importante.

05:55.740 --> 06:01.020
Y así es difícil para ti saber si realmente lo estoy probando aisladamente.

06:01.020 --> 06:09.570
Así que un primer movimiento que podría hacer si quisiera hacer alguna validación es que podría copiar esto aquí, pegarlo

06:09.570 --> 06:10.440
aquí.

06:12.790 --> 06:15.290
Y llamar a esto aquí y probar.

06:15.310 --> 06:16.840
Bueno, ¿y si fuera seis?

06:16.840 --> 06:18.700
¿Y si fuera 11?

06:20.790 --> 06:22.410
De A a, de B a.

06:27.060 --> 06:33.060
Así que ahora estoy probando no una prueba unitaria, pero sólo estoy validando dos ejemplos diferentes aquí.

06:33.060 --> 06:35.820
Así que estoy haciendo esto primero y estoy haciendo eso en segundo lugar.

06:35.850 --> 06:42.840
Ahora bien, esto se llama pruebas de usuario o pruebas de modo de juego o pruebas de integración en la que en realidad estoy ejecutando

06:42.840 --> 06:43.980
código de producción.

06:43.980 --> 06:50.760
Y lo estoy probando como usuario, esperando que accidentalmente le pida que haga un montón de diferentes

06:50.790 --> 06:53.690
operaciones, y ver que ninguna de ellas falla.

06:53.700 --> 06:57.870
Pero puedes imaginar que lo que estoy haciendo aquí es añadir cosas que realmente no quiero para el final

06:57.870 --> 06:59.190
experiencia del usuario.

06:59.190 --> 07:05.700
Sólo estoy tratando de darme un poco más de confianza en mi propio código llamando a alguna funcionalidad

07:05.700 --> 07:06.960
veces extra.

07:06.990 --> 07:13.590
También puede establecer un booleano en algún lugar de su proyecto que dice como es el modo de depuración es verdadera, y luego

07:13.590 --> 07:15.330
en todo el código de producción.

07:15.330 --> 07:18.810
Si esa es la situación, harás un poco de pruebas adicionales.

07:18.810 --> 07:20.220
Ahora no está mal.

07:20.220 --> 07:25.200
En ciertas situaciones, definitivamente puede ayudarte, pero veamos cuánto mejor es la situación

07:25.200 --> 07:25.770
puede ser.

07:25.770 --> 07:29.010
Si en lugar de hacer esto, ejecuto pruebas unitarias.

07:29.010 --> 07:31.860
Así que aquí es donde este proyecto se encuentra el código.

07:31.860 --> 07:36.060
En este proyecto tenemos el sistema My Math, ejemplo del sistema My Math, que hemos visto.

07:36.750 --> 07:42.630
La estructura de eso y la forma en que trabajan juntos se habla antes en el curso.

07:42.630 --> 07:47.430
Pero tenemos una prueba de editor y una prueba de ejecución de las que hablaremos.

07:47.430 --> 07:54.030
De nuevo, cualquier prueba de editor va a ejecutar un modo de edición, y generalmente es ideal para cosas que no

07:54.030 --> 07:57.360
utilizan clases específicas de la unidad como Monobehaviour.

07:57.390 --> 08:02.520
Monobehaviour está diseñado sólo para funcionar en su forma más completa en el modo de juego.

08:02.520 --> 08:04.470
Así que aquí no es demasiado apropiado.

08:04.470 --> 08:04.950
Entonces

08:04.950 --> 08:07.860
Pero para pruebas simples como la que tenemos aquí, es genial.

08:07.890 --> 08:12.630
El área de tiempo de ejecución aquí donde tenemos la prueba de modo de juego sería un gran lugar.

08:12.630 --> 08:18.180
Y cada uno de estos talleres que hacer uno de cada uno sólo para que pueda ver las diferencias.

08:18.180 --> 08:23.040
Pero es importante pensar que en ciertas situaciones, dependiendo de lo que estés probando, probablemente

08:23.040 --> 08:27.060
una prueba unitaria en modo edición es más apropiada en esta situación.

08:27.060 --> 08:31.680
Ese es definitivamente el caso más adelante cuando estamos hablando de moverse con la entrada y hacer algo con

08:31.680 --> 08:37.800
física, tal vez la prueba de modo de juego se requiere allí, porque la entrada y la física están realmente diseñados

08:37.800 --> 08:39.270
como experiencias del modo de juego.

08:39.270 --> 08:41.700
Así que es importante conocer esa distinción.

08:41.700 --> 08:43.080
Y lo mencionaré aquí y allá.

08:43.320 --> 08:45.840
Veamos la prueba de mi sistema matemático.

08:49.240 --> 08:52.210
Y veamos cómo está organizado.

08:53.800 --> 08:59.050
Así que aquí, observe que la prueba de Mi sistema de Matemáticas tiene algunos diferentes.

09:04.440 --> 09:06.270
Tiene algunos métodos diferentes en virtud del mismo.

09:06.420 --> 09:10.560
Cada uno de los nombres que vemos aquí son los nombres de los métodos de prueba.

09:10.560 --> 09:12.180
Así que vamos a empezar con el primero.

09:12.570 --> 09:18.030
La convención que me gusta usar se sigue aquí, y vamos a entrar en el código que generalmente pongo

09:18.030 --> 09:23.520
primero, qué método estamos probando, qué estamos esperando y luego cuál es la situación.

09:23.520 --> 09:26.490
Aquí dice que estamos probando el método add.

09:26.490 --> 09:31.140
Esperamos que el resultado sea 15 cuando pasemos en cinco y diez.

09:31.380 --> 09:36.840
Un buen atajo aquí es que mientras ejecutas cualquier prueba puedes hacer doble clic para ejecutarla de nuevo.

09:37.890 --> 09:39.600
Y luego puedo hacer clic con el botón derecho.

09:41.550 --> 09:42.420
Lo siento, estaba en modo reproducción.

09:42.960 --> 09:44.910
Doble click y se ejecuta de nuevo.

09:44.940 --> 09:45.390
Genial.

09:45.390 --> 09:46.290
Sigue verde.

09:46.290 --> 09:49.650
Y puedo hacer clic con el botón derecho y elegir código fuente abierto.

09:50.810 --> 09:54.860
Esa es una manera fácil de llegar a la clase correcta y al método correcto.

09:54.890 --> 09:57.380
Aquí está de nuevo el nombre del método que vimos.

09:57.410 --> 10:00.920
Una vez más añadir resultado es 15 cuando cinco y diez.

10:00.950 --> 10:07.130
La razón por la que esto es importante es que si tienes muchas clases de prueba con muchos métodos de prueba,

10:07.130 --> 10:14.660
y espero que lo hagas en tu proyecto con el fin de razonar cual en el test runner es cual en el código

10:14.660 --> 10:17.670
base aquí, es bueno tener esa nomenclatura coherente.

10:17.690 --> 10:22.960
Así que aquí lo que hacemos, hacemos el arreglo, actuar y afirmar la metodología.

10:22.970 --> 10:23.780
En el arrange.

10:23.780 --> 10:28.370
Lo que vamos a hacer primero es crear una nueva instancia de lo que queremos probar.

10:28.370 --> 10:32.490
De esa manera sabremos que no ha estado sentado por ahí, que no tiene datos antiguos en su interior.

10:32.510 --> 10:33.850
Siempre es una buena práctica.

10:33.860 --> 10:35.540
Entonces vamos a actuar en consecuencia.

10:35.540 --> 10:39.200
Esto es como, ¿cuál es el único método si puedes salirte con la tuya?

10:39.200 --> 10:41.750
Tal vez dos métodos que realmente hacen las pruebas.

10:41.750 --> 10:43.220
Pero un método es ideal.

10:43.250 --> 10:45.740
Aquí estamos sumando cinco y diez.

10:45.740 --> 10:49.720
Y luego en el assert vamos a usar este lenguaje assert.

10:49.730 --> 10:56.720
La clase assert tiene una cierta estructura en la que dices que afirmas que algo es algo.

10:56.720 --> 11:01.730
Y puedes mirar la documentación para ver la variedad de formas en que puedes formatear eso.

11:01.730 --> 11:07.840
Pero a menudo uso es igual a o es verdadero o es falso.

11:07.850 --> 11:10.730
Así que esos son los que verás con bastante frecuencia aquí.

11:11.060 --> 11:15.980
Así que cuando ejecuto eso porque el código se ejecuta correctamente suma cinco y diez para ser 15.

11:16.010 --> 11:16.760
Ya está.

11:16.790 --> 11:18.070
Somos capaces de hacerlo.

11:18.080 --> 11:21.710
Ahora recuerda el ejemplo que estaba dando en el código de producción.

11:21.710 --> 11:30.710
¿Y si quisieras probar cinco y diez y luego probar seis y once y luego probar siete y doce o lo que sea?

11:30.710 --> 11:31.760
combinaciones?

11:31.760 --> 11:38.570
Cuanto mejor te desenvuelvas en las pruebas, te darás cuenta de cuántas pruebas necesitas realmente para proporcionar una cobertura adecuada.

11:38.600 --> 11:44.240
Hay mucho de arte y ciencia en torno a cuál es el número mínimo de pruebas que puede proporcionar que

11:44.240 --> 11:47.800
maximice tu impacto, y la cobertura de código que tienes.

11:47.810 --> 11:53.090
Así que una de las cosas que quería hablar como parte de este taller en particular es lo que se llama

11:53.090 --> 11:54.890
pruebas parametrizadas.

11:54.890 --> 12:01.520
Así que en lugar de simplemente copiar este, pegarlo a continuación, y ajustar los valores para sumar seis

12:01.520 --> 12:08.840
y 11 o 0 y diez negativo, podemos pedir a la unidad para ejecutar la misma prueba exacta, pero pasando en algunos diferentes

12:08.840 --> 12:09.590
valores.

12:09.590 --> 12:11.810
Hay un montón de opciones diferentes que tienes aquí.

12:11.810 --> 12:13.400
Sólo estoy mostrando una de ellas.

12:13.400 --> 12:15.890
Pero echemos un vistazo aquí abajo.

12:16.790 --> 12:23.150
Decimos, y juntos que asumimos que el resultado es correcto cuando estos valores.

12:23.150 --> 12:28.670
Así que los nombres de método un poco más vago porque es parametrizado, no sé necesariamente.

12:28.700 --> 12:31.490
¿Esto va a probar cinco y diez es 15.

12:31.520 --> 12:37.340
Fíjate que aquí en lugar de lo que hice antes que era declarar cinco y diez.

12:37.370 --> 12:42.950
En el cuerpo del método uso este lenguaje en particular, uso algo llamado fuente de valor.

12:42.950 --> 12:44.300
Y luego lo paso.

12:44.300 --> 12:50.180
Lo que hace la unidad es que rellena esta primera pasa valores aquí.

12:50.180 --> 12:51.800
Así que digamos que es cinco.

12:51.830 --> 12:54.380
Luego toma otra fuente de valores aquí.

12:54.410 --> 13:01.070
Digamos que uno es diez y asume que son cinco más diez sumados.

13:01.070 --> 13:06.020
Así que cada vez que se ejecuta, va a hacer el equivalente de la última prueba que vimos.

13:06.020 --> 13:12.110
Pero en lugar de estar codificado a un solo conjunto de valores, se va a mezclar y mostrar una variedad

13:12.110 --> 13:12.620
de ellos.

13:12.620 --> 13:15.520
Ahora de nuevo, hay un montón de diferentes maneras que usted puede dar formato a esto.

13:15.520 --> 13:19.730
Así que usted quiere mirar la documentación para las pruebas parametrizadas en la unidad.

13:19.730 --> 13:21.980
Pero veamos mi caso específico aquí.

13:22.010 --> 13:24.410
Esas fuentes de valores A y b.

13:24.410 --> 13:27.860
Se refieren a un par de matrices que tengo aquí.

13:27.860 --> 13:34.040
Y lo que va a hacer es sólo paso a través y va a probar uno y uno, negativo dos y

13:34.040 --> 13:36.620
negativo dos, negativo tres y negativo tres y pasarlos.

13:36.650 --> 13:43.130
Puedes organizarlos como quieras y probar diferentes escenarios donde quizás hagas siete, 11

13:43.130 --> 13:43.730
y 12.

13:43.760 --> 13:45.260
Puedes probar lo que quieras.

13:45.290 --> 13:48.080
Ahora no tienes que probar cantidades infinitas allí.

13:48.080 --> 13:50.510
Aquí es donde aparece el arte y la ciencia.

13:50.510 --> 13:57.020
Puede que quieras probar un par de valores negativos cero en algunos escenarios y un par de valores positivos.

13:57.050 --> 14:01.880
Tal vez lo que estás haciendo no se basa en las matemáticas y quieres pensar en ello de otra manera, pero lo que estás

14:01.880 --> 14:04.460
buscando lo que se llaman casos de esquina.

14:04.460 --> 14:10.310
Así, por ejemplo, si estuvieras haciendo un método de división y quisieras probarlo matemáticamente, hay

14:10.310 --> 14:12.800
un desafío sobre la división por cero.

14:12.800 --> 14:17.030
Así que usted querría ver que se pasa en cero y manejar eso con elegancia.

14:17.030 --> 14:22.100
Usted realmente necesita saber el dominio específico que su código de producción se encuentra en, con el fin de saber cómo

14:22.100 --> 14:22.790
probarlo.

14:22.790 --> 14:27.080
Pero aquí un par de cada positivo y negativo y cosas así.

14:28.230 --> 14:31.010
Así que vamos a ver cómo se ve en el editor de la unidad.

14:31.020 --> 14:32.730
Fíjate en lo que hace aquí.

14:32.730 --> 14:38.040
Ejecuta 49 pruebas basadas en todas las combinaciones que tenemos aquí.

14:38.040 --> 14:41.930
Así que te muestra cuándo están los valores y luego los pasa.

14:41.940 --> 14:43.490
Eso está muy bien.

14:43.500 --> 14:50.490
Ahora que estás viendo este resultado te puedes dar cuenta de que va a ser importante para mí probar el 100

14:50.490 --> 14:51.860
y -100.

14:51.870 --> 14:52.410
Genial.

14:52.410 --> 14:58.950
Entonces vuelve atrás y añade esos valores de muestra si quieres hacer otras cosas en lugar de sólo un duro

14:58.950 --> 14:59.700
lista codificada.

14:59.700 --> 15:03.600
Si quieres seleccionar valores aleatorios, tienes muchas otras opciones.

15:03.600 --> 15:06.240
De nuevo, investiga un poco sobre pruebas parametrizadas.

15:06.420 --> 15:10.950
Puedes indagar en la prueba de modo de juego también si quieres, pero como eso va a ser más interesante

15:10.950 --> 15:15.060
en otros ejemplos, seguiremos adelante y concluiremos este de los talleres.

15:15.060 --> 15:15.900
Gracias.
