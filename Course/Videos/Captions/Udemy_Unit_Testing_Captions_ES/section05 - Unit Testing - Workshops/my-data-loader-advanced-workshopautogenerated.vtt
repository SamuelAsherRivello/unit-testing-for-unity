WEBVTT

00:00.260 --> 00:02.360
Hola y bienvenidos a Unit Testing for unity.

00:02.390 --> 00:06.020
Vamos a ver mi cargador de datos en versión avanzada aquí.

00:06.020 --> 00:12.170
Para ver esta demo en acción vamos a abrir unity Download y utilizar el proyecto de ejemplo Source para

00:12.170 --> 00:12.920
este curso.

00:12.920 --> 00:15.020
Y vamos a echar un vistazo a una escena clave aquí.

00:15.020 --> 00:17.210
Este es el cargador My Data avanzado.

00:17.210 --> 00:23.210
Algunos de los conceptos que voy a hablar aquí incluyen la inyección de dependencia como vemos y sustituto final.

00:23.210 --> 00:29.150
Aquí estamos dentro de unity tengo esta escena para el cargador de My Data avanzado y listo para funcionar aquí.

00:29.150 --> 00:34.070
Así que vamos a seguir adelante y ejecutar esa escena para un buen montón de estas escenas en el taller.

00:34.070 --> 00:38.840
Ejecutar la escena de producción no es lo interesante, pero siempre os animo a hacerlo sólo

00:38.840 --> 00:39.890
como punto de partida.

00:39.890 --> 00:46.310
Así que aquí vemos simple registro de la consola que dice longitud de los datos cargados es este.

00:46.340 --> 00:50.120
Ese valor no es demasiado importante, pero puedes indagar en esa clase de ejemplo si quieres echarle un vistazo

00:50.120 --> 00:50.480
en él.

00:50.480 --> 00:52.160
Vamos a ejecutar la prueba para ello.

00:54.550 --> 00:58.090
Así que aquí arriba tengo mi categoría establecida en mi cargador de datos avanzado.

00:58.090 --> 01:02.320
Así que sólo estamos viendo la prueba relacionada con eso y sólo en el modo de edición.

01:02.350 --> 01:06.490
También hay una prueba de modo de reproducción que puedes echar un vistazo en tu tiempo libre, pero creo que el modo de edición

01:06.490 --> 01:07.630
es más interesante aquí.

01:07.630 --> 01:09.490
Así que voy a hacer correr todo.

01:15.130 --> 01:19.450
Y aquí vemos que tenemos dos pruebas y ambas pasan con una marca verde, lo que es genial.

01:19.480 --> 01:24.510
Echemos un vistazo a la carga asíncrona y al simulacro de carga asíncrona y veamos cómo funcionan.

01:24.520 --> 01:26.260
Aquí estamos en el código de ejemplo.

01:26.260 --> 01:31.060
Si has seguido a lo largo del último video y espero que lo hagas, nos fuimos sobre el método que estamos buscando

01:31.060 --> 01:38.920
aquí, que utiliza una llamada real a un servidor web, carga los datos de nuevo y comprueba el valor de la misma.

01:38.920 --> 01:42.370
¿Esto se parece mucho a lo que sería el caso de uso en producción?

01:42.370 --> 01:44.830
Pero ya hemos hablado de algunos problemas.

01:44.860 --> 01:49.030
¿Estoy probando mi código o estoy probando Unity Web Service debajo de él?

01:49.180 --> 01:50.140
¿Estoy probando eso?

01:50.140 --> 01:53.140
¿O estoy probando el backend de github.com?

01:53.140 --> 02:00.010
Y si se trata de un servidor estable, querrás centrar tus pruebas en tu propio código personalizado y tener como mínimo

02:00.010 --> 02:01.810
y menos dependencias posibles.

02:01.810 --> 02:03.990
Así que hay algunos problemas con esto.

02:04.000 --> 02:09.910
Lo primero que hice cuando me puse a ello fue pensar en la inyección de dependencias.

02:09.910 --> 02:16.510
Digamos que en producción quiero tener una forma de llamar a esto y que se implemente, que

02:16.510 --> 02:18.340
es usando el servicio web de Unity.

02:18.370 --> 02:22.690
Entonces, para las pruebas, tal vez quiero tener una segunda forma de abordarlo.

02:22.720 --> 02:29.800
Ahora, usted podría tener una bandera en su base de código que dice algo así como es la depuración es igual a verdadero o es la producción

02:29.800 --> 02:30.700
igual a falso?

02:30.700 --> 02:35.260
Y en tu código de producción hacer ciertas cosas en modo de prueba y ciertas cosas no.

02:35.290 --> 02:39.850
Veo mucho de eso en bases de código, pero generalmente no es una buena práctica.

02:39.850 --> 02:45.790
Estas contaminando tu codigo de produccion con cosas que son solo para pruebas, asi que no es tan apropiado.

02:45.820 --> 02:47.200
Esta es una mejor solución.

02:47.200 --> 02:49.810
Echemos un vistazo a lo que hacemos bien.

02:49.810 --> 02:55.600
En el ejemplo básico anterior, no tenía el concepto de un servicio de red, ni lo pasé en

02:55.600 --> 02:56.110
aquí.

02:56.140 --> 02:59.440
Simplemente lo creamos y siempre funcionó de una manera.

02:59.440 --> 03:03.670
Pero la inyección de dependencia aquí es que yo decido.

03:03.670 --> 03:07.080
Aquí hay una forma personalizada en que esto podría funcionar.

03:07.090 --> 03:11.290
Aquí hay algo de la lógica que podría cambiar de diferentes maneras.

03:11.290 --> 03:13.930
Lo declaro aquí en una línea, y luego lo paso.

03:13.930 --> 03:17.440
Así que puedes imaginar tener varios servicios de red diferentes.

03:17.440 --> 03:22.000
Podría tener uno que es sólo para pruebas, uno que es sólo para producción, uno que sólo escribe a

03:22.000 --> 03:26.560
un disco local, uno que sea apropiado para un servidor backend en particular.

03:26.560 --> 03:27.370
Etcétera.

03:27.400 --> 03:30.070
Esto también tiene casos de uso en producción.

03:30.070 --> 03:31.980
Esta idea de inyección de dependencia.

03:31.990 --> 03:34.270
¿Por qué lo llamamos inyección de dependencias?

03:34.270 --> 03:43.960
Es porque en lugar de que mi cargador de datos avanzado haga siempre una cosa, le paso alguna información que decide

03:43.960 --> 03:45.490
cómo va a funcionar.

03:45.490 --> 03:52.000
Así que en lugar de que la propia clase lo sepa todo aquí, estoy pasando una dependencia en este caso a

03:52.000 --> 03:54.160
el servicio Unity Web Request Network.

03:54.160 --> 04:00.340
Así que vamos a echar un vistazo a cómo está estructurado, y luego vamos a ver por qué es útil para nosotros como lo hacemos

04:00.340 --> 04:01.180
nuestras pruebas.

04:01.300 --> 04:05.050
Así que aquí está el código fuente completo para el My Data loader advanced.

04:05.080 --> 04:07.330
Ahora dos cosas en las que quiero centrarme aquí.

04:07.330 --> 04:11.420
Una es que en su constructor le paso esa dependencia.

04:11.440 --> 04:18.970
Ahora inyección de dependencia y cómo crear clases flexibles a partir de este concepto de inyección de dependencia

04:18.970 --> 04:21.580
están realmente fuera del alcance de esta clase.

04:21.610 --> 04:24.130
Es algo realmente bueno para que vayas y lo mires.

04:24.130 --> 04:30.640
Puedes buscar en google algo como D I para unity o inyección de dependencia para unity, o incluso dependencia

04:30.640 --> 04:35.320
en programación orientada a objetos, y ver algunos más de esos conceptos generales.

04:35.320 --> 04:41.040
Pero suponiendo que usted tiene algo de una familiaridad, especialmente teniendo en cuenta mi mi explicación, Acabo de dar allí,

04:41.050 --> 04:42.340
Sigamos adelante.

04:42.370 --> 04:49.720
Ahora que estoy pasando en que como una dependencia aquí y almacenarlo, entonces cada vez que llamo a nuestra funcionalidad básica

04:49.750 --> 04:56.470
de carga asíncrona, lo que hago es decir, bien, cuando estoy listo para cargar asíncrona, sólo decirle a mi servicio de red

04:56.470 --> 04:57.630
que cargue async.

04:57.640 --> 05:04.930
Ahora puedes imaginar si he pasado un servicio de red que hace una carga asíncrona para un servidor back-end

05:04.930 --> 05:06.700
de una tecnología en particular.

05:06.730 --> 05:08.320
Esta línea de aquí lo haría.

05:08.550 --> 05:14.800
Que si yo pasara algo más que hiciera una escritura a disco o lectura de disco como un tipo diferente

05:14.800 --> 05:17.890
de servicio de red, esta es la línea aquí que realmente cambiaría.

05:17.890 --> 05:24.010
Así que no tengo que tener 2 o 3 versiones diferentes de mi cargador de datos avanzado aquí.

05:24.010 --> 05:29.040
En su lugar, paso una implementación personalizada que maneja ese detalle particular de una manera única.

05:29.050 --> 05:33.030
Es una forma muy poderosa de hacer que tu código sea más flexible.

05:33.040 --> 05:41.290
Ahora, ahora que hemos hablado de pasar una dependencia y cómo es capaz de envolver la funcionalidad

05:41.290 --> 05:44.560
aquí, vamos a ver lo que la fuente de este particular es.

05:44.560 --> 05:49.150
Así que aquí arriba en el mismo archivo de clase tengo un par de cosas de las que hablar.

05:49.150 --> 05:51.490
Una, he creado una interfaz.

05:51.610 --> 05:59.140
Esta interfaz aquí de I servicio de red declara bien, cualquiera que quiera ser considerado como un viable

05:59.140 --> 06:04.900
tiene que tener algún método o métodos disponibles.

06:04.900 --> 06:09.820
Y en este caso, sólo tiene que tener la carga asíncrona y tomar una cadena URL.

06:09.850 --> 06:10.620
Y ya está.

06:10.630 --> 06:14.530
Ahora, si no estás muy familiarizado con las interfaces.

06:14.820 --> 06:16.440
Por favor, echa un vistazo a las interfaces.

06:16.440 --> 06:22.200
Puedes mirar algo como interfaces versus clases en C-sharp o en unity, y verás un montón de...

06:22.200 --> 06:23.040
de ejemplos.

06:23.040 --> 06:29.850
Pero una distinción importante aquí es que la interfaz define lo que la API pública es, pero no lo hace

06:29.850 --> 06:31.920
se preocupa de hacer la implementación.

06:31.980 --> 06:35.430
La implementación se declara aquí abajo en una clase pública.

06:35.460 --> 06:37.590
Ahora las clases con las que probablemente estés más familiarizado.

06:37.920 --> 06:42.480
Y lo que hacemos aquí es implementar un sabor particular de eso.

06:42.480 --> 06:48.240
I servicio de red en este sabor particular debe ser muy familiar para usted desde el vídeo anterior.

06:48.270 --> 06:50.640
Esta es exactamente la misma implementación.

06:50.910 --> 06:58.020
Sólo estamos usando unity web request y luego haciendo su metodología send web request.

06:58.020 --> 07:03.420
Así que ahora que hemos mirado el código fuente de volver aquí, podemos ver, bien, sólo estamos creando

07:03.420 --> 07:06.150
una clase personalizada que maneja un poco de la funcionalidad.

07:06.150 --> 07:08.430
Y pasamos esa clase personalizada ahí.

07:08.430 --> 07:12.920
Pero ahora tenemos una clase avanzada de mi cargador de datos que es mucho más flexible.

07:12.930 --> 07:17.600
Ahora, ¿por qué específicamente en el mundo de las pruebas, la inyección de dependencia es relevante?

07:17.610 --> 07:23.280
Bueno, tenemos una maravillosa utilidad que podemos utilizar dentro de unity para nuestras pruebas unitarias.

07:23.280 --> 07:28.710
Esta es una biblioteca llamada N sustituto y se ha incluido aquí en el proyecto de ejemplo.

07:28.710 --> 07:31.890
Echemos un vistazo a otro método de prueba justo debajo del otro.

07:31.890 --> 07:35.790
Y esto va a utilizar lo que se llama un simulacro de una clase.

07:35.790 --> 07:41.190
Así que aquí tenemos una creación muy similar del cargador My Data avanzado.

07:41.190 --> 07:46.980
Y en lugar de pasar la versión de la petición web de la unidad, vamos a hacer algo que parece bastante

07:47.010 --> 07:47.760
extraño aquí.

07:47.760 --> 07:50.820
Vamos a usar una librería sustituta.

07:50.820 --> 07:58.170
Y lo que vamos a hacer aquí es que vamos a decir hey sobre la marcha en estas dos líneas, ir a crear

07:58.170 --> 08:02.910
una clase que pueda manejar la funcionalidad que necesito.

08:02.910 --> 08:09.900
Pero como es una clase simulada, no necesariamente tiene que llamar al servidor.

08:09.900 --> 08:15.330
Lo que va a hacer en su lugar es, en momentos clave, devolvernos un valor predecible.

08:15.330 --> 08:24.570
Ahora recuerda, nuestro flujo aquí es que la prueba le dice al cargador de datos que vaya a cargar una URL dentro de los datos

08:24.570 --> 08:28.650
El cargador le dice al servicio de red que cargue una URL.

08:28.680 --> 08:35.340
Ese último paso, el resultado final es que tarda medio segundo, va y carga desde el servidor y devuelve

08:35.370 --> 08:36.780
una cadena de vuelta.

08:36.780 --> 08:41.670
Así que todo lo que realmente necesito en una situación simulada es bien, ni siquiera llamar a un servidor.

08:41.670 --> 08:45.240
Solo cuando llame a esto me devuelves una cadena.

08:45.240 --> 08:54.630
Así que estoy diciendo aquí con este lenguaje que quiero que cada vez que llame a load async y le pase cualquier cadena

08:54.630 --> 08:59.370
para la URL, a continuación, devolver la palabra mocked data.

08:59.640 --> 09:05.970
Entonces aquí abajo, podría asegurarme de que estoy obteniendo el resultado esperado que quiero, en lugar de comprobar

09:05.970 --> 09:09.930
que tiene doctype en el retorno como hice anteriormente.

09:09.930 --> 09:13.650
Aquí puedo comprobar los datos simulados.

09:13.650 --> 09:22.290
Así que lo que estamos viendo aquí es un ejemplo muy simple, y puede no parecer útil, pero imagina en un

09:22.290 --> 09:29.460
ejemplo más complejo en el que no sólo cargáramos datos, sino que los cargáramos, leyéramos, escribiéramos, transformáramos

09:29.460 --> 09:32.730
los datos, haciendo un poco, tal vez 5 o 6 métodos diferentes.

09:32.760 --> 09:39.060
Todos ellos podrían estar apuntando a sistemas muy diferentes, pero cuando realmente queremos probar sólo el

09:39.060 --> 09:48.210
cargador de datos, entonces queremos pasar en habilidades simuladas para los otros sistemas a ser sólo una especie de temporalmente

09:48.210 --> 09:52.130
para que podamos centrarnos en lo que tenemos entre manos.

09:52.140 --> 09:54.360
Ahora echemos un vistazo a lo que pasaría.

09:54.360 --> 09:56.850
Así que llamo a la carga async.

09:56.850 --> 10:03.960
Lo que va a pasar es que este sistema va a devolver el valor previsto.

10:03.960 --> 10:08.130
Y el cargador de datos va a llamar cargado.

10:08.130 --> 10:14.070
Y va a hacer que su valor resultante sea el valor que esperamos que sea.

10:14.070 --> 10:18.210
Así que vamos a ejecutar esto dentro del editor de la unidad.

10:18.210 --> 10:19.680
Así que vamos a pulsar ejecutar todo aquí.

10:22.010 --> 10:23.380
Y funciona bastante rápido.

10:23.390 --> 10:29.180
Comparemos incluso si sólo ejecuto load async que en realidad está llamando a un servidor.

10:33.100 --> 10:34.120
Fue rápido.

10:34.150 --> 10:38.620
Entonces si llamo a mock load async que no está llamando a ningún servidor.

10:42.510 --> 10:47.720
Puede que no sea evidente en el video, pero es mucho más rápido llamar al MOC.

10:47.730 --> 10:53.060
Y eso tiene sentido porque en realidad no estamos llamando a un servidor y esperando un resultado.

10:53.070 --> 10:56.550
Así que esto no es sólo para ahorrarnos unos segundos.

10:56.580 --> 11:00.180
Es de nuevo para que nos centremos cuando estamos diseñando nuestras pruebas.

11:00.210 --> 11:02.670
¿Qué es lo que realmente queremos probar?

11:02.670 --> 11:04.830
Y luego queremos aislarlo.

11:04.830 --> 11:09.060
Así que en realidad no estamos probando una clase de Unity Web Services.

11:09.090 --> 11:11.580
No estamos probando un backend de GitHub.

11:11.610 --> 11:15.390
Probar varios sistemas juntos se llama prueba de integración.

11:15.390 --> 11:17.460
Es un tipo de prueba apropiado.

11:17.460 --> 11:21.570
Pero está fuera de lo que estamos hablando aquí, que son las pruebas unitarias.

11:21.570 --> 11:26.340
De nuevo, reduciendo al máximo las dependencias y las líneas de código.

11:26.340 --> 11:27.360
Podrías pensar en ello.

11:27.360 --> 11:35.790
Así que eso es todo hemos visto cómo utilizar la biblioteca de sustitución y cómo también podemos hacer un simulacro de

11:35.790 --> 11:37.620
una llamada al servidor back-end.

11:37.620 --> 11:38.460
Así que gracias.
