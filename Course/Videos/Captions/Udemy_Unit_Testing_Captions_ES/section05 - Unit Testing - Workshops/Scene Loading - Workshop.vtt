WEBVTT

00:00.320 --> 00:03.950
Hola y bienvenidos a las pruebas unitarias para Unity Workshops.

00:03.950 --> 00:06.800
Y aquí vamos a ver la carga de escenas.

00:06.800 --> 00:12.860
Ahora, tradicionalmente, cuando pensamos en pruebas unitarias pensamos en probar la unidad más pequeña de código con el

00:12.860 --> 00:15.530
menos líneas y menos dependencias.

00:15.530 --> 00:21.530
En el extremo opuesto de ese espectro de simplicidad, tenemos la complejidad.

00:21.530 --> 00:27.710
Y uno de los objetos fundamentales dentro de la unidad es la propia escena.

00:28.220 --> 00:35.150
Todo lo que ves como jugador en una experiencia de juego está dentro de una escena.

00:35.150 --> 00:39.950
Así que podemos probar los scripts individuales o elementos dentro de una escena.

00:39.950 --> 00:44.210
O como vamos a mostrar aquí, podríamos probar toda la escena en sí.

00:44.210 --> 00:45.710
¿Por qué podríamos hacer eso?

00:45.710 --> 00:48.110
En primer lugar, es una buena prueba de humo.

00:48.140 --> 00:53.630
Una forma sencilla de ver si la escena se ha cargado y si lo ha hecho sin excepciones.

00:53.630 --> 00:54.980
Sólo por eso merece la pena.

00:54.980 --> 00:56.690
Pensemos en las cosas que podemos hacer.

00:56.720 --> 01:00.770
Podríamos hacer suposiciones sobre la estructura de la escena y qué objetos hay dentro de ella.

01:00.770 --> 01:04.340
Podríamos hacer suposiciones sobre los comportamientos de las cosas en esa escena.

01:04.340 --> 01:11.210
Y un flujo de trabajo que encuentro realmente genial es que puedes dejar estas pruebas y hacer que los no programadores

01:11.210 --> 01:15.590
de tu equipo ejecuten las pruebas antes y después de hacer su trabajo.

01:15.590 --> 01:21.590
Quizás un diseñador de niveles pueda trabajar con más confianza, sabiendo que los nuevos niveles añadidos, no

01:21.590 --> 01:25.490
rompen ninguna escena existente o revisiones de niveles existentes.

01:25.490 --> 01:31.450
Tampoco rompa ninguna de las escenas, y su equipo de arte puede estar seguro de que si tuvieran que sustituir alguna

01:31.460 --> 01:37.400
activos o añadir algunos nuevos activos, que desde el punto de vista del programador, nada se ha roto.

01:37.400 --> 01:39.200
¿Cómo sería ese flujo de trabajo?

01:39.200 --> 01:45.680
Bueno, voy a mostrar un ejemplo aquí de ser capaz de crear una prueba de modo de juego y cargar una escena completa en

01:45.680 --> 01:49.070
y hacer algunas suposiciones usando aserciones.

01:49.070 --> 01:56.030
Por ejemplo, podrías cargar una escena y en la escena de introducción comprobar que el menú se muestra correctamente.

01:56.030 --> 01:57.620
Estamos en una escena de juego.

01:57.650 --> 02:03.080
Asegúrate de que el elemento de fondo, el héroe y todos los enemigos han sido instanciados en el momento adecuado.

02:03.080 --> 02:03.470
momento.

02:03.470 --> 02:08.900
Ahora, como estamos abriendo la puerta a la gran complejidad posible dentro de una escena dada, puede que

02:08.900 --> 02:15.380
parece abrumador que usted quiere probar todo en una escena, pero de nuevo, creo que incluso un muy

02:15.380 --> 02:22.490
conservadora que sólo carga la escena y se asegura de que 1 o 2 elementos clave están ahí, sin excepciones.

02:22.490 --> 02:27.400
Thrown es una fantástica fruta al alcance de la mano que aportará valor a tu equipo.

02:27.410 --> 02:28.580
Echemos un vistazo dentro.

02:28.580 --> 02:29.240
Unidad.

02:29.510 --> 02:31.910
Aquí estamos dentro del núcleo del proyecto de ejemplo.

02:31.940 --> 02:33.440
Ahora en la ventana del ejecutor de pruebas.

02:33.440 --> 02:35.450
Aquí tenemos muchas categorías diferentes.

02:35.450 --> 02:42.140
Tengo seleccionada la carga de escena y puedes ver que tenemos algunas pruebas de editor y de tiempo de ejecución.

02:42.140 --> 02:48.380
Porque las escenas y las cosas que estoy eligiendo para probar aquí están relacionadas con el comportamiento típico del tiempo de ejecución

02:48.380 --> 02:50.240
de unity Monobehaviours.

02:50.240 --> 02:54.470
Por ejemplo, me voy a centrar sólo en la prueba de tiempo de ejecución, la prueba de modo de reproducción.

02:54.470 --> 02:56.470
Así que voy a desactivar la prueba de modo de edición.

02:56.480 --> 02:58.220
Echemos un vistazo a lo que tenemos aquí.

02:58.220 --> 03:04.970
Así que lo que vamos a hacer es cada vez que ejecutemos esta prueba en particular, vamos a comprobar que

03:04.970 --> 03:12.500
la escena de introducción tiene un héroe dentro de ella que simula nuestro personaje principal del juego, que la escena de introducción

03:12.500 --> 03:15.020
se carga sin lanzar ninguna excepción.

03:15.260 --> 03:17.720
Y luego repetiremos eso para la escena del juego.

03:17.930 --> 03:23.480
Podrías imaginar que tienes una prueba que puede probar todas tus escenas de una manera sistemática.

03:23.480 --> 03:30.950
Lo que he elegido hacer aquí es estructurar una prueba para cada una de las funcionalidades que queramos, una

03:30.950 --> 03:36.770
para el héroe, uno para las excepciones, y hacer eso para cada una de las escenas, todo dentro de una prueba

03:36.770 --> 03:37.310
estructura.

03:37.310 --> 03:40.610
Pero puedes decidir cómo escalarlo dependiendo de lo que tú y tu equipo queráis hacer.

03:40.640 --> 03:41.840
Déjame hacer estas pruebas.

03:41.840 --> 03:42.920
Todo pasa.

03:42.920 --> 03:44.690
Puedes ver que tenemos algo de tráfico en la consola.

03:44.690 --> 03:45.920
Echemos un vistazo al código fuente.

03:45.920 --> 03:50.990
Así que en esta prueba estoy diciendo que la escena uno intro, que es el nombre de una de las escenas en el

03:50.990 --> 03:57.710
proyecto, vamos a suponer que el héroe no es nulo cuando se carga la escena, a diferencia de algunos de nuestros más pequeños

03:57.710 --> 04:01.280
pruebas unitarias, cargando la escena y haciéndolo bien y bonito.

04:01.280 --> 04:02.540
Teniendo un buen flujo de trabajo aquí.

04:02.540 --> 04:06.140
Esto implica cierta configuración, así que vamos a hablar de lo que es la configuración.

04:06.140 --> 04:09.380
Lo primero es que voy a escuchar el gestor de escenas para ver.

04:09.380 --> 04:14.840
Hey se ha cargado la escena que quiero cargar, entonces voy a cargar la escena aquí.

04:14.840 --> 04:21.830
He creado una variable estática para los nombres de las escenas, sólo para que me sea más fácil aislarlas y

04:21.830 --> 04:23.360
actualizarlos si lo necesito.

04:23.390 --> 04:26.090
Entonces me sentaré aquí y esperaré mientras se carga la escena.

04:26.090 --> 04:31.580
Esto asegura que no asumo ni afirmo nada al respecto hasta que la escena esté cargada.

04:31.580 --> 04:33.020
Sucede bastante rápido.

04:33.020 --> 04:37.640
Entonces aquí podré hacer cualquier introspección en la escena.

04:37.670 --> 04:43.700
Una cosa muy poderosa que puedo hacer es mirar a través de toda la escena después de que se carga, y buscar cualquier

04:43.700 --> 04:45.320
existencia de un script dado.

04:45.320 --> 04:52.730
Si tuviera un prefab llamado héroe o un script de héroe individual en esa escena, esto devolvería un valor.

04:52.730 --> 04:57.020
También podría obtener una lista de todos los héroes o de todos los enemigos.

04:57.020 --> 04:59.840
Si tengo múltiples, entonces puedo iterar sobre ellos y.

04:59.940 --> 05:01.670
Y realizar la prueba que quiera.

05:01.680 --> 05:03.960
Estoy haciendo una prueba a propósito.

05:03.990 --> 05:06.780
Todo lo que hago es asegurarme de que el héroe no es nulo.

05:06.810 --> 05:14.100
Si, por ejemplo, un artista o un diseñador de niveles borrara accidentalmente el héroe en una escena determinada, esto

05:14.100 --> 05:14.730
fallaría.

05:14.730 --> 05:17.680
Y era una buena prueba sólo para asegurarse de que los elementos están ahí.

05:17.700 --> 05:23.550
Puedes imaginar que un sistema dentro de unity puede ser bastante complejo y tus escenas pueden ser bastante complejas

05:23.550 --> 05:24.000
también.

05:24.030 --> 05:26.820
Puedes tener cientos o incluso miles de objetos.

05:26.820 --> 05:33.060
Puede que no quieras necesariamente hacer una aserción para cada uno de ellos, pero dependiendo de cómo

05:33.060 --> 05:38.460
organizas tu escena, puedes ser capaz de comprobar algunas cosas simples como el fondo, la interfaz de usuario,

05:38.490 --> 05:45.360
el héroe, y una lista de enemigos que por sí sola prueba fácil de realizar con sólo añadir algunas líneas aquí, y

05:45.360 --> 05:50.340
entonces usted tiene más confianza que a medida que usted y su equipo de trabajo en el código y hacer commits a su versión

05:50.340 --> 05:53.790
que nadie está rompiendo algo accidentalmente.

05:53.790 --> 06:00.630
Recuerda que lo que estás haciendo ahora es reproducir la escena o todas las escenas y hacer

06:00.630 --> 06:05.780
que no detectas visualmente que algo falta o está roto.

06:05.790 --> 06:07.930
Estar automatizado es mucho, mucho más suave.

06:07.950 --> 06:09.290
Echemos un vistazo a las otras pruebas.

06:09.300 --> 06:16.080
Aquí tenemos uno que carga la escena, y se asegura de que no lanza ninguna excepción.

06:17.110 --> 06:20.960
Luego repetimos las mismas dos pruebas para el resto de la escena.

06:20.980 --> 06:25.630
Ahora echemos un vistazo a la parte superior de esa escena de pruebas y veamos algunas de las configuraciones adicionales que hay

06:25.660 --> 06:26.230
necesarios.

06:26.260 --> 06:32.410
Una cosa es que debido a que estamos cargando escenas con código, estas deben existir en la configuración de unity build.

06:32.410 --> 06:35.530
Eso es cierto tanto en producción como en pruebas.

06:35.560 --> 06:41.110
Ahora usted y su equipo podrían simplemente asegurarse de que siempre se actualiza y hacerlo manualmente dentro de la configuración de producción.

06:41.110 --> 06:41.950
editor de unity.

06:41.950 --> 06:44.950
Y vamos a echar un vistazo a cómo lo haríamos ahora aquí dentro de la unidad.

06:44.980 --> 06:46.840
Vas a File Build Settings.

06:46.840 --> 06:50.020
Y aquí arriba está la lista de todas las escenas que necesitas.

06:50.050 --> 06:53.710
Si te olvidas de añadir una, la prueba fallará.

06:53.710 --> 06:59.380
Así que en lugar de requerir que recordemos este paso en particular, que está bien si su equipo quiere hacer

06:59.380 --> 07:04.030
eso, lo estoy automatizando y añadiendo dinámicamente las escenas que queremos añadir.

07:04.060 --> 07:10.990
Así que la forma en que hago eso, yo uso algunas interfaces existentes que la unidad pone a disposición aquí para cuando

07:10.990 --> 07:13.930
la construcción se está configurando y cuando la construcción se está limpiando.

07:13.960 --> 07:18.550
Estos son diferentes de algunos de los atributos que hemos visto en las pruebas anteriores, pero entonces no voy a entrar en

07:18.550 --> 07:19.720
la complejidad aquí.

07:19.720 --> 07:25.960
Pero sólo sé que en la configuración, lo que estoy haciendo es añadir nuestras dos escenas de prueba a la configuración de la construcción.

07:26.290 --> 07:32.020
Y aquí abajo en la limpieza, estoy revirtiendo o eliminando las dos que se han añadido.

07:32.230 --> 07:35.890
Ahora hay un montón de maneras diferentes que usted podría organizar eso, pero usted puede echar un vistazo en el código fuente

07:35.890 --> 07:37.520
y ver si hay algo más que quieras hacer allí.

07:37.540 --> 07:44.800
Aquí abajo en la prueba, estoy asumiendo que soy capaz de llamar a cargar escena en cualquiera de las escenas comprobables

07:44.800 --> 07:46.150
y estamos listos.

07:46.150 --> 07:47.110
Y ya está.

07:47.140 --> 07:52.660
Es bastante fácil de configurar, y si te basas en lo que se da aquí en el proyecto de ejemplo, podrás

07:52.660 --> 07:57.750
encontrar rápidamente el éxito en ser capaz de probar sus escenas para la producción de su juego.

07:57.760 --> 07:58.660
Gracias.
