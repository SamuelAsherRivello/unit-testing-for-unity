WEBVTT

00:00.290 --> 00:04.310
Hola y bienvenidos a la serie de talleres de pruebas unitarias para Unity.

00:04.460 --> 00:06.770
Aquí vamos a ver los prefabricados.

00:06.800 --> 00:10.940
Ahora, hasta este momento en el curso no hemos probado prefabricados.

00:10.970 --> 00:16.460
En los momentos en los que sí he querido probar algunos monobehaviours, los he creado desde cero usando código

00:16.460 --> 00:18.080
como se muestra en los vídeos anteriores.

00:18.080 --> 00:24.440
Pero, por supuesto, un bloque de construcción fundamental en el desarrollo de juegos unity es el prefab.

00:24.680 --> 00:32.300
Prefabs le permiten reunir diversos activos y la funcionalidad, ponerlos en su proyecto, y

00:32.300 --> 00:38.020
reutilizarlos fácilmente, ya sea arrastrándolos a la escena, ya sea guardándolos en la escena y ahí estarán,

00:38.030 --> 00:40.690
o creándolos dinámicamente con código.

00:40.700 --> 00:43.040
Ahora, ¿por qué querríamos probar estos prefabricados?

00:43.040 --> 00:48.800
Bueno, de una forma muy ligera, imagina que tu juego usa un prefab de personaje en un prefab de enemigo, quizás

00:48.800 --> 00:49.900
múltiples de cada uno.

00:49.910 --> 00:58.280
Puedes tener una prueba unitaria que cree sólo el jugador y valide que no lanza ninguna excepción,

00:58.400 --> 01:04.970
sólo eso te da un poco más de confianza en que el activo funciona bien en el tiempo.

01:04.970 --> 01:10.670
Y como estás colaborando con diferentes talentos no programadores, incluyendo diseñadores de niveles y artistas,

01:10.700 --> 01:14.030
sabes que esos prefabricados no se han roto accidentalmente.

01:14.030 --> 01:17.870
Puedes hacer algunas suposiciones sobre la estructura utilizando una prueba.

01:17.870 --> 01:22.760
Puedes hacer suposiciones sobre los campos serializados y comprobar que están correctamente rellenados, y tú

01:22.760 --> 01:25.400
puede hacer suposiciones sobre el comportamiento, por supuesto, también.

01:25.400 --> 01:31.160
En el ejemplo del personaje anterior, que no utilizaba prefabricados, yo tenía un script de personaje y lo haría

01:31.160 --> 01:36.770
para asegurarme de que podía moverse correctamente por el mundo cuando lo llamaba mover por o mover a la funcionalidad.

01:36.770 --> 01:43.730
Al crear prefabricados complejos con dependencias, podrías llamar a la funcionalidad de esos prefabricados

01:43.730 --> 01:44.300
también.

01:44.300 --> 01:47.990
Ahora, las pruebas pueden cubrir una pequeña unidad de código.

01:48.140 --> 01:54.680
En el mundo ideal tienes pocas líneas y quizás ninguna dependencia hasta un sistema más complejo,

01:54.680 --> 01:59.810
que si sabes lo que estás haciendo cuando estás haciendo tus pruebas unitarias, puedes tener fielmente un

01:59.810 --> 02:06.200
prueba que se ejecuta sobre algunas dependencias, así, y le da cierta garantía de que los sistemas de

02:06.200 --> 02:07.490
funcionan bien juntos.

02:07.520 --> 02:14.120
Un prefabricado es, de hecho, probablemente el más complejo en el extremo de ese espectro, y vas a estar probando

02:14.120 --> 02:14.270
eso.

02:14.270 --> 02:21.560
El prefabricado puede hacer uso de sus propios componentes personalizados así como de componentes unity como rigidbody.

02:21.560 --> 02:26.750
Así que ten en cuenta al configurar estas pruebas que no estás probando un sistema demasiado grande.

02:26.750 --> 02:34.160
Si, por ejemplo, tu personaje héroe utiliza un cuerpo rígido y un componente de vuelo personalizado, puede que quieras

02:34.160 --> 02:38.060
probar el componente de vuelo personalizado por separado en su propia prueba unitaria.

02:38.060 --> 02:42.980
Recuerda, siempre hay beneficios en ser capaz de dividir y tener menos dependencias en tu unidad.

02:42.980 --> 02:43.460
pruebas.

02:43.460 --> 02:49.550
Pero dicho esto, podemos crear una prueba que se ejecute en un prefabricado completo, incluyendo sus dependencias

02:49.550 --> 02:50.240
si lo consideramos oportuno.

02:50.240 --> 02:52.370
Veamos un ejemplo de esto en el código.

02:52.940 --> 02:54.640
Aquí estamos dentro de unity.

02:54.650 --> 02:59.720
Si miro en la ventana del ejecutor de pruebas aquí en la categoría, ya lo tengo configurado como prefabricado.

02:59.720 --> 03:05.510
Y aquí abajo en esta carpeta podemos ver que hay un ejemplo prefabricado.

03:05.510 --> 03:10.520
Vamos a seguir adelante y abrir la escena y echar un vistazo a la escena en ejecución Voy a seguir adelante y ejecutar

03:10.520 --> 03:10.850
lo.

03:13.540 --> 03:18.130
Así que cuando ejecuto esa escena, una bola cae con la física y se desliza por el suelo.

03:18.160 --> 03:21.420
No es ese comportamiento en particular el que nos interesa.

03:21.430 --> 03:27.760
Sólo quería poner un prefabricado enemigo en la escena, ver que existe en el código de producción aquí.

03:27.760 --> 03:34.750
Simulando esto sería su menú de juego más grande, configuración, escena, lo que sea, y tener algunos

03:34.750 --> 03:39.730
dependencia de uno o más comportamientos mono en un prefabricado.

03:39.940 --> 03:43.340
Así que con esto preparado, echemos un vistazo a cómo probarlo.

03:43.360 --> 03:49.480
Ahora en esta escena tengo una prueba de editor y también una prueba en tiempo de ejecución.

03:49.480 --> 03:55.450
Pero como esto está probando más el comportamiento de unity y hemos visto que los comportamientos de mono, por ejemplo, son

03:55.450 --> 03:57.400
algo que quieres probar sólo en tiempo de ejecución.

03:57.400 --> 03:59.470
Centrémonos sólo en la prueba del modo de reproducción.

03:59.470 --> 04:00.820
Así que voy a desmarcar esa.

04:01.600 --> 04:06.820
Y aquí tengo algunas cosas diferentes que podemos hacer cuando se ejecuta esta prueba de modo de juego, compruebo que el enemigo

04:06.820 --> 04:08.380
no sea nulo.

04:08.410 --> 04:10.420
Esa es la cantidad de script de comportamiento.

04:10.450 --> 04:16.330
Entonces compruebo que el objeto del juego sobre el que está no es nulo, y generalmente asumimos que si

04:16.330 --> 04:18.460
el enemigo existe, el objeto del juego también.

04:18.460 --> 04:20.740
Pero esto es sólo una prueba más de ello.

04:20.740 --> 04:23.410
Y finalmente podemos comprobar que el cuerpo rígido no es nulo.

04:23.410 --> 04:27.670
Así que aquí estamos comprobando sobre todo la estructura de lo que tenemos allí.

04:27.670 --> 04:33.940
Pero también podríamos comprobar los campos serializados, los valores públicos inicializados, algunas de las funcionalidades de comportamiento

04:33.940 --> 04:35.230
llamando a los métodos en él.

04:35.230 --> 04:36.430
Puedes hacerlo por tu cuenta.

04:36.430 --> 04:41.350
Expande lo que ves aquí y añade tu propia funcionalidad de pruebas sobre el nuevo código de producción.

04:41.380 --> 04:44.200
Mójate los pies con eso y mira cómo te va.

04:44.230 --> 04:46.120
Echemos un vistazo al código fuente.

04:46.270 --> 04:47.620
Aquí está la prueba del modo de juego.

04:47.620 --> 04:52.090
Voy a echar un vistazo a las tres pruebas, y luego hablar de la configuración que se necesita específicamente para

04:52.090 --> 04:52.900
prefabricados.

04:52.900 --> 04:55.270
Aquí tenemos una prueba muy simple.

04:55.300 --> 04:58.960
Tenemos el paradigma arrange, act y assert que estamos acostumbrados a ver.

04:58.960 --> 05:03.070
Observa que el arrange y el act están sospechosamente ausentes aquí.

05:03.070 --> 05:06.820
Y todo lo que estoy haciendo es comprobar que el enemigo no es nulo.

05:06.820 --> 05:10.210
En la siguiente prueba ese objeto de juego enemigo no es null.

05:10.210 --> 05:13.240
Y por último, ese rigidbody enemigo no es null.

05:13.270 --> 05:14.620
En el caso del cuerpo rígido.

05:14.620 --> 05:20.830
Ese es un campo público que he creado y está serializado, y asumo que un prefab correctamente configurado

05:20.830 --> 05:25.150
ya tendría ese campo serializado declarado y poblado.

05:25.150 --> 05:26.560
Así que todo pasa.

05:26.560 --> 05:27.760
Así que todo va bien.

05:27.760 --> 05:29.800
Ahora, ¿cómo conseguimos el prefabricado aquí?

05:29.800 --> 05:31.900
Fíjate que estamos usando el modo de prueba de reproducción.

05:31.900 --> 05:37.840
Como hemos visto, una prueba en modo reproducción se ejecuta en su propia escena vacía creada dinámicamente.

05:37.840 --> 05:41.680
Así que cualquier cosa que queramos hacer en ella, tenemos que configurarla manualmente nosotros mismos.

05:41.680 --> 05:46.000
Así que vamos a tomar ventaja de la fijación de texto y algunas de las cosas que podemos hacer con la prueba

05:46.000 --> 05:46.300
fixture.

05:46.300 --> 05:53.230
Así que una de las cosas que podemos hacer aquí es que vamos a establecer una referencia a cuánto tiempo de retraso que permite

05:53.230 --> 05:57.340
que se instancie el prefabricado, la ruta al prefabricado enemigo.

05:57.340 --> 05:59.710
Fíjate que la ruta empieza por assets.

05:59.710 --> 06:01.300
Eso va a ser importante en un segundo.

06:01.300 --> 06:03.520
Y luego tengo una referencia al enemigo privado.

06:03.550 --> 06:09.010
Ahora, además del atributo de prueba que hemos utilizado bastante, hay un atributo de configuración que

06:09.010 --> 06:11.860
se ejecutará una vez antes de cada método de prueba.

06:11.860 --> 06:19.570
Así que aquí lo que queremos hacer antes de cada método de prueba es simplemente cargar ese activo en la ruta que.

06:20.380 --> 06:26.560
Obtenemos una referencia al enemigo sentado en ese objeto de juego una vez que lo instanciamos, y luego esperamos un

06:26.590 --> 06:31.450
tres segundos o alguna cantidad arbitraria de tiempo, en realidad nos damos cuenta de que no necesita tres segundos.

06:31.450 --> 06:33.250
Probablemente necesita un fotograma.

06:33.250 --> 06:35.590
Así que podrías experimentar con lo que haces ahí.

06:35.890 --> 06:38.800
Sólo espero hasta, creo, medio segundo aquí.

06:38.830 --> 06:44.260
La razón por la que necesitamos eso es que he visto que cuando haces game object dot instantiate, necesitas

06:44.260 --> 06:50.080
esperar un fotograma entero para que el awake sea llamado y el start sea llamado en ese objeto de juego.

06:50.080 --> 06:55.420
Así que dependiendo de lo que estés haciendo en ese awake y ese start en tu monobehaviour, puede que necesites

06:55.420 --> 06:56.800
esperar un poco más.

06:56.800 --> 07:03.550
Supongo que esperar 2 o 3 fotogramas en todas las situaciones será suficiente.

07:03.550 --> 07:08.230
Pero aquí sólo estoy haciendo medio segundo y puedes jugar con eso y ver si satisface tus necesidades.

07:08.230 --> 07:10.300
Luego aquí abajo uso el atributo Teradyne.

07:10.300 --> 07:13.840
Esto se llama una vez después de cada uno de los métodos de prueba.

07:13.840 --> 07:15.970
En el setup creamos el prefab.

07:16.000 --> 07:17.200
Luego se ejecuta la prueba.

07:17.200 --> 07:19.630
Y en el desmontaje lo que hago es limpiarlo.

07:19.630 --> 07:26.470
Ahora, como alternativa, puedes hacer el setup y el teardown equivalentes dentro de cada

07:26.470 --> 07:27.400
prueba individual.

07:27.400 --> 07:29.050
Si quisieras hacerlo, podrías.

07:29.080 --> 07:33.190
Pero me estoy aprovechando de poder reutilizar algunos métodos existentes aquí.

07:33.190 --> 07:36.520
Así que sólo declaro el setup una vez y el teardown otra.

07:36.520 --> 07:40.270
Y sé con seguridad que van a ser llamados antes y después de cada método de prueba.

07:40.270 --> 07:41.320
Eso es todo.

07:41.320 --> 07:45.190
Echemos un vistazo al script enemigo para ver cómo está configurado.

07:45.190 --> 07:47.590
El enemigo es un mono-comportamiento muy simple.

07:47.590 --> 07:52.390
Realmente no necesito hacer nada para que sea comprobable, pero sólo para tener algo emocionante aquí para

07:52.390 --> 07:53.290
ser capaz de probar.

07:53.290 --> 07:57.940
Tengo un campo serializado de rigidbody, y luego tengo una prueba que asume que está poblada.

07:57.940 --> 08:01.960
Ahora, mirando el código, puedes ver que no hay nada que realmente lo rellene.

08:01.960 --> 08:08.320
Pero si vamos a ver en la unidad y haga clic en el prefabricado, veremos que el prefabricado es lo que hace que la asociación.

08:08.320 --> 08:09.400
Así que vamos a comprobarlo ahora.

08:09.400 --> 08:11.740
Así que aquí en la unidad vamos hacia abajo.

08:11.740 --> 08:13.570
Miramos el prefabricado enemigo.

08:13.570 --> 08:17.860
Y podemos ver aquí a la derecha el prefab tiene un script enemigo.

08:17.860 --> 08:20.380
Y ya tiene el cuerpo rigido declarado.

08:20.410 --> 08:23.110
Si de alguna manera me olvidara de eso.

08:23.110 --> 08:29.140
O tal vez alguien en su equipo rompe este aspecto de la prefabricación, a continuación, vamos a ejecutar las pruebas de nuevo.

08:32.310 --> 08:35.310
Y podemos ver que el cuerpo rígido es null ha fallado.

08:35.310 --> 08:41.680
Este es un ejemplo muy simple de un sistema que funciona y luego se rompe.

08:41.700 --> 08:47.370
Ahora bien, si eres un desarrollador de juegos unity y has trabajado en equipos antes, estoy seguro de que has tenido la experiencia

08:47.370 --> 08:51.810
de que tú o alguien con quien trabajas ha roto accidentalmente un prefab.

08:51.840 --> 08:53.320
Es un flujo de trabajo muy común.

08:53.340 --> 08:56.460
Puede que no veas ningún error en el editor unity.

08:56.460 --> 09:01.200
Puede que incluso puedas jugar al juego, y en ciertas circunstancias, no veas el efecto de

09:01.230 --> 09:06.990
que hasta el momento final cuando ese cuerpo rígido en particular está siendo utilizado o la funcionalidad que es

09:06.990 --> 09:08.130
que falta.

09:08.130 --> 09:13.110
Así que esta es una manera maravillosa de que todos en tu equipo sigan el siguiente flujo de trabajo.

09:13.200 --> 09:19.650
Oye, cada vez que vas a tirar de git y hacer algunos cambios en el nivel de activos, diseño, etcétera,

09:19.680 --> 09:26.940
asegúrate de abrir la ventana del ejecutor de pruebas y simplemente pulsa ejecutar seleccionados o ejecutar todos y ejecútalos todos.

09:26.970 --> 09:28.620
Verás que todo pasa bien.

09:28.620 --> 09:34.800
Luego, antes de confirmar tu trabajo de nuevo, hazlo otra vez y si y cuando hayas notado que alguien confirma

09:34.800 --> 09:40.710
algo que ha pasado las pruebas pero ha roto algo, quieres añadir una nueva prueba de unidad que quizás pruebe

09:40.710 --> 09:47.760
para los enemigos volando script existente o lo que sea la parte infractora, y entonces usted tiene ahora un legado

09:47.760 --> 09:52.320
de un poco más de pruebas que asegura que ese caso particular no vuelva a suceder.

09:52.320 --> 09:56.760
No necesariamente tienes que probar cada cosa del prefabricado por adelantado.

09:56.760 --> 10:01.470
Usted quiere mirar a los flujos de trabajo de su equipo e identificar algunos frutos colgantes para las cosas que podrían

10:01.470 --> 10:03.120
arreglar más fácilmente.

10:03.120 --> 10:04.950
Luego añade algunas pruebas ligeras para eso.

10:04.980 --> 10:10.950
Es muy fácil, una vez que tienes esta prueba aquí para un prefabricado en particular, ejecutarla en un montón de prefabricados,

10:10.950 --> 10:16.650
usted podría, en teoría, tener una secuencia de comandos de prueba que pone a prueba un gran número de diferentes prefabricados, haciendo

10:16.650 --> 10:22.200
asegurándose de que no se produzcan refs nulos, ni se lancen excepciones.

10:22.440 --> 10:26.340
Los objetos del juego existen, el prefab puede ser encontrado.

10:26.340 --> 10:28.920
Podrías hacerlo todo dentro de uno si quisieras.

10:28.950 --> 10:34.530
Lo que estoy mostrando aquí es un script en particular para un prefab en particular, y usted puede decidir cómo

10:34.530 --> 10:35.400
ampliarlo.

10:35.670 --> 10:36.870
Eso es todo.

10:36.870 --> 10:40.410
Hablando de usar prefabricados y pruebas unitarias juntos.

10:40.410 --> 10:41.190
Gracias.
