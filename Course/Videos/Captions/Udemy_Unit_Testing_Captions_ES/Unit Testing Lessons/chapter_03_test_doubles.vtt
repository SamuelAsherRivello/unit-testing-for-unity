WEBVTT

00:00.050 --> 00:02.900
Hablemos aquí de los dobles de prueba.

00:02.910 --> 00:03.970
Daré una visión general.

00:03.980 --> 00:07.940
Vamos a empezar hablando de algunos tipos de pruebas unitarias.

00:07.940 --> 00:12.020
Esta es una forma muy amplia y abstracta de ver tus pruebas unitarias.

00:12.230 --> 00:13.460
Voy a leerlo aquí.

00:13.580 --> 00:21.260
Una prueba unitaria puede ser considerada como solitaria, donde el sistema bajo prueba no tiene dependencias,

00:21.290 --> 00:26.990
o sociable, donde el sistema bajo prueba sí tiene dependencias.

00:27.140 --> 00:34.220
Algo solitario es un poco más puro si recuerdas la lección de las funciones puras, mientras que algo

00:34.220 --> 00:36.200
es sociable es más impuro.

00:36.230 --> 00:37.220
Echemos un vistazo a eso.

00:37.220 --> 00:44.150
En este diagrama de aquí, imaginemos que tenemos algún código de producción y queremos poner algunas pruebas unitarias solitarias

00:44.150 --> 00:47.780
en ellos ahora porque solitario no tiene dependencias.

00:47.810 --> 00:55.150
Observa que nuestra primera prueba va directamente a una y sólo una clase dentro del código de producción.

00:55.160 --> 01:01.970
Y tenemos otra prueba solitaria que prueba algo sólo en otra clase en particular.

01:01.970 --> 01:06.080
Eso sería más del enfoque solitario, más del enfoque puro.

01:06.080 --> 01:10.280
Ahora comparemos eso con una prueba unitaria sociable que vemos a continuación.

01:10.310 --> 01:16.760
Una prueba sociable podría probar un sistema que en sí mismo depende de 1 o 2 sistemas más.

01:16.760 --> 01:22.670
Así que aquí estamos probando algo de un nivel un poco más alto, pero reconociendo que eso va a ser dependiente

01:22.670 --> 01:24.770
de otros sistemas.

01:24.770 --> 01:26.560
Así que tiene algunas dependencias.

01:26.570 --> 01:30.010
Ahora sólo voy a dar un poco de $0.02 aquí.

01:30.030 --> 01:31.520
Es un poco una opinión.

01:31.730 --> 01:36.620
Si haces pruebas de sociabilidad puede que acabes teniendo menos pruebas.

01:36.620 --> 01:42.800
Pero esas pruebas están probando conceptos de más alto nivel con más suposiciones y dependencias.

01:43.250 --> 01:49.550
Mientras que si hacemos pruebas unitarias solitarias, puede que tengas un mayor volumen de pruebas porque estás probando

01:49.550 --> 01:51.500
más sistemas individuales.

01:52.080 --> 01:58.650
Probablemente, si estás tratando de tener más pruebas solitarias también, terminarías haciendo más refactorización,

01:58.650 --> 02:02.250
porque probablemente nuestro código de producción está basado por defecto.

02:02.250 --> 02:08.280
Como desarrolladores de unity, pienso en más dependencias, más interoperaciones de sistemas.

02:08.280 --> 02:15.060
Así que si usted comienza a moverse de pruebas sociables, que probablemente son más fáciles de hacer en su base de código existente

02:15.060 --> 02:20.520
y quieres pasar a pruebas solitarias, puede que tengas que refactorizar tus sistemas para que sean

02:20.520 --> 02:22.070
operen de forma más independiente.

02:22.080 --> 02:24.530
Hablemos ahora de lo que son las pruebas dobles.

02:24.540 --> 02:29.610
Un doble de prueba es un objeto que puede sustituir a cualquier objeto real.

02:29.640 --> 02:35.610
Esto puede ayudar a aumentar la pureza de las pruebas unitarias, haciéndolas más solitarias.

02:35.610 --> 02:42.330
Como nuestra imagen aquí insinúa, una prueba doble es algo así como un gemelo para una clase de producción existente.

02:42.330 --> 02:44.610
¿Y cómo de parecidos son esos dos gemelos?

02:44.610 --> 02:48.540
Bueno, depende mucho del tipo de doble de prueba que estemos implementando.

02:48.660 --> 02:50.130
Hay toda una gama.

02:50.130 --> 02:51.510
Ahora recorreré esta tabla.

02:51.510 --> 02:53.910
Aquí están algunos de los tipos de dobles de prueba.

02:53.910 --> 03:00.330
En general, en la parte superior de esta lista es un objeto más tonto que hace menos cosas, y en el

03:00.330 --> 03:03.780
está un objeto más completo que hace más cosas.

03:03.930 --> 03:10.440
Dependiendo de la prueba de la que hablemos, podemos encontrar que uno de estos, cualquiera de

03:10.440 --> 03:12.180
es la mejor solución.

03:12.210 --> 03:17.610
El objetivo no es necesariamente intentar siempre el simulacro o la falsificación.

03:17.640 --> 03:22.050
Cada uno tiene un papel aquí, y dependiendo de lo que estés haciendo, puedes encontrar algún valor.

03:22.410 --> 03:29.220
Así que un dummy es pasar un valor nulo, o un objeto tonto que hace poco o nada.

03:29.220 --> 03:33.570
Y esto se utiliza para la compilación, pero en realidad nunca se llama.

03:33.570 --> 03:38.250
Así que imagina que tienes una clase que necesita tener algo en el constructor, y luego quieres llamar a

03:38.250 --> 03:40.950
un método en esa clase para la prueba.

03:40.980 --> 03:46.020
Siempre y cuando el método que llames no dependa realmente de lo que hayas pasado en el constructor,

03:46.050 --> 03:52.740
estaría bien que pasaras un valor nulo o cualquiera que sea el mínimo que necesites para la compilación.

03:52.740 --> 03:59.130
Podrías pensar en esto como poner sólo lo suficiente para que compile, y luego probar las partes

03:59.130 --> 04:00.230
que todavía funcionan.

04:00.240 --> 04:03.930
Este tiene el menor poder o influencia sobre la prueba.

04:03.960 --> 04:05.670
Efectivamente no tiene ninguna.

04:05.670 --> 04:07.560
Después, está la idea de "stubbing".

04:07.560 --> 04:13.410
En general, en la vida es poner algo temporal que sirva lo suficiente para el propósito.

04:13.410 --> 04:15.180
De ahí viene el término stub.

04:15.180 --> 04:19.260
Así que aquí estamos proporcionando datos falsos al sistema bajo prueba.

04:19.290 --> 04:22.290
Esto es para la compilación como el dummy.

04:22.290 --> 04:26.550
Pero también está relacionado con lo que realmente estás llamando y probando.

04:26.850 --> 04:32.550
Pero la idea de nuevo es poner la cantidad mínima y ser capaz de obtener los resultados que desea.

04:32.580 --> 04:37.050
Y volviendo a los conceptos de las pruebas en solitario.

04:37.050 --> 04:44.400
Si tu sistema tiene una dependencia con un segundo sistema y quieres probarlo, puedes insertar un dummy

04:44.400 --> 04:46.590
o un stub para ese segundo sistema.

04:46.590 --> 04:53.760
De esa manera, tu sistema primario todavía espera y obtiene lo que necesita, pero no estás necesariamente poniendo

04:53.760 --> 04:57.540
el código de producción codificado para esa segunda dependencia.

04:57.540 --> 04:59.550
Y veremos esto en los ejemplos de codificación.

04:59.790 --> 05:01.670
El siguiente es un espía.

05:01.710 --> 05:06.420
Un espía registra cómo se utiliza el sistema bajo prueba.

05:06.450 --> 05:12.840
Así que aquí estás probando si un método en particular es llamado en retorno algo con un poco más de

05:12.840 --> 05:14.730
poder e influencia sobre la prueba.

05:14.730 --> 05:17.550
Continuando aquí está burlándose de los valores.

05:17.550 --> 05:22.560
Así que aquí estás definiendo el sistema bajo prueba y lo que devuelve.

05:22.560 --> 05:24.300
Así que esto tiene una mayor potencia.

05:24.300 --> 05:28.950
Y esto está definiendo no sólo si un método devuelve, sino lo que devuelve.

05:28.950 --> 05:37.980
Y, finalmente, la cocción es cuando se agrega la plena aplicación de no producción y usted tiene el control total para hacer

05:37.980 --> 05:39.180
lo que sea que necesites.

05:39.210 --> 05:45.630
Así que puedes ver aquí en resumen que tienes un menú de selección de tipo de menor potencia, más rápido, más barato

05:45.630 --> 05:50.700
opciones en la parte superior y de mayor potencia, más potente cosas allí al final.

05:50.700 --> 05:55.620
Así que aquí está un fragmento de código que es de antes en esta misma lección secciones.

05:55.620 --> 06:03.570
Y estamos viendo que estamos pasando en cuando creamos esta instancia de la mi sistema también, estamos creando

06:03.570 --> 06:06.540
el constructor y estamos pasando un valor multiplicador.

06:06.840 --> 06:12.150
Luego, cuando llamamos al valor de conversión, imaginemos que estamos haciendo una prueba unitaria en el valor de conversión.

06:12.180 --> 06:18.990
Tenemos esa entrada indirecta porque el valor de conversión no sólo depende del argumento de valor que

06:18.990 --> 06:21.900
estamos pasando, sino de algo más.

06:21.900 --> 06:26.220
Y esto lo consideraríamos no puro o impuro.

06:26.220 --> 06:28.860
Y no es necesariamente un problema.

06:28.860 --> 06:33.270
Pero reconocemos que esto no es tan determinista como podría ser.

06:33.270 --> 06:37.470
También depende del valor del multiplicador.

06:38.320 --> 06:41.170
Ahora, ciertamente podrías probar esto tal cual.

06:41.200 --> 06:44.680
Y cuando veamos el código, veremos que podemos hacer precisamente eso.

06:44.710 --> 06:47.650
Podríamos operar una prueba estándar justo encima de esto.

06:47.650 --> 06:50.590
Pero consideremos qué tipo de refactorización podríamos hacer aquí.

06:50.590 --> 06:54.940
Aquí tenemos una nueva clase para mejorar lo que acabamos de ver.

06:55.270 --> 07:03.280
Aquí estoy pasando algo al constructor, pero en lugar de eso estoy pasando no sólo

07:03.280 --> 07:07.120
un valor, sino una interfaz que contiene ese valor.

07:07.150 --> 07:10.030
Ahora, este es un ejemplo muy simple.

07:10.060 --> 07:16.900
No resuelve necesariamente todos los desafíos, pero en este pequeño paso de bebé, como estamos aprendiendo más,

07:16.900 --> 07:20.530
aprenderemos por qué una interfaz es más útil aquí.

07:21.460 --> 07:26.790
De nuevo aquí abajo en el valor de conversión vamos a usar esa clase de conversión.

07:26.800 --> 07:33.340
Estamos traspasando parte de la responsabilidad aquí de forma que estamos introduciendo un poco más de indirecta

07:33.340 --> 07:35.950
un poco más de dependencia.

07:35.950 --> 07:40.780
Pero vamos a ver de nuevo que porque es una interfaz, vamos a ser capaces de jugar con algo

07:40.780 --> 07:43.780
aquí utilizando una de las bibliotecas disponibles para nosotros.

07:43.780 --> 07:45.850
Veamos cómo podría ayudarnos.

07:45.850 --> 07:53.860
Así que aquí en el verde vamos a utilizar una biblioteca que nos ayudará a crear algunos de los dobles de prueba

07:54.220 --> 07:55.450
en este caso.

07:55.450 --> 07:58.110
Bien que tipo de doble de prueba estamos creando.

07:58.120 --> 08:02.620
Bueno, el lenguaje de la biblioteca sustituta final que estamos utilizando.

08:02.620 --> 08:07.180
Y esa dependencia del sustituto final está incluida en el proyecto de ejemplo.

08:07.180 --> 08:09.550
Y lo veremos en el código de ejemplo.

08:10.240 --> 08:19.120
Lo que el sustituto final puede hacer por nosotros es sustituir punto por y podemos crear una nueva prueba doble basada en

08:19.120 --> 08:20.350
el convertidor I.

08:20.530 --> 08:27.130
Entonces aquí en verde en el mundo de la prueba, sin afectar a ningún código de producción, somos capaces de

08:27.130 --> 08:32.580
definir exactamente lo que el convertidor de prueba doble debe hacer por nosotros.

08:32.590 --> 08:39.670
Así que porque aquí en verde, podemos controlar completamente y simular el comportamiento que queremos.

08:39.700 --> 08:44.230
Estamos reduciendo las dependencias del código de producción.

08:44.530 --> 08:49.540
Estamos moviendo la dependencia aquí mismo a código sólo de prueba.

08:49.540 --> 08:50.950
Y eso es muy útil.

08:50.950 --> 08:56.470
Cuanto más se abrazaría este tipo de conceptos donde su código de producción es lo suficientemente flexible.

08:56.470 --> 08:59.230
En este caso, suficientemente flexible significa interfaces.

08:59.230 --> 09:01.120
Pero hay otras formas de vender eso.

09:01.450 --> 09:09.910
Que sea lo suficientemente flexible para que nuestras pruebas puedan simular falsos stub, más de lo que necesitamos,

09:09.910 --> 09:10.840
mejor.

09:11.170 --> 09:13.540
Entonces lo que hacemos es pasar el convertidor.

09:13.540 --> 09:19.750
Así que comparando con el ejemplo anterior, no estamos pasando en el valor multiplicador de 20.

09:19.780 --> 09:28.420
Estamos pasando un doble de prueba simulado que podemos controlar más íntimamente aquí.

09:28.600 --> 09:33.910
Así que ahora que sabemos en la segunda línea aquí dice convertidor convertir convertir valor.

09:33.940 --> 09:35.940
Hay un lenguaje particular.

09:35.940 --> 09:41.530
Parece un poco extraño si no estás familiarizado con él, pero incluyo enlaces a la documentación para ello.

09:41.560 --> 09:50.470
Lo que estamos diciendo es que si llamamos a convertir valor y pasamos cualquier argumento de tipo int, que es lo que

09:50.470 --> 09:56.080
necesita, siempre va a devolver el valor multiplicado por el multiplicador.

09:56.380 --> 09:57.670
Efectivamente.

09:57.700 --> 10:00.790
Estamos como en caliente en el resultado.

10:00.790 --> 10:07.030
Esperamos la implementación que esperamos sin tener que ir a crear nuestras propias clases de prueba.

10:07.060 --> 10:11.530
Clases ficticias, clases falsas creo que es la mejor palabra.

10:12.070 --> 10:17.230
Y luego aquí abajo en el azul llamamos al mismo viejo sistema dot convert value.

10:17.410 --> 10:25.630
Ahora mirando esto entre el verde y el azul, podemos ver lo suficiente como para que podamos hacer la suposición

10:25.630 --> 10:31.510
que nuestro resultado será igual a 30 porque toda la implementación está aquí.

10:31.600 --> 10:37.840
Así que el azul está realmente probando una cantidad mínima de funcionalidad.

10:38.230 --> 10:42.610
Incluso se podría argumentar que no está probando ninguna funcionalidad en el propio sistema.

10:42.790 --> 10:47.920
Pero de nuevo, estamos jugando con esto y un ejemplo a propósito simple que muestra un simulacro.

10:48.190 --> 10:55.090
Si el valor de conversión estuviera haciendo bastante más, seríamos capaces de influir en parte, pero no en la totalidad de

10:55.090 --> 10:57.970
su implementación usando lo que se muestra en verde aquí.

10:57.970 --> 11:04.060
Pero recuerda que aquí estamos jugando con la idea de movernos entre lo puro y lo impuro, y entre

11:04.060 --> 11:09.730
pruebas solitarias y sociables, y el beneficio de poder mirar estas bibliotecas que nos ayudan a

11:09.730 --> 11:17.560
hacer pruebas dobles es que podemos hacer más dentro de nuestras pruebas unitarias sin tener necesariamente que refactorizar

11:17.560 --> 11:18.850
nuestro código de producción.

11:18.850 --> 11:25.870
Pero creo que a medida que usas el desarrollo dirigido por pruebas y también las pruebas unitarias en general, probando tu código existente...

11:25.870 --> 11:31.690
código de producción y estar abierto a refactorizar tu código de producción si y cuando sea necesario.

11:31.720 --> 11:39.340
Estas son grandes herramientas que puedes usar a lo largo de ese camino, así que puedes ver que reduciendo la complejidad

11:39.340 --> 11:43.960
y las dependencias en su código de producción, obtenemos más unidad de código comprobable.

11:43.960 --> 11:50.320
Pero incluso si usted no hizo eso, tenemos algunas bibliotecas aquí que nos pueden ayudar a hacer mejores tipos de prueba

11:50.320 --> 11:50.860
duplicación.

11:50.860 --> 11:52.420
Así que eso nos da algunas opciones más.
