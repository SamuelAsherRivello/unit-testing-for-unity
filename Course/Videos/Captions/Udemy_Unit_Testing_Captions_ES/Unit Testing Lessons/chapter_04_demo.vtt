WEBVTT

00:00.170 --> 00:03.020
Veamos una demostración de esto en acción.

00:03.020 --> 00:07.400
Vamos a abrir el editor unity, abre el proyecto de ejemplo de nuestro curso.

00:07.400 --> 00:09.740
El mismo proyecto para todo el curso.

00:09.740 --> 00:12.260
Y dentro de él vamos a ver algunas de las escenas.

00:12.260 --> 00:15.620
Tengo un área de funciones puras dentro de las lecciones.

00:15.620 --> 00:23.990
Y veremos un poco más sobre dummy sub, fake mock y spy y podremos compararlos.

00:23.990 --> 00:25.970
Así que aquí estamos dentro de la unidad.

00:25.970 --> 00:30.920
Este es el proyecto de ejemplo del curso utilizado en algunas de las otras lecciones y videos.

00:30.920 --> 00:36.590
Y lo que quiero mostrar aquí, sólo como una breve reintroducción, es que en mi diseño de la derecha,

00:36.590 --> 00:42.850
Tengo el inspector que muestra el activo readme dentro del proyecto, por lo que puede hacer clic aquí y

00:42.860 --> 00:44.840
ver Readme y se muestra aquí.

00:44.840 --> 00:49.580
O puedes ir a Window Unit Testing y abrir readme.

00:49.790 --> 00:57.620
El Léame aquí te da alguna información de alto nivel sobre el proyecto de ejemplo, y también incluye una actualización siempre

00:57.620 --> 01:01.970
lista de lecciones y talleres interesantes.

01:01.970 --> 01:07.280
Así que te darás cuenta de vídeo a vídeo que esto se ve un poco diferente a medida que el curso se amplía

01:07.280 --> 01:08.570
y hay más contenido.

01:08.600 --> 01:11.960
Lo que vamos a ver aquí es la lección de funciones puras.

01:11.960 --> 01:15.200
Así que si hago clic en que se selecciona aquí donde queremos estar.

01:16.060 --> 01:18.430
Entonces abriré el ejemplo de las funciones puras.

01:18.460 --> 01:24.310
Ahora, como con las otras escenas que hemos visto, hay una escena de producción que puedes ejecutar.

01:24.310 --> 01:27.700
No es la parte más interesante, pero empecemos con ella.

01:27.940 --> 01:30.100
Si le doy al play.

01:33.170 --> 01:35.060
En la escena de aquí.

01:35.090 --> 01:37.970
Nos dará un poco de salida de consola.

01:37.970 --> 01:43.760
Así que esto es sólo para reforzar la idea a medida que avanzamos en esto, que hay una escena, hay

01:43.760 --> 01:45.020
código de producción.

01:45.020 --> 01:48.080
En nuestro caso está haciendo cosas bastante pequeñas.

01:48.110 --> 01:50.990
Estamos realmente invitados a mirar la ventana del ejecutor de pruebas de arriba.

01:52.930 --> 01:57.370
La ventana del ejecutor de pruebas aquí nos permite centrarnos en cualquier categoría.

01:57.370 --> 01:59.800
En este caso, estamos viendo las funciones puras.

01:59.800 --> 02:02.530
Y aquí tenemos todas las funciones puras.

02:04.640 --> 02:07.280
Estas son todas las pruebas y todas las pruebas están pasando.

02:07.280 --> 02:11.720
Así que si selecciono el nodo superior aquí y hago clic en Ejecutar Todo, se ejecutarán todas esas pruebas.

02:11.750 --> 02:18.590
Ahora he incluido pruebas en modo edición y modo reproducción para cada lección, cada escena a lo largo del curso.

02:18.590 --> 02:23.480
Y en ciertos casos, creo que es más relevante que nos fijemos en uno u otro.

02:23.480 --> 02:25.900
En este caso, el modo de edición es realmente importante.

02:25.910 --> 02:28.160
¿Por qué es importante el modo de edición?

02:28.160 --> 02:33.830
Porque en este caso específico no estamos usando ninguna característica de tiempo de ejecución como Monobehaviour y otras...

02:33.830 --> 02:35.300
cosas de la libreria unity.

02:35.300 --> 02:37.220
Así que el modo de edición es relevante aquí.

02:37.220 --> 02:42.890
Y además, vamos a estar buscando en la biblioteca sustituto final y que estamos opera editar

02:42.890 --> 02:43.520
solamente.

02:43.520 --> 02:46.310
Así que sólo se puede aplicar que en estas pruebas de modo de edición.

02:46.310 --> 02:48.560
Así que vamos a ampliar la prueba aquí y ver.

02:51.310 --> 02:59.710
Tenemos aquí una prueba pura, una prueba no pura y una prueba avanzada no pura, similar a la teoría de que

02:59.710 --> 03:01.330
vimos en la parte de las diapositivas.

03:01.330 --> 03:03.850
Teníamos el ejemplo puro original.

03:03.850 --> 03:09.820
Entonces pensamos bien vamos a echar un vistazo a un ejemplo no puro que es de alguna manera tiene estas entradas indirectas

03:09.820 --> 03:11.020
o salidas indirectas.

03:11.020 --> 03:15.370
Y entonces el avanzado es una especie de solución evolucionada al problema.

03:15.370 --> 03:21.910
Ahora el no puro incluso después de ser masajeado aquí no es 100% puro.

03:21.910 --> 03:26.400
Así que puede ser útil que veas la prueba pura para reforzar la teoría.

03:26.410 --> 03:35.470
¿Por qué una prueba pura es pura entonces ver el mi sistema número dos como punto de partida para un tipo no refactorizado

03:35.470 --> 03:37.210
de caso de uso problemático.

03:37.210 --> 03:43.810
Y luego mira la prueba avanzada aquí mostrando la avanzada como una especie de solución evolucionada a la misma.

03:44.050 --> 03:46.720
Y esas son todas las opciones que tendrías para ti.

03:46.720 --> 03:49.450
Puedes crear sistemas ciertamente puros en tu base de código.

03:49.450 --> 03:53.260
Puedes crear unos que no sean puros y un poco problemáticos para las pruebas.

03:53.260 --> 03:55.570
Y puede que eso esté bien en ciertas situaciones.

03:55.570 --> 04:02.410
Y luego, si quieres evolucionar, refactorizar y mejorar, haciendo la prueba más solitaria que sociable,

04:02.410 --> 04:05.730
por ejemplo, puedes mirar el avanzado como un modelo allí.

04:05.740 --> 04:08.290
Veamos el código fuente de cada uno de ellos.

04:08.290 --> 04:12.100
Así que vamos a empezar aquí por mirar a la prueba para el sistema puro.

04:12.100 --> 04:12.760
Lo leeré aquí.

04:12.760 --> 04:15.400
La prueba que vamos a convertir el valor.

04:15.700 --> 04:18.040
El resultado suponemos que es 20.

04:18.070 --> 04:22.030
Esperamos que cuando la entrada es dos y diez.

04:22.180 --> 04:24.670
Así que aquí están nuestras entradas ordenadas.

04:24.700 --> 04:26.740
Aquí está pasándolas.

04:26.740 --> 04:28.410
Y aquí está el valor de salida.

04:28.420 --> 04:35.050
Así que de nuevo como vimos en la parte teórica, la razón de que esta es una función pura es que el resultado

04:35.050 --> 04:39.520
depende sólo de la entrada y nada más.

04:39.520 --> 04:41.410
Y no tiene efectos secundarios.

04:41.410 --> 04:45.550
Así que no hay entradas indirectas y no hay salidas indirectas.

04:45.550 --> 04:46.510
Así que eso es puro.

04:46.540 --> 04:48.880
Veamos el código fuente del puro.

04:50.180 --> 04:51.510
Y es bastante simple.

04:51.530 --> 04:55.100
Creo que es idéntico a lo que vimos en las diapositivas, tal vez un poco de ajuste.

04:55.130 --> 04:58.670
Pasamos el int y el multiplicador y lo devolvemos.

04:58.700 --> 05:02.070
No hacemos ninguna otra dependencia no relacionada aquí.

05:02.090 --> 05:03.890
No creamos ningún sistema nuevo.

05:03.890 --> 05:05.870
No nos estamos dirigiendo a ningún otro sistema.

05:05.870 --> 05:08.090
No estamos estableciendo ningún otro valor.

05:08.090 --> 05:09.890
Sólo estamos multiplicando y devolviéndolo.

05:09.890 --> 05:14.020
Y de nuevo, devolver el valor no cuenta como una salida indirecta.

05:14.030 --> 05:15.270
Esta es la salida directa.

05:15.290 --> 05:17.330
Así que esto es lo más puro que se puede conseguir.

05:17.360 --> 05:19.400
Es un ejemplo muy bonito y un buen punto de partida.

05:19.400 --> 05:21.380
Y cuando ejecutamos ese ejemplo aquí.

05:22.890 --> 05:25.530
Vemos que funciona muy bien.

05:25.530 --> 05:26.160
Es verde.

05:26.160 --> 05:26.870
Marca de verificación.

05:26.880 --> 05:28.400
Ahora pasemos al siguiente.

05:28.410 --> 05:30.750
Aquí tenemos una prueba no pura.

05:31.020 --> 05:33.120
Aquí vemos que vamos a convertir el valor.

05:33.150 --> 05:37.140
Asumimos que el resultado es 30 cuando la entrada pasada es tres.

05:37.260 --> 05:43.350
Ahora establecemos un valor de tres y un multiplicador de diez.

05:43.380 --> 05:46.890
Esos dos valores int también se utilizaron en la prueba anterior.

05:46.890 --> 05:51.630
Se utilizan valores ligeramente diferentes, pero se trata de entradas similares.

05:51.630 --> 05:56.490
Pero fíjate como una entrada va aquí y otra aquí.

05:56.490 --> 06:00.570
Así que esta prueba es sobre el valor de conversión.

06:00.570 --> 06:05.610
Así que convertir el valor depende del valor de tres que se pasa.

06:05.610 --> 06:13.470
Y, por desgracia, desde el punto de vista de la pureza también depende del valor del multiplicador que es algo compartido

06:13.470 --> 06:15.780
estado que se pasó aquí arriba.

06:15.840 --> 06:22.380
Ahora puedes imaginar que dependiendo de las necesidades de producción que tengas, podrías tener este tipo de situación.

06:22.380 --> 06:25.620
Podrías tener en el constructor la configuración de algún estado.

06:25.620 --> 06:28.350
Y luego en un método usando parte de ese estado.

06:28.350 --> 06:32.820
Como vemos aquí, también puede tener siete métodos diferentes a una clase.

06:32.820 --> 06:37.500
Y llamar al método uno y al método tres va a afectar al estado.

06:37.500 --> 06:41.220
Cuando finalmente llamemos al método siete, dependerá de si llamamos al tres.

06:41.250 --> 06:44.730
¿Llamaste al cinco, estableciste algunas propiedades públicas, etcétera?

06:44.760 --> 06:46.080
Es muy normal.

06:46.080 --> 06:51.330
En la programación orientada a objetos, es de esperar que las diferentes llamadas a métodos dejen tras de sí algunos

06:51.330 --> 06:52.260
estado compartido.

06:52.710 --> 06:59.490
Todo eso está bien, pero lo consideraríamos impuro y probarlo tiene algunos pensamientos adicionales y

06:59.490 --> 07:00.480
implicaciones.

07:00.480 --> 07:07.830
Así que aquí de nuevo la parte problemática es que tenemos la entrada indirecta.

07:08.280 --> 07:10.410
Echemos un vistazo al código fuente.

07:10.560 --> 07:16.860
Aquí en comparación con la implementación pura he añadido algunas cosas sólo para el proceso académico aquí.

07:17.160 --> 07:19.230
Si el tipo de problemas a resolver.

07:19.230 --> 07:25.350
Una es que estamos almacenando un multiplicador, y otra es que estamos almacenando un último resultado aquí abajo.

07:25.350 --> 07:27.570
Vemos que el último resultado se está estableciendo.

07:27.570 --> 07:35.940
Este es un ejemplo de salida indirecta porque antes de llamar a convertir valor el último resultado no tiene

07:35.940 --> 07:36.960
ningún valor establecido.

07:36.960 --> 07:42.030
Pero después de llamar a convertir valor el último resultado tiene un valor establecido.

07:42.030 --> 07:47.910
Tal vez cambiando de lo que era anteriormente, dependiendo exactamente de lo que el valor y el multiplicador son.

07:47.940 --> 07:54.870
Así que este ejemplo no puro muestra tanto el input indirecto como el output indirecto.

07:54.870 --> 07:56.220
Entrada indirecta.

07:56.220 --> 08:00.270
Porque parte de la entrada viene aquí y se utiliza aquí.

08:01.140 --> 08:05.940
Así que desde el punto de vista de la conversión de valores, sólo el código resaltado aquí.

08:05.940 --> 08:10.170
Algo de lo que va a afectar a la entrada no está resaltado en azul aquí.

08:10.170 --> 08:12.030
De hecho, se fijó antes.

08:12.180 --> 08:16.110
Se podría decir que es problemático desde el punto de vista de la pureza.

08:16.110 --> 08:18.780
Y también tenemos salida indirecta.

08:18.810 --> 08:25.240
No sólo estamos devolviendo un valor que es perfecto y puro, también estamos estableciendo el último resultado.

08:25.260 --> 08:31.500
De nuevo esta es una salida indirecta y se consideraría indeseable desde el punto de vista de la pureza.

08:31.660 --> 08:36.810
No indica que se trata de una pieza problemática de código fuente que no ayudaría a nuestra producción

08:36.810 --> 08:37.470
necesidades.

08:37.470 --> 08:42.960
Ciertamente, usted va a tener algunas situaciones en su código donde usted tiene estas entradas indirectas y

08:42.990 --> 08:44.490
o salidas indirectas.

08:44.820 --> 08:51.270
Pero lo que veo aquí es algo que podría tener algunas implicaciones para nuestras pruebas unitarias.

08:51.270 --> 08:56.970
Así que de vuelta aquí en la unidad de dejar que acabamos de ejecutar que de nuevo voy a pulsar ejecutar ejecuta bien y funciona muy bien.

08:56.970 --> 09:02.190
Luego aquí abajo para nuestro no puro avanzado tomé ese caso de uso problemático.

09:02.190 --> 09:09.660
He actualizado y creado un sistema de ejemplo que tiene algunos de esos problemas resueltos un poco, tal vez no en

09:09.660 --> 09:10.920
100% puro.

09:10.920 --> 09:12.750
Y busqué diferentes maneras.

09:12.750 --> 09:21.000
Así que creé una prueba para simular o dar un ejemplo de algunos tipos diferentes de dobles de prueba que son

09:21.000 --> 09:21.840
se están utilizando.

09:21.870 --> 09:26.670
Primero tenemos el estándar, que no tiene dobles de prueba.

09:26.670 --> 09:29.730
Esta es la imagen del antes.

09:29.760 --> 09:32.760
Entonces usamos un maniquí aquí.

09:32.790 --> 09:35.610
Luego usamos un muñeco aquí.

09:36.690 --> 09:38.610
Usamos un espía aquí.

09:40.310 --> 09:41.870
Usamos un mock aquí.

09:43.050 --> 09:45.270
Y finalmente usamos un fake aquí.

09:45.360 --> 09:47.670
Los pongo en orden aquí.

09:47.790 --> 09:51.930
Lo mismo de la teoría que vimos antes en esa tabla de los diferentes dobles de prueba.

09:51.930 --> 09:56.280
Y está ordenado no de mejor a peor necesariamente o algo así.

09:56.280 --> 10:01.890
Es más de la prueba menos potente doble que es tipo de más barato y más fácil de implementar a la

10:01.890 --> 10:06.920
la prueba doble más poderosa que podría ser la más lenta de crear.

10:06.930 --> 10:13.230
También hace la mayoría de las cosas, y usted va a encontrar que en algunos casos, tener uno de ellos es mejor

10:13.230 --> 10:13.800
que otro.

10:13.830 --> 10:19.740
Dada tu situación particular, no necesariamente querrás usar siempre el falso o usar siempre el

10:19.740 --> 10:20.190
falso.

10:20.220 --> 10:24.210
Estas son un montón de herramientas diferentes que tienes en tu cinturón de herramientas y puedes usarlas.

10:24.210 --> 10:26.880
Así que vamos a repasarlas todas, empezando por la estándar.

10:26.880 --> 10:28.860
Este es el ejemplo estándar.

10:28.860 --> 10:31.590
Este aún no tiene ninguna prueba de dobles añadida.

10:31.590 --> 10:37.350
Y debería parecer familiar porque es básicamente lo que hicimos para el ejemplo original no puro.

10:37.500 --> 10:40.980
Y eso es lo que decimos convertir valor.

10:41.010 --> 10:44.340
El resultado será 40 cuando la entrada es cuatro.

10:44.370 --> 10:47.100
Y aquí ponemos el arrange.

10:47.310 --> 10:49.950
Aquí pasamos el multiplicador.

10:51.050 --> 10:53.060
Luego pasamos el convertidor aquí.

10:53.730 --> 10:56.880
Y nuestra única línea aquí es pasar en valor.

10:56.880 --> 11:02.280
Pero recuerda que también estamos multiplicando el valor por el multiplicador.

11:02.280 --> 11:04.980
Así que tenemos un poco de información antigua aquí.

11:05.610 --> 11:07.280
Sólo para jugar con esto un poco.

11:07.290 --> 11:14.820
Si recordamos la implementación pura original tomó todas las entradas aquí directamente y que sería

11:14.820 --> 11:16.220
más pura.

11:16.230 --> 11:21.600
Pero para el propósito de nuestro aprendizaje, he creado algo que es menos puro para que podamos discutir

11:21.600 --> 11:23.640
para que funcione bien.

11:23.640 --> 11:26.640
Y eso es antes de explorar cualquier prueba de dobles.

11:26.640 --> 11:32.490
Así que cada uno de estos vamos a ir a través de, vamos a ver tipo de añadir más y más potente

11:32.490 --> 11:33.290
dobles de prueba.

11:33.300 --> 11:39.390
Ahora, lo admito, al llegar a este ejemplo que tiene más sentido para el tipo de más tarde

11:39.390 --> 11:43.620
ejemplos, la prueba posterior se duplica simulacro y falso y espiar y esas cosas.

11:43.650 --> 11:48.930
Los falsos no son tan grandes, pero yo quería utilizar realmente el mismo código de producción a través de todos los

11:48.930 --> 11:49.140
ellos.

11:49.140 --> 11:55.380
Así que perdóname que el maniquí y tal vez el que le sigue no son el mejor ejemplo aquí, pero espero que

11:55.380 --> 11:56.810
te sean útiles para aprenderlos.

11:56.820 --> 11:57.930
Aquí está el muñeco.

11:57.960 --> 12:02.220
Lo que estamos haciendo aquí es decir que devuelve uno negativo por defecto.

12:02.220 --> 12:08.670
Así que si paso un valor nulo dos que es el valor ficticio aquí para el convertidor.

12:09.330 --> 12:12.480
Ahora puedes imaginar que la clase se va a romper.

12:12.480 --> 12:13.920
Si pasamos un valor nulo.

12:13.920 --> 12:17.880
Eso significa que la clase es más dura en su dependencia.

12:17.880 --> 12:21.180
A eso probablemente pensarías, hey, no lo hace.

12:21.180 --> 12:24.090
Todas las clases que pases tienen que ser no nulas.

12:24.270 --> 12:27.090
Sí, probablemente en muchos casos, sí.

12:27.090 --> 12:30.210
Pero aquí te he dado un ejemplo y puedes mirar el código fuente.

12:30.240 --> 12:32.730
La clase tomará este valor nulo.

12:32.730 --> 12:33.180
Bien.

12:33.180 --> 12:40.260
Y hay un montón de situaciones en las que poner en null o el objeto más tonto posible de hecho

12:40.260 --> 12:41.010
funcione.

12:41.040 --> 12:49.650
Ahora, probablemente si el convertidor se utiliza en el método bajo prueba, esto arrojaría una ref nula.

12:49.650 --> 12:52.110
Pero a propósito aquí el.

12:52.140 --> 12:57.240
Lo que estamos probando es que el último resultado va a tener un valor particular.

12:57.240 --> 13:01.920
Si estuviera probando el conversor aquí, ese sé que usa el conversor.

13:01.920 --> 13:06.270
Así que tienes que pensar ¿puedo dumpear todo?

13:06.270 --> 13:07.380
Probablemente no.

13:07.380 --> 13:13.080
Probablemente lo que estás pasando va a ser usado en algún lugar para algún estado compartido.

13:13.080 --> 13:15.930
Pero efectivamente vemos que esto pasa con marca de verificación verde.

13:15.930 --> 13:16.920
Así que sabemos que funciona.

13:16.920 --> 13:22.230
Y lo que estamos haciendo es la parte importante para el maniquí es que a veces cuando usted está probando

13:22.230 --> 13:27.150
algo, puede basarse en una dependencia barata y fácil de pasar.

13:27.750 --> 13:28.770
Eso está bien.

13:29.900 --> 13:34.310
Otra cosa que sólo para ver esto, podríamos decir sin mirar el código fuente, podríamos

13:34.310 --> 13:42.230
probablemente asumir que si esto funciona bien, entonces probablemente no depende de lo que estamos pasando en

13:42.230 --> 13:42.900
como null.

13:42.920 --> 13:50.960
Así que es una pequeña pista de que, si bien la creación de esta clase requiere algo que se pasa, que es

13:50.960 --> 13:51.500
algo.

13:51.500 --> 13:54.530
Ya que le estamos dando null probablemente no se utiliza aquí.

13:54.560 --> 13:56.240
De lo contrario fallaría con una ref nula.

13:56.480 --> 13:58.070
Echemos un vistazo al código fuente.

13:58.070 --> 14:01.940
Así que aquí está un ejemplo del código fuente que se utiliza para el resto de las pruebas que vamos a ver

14:01.940 --> 14:02.640
aquí.

14:02.660 --> 14:05.270
Paso ese convertidor y lo almaceno.

14:05.540 --> 14:08.750
También pongo que el último resultado sea uno negativo.

14:08.780 --> 14:14.180
Uno negativo se utiliza a menudo como un valor de tipo esto no se ha establecido todavía.

14:14.180 --> 14:15.560
Por eso lo elegí aquí.

14:15.560 --> 14:16.850
Pero podría ser cero.

14:16.850 --> 14:18.620
Podría ser cualquier valor que desee.

14:18.620 --> 14:25.970
Y supongo que cuando el objeto se crea aquí, me puse que como el tipo de valor no establecido.

14:26.150 --> 14:30.650
Luego aquí abajo, si llamo a convertir valor, lo actualizo correctamente.

14:30.650 --> 14:33.860
Así que puedes pensar en esto como el valor inicializado.

14:33.860 --> 14:35.810
Y esto se está actualizando aquí.

14:35.900 --> 14:40.190
Ahora todo lo que estoy haciendo en la prueba es pasar null para el convertidor I.

14:40.190 --> 14:42.860
Y luego estoy comprobando sólo el último resultado.

14:42.860 --> 14:45.440
Todavía no estoy haciendo una prueba en esta parte de aquí.

14:46.580 --> 14:52.710
Y podemos ver que el último resultado, ya que no depende del convertidor en absoluto.

14:52.730 --> 14:57.590
No dice, por ejemplo, ya sabes, return.

14:59.020 --> 15:00.940
Convertidor punto algo.

15:00.940 --> 15:06.340
Usted sabe que esta línea no lo utiliza en absoluto, que probablemente va a funcionar bien, incluso si el convertidor

15:06.340 --> 15:07.030
es nulo.

15:07.210 --> 15:14.260
Así que mientras exploras tus clases, puedes probar esto y ver qué pasa si paso un null

15:14.260 --> 15:15.830
para una de mis dependencias.

15:15.850 --> 15:17.590
¿No compila?

15:17.590 --> 15:24.100
¿O arroja un valor de referencia nulo, o tiene algún otro tipo de error de operación que muestra que usted

15:24.100 --> 15:26.920
¿tienes una mayor dependencia de lo que estás pasando?

15:26.920 --> 15:31.870
Y eso podría estar bien, pero es algo con lo que jugar aquí mientras aprendes sobre las diferencias

15:31.870 --> 15:33.880
con tus dependencias.

15:35.500 --> 15:38.140
Así que aquí en la prueba vemos que pasaría.

15:38.140 --> 15:39.280
Y funciona negativo uno.

15:39.280 --> 15:40.870
Así que eso es un ejemplo de un maniquí.

15:40.870 --> 15:46.630
Y como he admitido antes no es el mejor ejemplo en estos dos primeros que realmente quería enfocar

15:46.630 --> 15:47.770
en los ejemplos posteriores.

15:47.770 --> 15:48.850
Aquí está el segundo.

15:48.850 --> 15:54.640
Como vemos en el comentario, el doble de prueba que estamos haciendo aquí es un stub, y un stub es un doble de prueba

15:54.640 --> 15:57.490
que está configurado para devolver un valor específico.

15:57.490 --> 15:59.740
Así que este ejemplo es imperfecto.

15:59.740 --> 16:06.130
Voy a admitir que estoy pasando un null, que se parece un poco más a un dummy que antes.

16:06.130 --> 16:13.600
Pero debido a que el valor ficticio pasado en efecto afecta a la prueba.

16:14.250 --> 16:16.350
Porque aquí estoy llamando a convertir el valor.

16:17.040 --> 16:18.930
Yo lo consideraría un stub.

16:19.230 --> 16:26.010
También podrías tener algo como un nuevo, ya sabes, conversor temporal.

16:28.550 --> 16:31.040
Y tal vez que pasa en el valor.

16:31.090 --> 16:35.360
Puedes imaginar que hay diferentes formas de introducir algo temporal.

16:35.360 --> 16:41.300
Pero para mí, en este ejemplo en particular, pasando en un null que es de hecho parte de la llamada a prueba

16:41.300 --> 16:42.110
estructura.

16:42.900 --> 16:43.800
Significa que es un sub.

16:44.190 --> 16:46.280
Esto dará un error.

16:46.290 --> 16:47.490
¿Por qué da error?

16:47.520 --> 16:49.320
Echemos un vistazo al código fuente de nuevo.

16:49.770 --> 16:54.990
Porque si paso null por convertidor y almaceno convertidor como null.

16:55.020 --> 17:01.830
Entonces aquí abajo cuando llame a algo en null, se va a asustar y lanzar una ref nula o algún

17:01.830 --> 17:03.150
otro tipo de excepción.

17:03.360 --> 17:07.140
Y aquí estoy comprobando que efectivamente se lanza.

17:07.410 --> 17:11.270
No me encanta este ejemplo en particular, pero espero que sea útil para aprender.

17:11.280 --> 17:13.500
A continuación veamos el concepto SPI.

17:13.500 --> 17:15.900
Así que la definición aquí es una prueba SPI.

17:15.900 --> 17:20.120
Double es un doble de prueba que confirma que un método fue llamado.

17:20.130 --> 17:23.670
No nos interesa lo que devuelve el método.

17:23.670 --> 17:25.640
Sólo queremos saber que fue llamado.

17:25.650 --> 17:32.430
Así que vamos de menos información menos potente en el ejemplo ficticio y el ejemplo secundario.

17:32.430 --> 17:35.390
Aquí tenemos un poco más de fuerza media.

17:35.400 --> 17:37.280
Sabemos que algo fue llamado.

17:37.290 --> 17:39.020
Así es como funciona.

17:39.030 --> 17:43.700
Usamos la librería n substitute y creamos una sustitución para la interfaz.

17:43.710 --> 17:48.660
Ahora recuerda cuando yo estaba pasando por los ejemplos aquí de hablar acerca de cómo actualizar y refactorizar

17:48.690 --> 17:51.360
tu código de producción para hacerlo más comprobable?

17:51.360 --> 17:55.560
Una de las cosas que hice fue utilizar una interfaz en la refactorización.

17:55.680 --> 18:03.870
Las interfaces son muy útiles en tu código en general para darte un acoplamiento flexible, menos codificado.

18:03.990 --> 18:09.030
Así que es bueno en producción, pero también específicamente para esta biblioteca que hace el mocking.

18:09.760 --> 18:11.590
Y crea el espía para nosotros.

18:11.620 --> 18:22.210
Creará sobre la marcha en esta línea una nueva implementación para el convertidor basada en el convertidor AI.

18:22.210 --> 18:24.640
Así que no tenemos que ir y crear nuestra propia clase ficticia.

18:24.640 --> 18:26.680
No tenemos que crear nuestra propia clase de ejemplo.

18:26.710 --> 18:28.120
Esto lo hace por nosotros aquí.

18:28.120 --> 18:29.440
Y lo pasamos.

18:29.530 --> 18:32.500
Entonces cuando pasamos en null.

18:32.530 --> 18:36.460
Antes no podíamos llamar a convert value, pero aquí podemos llamarlo.

18:36.580 --> 18:39.610
Aquí no nos preocupa lo que se devuelve.

18:39.610 --> 18:42.610
A veces puede ser las necesidades de su prueba y vamos a ver.

18:42.610 --> 18:45.970
En el siguiente ejemplo te interesa saber cuál es el valor de retorno.

18:45.970 --> 18:49.360
Pero aquí sólo queremos saber si algo fue llamado.

18:49.360 --> 18:57.070
Así que estamos haciendo una prueba unitaria que asume alguna estructura dentro del sistema bajo prueba.

18:57.070 --> 18:58.240
Así que llamamos a eso.

18:58.240 --> 18:59.890
Y aquí está la aserción.

19:00.070 --> 19:04.030
Y fíjate que el lenguaje aquí es parte de la librería sustituta final.

19:04.060 --> 19:06.250
Estamos diciendo que el convertidor.

19:06.980 --> 19:09.590
Habremos recibido una llamada.

19:10.010 --> 19:15.110
No el valor uno, sino una llamada al valor conversor.

19:15.740 --> 19:17.100
Lo que tiene sentido.

19:17.120 --> 19:19.220
Si hiciera esto aquí

19:20.980 --> 19:24.760
Podría asumir que ha sido llamado dos veces.

19:25.680 --> 19:27.420
O dentro.

19:27.420 --> 19:33.480
Tal vez haya convertido el valor y asumiría uno.

19:35.860 --> 19:43.060
Y entonces tal vez sé porque soy el autor de este sistema que en realidad llama a algo llamado interno.

19:45.940 --> 19:48.490
O prep.

19:49.120 --> 19:50.500
Sistema.

19:51.070 --> 19:57.430
Podría poner todos los diferentes submétodos que sé que probablemente ocurren cuando llamo a system convert value.

19:57.640 --> 20:02.020
Ahora bien, este es un sistema bastante delgado, por lo que la única suposición que sé que hacer es esta de aquí.

20:02.020 --> 20:04.270
Y vamos a ver por qué podemos asumir que.

20:04.270 --> 20:06.460
Bueno, si miramos el código fuente.

20:07.350 --> 20:10.230
Cada vez que llamo a system convert value

20:10.230 --> 20:16.620
Así que aquí podemos ver que el convert value efectivamente llama al converter dot convert value.

20:16.620 --> 20:18.060
Y lo llama exactamente.

20:18.060 --> 20:25.440
Una vez más, si hubiera tenido más de una llamada, habría tenido que afirmar que convert value fue llamado

20:25.440 --> 20:27.780
dos veces cada vez que pruebo el sistema.

20:27.780 --> 20:29.310
Pero sólo probamos una vez.

20:29.340 --> 20:34.800
Ahora usted puede imaginar que podría tener muchas, muchas, muchas más líneas de código aquí, llamando a varios diferentes

20:35.190 --> 20:37.080
áreas de sus dependencias.

20:37.080 --> 20:42.510
Y puedes volver aquí en la prueba y podrías probarlas todas añadiendo más aquí.

20:42.750 --> 20:49.800
Así que cuando conocí el SPI, pensé, bueno, ¿no es una prueba demasiado débil?

20:49.830 --> 20:55.890
¿No me gustaría saber no sólo que fue llamado, pero algo específico fue devuelto de

20:55.890 --> 20:56.610
la llamada.

20:57.370 --> 21:00.350
Y usted puede hacer eso en el siguiente ejemplo, pero esta es una buena manera.

21:00.370 --> 21:04.480
De nuevo, estamos buscando desde los símbolos menos poderosos a los símbolos de prueba más poderosos.

21:04.510 --> 21:04.780
De acuerdo.

21:04.810 --> 21:07.780
Como acabo de insinuar, el siguiente es la burla.

21:07.780 --> 21:12.620
Y mocking no es sólo si un método fue llamado, sino ¿qué devuelve?

21:12.640 --> 21:15.390
Así que este es el ejemplo que vimos en la teoría aquí.

21:15.400 --> 21:22.810
Lo que he hecho en este caso es utilizar la biblioteca n sustituto para crear sobre la marcha una prueba de sustitución

21:22.810 --> 21:25.450
doble para el convertidor I, igual que la última vez.

21:25.450 --> 21:30.600
Pero aquí estoy añadiendo sobre la marcha algunos detalles de la implementación.

21:30.610 --> 21:37.870
Estoy diciendo que el convertidor dot convert value debe ser capaz de tomar cualquier int, y ser capaz de devolver

21:37.870 --> 21:43.300
el valor multiplicado por el multiplicador en la sección de teoría en las diapositivas vimos este ejemplo exacto.

21:43.300 --> 21:47.800
Y luego aquí abajo se porque el valor multiplicado por el multiplicador.

21:47.800 --> 21:52.570
Si el valor es tres y el multiplicador es diez sería igual a 30.

21:52.690 --> 21:57.730
Así que usted puede ver que lo que esto realmente está probando es esto aquí.

21:57.730 --> 22:04.600
Pero estoy haciendo una suposición que es lo que está bajo prueba que si llamo sistema convertir valor que lo que

22:04.600 --> 22:09.160
que devuelve es el mismo que converter dot convert value.

22:10.100 --> 22:14.810
Ahora, hay un montón de palabras aquí y un montón de terminología confusa reutilizada.

22:14.810 --> 22:17.690
Así que es importante profundizar y mirar el ejemplo.

22:17.690 --> 22:21.560
Pero veamos si realmente hubiera tenido un más uno aquí.

22:21.590 --> 22:29.900
Nuestra prueba fallaría porque mi prueba asume que los sistemas de convertir el valor es exactamente el mismo que el

22:29.900 --> 22:31.760
valor de conversión del convertidor.

22:31.760 --> 22:37.640
Pero si tuviera algo aquí, esto sería considerado algo así como una entrada indirecta.

22:37.640 --> 22:40.160
Así que estamos confirmando que no hay entrada indirecta.

22:40.160 --> 22:42.200
Y la prueba vuelve a pasar.

22:42.200 --> 22:43.790
Así que este es el simulacro.

22:43.790 --> 22:48.680
Y un mock es el doble de prueba que está configurado para devolver valores específicos.

22:48.710 --> 22:55.040
Ahora puedes mirar la documentación del sustituto que he incluido en la parte de enlaces del curso.

22:55.040 --> 22:57.380
Aquí podrás hacer otras cosas.

22:57.380 --> 23:02.750
Quizás quieras decir algo como, voy a simular que si pasas el valor de diez,

23:02.780 --> 23:04.220
devolvería esto.

23:04.220 --> 23:12.770
Pero si usted pasa, si usted tomó en la palabra 15, que podría hacer, ya sabes, veces mil o lo que sea.

23:12.800 --> 23:20.330
Puede haber diferentes circunstancias en las que los argumentos pasados cambien cómo se produce la salida.

23:21.590 --> 23:27.890
Pero este lenguaje aquí argumentos cualquier int es específico de la biblioteca sustituto final.

23:27.890 --> 23:33.320
Y dice bien, no importa lo que pasemos en el valor de conversión aquí va a estar el valor que viene

23:33.320 --> 23:33.680
a la salida.

23:33.680 --> 23:38.510
Y, finalmente, nuestro último nuestro tipo más potente de doble prueba es el falso.

23:38.510 --> 23:40.050
¿Cómo funciona la falsificación?

23:40.070 --> 23:42.920
Bueno, aquí no estoy usando ningún sustituto.

23:42.920 --> 23:45.560
De hecho, no lo estoy usando en absoluto en esta prueba.

23:45.590 --> 23:51.410
Lo que hago en su lugar, y para ser honesto, antes de aprender mucho acerca de los dobles de prueba, esto era realmente un

23:51.410 --> 23:52.400
herramienta común para mí.

23:52.400 --> 23:53.900
No sabía que se llamaba falso.

23:53.930 --> 23:59.750
Hace años, cuando empecé mi viaje de pruebas unitarias, yo sólo pensaba, oh, no puedo utilizar la producción

23:59.750 --> 24:01.640
por alguna razón.

24:01.820 --> 24:08.960
Así que en su lugar voy a crear un montón de pruebas temporales sólo versiones de ciertas dependencias.

24:08.960 --> 24:13.130
Así que en el mundo de las pruebas dobles, esas se llaman clases falsas.

24:13.490 --> 24:15.130
¿Y cómo creo eso?

24:15.140 --> 24:21.620
Bueno, en una clase diferente creas tu propia implementación del falso convertidor o de la forma que yo elija

24:21.620 --> 24:22.580
para organizarlo.

24:22.580 --> 24:26.210
Mi arte se acercará a que justo encima de la prueba en sí.

24:26.210 --> 24:29.870
Creo la implementación falsa de lo que sea necesario.

24:29.870 --> 24:34.790
Así que aquí creo una nueva clase que se utiliza sólo en el caso de la prueba.

24:34.790 --> 24:40.910
No quiero utilizar accidentalmente esto en la producción, así que le doy un título como falso o de prueba o de muestra

24:40.910 --> 24:43.220
o convertidor de ejemplo, algo así.

24:43.220 --> 24:49.430
Pero siguiendo el lenguaje de aquí, falso convertidor e implemento sólo lo suficiente de su funcionalidad para

24:49.430 --> 24:50.180
la prueba.

24:50.210 --> 24:57.080
Ahora veo que algunos desarrolladores de pruebas unitarias crearían este falso convertidor y lo utilizarían en muchas pruebas en el

24:57.080 --> 24:58.070
misma clase.

24:58.100 --> 24:59.420
No hay ningún problema con eso.

24:59.420 --> 25:03.740
No necesariamente tienes que crear uno para cada prueba individualmente.

25:03.740 --> 25:08.780
Pero lo bueno aquí es que sé que necesito implementar sólo lo suficiente para que mi prueba pase.

25:08.780 --> 25:11.870
Así que me da un objetivo muy simple que perseguir.

25:12.680 --> 25:20.750
Así que aquí lo que estoy jugando es que sé que el último resultado va a ser el valor veces diez,

25:20.750 --> 25:23.960
que sólo estoy haciendo mi propia implementación para la diversión de ella.

25:23.960 --> 25:28.550
Así que si paso un valor de cuatro, esperaría que el resultado fuera 40.

25:28.880 --> 25:37.640
Si quisiera jugar con esto y decir 15 aquí, entonces podría actualizar esto a 45 porque 15 veces,

25:37.640 --> 25:42.430
Oh, lo siento, podría actualizarlo a 60 porque 15 veces cuatro sería 60.

25:42.470 --> 25:44.450
Pero volvamos a nuestro ejemplo original.

25:46.040 --> 25:46.640
Ya está.

25:46.790 --> 25:53.900
Así que algo de nota aquí es que cuando paso en el convertidor falso, nuestra clase de producción no necesariamente

25:53.900 --> 25:59.980
conoce el falso convertidor frente a un mock creado por la librería sustituta frente a un dummy.

25:59.990 --> 26:03.740
El código de producción no lo sabe y no necesita saberlo.

26:03.770 --> 26:06.500
Sólo necesita un convertidor I.

26:06.500 --> 26:13.370
Y eso nos da la flexibilidad de poder implementar clases y utilizar la biblioteca de sustitución para

26:13.370 --> 26:14.840
satisfacer nuestras necesidades de prueba.

26:14.840 --> 26:19.930
Si no utilizáramos una interfaz en nuestro código de producción, estaríamos muy limitados.

26:19.940 --> 26:22.850
Así que permítanme reflexionar un poco sobre lo que hemos cubierto aquí.

26:22.880 --> 26:28.100
Vimos un sistema puro que tiene una función pura, y vimos los beneficios para la comprobabilidad.

26:28.190 --> 26:32.240
Luego vimos que acabamos de jugar con la idea de una versión impura de ese sistema.

26:32.240 --> 26:37.430
¿Y cuáles son algunos de los problemas que pueden surgir con la entrada indirecta y la salida indirecta?

26:37.430 --> 26:43.130
Y luego aquí, en la versión avanzada, hemos jugado con todas las diferentes formas en que podríamos trabajar alrededor de

26:43.130 --> 26:47.030
o masajear los desafíos introducidos por tener sistemas impuros.

26:47.030 --> 26:50.930
Hemos pasado por el stub ficticio hasta llegar al falso.

26:50.930 --> 26:58.190
Viendo que podemos tener implementaciones ligeras de una prueba doble hasta escuchar la versión falsa es un completo

26:58.220 --> 27:06.050
clase falsa que estamos utilizando para la prueba sólo necesita la belleza aquí mediante el uso de la interfaz es que nuestra producción

27:06.050 --> 27:13.940
no necesita saber si está en modo test, o qué versión de un doble test se está pasando en el modo test.

27:13.970 --> 27:20.210
el código de producción simplemente funciona elegantemente desacoplado de la complejidad de qué tipo de convertidor I

27:20.210 --> 27:20.570
es.

27:20.600 --> 27:23.210
Nos da muchos ejemplos diferentes con los que jugar.

27:23.210 --> 27:29.240
En general, espero que hayas disfrutado aprendiendo sobre funciones puras y dobles de prueba y viendo el código

27:29.240 --> 27:35.840
aquí que tenemos en producción, así como en nuestras pruebas que masaje y nos permiten aprender para todos los

27:35.840 --> 27:43.670
diferentes maneras en que podemos ayudar a que nuestras pruebas sean más puras y ayudar a que nuestro código de producción sea más

27:43.670 --> 27:49.910
reutilizable con menos efectos secundarios y menos de esos problemas de estado compartido que pueden surgir.

27:49.910 --> 27:50.840
Gracias.
