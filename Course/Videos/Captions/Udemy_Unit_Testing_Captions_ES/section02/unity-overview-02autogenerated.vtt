WEBVTT

00:00.530 --> 00:02.180
La estructura de la unidad.

00:02.210 --> 00:05.090
Este curso está dividido en diferentes vías de aprendizaje.

00:05.120 --> 00:10.670
En teoría, daremos un paso atrás y veremos algunos de los fundamentos del software y del diseño de juegos.

00:10.670 --> 00:16.970
Al hablar del editor, vamos a ver la unidad, la herramienta de edición en sí, que es lo que nosotros como desarrolladores

00:16.970 --> 00:19.070
abrimos y usamos como nuestro software.

00:19.070 --> 00:24.350
Y en las secciones de código, veremos el lenguaje de programación C sharp y cómo se aplica a unity game

00:24.350 --> 00:25.100
desarrollo.

00:25.160 --> 00:26.840
Empecemos con la teoría.

00:26.870 --> 00:34.100
El ciclo de vida del desarrollo de software incluye muchas etapas, que nos llevan desde una idea hasta un producto acabado.

00:34.100 --> 00:40.400
Esto incluye el análisis de requisitos, la planificación del proyecto, el diseño del concepto, etc.

00:40.400 --> 00:43.640
el desarrollo, las pruebas y la implantación.

00:43.640 --> 00:51.080
Aunque Unity es una potente herramienta en muchas de estas etapas, nos centraremos en el uso de Unity en el desarrollo,

00:51.110 --> 00:55.280
pruebas y despliegue dentro del mundo de Unity.

00:55.280 --> 00:57.590
Los conceptos están estructurados de la siguiente manera.

00:57.590 --> 01:01.040
Dentro de un proyecto, tienes una o más escenas.

01:01.490 --> 01:06.500
Dentro de cada escena, tienes objetos de juego con componentes adjuntos.

01:06.500 --> 01:14.030
Esos componentes pueden manejar cosas como el renderizador de malla, el audio Collider cuerpo rígido para la física,

01:14.030 --> 01:17.450
sistemas de partículas, y por supuesto scripts personalizados.

01:17.450 --> 01:21.920
El objeto de juego es una pieza fundamental del rompecabezas dentro de Unity.

01:21.920 --> 01:28.880
Eso es todo lo que es visual y no visual, en el que colgamos nuestros componentes personalizados y de Unity

01:28.880 --> 01:30.380
de Unity.

01:30.410 --> 01:33.650
Echa un vistazo a esta captura de pantalla del juego como ejemplo.

01:34.230 --> 01:39.780
Aquí tenemos una escena de juego que se divide en varios prefabricados diferentes.

01:39.780 --> 01:45.990
Puedes pensar en un prefabricado como un objeto de juego con uno o más componentes que se almacenan para su reutilización.

01:45.990 --> 01:51.450
Por ejemplo, aquí vemos múltiples monedas, cada una con una posición y rotación únicas.

01:51.450 --> 01:58.230
Sin embargo, la moneda también tiene algunas características comunes, tal vez la funcionalidad, la detección de colisiones,

01:58.500 --> 02:05.520
cómo se renderiza, y esas características comunes se mantienen en el prefab al organizar tu proyecto y

02:05.520 --> 02:07.260
decidir la estructura.

02:07.890 --> 02:14.010
Los equipos a menudo eligen entre escenas y prefabricados para la organización de alto nivel.

02:14.040 --> 02:20.010
GameObject es el concepto fundamental dentro de cualquier escena, y aunque puede haber muchos componentes diferentes

02:20.040 --> 02:23.940
en un objeto de juego, el componente de transformación está siempre presente.

02:23.970 --> 02:30.180
El componente de transformación almacena y manipula aspectos de cómo ese objeto se sitúa en el mundo.

02:30.180 --> 02:34.650
Tanto si el objeto tiene gráficos como si no, tiene un objeto de transformación.

02:34.680 --> 02:38.580
El código que utilizamos es el lenguaje de instrucciones del software.

02:38.580 --> 02:43.350
Las raíces históricas de Unity están relacionadas con el proyecto mono.

02:43.380 --> 02:45.600
Esta era una versión de código abierto del.

02:45.900 --> 02:47.130
Net framework.

02:47.160 --> 02:53.760
Todavía verás el término mono usado un poco a través de la API de unity, incluyendo el comportamiento mono.

02:53.760 --> 02:59.610
Mientras que en el pasado unity ofrecía varios lenguajes de programación diferentes, C sharp es la única programación

02:59.610 --> 03:03.810
elección ahora, y aunque unity soporta C-sharp, no depende del.

03:04.020 --> 03:11.250
Net framework, la versión de Unity de C sharp es bastante robusta y cuenta con una gran cantidad de datos diferentes, conceptos

03:11.250 --> 03:12.270
y estructuras.

03:12.270 --> 03:20.130
Los principales espacios de nombres que utilizamos dentro de la unidad es el motor de la unidad de código en tiempo de ejecución, el editor de la unidad de

03:20.130 --> 03:27.630
código en tiempo de edición, y el espacio de nombres del sistema, que incluye una gran cantidad de diferentes funcionalidades no específicamente

03:27.630 --> 03:32.140
relacionada con unity, pero bastante útil, incluyendo matemáticas, bibliotecas, etcétera.

03:32.160 --> 03:36.540
Aquí hay un ejemplo de un script personalizado en C sharp para su uso en unity.

03:36.570 --> 03:39.150
Empezando por arriba vemos las sentencias using.

03:39.150 --> 03:43.920
Estos traen los namespaces que necesitamos usar en este archivo de clase en particular.

03:44.400 --> 03:50.850
Entonces vemos un espacio de nombres que nos ayuda a declarar y organizar donde se encuentra este código en nuestro proyecto.

03:50.880 --> 03:55.710
A continuación, declaramos la clase pública o interfaz que define este tipo.

03:55.710 --> 03:59.070
Fíjate que aquí estamos extendiendo o heredando Monobehaviour.

03:59.100 --> 04:04.550
Ahora, desde este ámbito, podemos acceder a toda la funcionalidad de Monobehaviour también.

04:04.560 --> 04:07.230
Algunas características específicas de unity a destacar aquí.

04:07.260 --> 04:11.400
La habilidad de serializar campos usando el atributo serialized field.

04:11.400 --> 04:18.240
Esto puede tomar un valor público o privado y renderizarlo en el Inspector de Unity para que mientras

04:18.240 --> 04:21.470
el juego en vivo se está reproduciendo, podemos ajustar esa configuración.

04:21.480 --> 04:24.630
Esto ayuda en el diseño de prototipos y jugabilidad.

04:24.630 --> 04:28.350
El comportamiento del monitor viene con muchos eventos clave que puedes aprovechar.

04:28.380 --> 04:35.790
Llamando a uno de tus métodos awake, capturas el evento de cuando ese objeto se despierta por primera vez en el modo

04:35.790 --> 04:36.360
mundo.

04:36.360 --> 04:37.950
Esto ocurre sólo una vez.

04:38.340 --> 04:40.830
Después, el método start es llamado aquí.

04:40.830 --> 04:46.140
Es bueno establecer cualquier dependencia con cualquier otro objeto, y luego el método update es llamado cada

04:46.140 --> 04:47.400
fotograma a partir de entonces.

04:47.400 --> 04:52.170
Este es un buen lugar para hacer lógica de entrada y actualizar gráficos.

04:52.680 --> 04:58.590
Estos son sólo algunos de los eventos o métodos que puedes aprovechar, pero ciertamente estos

04:58.590 --> 05:00.000
son algunos de los más importantes.

05:00.030 --> 05:00.870
Gracias.
