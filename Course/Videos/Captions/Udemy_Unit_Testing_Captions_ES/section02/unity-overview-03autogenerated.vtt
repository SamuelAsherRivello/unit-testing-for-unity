WEBVTT

00:00.140 --> 00:03.740
Los editores son algunas de las principales herramientas que utilizamos en el desarrollo de software.

00:03.770 --> 00:10.100
Cuando desarrollamos juegos con unity, el propio editor de unity es donde hacemos la mayor parte de nuestro trabajo.

00:10.100 --> 00:13.470
Y luego un editor de código separado es donde añadimos el código.

00:13.490 --> 00:19.310
El editor de la unidad se compone de un concepto de un diseño, que es un grupo de diferentes pestañas y acoplado

00:19.310 --> 00:20.150
ventanas.

00:21.040 --> 00:26.830
Y cada una de estas ventanas realiza funciones y nos da más información sobre el juego y el proyecto

00:26.830 --> 00:27.580
que estamos creando.

00:27.580 --> 00:31.840
Aquí tenemos un diseño bastante común con las ventanas más populares y útiles.

00:31.840 --> 00:34.960
La ventana de jerarquía nos muestra los objetos del mundo.

00:34.960 --> 00:38.770
La vista de escena nos da una representación 3D de ese mundo.

00:38.770 --> 00:42.070
También se puede cambiar a 2D para jugar en 2D.

00:42.070 --> 00:48.040
La ventana de proyecto representa la librería de todos los posibles assets en código que podemos introducir en esa escena,

00:48.040 --> 00:54.460
y a medida que seleccionamos sobre diferentes elementos y funcionalidades en estas ventanas, la ventana del Inspector nos da

00:54.460 --> 00:58.390
más detalles y campos serializados de nuestro código.

00:58.390 --> 01:02.230
Se muestran aquí para facilitar la edición en tiempo de edición y tiempo de ejecución.

01:02.230 --> 01:03.640
Veamos esto en acción.

01:03.640 --> 01:06.490
Dentro del editor Houdini, crearé una nueva escena.

01:06.490 --> 01:08.260
Crearé un objeto de juego.

01:08.260 --> 01:14.500
Añadiré un script personalizado a ese objeto de juego, pulsaré Play en Unity y veremos como ese script

01:14.500 --> 01:15.850
se traduce en tiempo de ejecución.

01:15.850 --> 01:21.430
Y luego voy a jugar con los campos serializados dentro del inspector para demostrar cómo funciona.

01:21.430 --> 01:25.690
Los prerrequisitos para este curso incluyen algo de software libre.

01:25.840 --> 01:29.290
Primero, utiliza tu navegador web favorito.

01:30.110 --> 01:35.180
Esto es útil para hacer cualquier investigación adicional que necesites hacer a lo largo del curso.

01:35.710 --> 01:38.380
Por ejemplo, puedes conseguir Chrome de Google.

01:38.380 --> 01:40.990
A continuación, necesitaremos el propio editor de unity.

01:41.200 --> 01:48.430
El editor de la unidad también viene con un editor de código, o puede utilizar cualquier editor de código que te gusta de la

01:48.460 --> 01:54.580
botón Getting Started en la parte superior del navegador, encontramos diferentes opciones y precios para el software unity

01:54.580 --> 01:55.240
paquete.

01:55.240 --> 02:02.200
Las opciones incluyen Unity Personal y Unity Student, ambas gratuitas y recomendadas para su uso

02:02.200 --> 02:03.090
en este curso.

02:03.100 --> 02:08.260
Estos incluyen todas las características y funcionalidades de las que hablamos, y todo lo que necesitarás para

02:08.260 --> 02:09.880
aprender de este curso también.

02:09.880 --> 02:16.600
Cuando descargamos y ejecutamos unity por primera vez en un proyecto abierto y vacío, tendremos ese diseño familiar y

02:16.600 --> 02:19.200
serie de ventanas que vimos antes.

02:19.210 --> 02:20.680
Vamos a crear una nueva escena.

02:20.680 --> 02:24.610
Podemos hacerlo de muchas maneras, pero simplemente archiva Nueva Escena.

02:24.610 --> 02:30.430
Elegiremos la escena básica incorporada y en la jerarquía podemos ver que tenemos la escena básica configurada

02:30.430 --> 02:32.770
con la cámara y la iluminación por defecto.

02:32.770 --> 02:34.330
Vamos a crear un nuevo objeto de juego.

02:34.330 --> 02:38.890
Elegiremos el cubo y luego le pondremos algunos scripts personalizados.

02:38.920 --> 02:44.170
Hay muchas formas de hacerlo, pero elegiremos Game Object, 3D object y Cube.

02:44.170 --> 02:47.680
Ahora podemos ver ese cubo renderizado en la vista del juego.

02:47.680 --> 02:51.970
La vista del juego representa lo que los usuarios finales verán desde la cámara del juego.

02:51.970 --> 02:58.330
Con ese cubo seleccionado en la jerarquía, podemos ver en la ventana del inspector todos los componentes actuales

02:58.330 --> 02:59.200
adjuntos.

02:59.350 --> 03:01.540
Añadiremos un nuevo componente personalizado.

03:06.320 --> 03:10.190
Ahora en nuestra ventana de proyecto, vemos el primer activo que hemos creado.

03:10.930 --> 03:14.920
Podemos hacer doble clic en ese script y abrirlo en el editor de código por defecto.

03:15.600 --> 03:21.090
Cuando creamos un nuevo script y lo abrimos, se nos abre el editor de código por defecto.

03:21.300 --> 03:25.470
Y para empezar, unity incluye un pequeño trozo de código de plantilla.

03:25.500 --> 03:30.510
Eres libre de eliminar las partes que no quieras o necesites y empezar a codificar desde cero.

03:30.900 --> 03:35.190
Copiaré de nuestra diapositiva de scripting y la pegaré en unity.

03:35.220 --> 03:40.920
Tenemos el método awake, el método start, y el método update que se ejecutará en cada frame.

03:41.640 --> 03:45.010
Aquí estoy usando el componente transform para rotar el objeto.

03:45.030 --> 03:48.570
Guardamos nuestro script aquí y volvemos a unity y ejecutaremos la escena.

03:48.600 --> 03:56.070
Puedes ver en tiempo de ejecución que ese código transform rotate dentro del método update está haciendo girar ese cubo.

03:56.070 --> 04:00.160
Además, mientras unity se ejecuta aquí con el cubo seleccionado.

04:00.180 --> 04:04.020
Veo el campo serializado de la velocidad y puedo manipularlo.

04:12.830 --> 04:15.410
Ahora gira mucho, mucho más rápido.

04:24.330 --> 04:25.680
O mucho más lento.

04:28.560 --> 04:35.760
Somos capaces de hacer estos cambios a cualquier campo serializado para que podamos ajustar la sensación de juego o el juego

04:35.760 --> 04:38.370
diseño sin detener la unidad.

04:39.160 --> 04:43.360
Esta es una característica increíblemente poderosa del motor Unity.

04:43.390 --> 04:47.620
El editor unity nos muestra una aproximación de nuestro juego en desarrollo.

04:48.070 --> 04:52.510
Lo mejor es probarlo en una build completa para ver los resultados reales.

04:52.540 --> 04:56.260
Hay muchas formas de hacerlo, pero yo usaré "file build and Run".

04:56.260 --> 05:00.370
Y ahora vemos nuestro proyecto ejecutándose en una compilación independiente.

05:00.400 --> 05:03.550
En mi caso, está configurado para windows.

05:03.580 --> 05:06.280
Eso es todo para una breve visión general de la unidad.

05:06.640 --> 05:09.280
Añadiendo scripts y construyendo el proyecto.

05:10.810 --> 05:18.670
Con esa rápida visión general de la unidad, el editor de Unity y secuencias de comandos, podemos empezar a ver lo poderoso

05:18.670 --> 05:19.510
unity es.

05:19.540 --> 05:22.750
Sólo estamos arañando la superficie con lo que es posible.

05:22.750 --> 05:27.030
Hemos revisado el editor teórico y la codificación dentro de Unity.

05:27.040 --> 05:33.130
Hemos visto el objeto de juego es un concepto fundamental que prefabs y escenas se utilizan para alto nivel

05:33.130 --> 05:38.860
organización en su proyecto, y que mediante la creación de una clase y la extensión de monobehaviour, obtenemos mucho

05:38.860 --> 05:40.750
de funcionalidad fuera de la caja.

05:40.750 --> 05:47.050
A continuación, vamos a dar un paso atrás de los detalles de la unidad y ver algunos conceptos de diseño de software.

05:47.050 --> 05:55.960
Veremos los principios de diseño, patrones de diseño, y UML o Lenguaje Unificado de Modelado para diagramación.

05:55.960 --> 05:57.610
nuestros conceptos y planes.

05:58.210 --> 05:59.080
Muchas gracias.
