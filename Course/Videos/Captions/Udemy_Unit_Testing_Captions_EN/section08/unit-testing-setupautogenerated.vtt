WEBVTT

00:00.150 --> 00:03.750
Set up for the test runner window and test classes.

00:03.750 --> 00:07.380
The source code for the test framework is available through the package manager.

00:07.380 --> 00:14.580
You can add the package searching for test framework, import the test framework and optionally import

00:14.580 --> 00:15.270
code coverage.

00:15.270 --> 00:19.980
Tooling The Unity Test framework includes all the libraries needed to test your CE code.

00:19.980 --> 00:25.830
Now, as an individual or a team, if you're new to testing, you don't have to test all of your code

00:25.830 --> 00:26.670
at once.

00:26.670 --> 00:32.550
You can slowly, over time start testing the more of your code that is covered with tests, the better

00:32.550 --> 00:37.740
you'll have more confidence some ways you can integrate it into your team that's nice and easy.

00:37.860 --> 00:44.670
Are adding tests only for new features or add testing to key systems before a major refactor.

00:44.670 --> 00:48.780
And a great way to get started is testing just during bug fixes.

00:48.780 --> 00:55.200
If a user reports a bug, you first replicate the existence of the bug with a failing test.

00:55.200 --> 00:57.930
Then you fix the code and the test passes.

00:57.930 --> 01:00.690
You can leave this test behind as a legacy.

01:00.690 --> 01:03.420
So you're sure that that bug doesn't return in the future?

01:03.420 --> 01:08.880
The concept of code coverage refers to how much of your code base is covered with tests.

01:09.150 --> 01:16.680
If you have one class and three methods in your entire project and all three of them have tests, then

01:16.680 --> 01:18.390
you have 100% coverage.

01:18.390 --> 01:21.120
Generally speaking, the higher the coverage, the better.

01:21.120 --> 01:27.390
You can open up that code coverage window, run your tests, and you get robust results showing you

01:27.390 --> 01:32.280
not just the percentage per class and system, but within every class.

01:32.280 --> 01:36.900
You get a line by line readout of which methods have coverage and which don't.

01:37.320 --> 01:38.430
It's very useful.

01:38.430 --> 01:43.770
You can track how much of your code is being tested, locate any vulnerabilities you have during your

01:43.770 --> 01:48.840
testing process, and also monitor your increasing coverage over time.

01:48.840 --> 01:54.930
With those libraries installed, you can create your first test, open up the test run window, create

01:54.930 --> 02:00.510
a test folder, and your assets create your first class and your first method in that class.

02:00.510 --> 02:05.820
At that point, those tests will show up in the test run or window where you can click, run and see

02:05.820 --> 02:06.450
them execute.

02:06.450 --> 02:09.180
Here's an example of a test class with a test method.

02:09.300 --> 02:11.100
Notice it looks like pretty normal.

02:11.100 --> 02:16.980
C Sharpe The test attribute shown there in the square brackets is the secret sauce.

02:16.980 --> 02:22.380
Here, the system looks for any methods marked with that attribute to consider it a test.

02:22.380 --> 02:26.730
As I mentioned, testing is an art form and there's many different ways to approach it.

02:26.730 --> 02:32.040
A nice device I use is within each method to divide it up into three sections.

02:32.610 --> 02:35.310
Arrange, act and assert.

02:35.460 --> 02:39.960
In arrange you do one or more lines that's required to set up the test.

02:39.960 --> 02:45.750
In the act portion, you execute whatever it is that's specifically related to the test, and then you

02:45.750 --> 02:46.560
do the assert.

02:46.560 --> 02:49.530
Asserting means to assume something is true.

02:49.530 --> 02:52.410
So the testing framework comes in assert library.

02:52.410 --> 02:55.920
Imagine we have a custom math system that allows you to add two numbers.

02:55.920 --> 02:56.550
Together.

02:56.550 --> 03:03.930
We could assert that the sum of five plus ten equals 15, and we'd consider that a successful test.

03:04.050 --> 03:06.200
We'd run it and see that it passes.

03:06.210 --> 03:07.650
Let's see this in action.

03:07.650 --> 03:10.620
I'll open up a unity project that's got a test ready.

03:10.710 --> 03:14.010
We'll take a look at how it works and run the test.

03:15.110 --> 03:17.630
Here we are in an empty unity project.

03:17.630 --> 03:20.360
I'll begin by setting up the test framework.

03:20.510 --> 03:22.370
So I'll open the package manager.

03:26.970 --> 03:30.980
The package manager shows which packages are already installed.

03:30.990 --> 03:36.660
It's possible that the project you begin with already has the test framework added.

03:37.390 --> 03:40.070
But if it doesn't, here's how you can add it yourself.

03:40.090 --> 03:44.890
Search in the Unity Registry for test framework and install the latest version.

03:44.890 --> 03:52.630
Next for optional additional features, search the Unity Registry for code coverage and install code

03:52.630 --> 03:54.400
coverage has some optional samples.

03:54.400 --> 03:55.870
I won't install them here.

03:56.760 --> 04:02.160
Now reviewing the packages we have in the project, we see both the test framework and optionally if

04:02.160 --> 04:04.160
you chose to install IT coding coverage.

04:04.170 --> 04:07.290
Now this project is fully compatible to have unit testing.

04:09.140 --> 04:09.860
To get started.

04:09.860 --> 04:11.630
We'll open up the test runner window.

04:12.050 --> 04:16.340
The test runner window has two tabs, edit mode and play mode.

04:16.580 --> 04:18.200
Because we have no tests added.

04:18.230 --> 04:23.210
The window is very helpful and offers some clickable creation options to make tests for us.

04:23.240 --> 04:26.690
In a later demo, I'll show how to create tests from scratch.

04:27.050 --> 04:30.260
For now, I'll just paste one in that I have already prepared.

04:31.220 --> 04:35.960
The testing shown here was pasted in from the Mini MVCs sample project.

04:35.960 --> 04:36.920
For the course.

04:36.920 --> 04:40.450
To help us focus, I removed everything except the test we want to look at.

04:40.460 --> 04:45.130
Let's explore the test, run our windows, starting with the edit mode here in the edit mode tab.

04:45.140 --> 04:49.580
By default, all of the tests in the project are listed here in the edit mode tab.

04:49.580 --> 04:55.820
By default, all the tests available anywhere in the assets folder and packages folder are shown.

04:55.820 --> 04:59.780
You can filter by category to see only some of the tests.

04:59.780 --> 05:04.880
We don't have many tests here, but just for demo sake, I'll choose the category for our samples.

05:04.880 --> 05:08.720
Now the window shows a hierarchy of all the tests organized by namespace.

05:08.720 --> 05:15.470
When I expand all at the lower levels, I see the test class and then a test method under.

05:15.470 --> 05:18.470
We can run all the tests and see that they pass.

05:18.650 --> 05:22.130
We can select an individual test and run the selected.

05:22.130 --> 05:26.960
Whether the test passes or fails, we have an easy way to get to the source code with a right click

05:26.960 --> 05:27.560
menu.

05:30.280 --> 05:31.930
Here's the complete test code.

05:32.290 --> 05:35.120
This is the same we saw earlier in the presentation.

05:35.140 --> 05:36.360
Let's go over the highlights.

05:36.370 --> 05:40.990
We have an optional category attribute that helps organize our testing.

05:41.290 --> 05:46.930
That dropdown that I showed, filters based on this value, you can have many test classes that are

05:46.930 --> 05:48.040
in the same category.

05:48.040 --> 05:50.950
You can have many test classes that are in the same category.

05:50.950 --> 05:52.450
Then we have the test attribute.

05:52.450 --> 05:57.190
This is what tells the test framework that this method is actually a test method.

05:57.990 --> 06:00.740
Without this, it won't show up in the test runner window.

06:00.750 --> 06:07.710
Then we use the familiar but optional paradigm of a range act and assert this is just a way that I use

06:07.710 --> 06:10.170
as a convention to organize my test logic.

06:10.170 --> 06:16.350
Also, when I name my tests, I choose to name them based on what is under the test, what is the expectation

06:16.350 --> 06:17.640
and what is the situation.

06:17.640 --> 06:24.120
So here I'm testing the ADD method that the result will be 15 when I pass five and ten as the operands.

06:24.120 --> 06:25.890
Let's tab over to play mode.

06:25.890 --> 06:31.410
The play mode tab looks very similar and it looks like it's showing the exact same test, but it's not.

06:31.410 --> 06:32.370
I'll open the source.

06:32.370 --> 06:34.350
Here's the source code for a play mode test.

06:34.350 --> 06:35.610
So how is this different?

06:35.610 --> 06:40.320
The primary difference is where it's located in the project window.

06:40.440 --> 06:41.640
I'll show that in a moment.

06:41.640 --> 06:47.610
An optional difference I choose is that for my tests in play mode, I append the class with play mode

06:47.610 --> 06:53.010
test, whereas in ed mode I just append with test that helps me organize.

06:53.010 --> 06:58.980
Now here for demo sake, I'm testing the exact same behavior once in edit mode and once in play mode.

06:58.980 --> 07:01.290
That's probably not necessary for you.

07:01.290 --> 07:08.280
You instead test by default in edit mode and only use play mode testing when you need to capture play

07:08.280 --> 07:15.690
mode events such as start awake or game object functionality, collision detection, other things that

07:15.690 --> 07:16.980
only happen at runtime.

07:16.980 --> 07:21.180
As discussed in the course, I use the same method naming convention we saw before.

07:21.180 --> 07:22.170
Let's note two.

07:22.320 --> 07:24.330
Let's note two key differences here.

07:24.330 --> 07:31.320
We use a unity test attribute, not a test attribute, as we saw before, and in addition to a range

07:31.320 --> 07:34.470
act and assert there's an optional a weight paradigm.

07:34.470 --> 07:41.160
This is used here just to demonstrate the fact that while edit mode tests execute synchronously play

07:41.160 --> 07:44.670
mode tests can execute asynchronously.

07:44.670 --> 07:49.860
So if you have any code that requires asynchronous testing, play mode is a great option.

07:49.860 --> 07:52.620
Let's take a look at the project window to see the organization.

07:52.620 --> 07:58.080
Notice that the edit mode test is in an editor folder and notice that the play mode test is in a runtime

07:58.080 --> 07:58.500
folder.

07:58.500 --> 08:05.310
That difference together with the differences in the assembly definition files adjacent to these tests

08:05.310 --> 08:09.870
is how the system knows that one is an editor test and one is a play mode test.

08:09.870 --> 08:11.370
I'll run the play mode tests.

08:11.370 --> 08:13.460
Finally, I'll run the play mode test.

08:13.470 --> 08:18.840
The test runner window behaves the same with one exception because these are play mode tests.

08:18.840 --> 08:25.710
Unity will create an anonymous scene, execute the test in isolation, and then destroy the scene.

08:25.740 --> 08:31.710
While this all happens quite rapidly, you'll notice it happening here as a plus, as a press run all

08:31.710 --> 08:34.680
instead of running all the tests in one millisecond.

08:34.680 --> 08:39.600
For example, as the edit mode may do here, it takes several milliseconds to execute.

08:39.600 --> 08:46.220
Here we got a chance to see a test running, seeing the test runner window and seeing the basics.

08:46.230 --> 08:48.990
Next, let's take a look at how we'd create our own tests.
