WEBVTT

00:00.170 --> 00:03.020
Let's take a look at a demo of this in action.

00:03.020 --> 00:07.400
We're going to open up the unity editor, open our course sample project.

00:07.400 --> 00:09.740
Same project for for the entire course.

00:09.740 --> 00:12.260
And within it we'll be looking at some of the scenes.

00:12.260 --> 00:15.620
I've got a pure functions area within the lessons.

00:15.620 --> 00:23.990
And we'll see a bit more about dummy sub, fake mock and spy and we'll be able to compare those.

00:23.990 --> 00:25.970
So here we are inside unity.

00:25.970 --> 00:30.920
This is the course sample project used elsewhere in some of the other lessons and videos.

00:30.920 --> 00:36.590
And what I want to show here, just as a brief reintroduction, is that in my layout on the right,

00:36.590 --> 00:42.850
I've got the inspector showing the readme asset inside the project, so you can click that here and

00:42.860 --> 00:44.840
see Readme and it shows up here.

00:44.840 --> 00:49.580
Or you can go to Window Unit Testing and open readme.

00:49.790 --> 00:57.620
The Readme here gives you some high level info about the sample project, and also includes a ever updating

00:57.620 --> 01:01.970
list here of which lessons and which workshops are interesting.

01:01.970 --> 01:07.280
So you may notice from video to video that this looks a little different as the course gets expanded

01:07.280 --> 01:08.570
and there's more content.

01:08.600 --> 01:11.960
What we're going to look at here is the pure functions lesson.

01:11.960 --> 01:15.200
So if I click on that it selects right here where we want to be.

01:16.060 --> 01:18.430
Then I'll open up the pure functions example.

01:18.460 --> 01:24.310
Now, as with the other scenes that we've looked at, there is a production scene that you can run.

01:24.310 --> 01:27.700
That's not the most interesting part, but let's start with that here.

01:27.940 --> 01:30.100
If I just click play.

01:33.170 --> 01:35.060
In the scene here.

01:35.090 --> 01:37.970
It will give us a little bit of console output.

01:37.970 --> 01:43.760
So this is just to reinforce the idea as we're going through this, that there is a scene, there is

01:43.760 --> 01:45.020
production code.

01:45.020 --> 01:48.080
In our case it's doing pretty little stuff.

01:48.110 --> 01:50.990
We're really invited to look at the test runner window above.

01:52.930 --> 01:57.370
The test runner window here allows us to zero in on any one category.

01:57.370 --> 01:59.800
In this case, we're looking at the pure functions.

01:59.800 --> 02:02.530
And then we've got all the pure functions here.

02:04.640 --> 02:07.280
These are all testing and all testing is passing.

02:07.280 --> 02:11.720
So if I select the top node here and click Run All, it will run all those tests.

02:11.750 --> 02:18.590
Now I've included edit mode and play mode tests for every lesson, every scene throughout the course.

02:18.590 --> 02:23.480
And in certain cases, I think it's more relevant for us to look at one or the other.

02:23.480 --> 02:25.900
In this case, the edit mode is really important.

02:25.910 --> 02:28.160
So why is the edit mode important?

02:28.160 --> 02:33.830
Because we're not really using in this specific case any runtime features like Monobehaviour and other

02:33.830 --> 02:35.300
things from the unity library.

02:35.300 --> 02:37.220
So edit mode is relevant there.

02:37.220 --> 02:42.890
And moreover, we're going to be looking at the end substitute library and that we're operates edit

02:42.890 --> 02:43.520
only.

02:43.520 --> 02:46.310
So you can only apply that in these edit mode tests.

02:46.310 --> 02:48.560
So let's expand the test here and see.

02:51.310 --> 02:59.710
We've got a pure test here a non pure test and then a non pure advanced test similar to the theory that

02:59.710 --> 03:01.330
we saw in the slides portion.

03:01.330 --> 03:03.850
We had the original pure example.

03:03.850 --> 03:09.820
Then we thought well let's take a look at a non pure example that is somehow has these indirect inputs

03:09.820 --> 03:11.020
or indirect outputs.

03:11.020 --> 03:15.370
And then the advanced is kind of the evolved solution to the problem.

03:15.370 --> 03:21.910
Now the non pure even after getting massaged here it's not 100% pure.

03:21.910 --> 03:26.400
So it may be helpful for you to look at the pure test to reinforce the theory.

03:26.410 --> 03:35.470
Why is a pure test pure then see the my system number two as a starting point for a non refactored kind

03:35.470 --> 03:37.210
of problematic use case.

03:37.210 --> 03:43.810
And then look at the advanced test here showing the advanced as a kind of evolved solution to it.

03:44.050 --> 03:46.720
And those are all options that you'd have for yourself.

03:46.720 --> 03:49.450
You can create certainly pure systems in your code base.

03:49.450 --> 03:53.260
You can create ones that are non pure and a bit problematic for the testing.

03:53.260 --> 03:55.570
And maybe that's fine in certain situations.

03:55.570 --> 04:02.410
And then if you want to evolve, refactor and improve, making the test more solitary then sociable,

04:02.410 --> 04:05.730
for example, you can look at the advanced as a model there.

04:05.740 --> 04:08.290
So let's go through and look at the source code for each of them.

04:08.290 --> 04:12.100
So let's start here by looking at the test for the pure system.

04:12.100 --> 04:12.760
I'll read it here.

04:12.760 --> 04:15.400
The test we're going to be converting the value.

04:15.700 --> 04:18.040
The result we assume is 20.

04:18.070 --> 04:22.030
We expect that when the input is two and ten.

04:22.180 --> 04:24.670
So here's our arranged inputs.

04:24.700 --> 04:26.740
Here's passing them in.

04:26.740 --> 04:28.410
And here's the value out.

04:28.420 --> 04:35.050
So again as we saw in the theory portion, the reason that this is a pure function is that the result

04:35.050 --> 04:39.520
depends only on the passed in input and nothing else.

04:39.520 --> 04:41.410
And it has no side effects.

04:41.410 --> 04:45.550
So no indirect inputs and no indirect outputs.

04:45.550 --> 04:46.510
So that's pure.

04:46.540 --> 04:48.880
Let's look at the source code for the pure.

04:50.180 --> 04:51.510
And it's quite simple.

04:51.530 --> 04:55.100
I believe it's identical to what we saw in the slides, maybe a little bit of tweaking.

04:55.130 --> 04:58.670
We're passing in the int and the multiplier and we return that.

04:58.700 --> 05:02.070
We don't do any other unrelated dependencies here.

05:02.090 --> 05:03.890
We're not creating any new systems.

05:03.890 --> 05:05.870
We're not addressing any other systems.

05:05.870 --> 05:08.090
We're not setting any other values.

05:08.090 --> 05:09.890
We're just multiplying and returning it.

05:09.890 --> 05:14.020
And again, returning value doesn't count as an indirect output.

05:14.030 --> 05:15.270
That is the direct output.

05:15.290 --> 05:17.330
So this is about as pure as you can get.

05:17.360 --> 05:19.400
It's a very beautiful example and a good starting point.

05:19.400 --> 05:21.380
And when we run that example here.

05:22.890 --> 05:25.530
We see that it works great.

05:25.530 --> 05:26.160
It's green.

05:26.160 --> 05:26.870
Check mark.

05:26.880 --> 05:28.400
Now let's move on to the next one.

05:28.410 --> 05:30.750
So here is a non pure test.

05:31.020 --> 05:33.120
Here we see we're going to convert the value.

05:33.150 --> 05:37.140
We assume the result is 30 when the input passed in is three.

05:37.260 --> 05:43.350
Now we're establishing a value of three and a multiplier of ten.

05:43.380 --> 05:46.890
Those two int values were also used in the previous test.

05:46.890 --> 05:51.630
Slightly different values being used, but the point is similar inputs.

05:51.630 --> 05:56.490
But notice how one input goes in here and one input goes in here.

05:56.490 --> 06:00.570
So this test here is about convert value.

06:00.570 --> 06:05.610
So convert value depends on value of three being passed in.

06:05.610 --> 06:13.470
And unfortunately from a purity standpoint it also depends on the multiplier value which is some shared

06:13.470 --> 06:15.780
state that was passed in up here.

06:15.840 --> 06:22.380
Now you can imagine depending on the production needs you have, you might have this type of situation.

06:22.380 --> 06:25.620
You might have in the constructor setting some state.

06:25.620 --> 06:28.350
And then in a method using part of that state.

06:28.350 --> 06:32.820
As we see here, you might also have seven different methods to a class.

06:32.820 --> 06:37.500
And calling method one and method three are going to be affecting the state.

06:37.500 --> 06:41.220
When we finally call method seven, it depends on did you call three?

06:41.250 --> 06:44.730
Did you call five, did you set some public properties, etcetera?

06:44.760 --> 06:46.080
It's very normal.

06:46.080 --> 06:51.330
In object oriented programming, you would expect different method calls to perhaps leave behind some

06:51.330 --> 06:52.260
shared state.

06:52.710 --> 06:59.490
That is all okay, but we'd consider it to be impure and testing it has some additional thoughts and

06:59.490 --> 07:00.480
implications.

07:00.480 --> 07:07.830
So here again the problematic part is that we have the indirect input.

07:08.280 --> 07:10.410
So let's take a look at the source code here.

07:10.560 --> 07:16.860
Here compared to the pure implementation I added a few things just for the academic process here.

07:17.160 --> 07:19.230
If you kind of problems to be solved.

07:19.230 --> 07:25.350
One is that we're storing a multiplier, and one is that we're storing a last result down here.

07:25.350 --> 07:27.570
We see last result is getting set.

07:27.570 --> 07:35.940
This is an example of indirect output because before we call convert value last result does not have

07:35.940 --> 07:36.960
any value set.

07:36.960 --> 07:42.030
But after calling convert value last result does have a value set.

07:42.030 --> 07:47.910
Perhaps changing from what it was previously, depending exactly on what the value and multiplier are.

07:47.940 --> 07:54.870
So this non pure example shows both indirect input and indirect output.

07:54.870 --> 07:56.220
Indirect input.

07:56.220 --> 08:00.270
Because part of the input comes here and gets used here.

08:01.140 --> 08:05.940
So from the convert values standpoint, just the highlighted code here.

08:05.940 --> 08:10.170
Some of what's going to affect the input is not highlighted blue here.

08:10.170 --> 08:12.030
It actually was set earlier.

08:12.180 --> 08:16.110
You could you could call that problematic from a purity standpoint.

08:16.110 --> 08:18.780
And then also we have indirect output.

08:18.810 --> 08:25.240
Not only are we returning a value which is perfect and pure, we are also setting last result.

08:25.260 --> 08:31.500
Again this is an indirect output and would be considered undesirable from a purity standpoint.

08:31.660 --> 08:36.810
Doesn't indicate that this is a problematic piece of source code that would not help our production

08:36.810 --> 08:37.470
needs.

08:37.470 --> 08:42.960
Certainly, you're going to have some situations in your code where you have these indirect inputs and

08:42.990 --> 08:44.490
or indirect outputs.

08:44.820 --> 08:51.270
But what I see here is something that could be it could have some implications for our unit testing.

08:51.270 --> 08:56.970
So back here in unit let we just run that again I'll hit run runs fine and works great.

08:56.970 --> 09:02.190
Then down here for our non pure advanced I took that problematic use case.

09:02.190 --> 09:09.660
I've updated and created a sample system that has some of those problems solved a bit, maybe not at

09:09.660 --> 09:10.920
100% pure.

09:10.920 --> 09:12.750
And I looked at different ways.

09:12.750 --> 09:21.000
So I created one test to simulate or give an example of some different types of test doubles that are

09:21.000 --> 09:21.840
being used.

09:21.870 --> 09:26.670
First we have the standard one which is without any test doubles.

09:26.670 --> 09:29.730
So that's just the kind of before picture.

09:29.760 --> 09:32.760
Then we use a dummy here.

09:32.790 --> 09:35.610
Then we use a stub here.

09:36.690 --> 09:38.610
We use a spy here.

09:40.310 --> 09:41.870
We use a mock here.

09:43.050 --> 09:45.270
And finally we use a fake here.

09:45.360 --> 09:47.670
I put them in an order here.

09:47.790 --> 09:51.930
Same from the theory we saw before in that table of the different test doubles.

09:51.930 --> 09:56.280
And it's ordered not in best to worst necessarily or something like that.

09:56.280 --> 10:01.890
It's more from the least powerful test double that is kind of cheapest and easiest to implement to the

10:01.890 --> 10:06.920
most powerful test double that could be the most time consuming to create.

10:06.930 --> 10:13.230
Also does the most stuff, and you're going to find that in some cases, having one of those is better

10:13.230 --> 10:13.800
than another.

10:13.830 --> 10:19.740
Given your particular situation, you don't necessarily want to always use the fake or always use the

10:19.740 --> 10:20.190
mock.

10:20.220 --> 10:24.210
These are a bunch of different tools that you have in your tool belt and you can use them.

10:24.210 --> 10:26.880
So let's step through them all, starting with the standard.

10:26.880 --> 10:28.860
So here is the standard example.

10:28.860 --> 10:31.590
This one does not yet have any test doubles added.

10:31.590 --> 10:37.350
And it should look familiar because it's basically what we did for the original non pure example.

10:37.500 --> 10:40.980
And that is we say convert value.

10:41.010 --> 10:44.340
The result will be 40 when the input is four.

10:44.370 --> 10:47.100
And here we set up the arrange.

10:47.310 --> 10:49.950
We pass in the multiplier here.

10:51.050 --> 10:53.060
Then we pass in the converter here.

10:53.730 --> 10:56.880
And our one line here is passing in value.

10:56.880 --> 11:02.280
But remember we're also multiplying value by multiplier.

11:02.280 --> 11:04.980
So we've got a little bit of old info here.

11:05.610 --> 11:07.280
Just to play with this a little bit.

11:07.290 --> 11:14.820
If we remember the original pure implementation took all of the inputs here directly and that would

11:14.820 --> 11:16.220
be more pure.

11:16.230 --> 11:21.600
But for the purpose of our learning, I've created something that is less pure so that we can discuss

11:21.600 --> 11:23.640
it so that one works great.

11:23.640 --> 11:26.640
And that is kind of before we explore any test doubles.

11:26.640 --> 11:32.490
So each of these we're going to go through, we're going to see kind of adding more and more powerful

11:32.490 --> 11:33.290
test doubles.

11:33.300 --> 11:39.390
Now, I admit, when coming up with this example that it makes the most sense kind of for the later

11:39.390 --> 11:43.620
examples, the later test doubles mock and fake and spy and stuff.

11:43.650 --> 11:48.930
The dummy ones are not as great, but I wanted to really use the same production code across all of

11:48.930 --> 11:49.140
them.

11:49.140 --> 11:55.380
So pardon me that the dummy and maybe the one after it are not the best example here, but I hope that

11:55.380 --> 11:56.810
they're helpful for you learning them.

11:56.820 --> 11:57.930
So here's the dummy.

11:57.960 --> 12:02.220
What we're doing here is we're saying it returns negative one by default.

12:02.220 --> 12:08.670
So if I pass in a null value two that's the dummy value here for the converter.

12:09.330 --> 12:12.480
Now you can imagine maybe the class is going to break.

12:12.480 --> 12:13.920
If we pass a null value.

12:13.920 --> 12:17.880
That means the class is more hard in its dependency.

12:17.880 --> 12:21.180
To that you would probably think, hey, it doesn't.

12:21.180 --> 12:24.090
Every class you pass in need to be non null.

12:24.270 --> 12:27.090
Yeah, probably in a lot of cases, yes.

12:27.090 --> 12:30.210
But here I've given you an example and you can look at the source code.

12:30.240 --> 12:32.730
The class will take in this null value.

12:32.730 --> 12:33.180
Fine.

12:33.180 --> 12:40.260
And there's lots of situations where putting in null or the very dumbest possible object will indeed

12:40.260 --> 12:41.010
work.

12:41.040 --> 12:49.650
Now probably if the converter was used in the method under test, this would throw a null ref.

12:49.650 --> 12:52.110
But purposely here the.

12:52.140 --> 12:57.240
What we're testing is that last result is going to have a particular value.

12:57.240 --> 13:01.920
If I was testing the convert here, that one I know uses the converter.

13:01.920 --> 13:06.270
So you have to think can I dummy my way through everything?

13:06.270 --> 13:07.380
Probably not.

13:07.380 --> 13:13.080
Probably that what you're passing in is going to be used somewhere for some shared state.

13:13.080 --> 13:15.930
But we do indeed see that this passes with green check mark.

13:15.930 --> 13:16.920
So we know it works.

13:16.920 --> 13:22.230
And what we're doing is the important part for the dummy is that sometimes when when you're testing

13:22.230 --> 13:27.150
something, it can be based on a cheap and easy dependency passed in.

13:27.750 --> 13:28.770
So that's good.

13:29.900 --> 13:34.310
Another thing that just to look at this, we could say without looking at the source code, we could

13:34.310 --> 13:42.230
probably assume that if this works well, then it probably does not depend on what we're passing in

13:42.230 --> 13:42.900
as null.

13:42.920 --> 13:50.960
So it's a little hint that while the creation of this class requires something to be passed in, that's

13:50.960 --> 13:51.500
something.

13:51.500 --> 13:54.530
Since we're giving it null probably isn't used here.

13:54.560 --> 13:56.240
Otherwise it would fail with a null ref.

13:56.480 --> 13:58.070
Let's take a look at the source code.

13:58.070 --> 14:01.940
So here's an example of the source code that's used for all the rest of the tests we're going to look

14:01.940 --> 14:02.640
at here.

14:02.660 --> 14:05.270
I pass in that converter and I store it.

14:05.540 --> 14:08.750
I also set the last result to be negative one.

14:08.780 --> 14:14.180
Negative one is often used as a this hasn't been set yet type value.

14:14.180 --> 14:15.560
So that's why I chose it here.

14:15.560 --> 14:16.850
But it could be zero.

14:16.850 --> 14:18.620
It could be any value that you want.

14:18.620 --> 14:25.970
And I just assume that when the object is created here, I set that as the kind of unset value.

14:26.150 --> 14:30.650
Then down here, if I do call convert value, I properly update it.

14:30.650 --> 14:33.860
So you can think of this as the initialized value.

14:33.860 --> 14:35.810
And this is being updated here.

14:35.900 --> 14:40.190
Now all I'm doing in the test is passing in null for the I converter.

14:40.190 --> 14:42.860
And then I'm checking only the last result.

14:42.860 --> 14:45.440
I'm not yet doing a test on this part here.

14:46.580 --> 14:52.710
And we can see that last result because it doesn't depend on the converter at all.

14:52.730 --> 14:57.590
It doesn't, for example, say, you know, return.

14:59.020 --> 15:00.940
Converter dot something.

15:00.940 --> 15:06.340
You know this line does not use it at all, that it's probably going to operate well, even if the converter

15:06.340 --> 15:07.030
is null.

15:07.210 --> 15:14.260
So as you're exploring your classes, you can just try this out and see what happens if I pass a null

15:14.260 --> 15:15.830
in for one of my dependencies.

15:15.850 --> 15:17.590
Does it just not compile?

15:17.590 --> 15:24.100
Or does it throw a null ref value, or have some other kind of operation error that shows you that you

15:24.100 --> 15:26.920
have a stronger dependency to what you're passing in?

15:26.920 --> 15:31.870
And that might be fine, but it's something to play with here as you're learning about the differences

15:31.870 --> 15:33.880
with your dependencies.

15:35.500 --> 15:38.140
So back here in the test we see it would pass.

15:38.140 --> 15:39.280
And it works negative one.

15:39.280 --> 15:40.870
So that's an example of a dummy.

15:40.870 --> 15:46.630
And as I admitted earlier it's not the best example in these first couple ones I really wanted to focus

15:46.630 --> 15:47.770
on the later examples.

15:47.770 --> 15:48.850
Here's the second one.

15:48.850 --> 15:54.640
As we see in the comment, the test double we're doing here is a stub, and a stub is a test double

15:54.640 --> 15:57.490
that is configured to return a specific value.

15:57.490 --> 15:59.740
So this example here is imperfect.

15:59.740 --> 16:06.130
I will admit that I'm passing in a null, which feels a little bit more like a dummy than before.

16:06.130 --> 16:13.600
But because the dummy value passed in does indeed affect the test.

16:14.250 --> 16:16.350
Because I'm calling convert value here.

16:17.040 --> 16:18.930
I would consider it to be a stub.

16:19.230 --> 16:26.010
You could also have something like a new, you know, temp converter.

16:28.550 --> 16:31.040
And maybe that passes in the value.

16:31.090 --> 16:35.360
You could imagine there's different ways you could sub in something kind of temporary there.

16:35.360 --> 16:41.300
But for me, in this particular example, passing in a null that is indeed part of the call to testing

16:41.300 --> 16:42.110
structure.

16:42.900 --> 16:43.800
Means it's a sub.

16:44.190 --> 16:46.280
So this will throw an error.

16:46.290 --> 16:47.490
Now why does it throw an error?

16:47.520 --> 16:49.320
Let's take a look at the source code again.

16:49.770 --> 16:54.990
Because if I pass in null for converter and I store converter as null.

16:55.020 --> 17:01.830
Then down here when I call something on null, it's going to freak out and throw a null ref or some

17:01.830 --> 17:03.150
other type of exception.

17:03.360 --> 17:07.140
And here I'm checking to make sure that it does indeed throw.

17:07.410 --> 17:11.270
I don't love this particular example, but I hope it's helpful for learning.

17:11.280 --> 17:13.500
Next let's look at the SPI concept.

17:13.500 --> 17:15.900
So the definition here is a SPI test.

17:15.900 --> 17:20.120
Double is a test double that confirms that a method was called.

17:20.130 --> 17:23.670
We're not concerned with what is returned from the method.

17:23.670 --> 17:25.640
We just want to know that it was called.

17:25.650 --> 17:32.430
So we're going from less information less powerful in the dummy example and the sub example.

17:32.430 --> 17:35.390
Here's a little bit more powerful kind of medium strength.

17:35.400 --> 17:37.280
We know that something was called.

17:37.290 --> 17:39.020
So here's how it works.

17:39.030 --> 17:43.700
We use the n substitute library and we create a substitution for the interface.

17:43.710 --> 17:48.660
Now remember when I was going through the examples here of talking about how to update and refactor

17:48.690 --> 17:51.360
your production code to make it more testable?

17:51.360 --> 17:55.560
One of the things that I did was use an interface in the refactor.

17:55.680 --> 18:03.870
Interfaces are very useful in your code in general to give you a flexible, less hard coded coupling.

18:03.990 --> 18:09.030
So it's good in production, but also specifically for this library here that does the mocking.

18:09.760 --> 18:11.590
And creates the spy for us.

18:11.620 --> 18:22.210
It will create on the fly in this one line a new implementation for converter based on AI converter.

18:22.210 --> 18:24.640
So we don't have to go and create our own dummy class.

18:24.640 --> 18:26.680
We don't have to create our own example class.

18:26.710 --> 18:28.120
This does it for us here.

18:28.120 --> 18:29.440
And we pass that in.

18:29.530 --> 18:32.500
Then we when we pass in null.

18:32.530 --> 18:36.460
Before we weren't able to call convert value, but here we can we can call it.

18:36.580 --> 18:39.610
We're not concerned with what is returned here.

18:39.610 --> 18:42.610
Sometimes you might be the needs of your test and we'll see.

18:42.610 --> 18:45.970
In the next example you are concerned with what the return value is.

18:45.970 --> 18:49.360
But here we just want to know was something called.

18:49.360 --> 18:57.070
So we're making a unit test that assumes some structure inside the the system under test.

18:57.070 --> 18:58.240
So we call that.

18:58.240 --> 18:59.890
And then here's the assertion.

19:00.070 --> 19:04.030
And notice the language here is part of the end substitute library.

19:04.060 --> 19:06.250
We're saying that the converter.

19:06.980 --> 19:09.590
We'll have received one call.

19:10.010 --> 19:15.110
Not the value one, but one call to the convert value.

19:15.740 --> 19:17.100
Which makes sense.

19:17.120 --> 19:19.220
If I did this here.

19:20.980 --> 19:24.760
I could assume that it has been called twice.

19:25.680 --> 19:27.420
Or inside.

19:27.420 --> 19:33.480
Perhaps I have converted value and I would assume one.

19:35.860 --> 19:43.060
And then maybe I know because I authored this system that it actually calls something called internal.

19:45.940 --> 19:48.490
Or prep.

19:49.120 --> 19:50.500
System.

19:51.070 --> 19:57.430
I could put all the different sub methods that I know probably happen when I call system convert value.

19:57.640 --> 20:02.020
Now this is a pretty lean system, so the only assumption I know to do is this one here.

20:02.020 --> 20:04.270
And let's see why we can assume that.

20:04.270 --> 20:06.460
Well, if we look at the source code.

20:07.350 --> 20:10.230
Whenever I call system convert value.

20:10.230 --> 20:16.620
So here we can see that the convert value does indeed call converter dot convert value.

20:16.620 --> 20:18.060
And it calls it exactly.

20:18.060 --> 20:25.440
Once again, if I had had more than one call, I would have had to assert that convert value was called

20:25.440 --> 20:27.780
twice each time I test the system.

20:27.780 --> 20:29.310
But we only test once.

20:29.340 --> 20:34.800
Now you can imagine you might have many, many, many more lines of code here, calling several different

20:35.190 --> 20:37.080
areas of their dependencies.

20:37.080 --> 20:42.510
And you can go back here in the test and you could test them all by adding more here.

20:42.750 --> 20:49.800
So when I first learned about the SPI, I thought, well, isn't this too weak of a test?

20:49.830 --> 20:55.890
Wouldn't I want to know not just that that it was called, but something specific was returned from

20:55.890 --> 20:56.610
the call.

20:57.370 --> 21:00.350
And you can do that in the next example, but this is a good way.

21:00.370 --> 21:04.480
Again, we're looking from the least powerful symbols to most powerful test symbols.

21:04.510 --> 21:04.780
Okay.

21:04.810 --> 21:07.780
As I just hinted at, the next one here is mocking.

21:07.780 --> 21:12.620
And mocking is not just if a method was called, but what does it return?

21:12.640 --> 21:15.390
So this is the example we saw on the theory here.

21:15.400 --> 21:22.810
What I've done in this one is I use the n substitute library to create on the fly a substitute test

21:22.810 --> 21:25.450
double for I converter, just like last time.

21:25.450 --> 21:30.600
But here I'm on the fly adding some of the implementation details.

21:30.610 --> 21:37.870
I'm saying that converter dot convert value should be able to take in any int, and be able to return

21:37.870 --> 21:43.300
the value times the multiplier in the theory section in the slides we saw this exact example.

21:43.300 --> 21:47.800
And then down here I know because value times multiplier.

21:47.800 --> 21:52.570
If value is three and multiplier is ten would equal 30.

21:52.690 --> 21:57.730
So you can see that what this is really testing is this here.

21:57.730 --> 22:04.600
But I am making an assumption which is what's under test that if I call system convert value that what

22:04.600 --> 22:09.160
it returns is the same as converter dot convert value.

22:10.100 --> 22:14.810
Now, there's a lot of words here and a lot of kind of confusing reused terminology.

22:14.810 --> 22:17.690
So it is important to dig in and look at the example here.

22:17.690 --> 22:21.560
But let's see if I'd actually had a plus one here.

22:21.590 --> 22:29.900
Our test would fail because my test assumes that the systems convert value is exactly the same as the

22:29.900 --> 22:31.760
converter convert value.

22:31.760 --> 22:37.640
But if I had something here, this would be considered something of a indirect input.

22:37.640 --> 22:40.160
So we're confirming that there's no indirect input.

22:40.160 --> 22:42.200
And the test again passes.

22:42.200 --> 22:43.790
So that is the mock.

22:43.790 --> 22:48.680
And a mock is the test double that is configured to return specific values.

22:48.710 --> 22:55.040
Now you can look at the substitute documentation which I've included in the links portion of the course.

22:55.040 --> 22:57.380
You'd be able to do other things here.

22:57.380 --> 23:02.750
Perhaps you want to say something like, I'll just mock it up that if you pass in the value of ten,

23:02.780 --> 23:04.220
it would return this.

23:04.220 --> 23:12.770
But if you pass, if you took in the word 15, it might do, you know, times a thousand or whatever.

23:12.800 --> 23:20.330
There might be different circumstances where the arguments passed in change how the the output happens.

23:21.590 --> 23:27.890
But this language here arguments any int is specific to the end substitute library.

23:27.890 --> 23:33.320
And it says okay, no matter what we pass into the convert value here's going to be the value coming

23:33.320 --> 23:33.680
out.

23:33.680 --> 23:38.510
And finally our last one our most powerful type of test double is the fake.

23:38.510 --> 23:40.050
So how does the fake work.

23:40.070 --> 23:42.920
Well I'm not using any substitute here.

23:42.920 --> 23:45.560
In fact, I'm not using it at all in this test.

23:45.590 --> 23:51.410
What I do instead, and to be honest, before I learned a lot about test doubles, this was really a

23:51.410 --> 23:52.400
common tool for me.

23:52.400 --> 23:53.900
I didn't know it was called fake.

23:53.930 --> 23:59.750
Years ago when I started my unit testing journey, I would just think, oh, I can't use the production

23:59.750 --> 24:01.640
class for some reason.

24:01.820 --> 24:08.960
So instead I'll create a lot of temporary testing only versions of certain dependencies.

24:08.960 --> 24:13.130
So in the world of test doubles, those are called fake classes.

24:13.490 --> 24:15.130
So how do I create that?

24:15.140 --> 24:21.620
Well, in a different class you create your own implementation of fake converter or the way I choose

24:21.620 --> 24:22.580
to organize it.

24:22.580 --> 24:26.210
My art will approach that right above the test itself.

24:26.210 --> 24:29.870
I create the fake implementation of whatever is needed.

24:29.870 --> 24:34.790
So here I create a brand new class that is used only in the case of the testing.

24:34.790 --> 24:40.910
I don't want to accidentally use this in production, so I give it a title like fake or test or sample

24:40.910 --> 24:43.220
or example converter, something like that.

24:43.220 --> 24:49.430
But following the language here, fake converter and I implement just enough of its functionality for

24:49.430 --> 24:50.180
the test.

24:50.210 --> 24:57.080
Now I see some unit test developers would create this fake converter and use it in many tests in the

24:57.080 --> 24:58.070
same class.

24:58.100 --> 24:59.420
There's no problem with that.

24:59.420 --> 25:03.740
You don't necessarily have to create one for every single test individually.

25:03.740 --> 25:08.780
But the nice thing here is that I know I need to implement just enough to make my test pass.

25:08.780 --> 25:11.870
So it gives me a very simple goal to go after.

25:12.680 --> 25:20.750
So here what I'm playing with is that I know that the last result is going to be the value times ten,

25:20.750 --> 25:23.960
which I'm just making up my own implementation for the fun of it.

25:23.960 --> 25:28.550
So if I pass in a value of four, I would expect the result to be 40.

25:28.880 --> 25:37.640
If I wanted to play around with this and say 15 here, then I could update this to 45 because 15 times,

25:37.640 --> 25:42.430
oh, I'm sorry, I could update it to 60 because 15 times four would be 60.

25:42.470 --> 25:44.450
But let's go back to our original example.

25:46.040 --> 25:46.640
There we go.

25:46.790 --> 25:53.900
So something of note here is that when I pass in the fake converter, our production class doesn't necessarily

25:53.900 --> 25:59.980
know fake converter versus a mock created by the substitute library versus a dummy.

25:59.990 --> 26:03.740
The production code does not know and does not need to know.

26:03.770 --> 26:06.500
It only needs an I converter.

26:06.500 --> 26:13.370
And that gives us the flexibility to be able to implement classes and use the substitution library to

26:13.370 --> 26:14.840
meet our testing needs.

26:14.840 --> 26:19.930
If we didn't use an interface in our production code, we would be severely limited.

26:19.940 --> 26:22.850
So let me reflect a little bit on what we've covered here.

26:22.880 --> 26:28.100
We saw a pure system that has a pure function, and we saw the benefits there for testability.

26:28.190 --> 26:32.240
Then we saw we just played with the idea of an impure version of that system.

26:32.240 --> 26:37.430
And what are some of the problems with perhaps indirect input and indirect output that can come?

26:37.430 --> 26:43.130
And then here in the advanced version, we've played with all the different ways we could work around

26:43.130 --> 26:47.030
or massage the challenges introduced by having impure systems.

26:47.030 --> 26:50.930
We've moved through dummy stub all the way up to fake.

26:50.930 --> 26:58.190
Seeing that we can have light implementations of a test double up to hear the fake version is a complete

26:58.220 --> 27:06.050
fake class that we're using for test only needs the beauty here by using the interface is that our production

27:06.050 --> 27:13.940
class doesn't need to know is it in test mode, or which version of a test double is being passed in

27:13.970 --> 27:20.210
the production code just works elegantly decoupled from the complexity of which type of I converter

27:20.210 --> 27:20.570
is.

27:20.600 --> 27:23.210
Gives us lots of different examples to play with.

27:23.210 --> 27:29.240
So overall, I hope you've enjoyed learning about pure functions and test doubles and seeing the code

27:29.240 --> 27:35.840
here that we've got in production, as well as in our tests that massage and let us learn for all the

27:35.840 --> 27:43.670
different ways we can help get our tests to be more pure and help get our production code to be more

27:43.670 --> 27:49.910
reusable with less side effects and less of those shared state issues that can pop up.

27:49.910 --> 27:50.840
Thanks.
