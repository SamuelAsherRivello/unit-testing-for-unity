WEBVTT

00:00.120 --> 00:04.320
Let's take a look at the clock sample without many MVCs.

00:04.620 --> 00:06.670
Here we are inside Unity.

00:06.690 --> 00:13.170
We've set up a new Unity project using the latest TFS version of the Unity Editor.

00:13.170 --> 00:18.930
Following the instructions from earlier in the course, we've added the mini MVCs package and imported

00:18.930 --> 00:19.840
the samples.

00:19.860 --> 00:25.290
Here, we'll take a look at the clock sample, and we'll begin with the version that does not have many,

00:25.290 --> 00:26.580
MVCs added.

00:26.610 --> 00:31.440
It's expected that this feels like a review for you in basic unity knowledge.

00:31.470 --> 00:32.770
Let's run the scene.

00:32.790 --> 00:34.650
So here we are with the scene running.

00:34.650 --> 00:41.010
We have no real UI here, but in the console window we have some debug log statements that's functioning

00:41.010 --> 00:42.870
something like UI for us.

00:42.870 --> 00:47.160
There's no user input, but every second we get a debug log statement.

00:47.310 --> 00:48.770
That's the whole example.

00:48.780 --> 00:51.620
Let's take a look at the code in the hierarchy view.

00:51.630 --> 00:56.760
We see we have an empty world game object that has the default camera and lighting.

00:56.760 --> 01:01.770
We're not really using the camera in lighting here, but for consistency's sake, I have that in every

01:01.770 --> 01:02.400
scene.

01:02.610 --> 01:06.450
Then we've got one game object with our example script.

01:06.450 --> 01:08.190
Let's open that example script up.

01:08.190 --> 01:11.940
That's the one script that runs this entire scene.

01:12.210 --> 01:13.410
Here's the example.

01:13.410 --> 01:15.840
You can see that it extends mono behavior.

01:16.350 --> 01:20.280
I'll do a quick scan through the code and then go through it line by line.

01:40.730 --> 01:43.810
So for this first example, I'll go over some fundamentals.

01:43.820 --> 01:48.350
We've got our using statement that tell this class which other classes it can reference.

01:48.350 --> 01:51.350
We have a namespace appropriate for this example class.

01:51.350 --> 01:53.060
We have the class definition here.

01:53.060 --> 01:54.650
We're extending mono behavior.

01:54.650 --> 01:56.240
We have some private fields.

01:56.240 --> 01:59.240
These are variables that we'll use throughout this example.

01:59.240 --> 02:05.000
Notice here, instead of using INT and float directly, we're using the observable class.

02:05.000 --> 02:07.490
This is covered in an earlier section of the course.

02:07.490 --> 02:11.570
But remember the observable class gives us some additional functionality.

02:11.570 --> 02:17.870
In the case of time delay, we're storing an INT, but we're also able to get an event dispatched every

02:17.870 --> 02:19.760
time that int value changes.

02:19.760 --> 02:26.330
This brings the observer pattern to a simple piece of data, and we're using this throughout every sample.

02:26.360 --> 02:32.810
It's optional when using mini MVC, but highly recommended inside Unity Start method, which is called

02:32.810 --> 02:33.230
once.

02:33.230 --> 02:39.800
As the scene wakes up, we get started by loading inside this example and all the samples we're going

02:39.800 --> 02:41.570
to load a local file.

02:41.570 --> 02:48.740
This in the MVC world once we see that sample is our way to mimic calling a back end server.

02:48.740 --> 02:54.950
Loading a local file is quite easy, but it's asynchronous and it's external data, so it's appropriate

02:54.950 --> 02:56.600
for the scope of service.

02:56.600 --> 03:02.870
It's a bit of a contrived and silly example because of course we could hard code the value of the time

03:02.870 --> 03:04.100
delay here in C-sharp.

03:04.100 --> 03:07.520
But again, this is done for samples sake here in the project window.

03:07.520 --> 03:13.160
We can see the location of that local text file and here we see the contents of that text file.

03:13.280 --> 03:17.000
It's simply a string that we will type into.

03:17.000 --> 03:23.360
INT Now, again, of course, this value 1000 could be hard coded in C-sharp, but we're just illustrating

03:23.360 --> 03:24.890
how to load external data.

03:24.890 --> 03:29.930
So we load that text, we wait a half a second just to simulate a delay.

03:29.930 --> 03:36.350
This is helpful so that we know that in more complex examples where accounting for the subtle latency

03:36.350 --> 03:41.360
that we'd get from calling a real backend service, then assuming that we've loaded successfully, we

03:41.360 --> 03:47.120
we grab that string value and type it as int, Remember that time delay is an observable type.

03:47.120 --> 03:51.590
So when we're setting the value, we have to set the dot value property within.

03:51.590 --> 03:56.960
Again, the benefit of doing it this way is we'll get an automatic event dispatched whenever that value

03:56.960 --> 03:57.710
changes.

03:57.710 --> 04:03.260
We're not really taking advantage of it in this simple example, but we'll see that in later code.

04:03.260 --> 04:05.870
Now that's successfully loaded, we'll start the ticking.

04:05.870 --> 04:07.430
This is the clock itself.

04:07.430 --> 04:12.350
In order to have code called repeatedly, there's many things you can do inside unity.

04:12.350 --> 04:17.240
The most basic and common one is to use a code routine.

04:17.390 --> 04:20.270
So all we do here is start up a code routine.

04:20.270 --> 04:21.890
This will be called repeatedly.

04:21.890 --> 04:23.960
So this is a contrived example.

04:23.960 --> 04:30.380
But really I just wanted to tick up using real world seconds from one into infinity.

04:30.380 --> 04:35.350
As long as the scene is open, we use time, time to grab that from unity.

04:35.360 --> 04:42.650
Each time I update our time variable and a call a separate handler to deal with the consequence as we

04:42.650 --> 04:44.240
handle that consequence here.

04:44.240 --> 04:49.220
And quite simply, I wanted to have an example that doesn't have an explicit view.

04:49.220 --> 04:57.130
So we just debug log here that simulates some sort of user feedback without any additional complexity.

04:57.140 --> 04:59.030
Let's run the scene one more time.

05:05.720 --> 05:07.310
And we see the clock ticking.

05:07.430 --> 05:08.240
That's it.

05:09.440 --> 05:13.450
So that was the clock working without many MVCs.

05:13.460 --> 05:16.430
I expect for everything we covered there to be review.

05:16.460 --> 05:23.630
We've seen classes, methods, variables, properties, events, serialized fields and more.

05:23.660 --> 05:29.720
That's a good unity foundation for us to have as common understanding before we move on to the mini

05:29.720 --> 05:31.040
MVCs example.

05:31.820 --> 05:32.540
Thanks.
