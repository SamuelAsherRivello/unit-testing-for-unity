WEBVTT

00:00.120 --> 00:03.570
The mini NBC's Custom Sample Project.

00:03.570 --> 00:05.010
Congratulations.

00:05.010 --> 00:09.180
You've successfully completed all the theory in this course together.

00:09.180 --> 00:11.010
We've gone over the course introduction.

00:11.010 --> 00:14.850
We've looked at an overview of unity, including unity structure.

00:14.850 --> 00:22.770
We looked at software design from a high level covering design principles, design patterns, UML diagramming,

00:22.770 --> 00:24.840
as well as architectures themselves.

00:24.840 --> 00:29.340
And then together we dove deep into the MINI and VCs architecture for Unity.

00:29.340 --> 00:35.460
Let's put all of this theory together into practice and create a new project from scratch.

00:35.460 --> 00:41.190
Now, with each sample project we've covered and with this new one as well, we continue to peel back

00:41.190 --> 00:46.770
more layers in MVCs concepts and think critically about how we're applying it.

00:46.770 --> 00:48.600
As we go through this next section.

00:48.600 --> 00:55.170
Think for yourself about which aspects of architecture and this framework are you feeling most comfortable

00:55.170 --> 00:55.410
with?

00:55.420 --> 01:00.150
Are you starting to see the long term benefits when you apply architecture to your projects?

01:00.150 --> 01:02.660
Which parts of the framework do you want to explore more?

01:02.670 --> 01:06.390
Also, consider which aspects may not work for your needs.

01:06.390 --> 01:12.120
What can you do to get the results that you want in a project in which design principles, patterns

01:12.120 --> 01:14.580
and other concepts remain unclear?

01:14.580 --> 01:19.440
Well, up to this point we've seen several samples of MVCs in action.

01:19.440 --> 01:22.270
In each case, we reviewed something that already existed.

01:22.290 --> 01:24.510
Now we'll create a new project from scratch.

01:24.510 --> 01:26.550
Here's the high level process we'll do together.

01:26.550 --> 01:29.370
Well, what is our concept and what are the functional requirements?

01:29.370 --> 01:30.690
What does it need to do?

01:30.720 --> 01:32.490
What's the user experience?

01:32.490 --> 01:35.550
What do they see, and what kind of input do they use?

01:35.550 --> 01:38.620
Which architectural concerns will we need?

01:38.640 --> 01:42.960
Model view controller service, perhaps multiple.

01:42.960 --> 01:47.730
And for which of those concerns can we use the base functionality and for which ones do we need?

01:47.730 --> 01:49.260
Some custom functionality?

01:49.260 --> 01:54.690
So let's make a simple math app, a calculator using many MVCs.

01:54.690 --> 01:56.070
Here's the requirements.

01:56.340 --> 01:59.370
We'll have some input text fields on the screen.

01:59.880 --> 02:06.750
The user will type in two integer numbers and then click an add button to add them together mathematically

02:06.750 --> 02:07.650
and show the result.

02:07.650 --> 02:09.930
So how do we break this down into concerns?

02:09.930 --> 02:11.430
Well, the model stores the data.

02:11.430 --> 02:14.220
So what type of data would we need to make this happen?

02:14.220 --> 02:19.590
Well, starting just from the view and thinking about the data that way, we know we've got some text

02:19.590 --> 02:22.620
fields of the users entering and we need to store them somehow.

02:22.620 --> 02:28.290
So we'll have an integer for the first text field, an integer for the second, and an integer for the

02:28.290 --> 02:28.860
result.

02:28.860 --> 02:35.400
In the view, we'll have some sort of text for A, for B, and also for showing the result in the controller,

02:35.400 --> 02:41.460
which is going to handle the logic would need something to do the add operation as well as a way to

02:41.460 --> 02:43.290
clear or reset the app.

02:43.290 --> 02:49.290
And while in earlier samples we used a service layer to load some external data, we don't need that

02:49.290 --> 02:51.480
for this example, so we won't have a service.

02:51.480 --> 02:55.020
So which of the so what base functionality will we use here?

02:55.020 --> 03:00.240
Here we're thinking about for which concerns do we want standard functionality and for which do we want

03:00.240 --> 03:01.290
custom functionality?

03:01.290 --> 03:05.400
Well, as is typically the case for the model, we want some basic functionality.

03:05.400 --> 03:08.610
There usually isn't a need to stray from the base model.

03:08.610 --> 03:11.580
So here we'll be extending base model for the view.

03:11.580 --> 03:16.230
We will implement the eye view interface as well as extend mono behavior.

03:16.230 --> 03:18.110
Now we've seen this pattern before.

03:18.120 --> 03:20.400
Any time you want to use Unity's UI.

03:20.400 --> 03:23.340
Unity's UI plays very nice with mono behaviors.

03:23.340 --> 03:28.470
So we'll lean into that and we'll use a mono behavior for our view for the controller.

03:28.470 --> 03:32.970
While a base controller class exists that works best when we want one.

03:32.970 --> 03:38.340
Each of a model view controller and service here because we don't need the service.

03:38.340 --> 03:43.890
We've got a few options of how to move forward, but quite simply will implement AI controller and create

03:43.890 --> 03:46.560
custom functionality that doesn't use the service.

03:46.560 --> 03:50.790
And again, on the service layer, we won't use a service, so we'll skip that part.

03:50.790 --> 03:53.700
This is because the app calls for no external data.

03:53.700 --> 03:59.430
So at this stage of the brainstorm, it's a great spot to think about diagramming, using UML.

03:59.460 --> 04:05.430
This helps you think out where the dependencies lie, which interfaces would be implemented, which

04:05.430 --> 04:10.320
classes would be extended, whether you're working on a project by yourself or together with the team,

04:10.320 --> 04:14.310
UML is a great way to communicate and to focus for development.

04:14.310 --> 04:20.100
So taking those same brainstorms we've had in the last few steps, we just articulate that visually.

04:20.100 --> 04:25.530
We'll have a calculator mini class that represents the whole structure inside.

04:25.530 --> 04:30.060
We'll have a calculator model, a calculator controller and the calculator view.

04:30.060 --> 04:33.270
Throughout the course there's been several coding challenge assignments.

04:33.270 --> 04:38.070
If you're ready for the ultimate coding challenge assignment, you can pause the video here.

04:38.070 --> 04:43.950
Use just the information we talked about in this section and start coding from scratch once you complete

04:43.950 --> 04:49.110
the assignment or if you find yourself getting stuck, you can return to this and see how we solved

04:49.110 --> 04:49.650
it together.

04:49.650 --> 04:50.850
Let's see this in action.

04:50.850 --> 04:57.840
I'm going to show from the very beginning getting unity, installing it, creating a new project, adding

04:57.840 --> 04:59.910
the mini and VC's framework and.

04:59.960 --> 05:03.470
Doing live coding for this calculator Sample project.

05:03.470 --> 05:08.690
This sample project will feel a bit different than the ones we've done before because I'm coding it

05:08.690 --> 05:14.030
as I go, so there'll be less editing and if we're lucky, I'll make some mistakes along the way, which

05:14.030 --> 05:15.100
we can solve together.

05:15.110 --> 05:16.280
Let's get started.
