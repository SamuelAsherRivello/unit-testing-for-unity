WEBVTT

00:04.590 --> 00:06.900
Here we are in our favor browser at Unity.

00:07.620 --> 00:10.220
Here we'll download the Unity editor and get started.

00:10.230 --> 00:13.380
The Get started has several different pricing plans here.

00:13.380 --> 00:18.870
Unity, personal or Unity student are a great fit to get started for free for professional use.

00:18.870 --> 00:20.640
There's other plans available as well.

00:20.640 --> 00:23.430
I'm on a Windows machine so I'll download for Windows.

00:23.730 --> 00:29.730
I've downloaded Unity, open up the installer and we'll continue through the setup experience.

00:29.730 --> 00:32.610
Once setup is complete, I'll open the Unity Hub.

00:32.610 --> 00:39.600
The Unity Hub helps us install the Unity editor different versions if we like as well as create an open

00:39.600 --> 00:40.350
projects.

00:40.350 --> 00:41.880
I'll create a new project.

00:41.880 --> 00:44.250
Unity offers many different templates.

00:45.130 --> 00:51.340
The key here is that we want to use the latest unity version called ELTs.

00:51.370 --> 00:57.340
This changes over time, but unity clearly shows this is the version which receives long term support.

00:57.340 --> 00:59.890
And it's typically the latest public release.

00:59.890 --> 01:01.870
The default template that unity shows.

01:01.870 --> 01:03.910
Here is the three D core.

01:03.940 --> 01:09.100
Many MVCs is compatible with many of these different templates, so we can choose freely.

01:09.220 --> 01:10.690
But I'll go with the default here.

01:10.690 --> 01:14.950
I'll call the project calculator mini and install it in my favorite folder.

01:14.950 --> 01:20.140
Each time you create a new project, Unity will make all the installation files and dependencies set

01:20.140 --> 01:24.820
up for you following the URL provided in the course in the resources section.

01:25.240 --> 01:28.190
We'll come here to GitHub and click the code button.

01:28.210 --> 01:34.390
We want to capture this git URL which we'll use to import the mini and VCs into unity.

01:34.390 --> 01:38.600
Once the project is created, Unity opens up and gives us the default display.

01:38.620 --> 01:42.040
This template comes with a sample scene, which is a great place to begin.

01:42.040 --> 01:45.810
Next, we'll open up the package manager and install Mini and VCs.

01:45.820 --> 01:50.110
We'll add a package from the get URL paste in the URL we got from GitHub.

01:50.110 --> 01:56.350
Once mini NBC's is installed, you can optionally install the samples as well, especially when getting

01:56.350 --> 01:56.790
started.

01:56.800 --> 01:58.420
I highly recommend doing that.

01:58.420 --> 02:03.880
You may find that one of the samples is similar enough to your intended goals and you can begin with

02:03.880 --> 02:07.380
it either copying and pasting or using it as reference.

02:07.390 --> 02:11.380
In our case, we're not going to import the samples, we're going to work from scratch.

02:11.380 --> 02:12.400
With one exception.

02:12.400 --> 02:18.070
I'll use a template file which I can copy and paste just to keep our classes looking consistent and

02:18.070 --> 02:18.580
readable.

02:18.580 --> 02:21.790
The mini NBC's package comes with a template.

02:21.790 --> 02:28.090
I'll copy it into our assets folder and open it up using consistent coding standards or a coding template

02:28.090 --> 02:29.650
like this is optional.

02:29.650 --> 02:32.800
I recommend each team consider it based on their own goals.

02:32.800 --> 02:38.110
For the purposes of this discussion, I'm using it just to keep my code consistent and to make it more

02:38.110 --> 02:39.010
readable for you.

02:39.010 --> 02:41.530
I'll copy and paste this to start new classes.

02:41.530 --> 02:46.540
It has the class definition an example property and example field and more.

02:46.540 --> 02:48.940
Let's think about our project file structure.

02:48.940 --> 02:50.140
I like the scene folder.

02:50.140 --> 02:51.580
I'll just rename our scene.

02:51.580 --> 02:58.450
My convention is that I create a script folder in the assets and create a runtime editor and test folder

02:58.450 --> 02:58.930
within.

02:58.930 --> 03:03.940
Then because we're working with many, I like to create dedicated folders for the mini structure as

03:03.940 --> 03:07.210
well as a folder for the model view controller and service.

03:07.210 --> 03:11.590
In this case, we're not going to be creating a service, but I'll leave the folder there in case in

03:11.590 --> 03:12.340
the future.

03:12.340 --> 03:14.060
Adding a service makes sense now.

03:14.060 --> 03:16.540
I'll set up the scene hierarchy and create our first script.

03:16.540 --> 03:21.670
The default scene structure provided by Unity is one main camera and one directional light.

03:21.700 --> 03:27.310
My own personal preference is to put those into a world game object so I can hide the complexity there.

03:27.310 --> 03:30.010
Now create one game object for the example itself.

03:30.010 --> 03:33.370
That's the one mono behavior which kicks off the process.

03:33.370 --> 03:37.900
I'll give it the name calculator, mini example and I'll give it a script of the same name.

03:37.900 --> 03:39.790
Here's the starting point for the new file.

03:39.790 --> 03:43.680
As Unity creates it, we'll paste in that class template and update it properly.

03:43.690 --> 03:44.710
Here's the updated file.

03:44.710 --> 03:45.460
Let's take a look.

03:45.460 --> 03:48.310
I gave it a namespace specific to this sample project.

03:48.310 --> 03:53.290
I match the class name to the file name and I think about what code will need to get started here.

03:53.290 --> 03:56.830
We'll just need a start method in which we're going to create the mini.

03:56.830 --> 03:59.380
Let's go create the class file for the Mini and come back.

03:59.380 --> 04:03.370
I'll duplicate the class template and create the calculator mini class.

04:03.370 --> 04:05.350
Here we are in the calculator mini class.

04:05.350 --> 04:08.170
Now we'll use the first classes from our framework.

04:08.170 --> 04:16.690
We have an option here for the main mini if we want to extend the mini MVCs base class or use an interface.

04:17.510 --> 04:22.580
Now, because we're not using any service layer, it makes sense to use an interface that gives us more

04:22.580 --> 04:23.330
flexibility.

04:23.330 --> 04:26.430
So here we'll implement AI Mini and VCs.

04:26.450 --> 04:29.060
Each code editor expresses it in a different way.

04:29.090 --> 04:32.740
Here in my editor, it shows a red squiggly indicating something is wrong.

04:32.750 --> 04:37.760
I'll check the context menu because I've chosen to implement an interface, but I haven't actually done

04:37.760 --> 04:39.160
the implementation yet.

04:39.170 --> 04:44.120
The code editor offers to do that for me, and as we're going forward, I'll do this workflow.

04:44.120 --> 04:46.340
I'll choose to implement those missing members.

04:46.340 --> 04:48.200
I'll leave all checked by default.

04:48.200 --> 04:49.580
Let's take a look at the result.

04:49.580 --> 04:54.140
We've got an initialized property and some initialization related methods.

04:54.140 --> 04:58.850
We now have enough code in the calculator mini to jump back to the example and finish it up.

04:58.850 --> 05:03.290
So here in the calculator mini example in its start method, we'll finish up coding.

05:03.290 --> 05:03.530
Here.

05:03.530 --> 05:06.890
We've created an instance of the calculator mini and called initialize.

05:06.890 --> 05:07.940
That's all we need here.

05:07.940 --> 05:12.110
In this example file, let's keep going in the calculator mini class itself.

05:12.110 --> 05:17.180
So as you're getting used to using the mini and VCs framework, this is a great chance for you to take

05:17.180 --> 05:21.590
a look at other sample projects just to follow along and see how the structure is.

05:21.590 --> 05:22.760
But I'll think out loud.

05:22.760 --> 05:26.900
What we need from the Mini is which of the concerns it's going to care for.

05:27.050 --> 05:32.330
So we'll have to declare those, we'll initialize those concerns and if needed, we'll wire them up

05:32.330 --> 05:32.840
together.

05:32.840 --> 05:34.070
I'll go ahead and do that now.

05:34.070 --> 05:37.130
So if we're not already initialized we'll initialize.

05:37.130 --> 05:42.050
And then I stubbed out or put some temporary comments where the code will go.

05:42.290 --> 05:45.470
We create the model, the controller and initialize them.

05:46.570 --> 05:52.930
You may remember from earlier sample projects that because our view is going to extend mono behavior

05:52.930 --> 05:56.600
and sit in the scene hierarchy, we'll set that up in a different way.

05:56.620 --> 06:01.660
Here my code editor is indicating red, which means, hey, those classes don't exist, so let's go

06:01.660 --> 06:02.050
create them.

06:02.050 --> 06:02.370
Now.

06:02.380 --> 06:06.110
I'll copy the class template for the basic structure of what we need.

06:06.130 --> 06:09.420
I've created the classes for the model view and controller.

06:09.430 --> 06:10.270
Let's take a look.

06:10.270 --> 06:11.470
Here's the model class.

06:11.470 --> 06:16.300
I gave it a namespace and updated the class title but didn't add the implementation yet.

06:16.300 --> 06:20.190
Here's the calculator view class and here's the calculator controller class.

06:20.200 --> 06:23.680
Now that we at least have the basics of those classes constructed.

06:24.370 --> 06:29.180
Let's go back and fix any compiler errors back here in the calculator mini class.

06:29.200 --> 06:32.200
We've got a few errors to solve while we created these classes.

06:32.200 --> 06:34.030
Now it can't be located yet.

06:34.030 --> 06:38.860
We right click and see that the editor recognizes them but needs a using statement.

06:38.860 --> 06:42.700
Those classes are now working properly, but they lack the initialize.

06:42.700 --> 06:47.350
Let's start putting some real code in each of those class files because the calculator model has base

06:47.350 --> 06:48.400
functionality.

06:48.760 --> 06:50.020
We'll extend base model.

06:50.020 --> 06:51.760
Base model comes with initialize.

06:51.760 --> 06:53.140
So that's all we need to do here.

06:53.140 --> 06:58.210
For now for the calculator controller, we're going to want some custom functionality again because

06:58.210 --> 06:59.680
we're not using service.

06:59.680 --> 07:05.470
Now as a side point, we could certainly use the base controller and create a service which is empty

07:05.470 --> 07:06.640
and we don't really need it.

07:06.640 --> 07:10.210
If you think in the future you're definitely going to need a service at some point.

07:10.210 --> 07:11.470
That's not a bad solution.

07:11.470 --> 07:16.360
But for the sake of this project, because we know we don't need a service right now, I'll use an interface

07:16.360 --> 07:20.620
instead we implement my controller, choose to implement the missing members.

07:20.620 --> 07:24.310
I'll leave the default settings here and let's take a look at the results we get.

07:24.310 --> 07:27.970
Initialize context and some initialization methods.

07:27.970 --> 07:29.080
That's all we need for now.

07:29.080 --> 07:34.810
As we go through this, we'll step through adding just enough implementation, always returning to the

07:34.810 --> 07:40.990
most parent concept here, the Calculator Mini and seeing what the next logical step is for implementation.

07:40.990 --> 07:46.000
An alternative approach would be to completely develop the model, then completely develop the view

07:46.000 --> 07:49.870
in the controller and then do the mini MVCs as a final step.

07:49.870 --> 07:54.250
You can proceed in whichever way makes sense to you, but for the purpose of this discussion, we'll

07:54.250 --> 07:57.400
keep returning to this class here and solving the challenges that pop up.

07:57.400 --> 08:02.350
So both the model and the controller are expecting a context, So let's create that now by passing in

08:02.350 --> 08:06.070
those context values, I think we've solved all the compiler errors.

08:06.070 --> 08:09.070
For now, let's return to unity and check our progress.

08:09.070 --> 08:12.190
Here we are in unity with no compilation errors.
