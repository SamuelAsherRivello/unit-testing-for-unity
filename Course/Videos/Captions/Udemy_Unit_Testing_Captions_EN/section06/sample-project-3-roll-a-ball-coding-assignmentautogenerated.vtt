WEBVTT

00:00.180 --> 00:03.870
Now let's do a coding assignment along with the Rollerball sample.

00:04.960 --> 00:10.440
So here I am in an empty project where I brought in the mini MVCs framework, as well as the samples.

00:10.450 --> 00:17.050
I'll open up the Rollerball sample with Mini and think about what I could do here as a coding assignment.

00:17.200 --> 00:22.240
Something I thought would be interesting is that while you can currently use the arrow keys to move

00:22.240 --> 00:26.170
around, we could have spacebar represent a jump.

00:26.350 --> 00:28.210
So let's think about how we would do that.

00:28.210 --> 00:34.420
Well, taking in keyboard input is something we already do, and that's handled by the input view.

00:34.540 --> 00:38.710
So let's start by looking at the input view and seeing how that's wired up.

00:38.710 --> 00:40.540
So here's the input view class.

00:40.540 --> 00:46.060
We have a custom event here that's going to be broadcast any time movement is detected from the Arrow

00:46.060 --> 00:51.700
Keys, the input view class itself, since it sits on a game object in the scene, it's a mono behavior.

00:51.700 --> 00:58.420
And skipping down here to the highlight in the update we do capturing some of the keys and passing that

00:58.420 --> 00:59.200
out as input.

00:59.200 --> 01:05.950
Notice here, the way that this is structured is that input is passed every single update, regardless

01:05.950 --> 01:07.750
if the user is hitting a key or not.

01:07.750 --> 01:12.970
And as per typical unity convention for arrow keys for movement, that's fine.

01:12.970 --> 01:19.420
One option I have would be to capture the spacebar being hit and always pass it in perhaps as a second

01:19.420 --> 01:21.280
parameter here to on input.

01:21.280 --> 01:28.360
But just based on my intuition, I don't like the idea of every frame passing false when the spacebar

01:28.360 --> 01:29.320
is not yet hit.

01:29.440 --> 01:34.780
So instead what I'll do is I'll create a new event that happens only when spacebar is hit.

01:34.780 --> 01:36.310
So let's take a look at how I would do that.

01:36.310 --> 01:39.880
Well, first thing, to be able to get the key of spacebar, we'll do it down here.

01:39.880 --> 01:43.840
We get the key down for the key code of spacebar.

01:43.840 --> 01:49.600
And only if that's the case will we send a new event called on Jump.

01:49.600 --> 01:54.520
So by placing this an update, we know it's going to happen every frame, which is great.

01:54.520 --> 01:56.380
And now we just need to wire this up.

01:56.380 --> 02:01.960
So I've added my own unity event here called on Jump because I'm not passing any parameters along.

02:01.960 --> 02:07.330
I'll just use the base unity event as shown here and then let's take a look at what scopes are currently

02:07.330 --> 02:10.150
listening to the existing on input.

02:10.150 --> 02:15.220
Well, I can see here in the controller that we listen and the controller handles it.

02:15.220 --> 02:20.710
I like the idea of the controller also handling the consequence of jump, so I'll duplicate this code

02:20.710 --> 02:21.550
here and update it.

02:21.550 --> 02:23.890
I see here is the handler for the input.

02:23.890 --> 02:26.710
I'll basically copy that same concept and update it.

02:26.710 --> 02:31.570
So here I've created a new method and all that I need to do is finish this up by making the appropriate

02:31.570 --> 02:32.200
command.

02:32.200 --> 02:38.620
So again, here this is the controller listening to this UI event and translating it into a command

02:38.620 --> 02:43.240
so that like a radio station, any particular concern can tune into this?

02:43.240 --> 02:46.330
I'll create the jump command from scratch to finish this up.

02:46.330 --> 02:52.090
Here's the existing input command that is taking a parameter for a vector three of how much input in

02:52.090 --> 02:53.320
each of the directions.

02:53.560 --> 02:57.490
I don't really need a parameter here, so I can just extend I command instead.

02:57.490 --> 02:59.080
So I've created the new command.

02:59.080 --> 03:01.150
And now let's think who should observe this?

03:01.150 --> 03:05.680
Well, in the case of the input command, it's the player that observes the input command.

03:05.680 --> 03:08.560
And now let's think which concerns should tune in to this?

03:08.560 --> 03:14.380
Well, the input command I know is observed by the player so that it knows how to move.

03:14.380 --> 03:15.460
That sounds like a good fit.

03:15.460 --> 03:17.170
So let's go to the player and subscribe.

03:17.170 --> 03:18.790
So here we are in the player view.

03:18.790 --> 03:24.190
Player views since it sits on a game object in the scene, it extends monarch behavior and down here

03:24.190 --> 03:26.920
in the initialize, it's listening to the input command.

03:26.920 --> 03:28.030
Let's duplicate that.

03:28.030 --> 03:30.070
So now we're listening to the jump command.

03:30.120 --> 03:31.330
Let's handle the consequence.

03:31.330 --> 03:35.500
There we see how input command is set up and then calls the appropriate physics.

03:35.500 --> 03:37.750
So I created a handler for the jump command.

03:37.750 --> 03:39.730
Now I just need to think about the physics.

03:39.730 --> 03:44.080
If I add a force upwards at the moment jump is pressed, that should handle it.

03:44.080 --> 03:48.760
First, I have to remember to pass in the jump command as required, even though I don't need any parameters

03:48.760 --> 03:49.570
from that command.

03:49.570 --> 03:53.050
This is required convention with the typical setup of a unity scene.

03:53.050 --> 03:55.480
It's the Y component that is upwards.

03:55.480 --> 04:00.700
So if I apply a force here that is upwards in the Y, we should be able to get the jumping result we

04:00.700 --> 04:01.240
want.

04:01.240 --> 04:02.860
Let's play the scene and check it out.

04:02.860 --> 04:06.310
Here's the scene playing using the arrow keys as before.

04:06.310 --> 04:08.320
And now I'll try the spacebar.

04:20.400 --> 04:21.360
Here's the game running.

04:21.360 --> 04:24.370
I'll use the arrow keys as we have been before, and I'll try out.

04:24.370 --> 04:26.430
The new spacebar seems to work great.

04:26.460 --> 04:32.100
Now, in the context of this game, we don't have any enemies or obstacles to avoid, so that would

04:32.100 --> 04:33.300
be something great to add.

04:33.300 --> 04:38.310
Next, new gameplay mechanics that make sense now that we have the ability to jump.

04:38.310 --> 04:40.430
But that's it now for this coding assignment.

04:40.440 --> 04:41.190
Thanks.
