WEBVTT

00:00.020 --> 00:01.220
Test driven development.

00:01.220 --> 00:04.790
Here's an example of a test class with a test method.

00:04.790 --> 00:08.330
Already in the course, we've seen how to run an existing test.

00:08.360 --> 00:11.080
We've seen how to create new tests from scratch.

00:11.090 --> 00:17.450
Test Driven development, or TDD, is the practice of adding tests before you add your production code.

00:17.450 --> 00:21.180
For some, especially those new to testing, this can seem odd.

00:21.200 --> 00:26.300
We'll learn more about the technique, and note that you can mix test driven development with traditional

00:26.330 --> 00:29.360
testing however you like into your own workflows.

00:29.390 --> 00:36.500
TDD creates tests that specify and validate what code will do once it's created.

00:36.950 --> 00:38.120
Here's the workflow.

00:38.150 --> 00:39.560
You create a new test.

00:39.590 --> 00:44.120
You add just enough implementation within it so that the code compiles.

00:44.120 --> 00:50.180
Since we've added just enough production code for this code to compile, perhaps even having an empty

00:50.210 --> 00:51.260
implementation.

00:51.260 --> 00:53.900
We run the test and the test fails.

00:54.260 --> 01:00.290
That's expected, and it's actually a very good place to start by first seeing a failing test.

01:00.290 --> 01:05.960
If we have more confidence that the test once it passes actually means something, you then refactor

01:05.960 --> 01:09.310
your production code until the code passes and then move on.

01:09.330 --> 01:15.860
TDD is not simply the order of testing first and writing your production code second.

01:15.860 --> 01:19.060
It's also a way of thinking about your projects.

01:19.070 --> 01:24.080
Some of this you really need to practice in order to feel the results.

01:24.080 --> 01:30.980
But what I find with more TDD experience is that you think about your new code differently, you're

01:30.980 --> 01:37.370
more focused in your development, you create more atomic code that does just one thing.

01:37.370 --> 01:42.020
And when you have your testing code pass, it's a more meaningful pass.

01:42.050 --> 01:46.280
Another way to look at this flow is that you write a failing test.

01:46.280 --> 01:51.530
You make the test pass, and then you refactor your code to meet any other goals.

01:51.530 --> 01:54.710
You have optimization, coding standards.

01:54.710 --> 01:55.490
ET cetera.

01:55.940 --> 01:57.060
And then you repeat.

01:57.080 --> 01:58.490
Let's see this in action.

01:58.490 --> 02:01.210
We'll open up a unity project that's got a test already.

02:01.220 --> 02:08.690
We'll use TDD to add a new test, create just enough production code for it to compile, see a failing

02:08.690 --> 02:12.050
result, and then refactor until we have a passing result.

02:12.820 --> 02:16.090
Here we are in a fairly empty unity project.

02:16.090 --> 02:22.450
I've made sure that the test framework is already added in the package manager as shown earlier, and

02:22.450 --> 02:25.390
I've copied one test in for us to begin with.

02:25.420 --> 02:28.250
Let's take a look at that test here in edit mode.

02:28.270 --> 02:33.660
I have one test providing coverage on the add method of a simple math class.

02:33.670 --> 02:35.720
Let's run the test it passes.

02:35.740 --> 02:37.120
Let's take a look at the code.

02:37.120 --> 02:41.300
And here we see the one test we're familiar with from earlier in the presentation.

02:41.320 --> 02:45.160
Now let's perform some test driven development as discussed here.

02:45.190 --> 02:51.280
The idea is that if we were to expand the functionality of the math system, we have a few approaches.

02:51.310 --> 02:57.010
We could either go create that production code without any testing and afterwards.

02:57.930 --> 03:01.260
And afterwards maybe we add tests, or maybe we don't.

03:02.310 --> 03:08.400
However, with test driven development, we're going to test first before we've added any production

03:08.400 --> 03:08.970
code.

03:09.730 --> 03:10.930
Let's see how that works.

03:10.930 --> 03:12.340
I'll imagine I'm creating.

03:12.910 --> 03:16.600
Let's imagine the math system needs a subtract method.

03:17.830 --> 03:22.150
Now this subtract method doesn't exist yet, as we'll see when we look at the source code.

03:22.950 --> 03:24.780
But let's make a test for it anyway.

03:25.650 --> 03:28.980
I'll start by adding the test attribute.

03:29.190 --> 03:33.030
I'll name the method with what is under test.

03:33.060 --> 03:39.990
What's the expected result and in what situation I expect for subtract, the result would be five.

03:40.020 --> 03:45.000
If I pass in ten and five, ten minus five is five.

03:45.030 --> 03:48.870
To set up the test, I instantiate a new copy of my math system.

03:49.080 --> 03:52.120
I get the result by calling the subtract method.

03:52.140 --> 03:56.730
The red text here indicates my code editor knows there's no subtract method.

03:56.730 --> 04:01.200
And finally, we expect our method to return a value of five.

04:01.230 --> 04:04.980
Because I copy and pasted this from the earlier example, it says 15.

04:05.010 --> 04:06.060
I'll change that now.

04:06.090 --> 04:08.070
Now it's checking the proper assumption.

04:08.670 --> 04:13.050
Now we know this is not going to compile, but let's save and return to unity.

04:13.080 --> 04:19.530
Let's note two things one, the console window is properly showing that there's a compiler error, and

04:19.530 --> 04:24.150
two notice in the test runner window we don't yet see our new method.

04:24.180 --> 04:26.520
These are good things to note in TDD.

04:26.550 --> 04:30.810
The next step is to make just enough code that it compiles.

04:30.840 --> 04:34.570
It's very important we don't finish the implementation at this stage.

04:34.590 --> 04:36.780
Here's the source code for our math system.

04:36.780 --> 04:41.920
Here's the very simplest implementation I can do that gets the code to compile.

04:41.940 --> 04:45.610
Notice that I don't finish the proper implementation.

04:45.630 --> 04:52.480
Now in this example, it seems trivial because we know all we need to do is subtract a and b.

04:52.500 --> 04:58.320
However, normally in test driven development, the implementation of a given method would be more complex

04:58.320 --> 04:59.400
and take more time.

04:59.430 --> 05:03.390
Regardless, we always stop here once we have enough to compile.

05:04.090 --> 05:05.250
Let's look at the test.

05:05.260 --> 05:07.840
Our code editor properly no longer shows.

05:07.840 --> 05:09.010
Subtract and red.

05:09.460 --> 05:11.260
Let's save and check unity.

05:11.290 --> 05:13.600
Now we don't see any console errors.

05:13.630 --> 05:14.170
Great.

05:14.170 --> 05:15.400
Everything is compiling.

05:15.400 --> 05:19.210
And now our test runner window properly shows the new test method.

05:19.210 --> 05:20.290
Let's run all tests.

05:20.290 --> 05:26.320
You can consider the testing of failure because one or more test methods fail.

05:26.320 --> 05:32.290
When we look at when we select the failing method, we see some small input there we see a bit of output

05:32.320 --> 05:34.120
text that shows why it failed.

05:34.240 --> 05:38.410
It's expecting five, but instead it's returning zero.

05:38.410 --> 05:40.420
Now why did we go through the motions here?

05:40.420 --> 05:46.600
It may seem trivial, but it's an important distinction that we create a test we believe tests the proper

05:46.600 --> 05:49.120
functionality, and we first see it fail.

05:49.120 --> 05:55.420
That gives us a good basis to know when a proper implementation gives a pass with confidence.

05:55.420 --> 05:57.040
Let's add the proper implementation.

05:57.040 --> 06:02.050
Here we assume that the first parameter coming in would be larger than the second, and we simply return

06:02.050 --> 06:04.080
and we simply return a minus b.

06:04.090 --> 06:05.560
Let's save and run the test.

06:07.440 --> 06:12.480
Now the test runs well and we've completed our first example of test driven development.

06:12.480 --> 06:13.410
That's it.

06:13.800 --> 06:20.580
Now, I know from my own experience that it took me time and practice with testing to really feel the

06:20.580 --> 06:21.390
benefits.

06:21.420 --> 06:29.820
While we've had a brief overview with unit testing, creating unit tests and test driven development,

06:30.420 --> 06:35.070
I hope you're beginning to see some of the benefits that could work well for you.

06:35.100 --> 06:39.360
Combining what you've learned here about testing with MVC architecture.

06:39.390 --> 06:47.340
You have the tools to create projects that are more modular, scalable, optimized, robust, and dependable.

06:47.370 --> 06:52.440
The combination of testing and good architecture is really powerful.

06:52.470 --> 06:53.430
Thanks.
