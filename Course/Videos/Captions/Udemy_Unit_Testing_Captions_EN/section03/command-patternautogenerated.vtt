WEBVTT

00:00.180 --> 00:02.800
Let's look at the command design pattern.

00:02.820 --> 00:05.390
Command is a behavioral design pattern.

00:05.400 --> 00:09.210
It's somewhat similar to observer, but different enough.

00:09.210 --> 00:11.340
It qualifies as its own pattern.

00:11.430 --> 00:17.730
Some of the benefits of using it include you can execute and undo functionality.

00:17.730 --> 00:23.360
That's often when many teams bring it on to be able to have undo functionality in their UI.

00:23.370 --> 00:30.600
But even without that paradigm, it's still tremendously successful in giving you the benefits of observer

00:30.600 --> 00:37.530
with a bit more decoupling and abstraction compared to the observer pattern here, we don't need a reference

00:37.530 --> 00:40.020
to the sender of the message.

00:40.020 --> 00:47.790
Instead, both the sender and the observer know about some sort of a messaging system that sits between

00:47.790 --> 00:48.240
them.

00:48.480 --> 00:51.510
In later code, we'll see this called the command manager.

00:51.510 --> 00:57.780
As long as those scopes can reach that command manager, it acts as the middleman between them and communication.

00:57.780 --> 01:03.990
And like the observer, this allows for data exchange and communication, which is isolated from, well,

01:03.990 --> 01:07.410
if one changes, does the other one necessarily need to change?

01:07.410 --> 01:11.720
And you can certainly have multiple observers easily added and removed.

01:11.730 --> 01:12.270
We'll see.

01:12.270 --> 01:15.600
A parallel to the observer example we saw earlier here.

01:15.600 --> 01:22.640
The three key parts are creating the command system, adding a listener and invoking it.

01:22.650 --> 01:28.230
Now typically we'd be sending commands between two or more classes, but for brevity sake, I've included

01:28.230 --> 01:29.760
in one class file here.

01:29.760 --> 01:33.380
This way we can see a complete functional example quite quickly.

01:33.390 --> 01:37.710
Now I'll mention a few more patterns, but I'll go a little bit more quickly.

01:37.860 --> 01:44.730
The next couple that I'm going to show are things that we'll see in the spirit of how MVC architectures

01:44.730 --> 01:45.570
are organized.

01:45.570 --> 01:48.960
One you may already be familiar with is the singleton pattern.

01:48.960 --> 01:55.710
Any time you want to have a system created exactly once inside your code and have global access to it,

01:55.710 --> 01:57.990
that's a great place for the Singleton pattern.

01:57.990 --> 02:05.010
Recent updates to Unity have some native solutions for this, but traditionally we've used community

02:05.010 --> 02:13.440
based singleton mono behavior classes that help us access globally to a given mono behavior or some

02:13.440 --> 02:14.420
other data type.

02:14.430 --> 02:21.450
Secondly, the facade pattern helps us reduce the perceived complexity of a series of subsystems.

02:21.540 --> 02:28.050
Let's say you have an input system and a rendering system and a physics system all created for your

02:28.050 --> 02:29.790
game instead of your player.

02:29.790 --> 02:35.940
Knowing the details of those systems, your player could interact with a facade that in turn calls those

02:35.940 --> 02:39.960
individual systems or select subsections of what they can do.

02:39.960 --> 02:43.890
Often, in developer parlance, we call this wrapping functionality.

02:43.890 --> 02:49.560
So you might say I wrapped three systems into one class for the ease of use.

02:49.560 --> 02:53.010
Mediator and proxy are two additional patterns.

02:53.010 --> 02:59.700
They are indeed separate, but I may use the terms interchangeably in both mediation and proxy.

02:59.700 --> 03:05.130
I mean, having some sort of middleman that stands between the communication, some of the benefits

03:05.130 --> 03:09.330
here are that you can easily make changes to either of the two classes.

03:09.330 --> 03:15.150
In that example, tweak the middleman and you don't have to massively refactor the system.

03:15.150 --> 03:17.070
So it's a way to mitigate change.

03:17.070 --> 03:19.980
We'll see some of these concepts in the architectures later.

03:19.980 --> 03:26.280
So just with a brief overview of design patterns here, we see that they're reusable solutions that

03:26.280 --> 03:30.540
help us solve the design challenges that come up often in our game development.

03:30.540 --> 03:36.030
While Singleton may be one that you're most familiar with in Unity, as it's often discussed, the observer

03:36.030 --> 03:42.840
pattern is probably the most useful for a beginner developer to elevate their game a little bit and

03:42.840 --> 03:47.820
some of these other patterns I mentioned specifically because later when we look at architectures,

03:47.820 --> 03:51.600
I'll be able to use those terms and you'll have a bit more familiarity.

03:51.900 --> 03:57.150
In summary for this section, we've looked at some of the high level software design concepts.

03:57.150 --> 04:04.470
We looked at design principles as philosophies to solve challenges, UML for a way to diagram and communicate

04:04.470 --> 04:05.790
about our ideas.

04:05.790 --> 04:11.580
And we looked at some design patterns, specifically observer and command, which will come back to

04:11.580 --> 04:12.180
you later.

04:12.180 --> 04:15.640
And they're a great way to decouple communication within your project.

04:15.660 --> 04:17.880
Next, let's discuss architecture.

04:17.880 --> 04:23.430
We'll look at some of the available solutions out there, the pros and cons of each of them, and narrow

04:23.430 --> 04:28.290
down to some of the popular frameworks we can use specifically for unity.

04:28.440 --> 04:29.370
Thanks.
