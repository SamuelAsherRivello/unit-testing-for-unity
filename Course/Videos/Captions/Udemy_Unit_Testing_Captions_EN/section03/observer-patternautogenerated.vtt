WEBVTT

00:00.150 --> 00:03.690
Let's look at design patterns, starting with the Observer.

00:03.720 --> 00:11.100
Now, while design principles sit very high in theory, design patterns begin a little bit more to be

00:11.100 --> 00:14.370
anchored in computer science and specific solutions.

00:14.400 --> 00:16.450
Still, they are language agnostic.

00:16.470 --> 00:22.080
You can apply these same patterns to a variety of different programming languages and platforms.

00:22.080 --> 00:28.050
You can think of a design pattern as a reusable type of solution for a design problem.

00:28.080 --> 00:32.550
Now, you can imagine in your project, there's a lot of things you're doing that are unique to the

00:32.550 --> 00:38.580
needs of your game, but a lot of the different problems that will arise and how you'll need to organize.

00:38.580 --> 00:41.160
Things have been done before in software.

00:42.090 --> 00:45.750
Some benefits of using design patterns are that they're proven.

00:46.260 --> 00:51.450
Many of these challenges have been solved before and solved quite well, so why not learn from those?

00:51.450 --> 00:56.530
And they can lead to much faster development as well as easier maintenance.

00:56.550 --> 00:59.970
Here we see a list of some of the most popular design patterns.

01:00.150 --> 01:04.620
There's certainly many more, and you can even define your own design patterns.

01:04.620 --> 01:10.380
But being familiar with about 20 of them here gives you a nice library to begin thinking about your

01:10.380 --> 01:11.220
projects.

01:11.220 --> 01:15.270
There's three major types Creational patterns make new stuff.

01:15.270 --> 01:22.950
Structural patterns organize how that stuff is set up and behavioral patterns define how these systems

01:22.950 --> 01:24.270
behave with each other.

01:24.450 --> 01:30.540
We'll look closely at just a few of these since they relate directly to the architectures we'll look

01:30.540 --> 01:31.290
at later.

01:31.290 --> 01:37.290
A tremendously popular one, one that you're probably already using, especially as a unit developer,

01:37.290 --> 01:39.030
is the observer pattern.

01:39.030 --> 01:44.040
The observer pattern defines how to or more objects may communicate together.

01:44.040 --> 01:49.290
Now we know a class can get a reference to a second class and call a method directly on that.

01:49.290 --> 01:53.480
It needs to have that reference and it needs to know exactly which method to call.

01:53.490 --> 01:58.200
That's an example of tightly connected or tightly coupled relationships.

01:58.200 --> 02:01.980
The benefits of the observer is it's not so tightly connected.

02:01.980 --> 02:08.760
While a class does need a reference to that sender, it's able to more easily exchange data and isolate

02:08.760 --> 02:12.360
the problems that come from changing one without changing the other.

02:12.360 --> 02:18.840
It also allows you to have multiple observers and easily add and remove them as we go through this pattern

02:18.840 --> 02:24.210
and others, take a look at the diagram and apply what we've learned about UML to understand a little

02:24.210 --> 02:24.870
bit more.

02:24.870 --> 02:29.730
And with each of these patterns, there's an excellent opportunity to do some additional research.

02:29.940 --> 02:32.520
Here's an observer example for unity.

02:32.520 --> 02:38.190
Now, there are several ways to solve this in unity, but a first party solution that I'm sure you're

02:38.190 --> 02:41.490
familiar with in Unity is the unity event.

02:41.790 --> 02:48.510
There's three main parts to call out here creating the event, listening to the event and invoking the

02:48.510 --> 02:49.230
event.

02:49.260 --> 02:50.630
All are shown here.

02:50.640 --> 02:58.320
Now, typically we would do this across two or more classes, but for brevity sake, I'm showing a class

02:58.320 --> 03:00.540
listening to itself, so to speak.

03:00.540 --> 03:06.030
Now, while the last example was built into unity, here's a custom class that you'll see later when

03:06.030 --> 03:07.230
we get into the code.

03:07.230 --> 03:13.020
I took some of the same concepts of the Unity event and I put them inside the observable class.

03:13.020 --> 03:13.440
Here.

03:13.440 --> 03:21.240
In this example of the observable, I'm able to create an observable listen to an observable and invoke

03:21.240 --> 03:22.380
that observable.

03:23.320 --> 03:30.430
It's such a common pattern, especially when you separate your data from the rest of your game logic

03:30.430 --> 03:33.770
to one to subscribe to when the data changes.

03:33.790 --> 03:39.420
This observable class is a really easy way to get the observer pattern tied.

03:39.430 --> 03:41.560
Any time value changes.

03:41.560 --> 03:43.510
You can see that happening in the code here.

03:43.510 --> 03:45.230
And like the last example.

03:45.250 --> 03:51.640
Typically we would use two or more classes as a full demo, but for brevity sake, I put it in one class

03:51.640 --> 03:52.210
file.

03:52.540 --> 04:00.100
The observer pattern is so fundamental and beneficial if you find that you've been using it just enough

04:00.100 --> 04:03.790
but not really understanding or feeling like you're taking advantage.

04:03.910 --> 04:06.180
Definitely go check it out more.

04:06.190 --> 04:09.610
We'll see it in some of the examples we'll do in our samples later.

04:09.610 --> 04:16.570
But also you can see it throughout many different APIs and SDKs plugged in with your Unity projects.

04:16.570 --> 04:22.360
It's tremendously simple and powerful to start separating out the different areas of your code, which

04:22.360 --> 04:23.580
will bring some benefits.

04:23.590 --> 04:24.340
Thanks.
