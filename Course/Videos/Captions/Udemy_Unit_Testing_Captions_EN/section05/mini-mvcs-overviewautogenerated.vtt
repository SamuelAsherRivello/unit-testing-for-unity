WEBVTT

00:00.330 --> 00:03.630
The mini MDC's architecture for Unity.

00:03.630 --> 00:08.820
After years of Unity experience, I created the mini MVCs architecture.

00:08.820 --> 00:12.740
Throughout the course, I may refer to it as mini or mini MVCs.

00:12.750 --> 00:17.580
When I created it, I applied the learnings I had from past architectural frameworks.

00:17.580 --> 00:23.910
These learnings include using generics, having strong typing, using the command pattern and the observer

00:23.910 --> 00:26.550
pattern for a two tiered communication system.

00:26.550 --> 00:32.670
As with other MVC based architectures, we have benefits including it is a proven solution.

00:32.670 --> 00:34.080
It's language agnostic.

00:34.080 --> 00:39.300
You can find materials on this type of approach in many different languages and platforms.

00:39.300 --> 00:45.300
Using MINI provides a more testable environment which allows for faster development and more straightforward

00:45.300 --> 00:46.650
maintenance of your projects.

00:46.650 --> 00:49.080
Some features include This is lightweight.

00:49.080 --> 00:53.310
Part of why it's called MINI is that there's very few classes and concepts involved.

00:53.310 --> 00:56.820
Also, it is specifically non money behavior.

00:56.820 --> 00:58.560
Money behaviors are optional here.

00:58.560 --> 01:04.140
The core concerns extend an interface and there are no amount of behaviors required.

01:04.530 --> 01:09.180
Behaviors become optional and you can use them for all four of the concerns.

01:09.180 --> 01:13.590
None of the concerns or whichever combination works best for your project.

01:13.590 --> 01:17.280
This demonstrates another feature that this is an opinionated framework.

01:17.280 --> 01:22.770
There is a suggested path, but it's also quite flexible based on the needs of your project.

01:22.770 --> 01:26.370
You can massage this system and get the best results for your use case.

01:26.370 --> 01:32.670
This framework is great for production use cases in your project and moreover, it's ideal for educational

01:32.670 --> 01:33.360
uses.

01:33.360 --> 01:37.650
That's why in this course I focus on it to teach the concepts of MVC.

01:37.650 --> 01:42.300
Let's take a look at this high level UML diagram showing the classes involved.

01:42.300 --> 01:47.520
Here we see the familiar major concerns of model, view, controller and service.

01:47.550 --> 01:51.090
Notice we have no direct dependencies on the unity engine.

01:51.090 --> 01:53.220
No more mono behavior is required.

01:53.220 --> 01:55.530
There's flexibility to how you implement it.

01:55.530 --> 02:01.740
But here in this example from my code, I'm subclasses, the Mini and VCs project to get started.

02:01.740 --> 02:07.110
So when looking at this framework or any other unity specific framework, some of the considerations

02:07.110 --> 02:08.610
you can ask yourselves are here.

02:08.610 --> 02:12.030
Does it have any unity specific features in this case?

02:12.030 --> 02:12.450
No.

02:12.450 --> 02:16.560
I chose not to depend and require mono behavior.

02:16.560 --> 02:19.470
For example, you can certainly add that yourself.

02:19.470 --> 02:25.110
The system is flexible to use things like mono behavior and script able object, but they're not required

02:25.110 --> 02:26.340
parts of the core framework.

02:26.340 --> 02:28.170
This was a desire to keep things light.

02:28.170 --> 02:30.150
So what's the role of mono behaviors?

02:30.150 --> 02:31.230
Well, they're optional.

02:31.230 --> 02:33.030
For each of your four concerns.

02:33.030 --> 02:35.250
You can extend mono behavior or not.

02:35.250 --> 02:39.390
So how does it handle the concerns, the conventions in the communication?

02:39.390 --> 02:43.560
Well, imagine within your project you could have one or more minis by default.

02:43.560 --> 02:48.180
I would assume you'd add one to the project, but you could split it up into more and have them communicate

02:48.180 --> 02:50.280
together for a more modular approach.

02:50.280 --> 02:54.240
You can have zero or more of each of the major concerns.

02:54.240 --> 03:00.390
I'd imagine at a minimum you'd have one mini and one controller, but then you could have multiple other

03:00.390 --> 03:05.730
controllers, multiple views if you like, multiple models and multiple services.

03:05.730 --> 03:07.560
So it scales for your needs.

03:07.560 --> 03:10.470
It's designed in such a way that the conventions you follow.

03:10.470 --> 03:16.860
The suggestions are much more important than any sort of configuration or requirement.

03:16.860 --> 03:22.500
This allows for flexibility, but I still encourage you to be vigilant with separating your concerns

03:22.500 --> 03:27.360
and watching how you communicate between those concerns that will give you a more scalable project.

03:27.360 --> 03:31.650
And speaking of communication, the system supports two tiers of communication.

03:31.650 --> 03:34.830
It has both events as well as commands.

03:34.830 --> 03:39.370
Having both of these available as options is incredibly powerful as we'll see.

03:39.390 --> 03:42.900
And finally, what's the balance of rigidity versus flexibility?

03:42.900 --> 03:48.900
Well, a core philosophy behind this framework is that it is as flexible and lightweight as possible.

03:48.900 --> 03:54.210
But to maintain a lot of the benefits we get from using an architecture, there are some rules that

03:54.210 --> 03:58.800
are suggested and however you apply them, I suggest to apply them consistently.

03:58.800 --> 04:05.520
So for the purposes of this course and our discussion on will elect Mini and VCs as our chosen unity

04:05.520 --> 04:10.590
framework to move forward, and a key component to how this information is being delivered in the course

04:10.590 --> 04:16.440
is regardless of which MVC framework you choose or if you choose to create your own framework.

04:16.440 --> 04:23.190
The design principles, the design patterns, using the diagramming we talked about, and the experience

04:23.190 --> 04:28.380
we'll see as we get deeper into this, you can bring all of these learnings to any architecture you

04:28.380 --> 04:28.890
choose.

04:28.890 --> 04:30.240
So let's get started.

04:30.240 --> 04:34.560
I'll give some context for how and why I chose the mini MVCs for this course.

04:34.560 --> 04:39.780
After spending years learning and applying architectures to different projects and wanting to teach

04:39.780 --> 04:44.340
more about those concepts, I realized it's a big subject and there's a lot to learn.

04:44.340 --> 04:51.390
I suggest the very best way to learn is to actually use these concepts in your projects, Create sample

04:51.390 --> 04:55.260
projects from scratch, bring these concepts into your existing projects.

04:55.260 --> 04:59.760
Only then will you really get the feel and learn the benefits of these solutions.

05:00.060 --> 05:05.400
I looked at all the choices that are out there from a unity perspective on the best architectures.

05:05.400 --> 05:10.200
There's a lot of great choices out there, but they're often complex learning the idiosyncrasies of

05:10.200 --> 05:10.950
each framework.

05:10.950 --> 05:16.410
So I created the mini MVCs as an easy onboarding to the concepts of MVCs.

05:16.440 --> 05:20.790
It is indeed production ready, but it's really designed for educational purposes.

05:20.790 --> 05:26.340
So enjoy as we go deeper into it, we look at samples based on it and you follow the assignments using

05:26.340 --> 05:27.000
the framework.

05:27.000 --> 05:32.310
It's my hope that at the end of the course, whether it's this particular solution or another architecture,

05:32.310 --> 05:37.230
that you see the benefits of using an architecture and you have the skills to apply them.

05:37.620 --> 05:38.460
Thanks.
