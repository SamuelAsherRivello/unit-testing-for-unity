WEBVTT

00:00.080 --> 00:00.300
Hi.

00:00.320 --> 00:06.050
That covers a lot of the different topics that I wanted to have in the workshop so far, but there's

00:06.050 --> 00:08.570
plenty of room for more topics in the future.

00:08.570 --> 00:10.940
We've seen in the workshops covered so far.

00:10.940 --> 00:17.930
This simplest example learning the test runner, seeing how we can make playmode tests, edit mode tests,

00:17.960 --> 00:23.420
learning a little bit about the differences of play mode and edit mode, and why you would want to test

00:23.420 --> 00:25.930
in one or the other, or both.

00:25.940 --> 00:32.060
Then we also saw some of the options we have when we have asynchronous functionality, or when we're

00:32.060 --> 00:34.040
dependent on other systems.

00:34.040 --> 00:38.540
What could we do to reduce that dependency for the sake of the test?

00:38.570 --> 00:43.760
Along the way there, we're learning some different things about dependency injection and separating

00:43.760 --> 00:45.230
the concerns of our code.

00:45.260 --> 00:51.290
Those principles are useful in production code anyway, and we're beginning to see some of the ways

00:51.290 --> 00:58.400
that when you prepare your code to be more testable, we're also creating code that is designed well

00:58.400 --> 00:59.660
for production.

00:59.660 --> 01:06.290
So having dependency injection allows flexibility that you can use at runtime, reducing the complexity

01:06.290 --> 01:12.920
of your systems by passing in flexible varieties of different dependencies when you need to.

01:12.950 --> 01:20.540
We've also seen by separating a monolithic large monobehaviour into just what we need from the monobehaviour

01:20.540 --> 01:27.200
and moving the other code into a lighter weight non monobehaviour class, we again get some flexibility

01:27.200 --> 01:32.150
that is useful in production and also helps us here in the testing world.

01:32.150 --> 01:38.780
I think overall some of the challenges that we're seeing are what happens when you have multiple dependencies

01:38.780 --> 01:43.250
or lots of systems called from one particular method.

01:43.610 --> 01:49.250
That might be a sign that that method is bloated and doing too much, or it might be a sign that it's

01:49.250 --> 01:51.680
a lean and appropriate designed one.

01:51.680 --> 01:57.350
But we need to have some additional thoughts and considerations when we go to testing that functionality.

01:57.350 --> 01:59.600
So I hope this has been helpful for you.

01:59.600 --> 02:06.680
I look forward to covering even more topics in this series as well, and they'll be added again in over

02:06.680 --> 02:07.190
time.

02:07.190 --> 02:08.300
So thanks again.
