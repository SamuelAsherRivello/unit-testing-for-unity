WEBVTT

00:00.110 --> 00:00.980
Hello and welcome.

00:00.980 --> 00:07.040
In this workshop, we're going to be taking a look at the My Math system, stepping into what is a pretty

00:07.070 --> 00:11.300
simple example, just getting us reacquainted with the basics of unit testing.

00:11.300 --> 00:14.720
So in this demo you can use the Core Sample project to follow along.

00:14.720 --> 00:19.520
We're going to be opening up the unity editor, opening up that core sample project, and then we'll

00:19.520 --> 00:21.140
open and play some scenes here.

00:21.140 --> 00:26.360
We're going to be looking at the My Math system as well as the test behind it, and we'll do a recap

00:26.390 --> 00:31.970
of unit testing, just kind of talking about whatever basic concepts I see in there and think to mention.

00:31.970 --> 00:38.450
And we'll also talk about parameterized values, which is an intermediate way that you can approach

00:38.450 --> 00:38.960
testing.

00:38.960 --> 00:42.620
And it's a good additional skill to have as you approach unit testing.

00:42.620 --> 00:43.640
Let's dive in.

00:43.850 --> 00:48.410
So here I'm inside the unity editor I've opened them my math system example.

00:48.410 --> 00:51.050
Let's just give the scene itself a play.

00:51.080 --> 00:54.710
Sometimes in these workshops the scene is more exciting.

00:54.710 --> 00:56.300
This one not so exciting.

00:56.300 --> 01:01.730
We'll go ahead and hit play down here in the bottom window, we see some simple text that's helping

01:01.730 --> 01:07.040
us understand we're in the unit testing demo, and we're going to just play the scene and view the console.

01:07.040 --> 01:08.510
So let's look at the console.

01:08.600 --> 01:11.210
The console says this scene has no UI.

01:11.630 --> 01:14.510
See the unity console here we are in the console.

01:14.510 --> 01:15.140
Really.

01:15.140 --> 01:19.880
It's just going to show us a value that's been spit out after a successful operation.

01:19.880 --> 01:25.370
So this would, in real production code, be a much more interesting scene.

01:25.370 --> 01:30.590
Perhaps there's actually the game menu or the game play happening here.

01:30.860 --> 01:35.810
This is quite a lean scene here where there's not much to see, but you can imagine that that could

01:35.810 --> 01:36.200
be.

01:36.770 --> 01:41.960
It's not particularly important that there be a runtime scene for the testing sake.

01:41.960 --> 01:47.600
I just want to often talk about the balance between here's your production code doing its production

01:47.600 --> 01:48.200
thing.

01:48.200 --> 01:51.560
And then over here is the test code doing its test thing.

01:51.560 --> 01:57.380
So production code, we always experience that by hitting play on a unity scene just like this.

01:57.380 --> 02:00.860
And to do our unit testing we do something different.

02:00.860 --> 02:04.040
What we do here is we look at the test runner window.

02:04.580 --> 02:08.420
We explore the category appropriate to what we want to look at here.

02:08.420 --> 02:10.550
We're just looking at the my math system.

02:11.630 --> 02:14.090
And then we hit let's see.

02:14.090 --> 02:15.350
Let's just do the edit mode task.

02:15.470 --> 02:19.850
We'll do run all here and all the tests run just like that.

02:19.880 --> 02:22.120
Now it didn't actually run the scene.

02:22.130 --> 02:28.490
It's just running kind of off on the side in its own little universe, running those tests inside an

02:28.490 --> 02:29.360
edit mode.

02:29.360 --> 02:32.860
So edit mode tests talking a little bit about the difference there.

02:32.870 --> 02:38.090
Edit mode tests run in edit mode, which in unity there's two primary modes.

02:38.090 --> 02:43.700
Basically, from the moment you hit the play button to the moment you hit the play button, that is

02:43.700 --> 02:44.360
play mode.

02:44.390 --> 02:47.990
That's generally where the user experiences the unity game.

02:48.680 --> 02:53.240
Any anytime we're not in that mode, we're in edit mode sitting right here, we're in edit mode.

02:53.270 --> 02:59.330
These tests are run in edit mode because they don't necessarily need all the complexity of a runtime

02:59.330 --> 02:59.870
scene.

02:59.870 --> 03:05.180
This helps us have a more simple little isolated area where these codes run.

03:05.180 --> 03:10.850
Now sometimes you need the conveniences of monobehaviours and runtime functionality.

03:10.850 --> 03:14.750
That's where the play mode comes into into uses.

03:14.750 --> 03:17.330
And here we've got some play mode tests as well.

03:17.330 --> 03:22.550
So each time I click one of these checkboxes, you can see it's showing us some slightly different lists

03:22.580 --> 03:23.810
of what we've got available.

03:23.810 --> 03:26.240
So here in play mode I'm going to hit run all.

03:27.020 --> 03:34.670
And here it's actually creating a brand new scene, running a runtime scene that's just for demo sake

03:34.670 --> 03:36.380
with whatever test code I've got.

03:36.380 --> 03:39.920
And then returns us back to the original scene we were in.

03:39.920 --> 03:44.180
If we didn't have the scene saved, it would prompt us and say, hey, you're about to run a play mode

03:44.210 --> 03:44.660
test.

03:44.690 --> 03:46.430
We're going to temporarily leave your scene.

03:46.460 --> 03:48.110
Do you want to save your scene first?

03:48.110 --> 03:50.570
Generally, that's a good idea, so look out for that.

03:50.600 --> 03:52.370
Now let's look at the source code.

03:52.400 --> 03:56.060
Let's first look at the runtime production code.

03:56.060 --> 03:58.850
So we'll open up the My Math system example.

03:58.880 --> 04:05.810
Each of these workshops has, generally speaking one game object with one example script that kicks

04:05.810 --> 04:06.620
it all off.

04:06.620 --> 04:12.560
So when we look at that, here we are in the code editor and we can see the complete my math system

04:12.560 --> 04:13.250
example.

04:13.250 --> 04:18.740
Now this is a monobehaviour because I want to have the conveniences of code sitting on a game object.

04:18.740 --> 04:20.230
And then inside the awake.

04:20.240 --> 04:23.450
Here I'm going to simulate some production code.

04:23.450 --> 04:29.210
Now it's very lean, there's not much to it, and it kind of looks the same as the test we're about

04:29.210 --> 04:34.850
to look at, because I create the class from scratch and then I call a method on it, and then I show

04:34.850 --> 04:35.600
the results.

04:35.600 --> 04:41.390
But it's important to know that in a production example, in a real game project, this equivalent would

04:41.390 --> 04:46.640
be many classes and all the scenes and all the prefabs and all the complexity you would generally have

04:46.640 --> 04:47.600
in your project.

04:47.600 --> 04:50.300
But here I'm keeping it purposely very lean.

04:50.300 --> 04:51.980
So notice what we do here.

04:51.980 --> 04:53.960
We create the my math system.

04:53.990 --> 04:58.820
We grab a couple of ints and populate them with the values five and ten.

04:58.820 --> 05:01.010
And then we call the my Math system.

05:01.010 --> 05:03.620
And we pass in the five and ten together.

05:03.620 --> 05:05.570
And then here we show the result.

05:05.570 --> 05:07.100
So let's go ahead and do that.

05:07.100 --> 05:08.540
So here I hit play.

05:12.600 --> 05:16.600
And down here in the console window we see the result is 15.

05:16.620 --> 05:22.290
Now, I like the simplicity of this coding example, because it starts us thinking about in a world

05:22.290 --> 05:27.570
where unit tests never existed, how would I go about being sure that this code is functional?

05:27.600 --> 05:34.620
Well, perhaps this code of my math system is used in many, many places of your game, and you simply

05:34.620 --> 05:40.020
any time you want to see and validate that this system is working well, you just play the game and

05:40.020 --> 05:44.160
your game might be several minutes long, or it could be several hours long.

05:44.160 --> 05:50.220
And this particular system that's under test could be used throughout so many different places, depending

05:50.220 --> 05:53.400
on different user behavior and input and situations.

05:53.400 --> 05:55.740
Perhaps the time of day would be matter.

05:55.740 --> 06:01.020
And so it's difficult for you to know am I really testing it in raw isolation?

06:01.020 --> 06:09.570
So one first move I could do if I wanted to do some validation is I could copy this here, paste it

06:09.570 --> 06:10.440
here.

06:12.790 --> 06:15.290
And call this here and test.

06:15.310 --> 06:16.840
Well, what if it was six?

06:16.840 --> 06:18.700
And what if it was 11?

06:20.790 --> 06:22.410
A to, B to.

06:27.060 --> 06:33.060
So now I'm testing not a unit test, but I'm just validating two different examples here.

06:33.060 --> 06:35.820
So I'm doing this one first and I'm doing that in second.

06:35.850 --> 06:42.840
Now this is called user testing or play mode testing or integration testing where I'm actually running

06:42.840 --> 06:43.980
production code.

06:43.980 --> 06:50.760
And I'm just trying it out as a user, hoping that I accidentally ask it to do a bunch of different

06:50.790 --> 06:53.690
operations, see that none of them fail.

06:53.700 --> 06:57.870
But you could imagine that what I'm doing here is adding stuff that I don't really want for the end

06:57.870 --> 06:59.190
user experience.

06:59.190 --> 07:05.700
I'm just trying to give myself a little bit more confidence in my own code by calling some functionality

07:05.700 --> 07:06.960
extra times.

07:06.990 --> 07:13.590
You might also set a boolean somewhere in your project that says like is debug mode is true, and then

07:13.590 --> 07:15.330
you throughout your production code.

07:15.330 --> 07:18.810
If that's the situation, you'll do a little extra testing.

07:18.810 --> 07:20.220
Now that's not bad.

07:20.220 --> 07:25.200
In certain situations, it can definitely help you, but let's look at how much better the situation

07:25.200 --> 07:25.770
can be.

07:25.770 --> 07:29.010
If instead of doing this, I run unit tests.

07:29.010 --> 07:31.860
So here's where this project the code sits.

07:31.860 --> 07:36.060
In this project we've got the My Math system, My Math system example, which we've looked at.

07:36.750 --> 07:42.630
The structure of that and the way that they work together is talked about earlier in the course.

07:42.630 --> 07:47.430
But we have one editor test and one runtime test that we'll talk about.

07:47.430 --> 07:54.030
Again, any editor test is going to run an edit mode, and it's generally ideal for things that do not

07:54.030 --> 07:57.360
use unity specific classes like Monobehaviour.

07:57.390 --> 08:02.520
Monobehaviour is designed only to run in its fullest way in play mode.

08:02.520 --> 08:04.470
So here it's not too appropriate.

08:04.470 --> 08:04.950
So.

08:04.950 --> 08:07.860
But for simple tests like the one that we've got here, it's great.

08:07.890 --> 08:12.630
The runtime area here where we have the play mode test would be a great place.

08:12.630 --> 08:18.180
And each of these workshops I do one of each just so you can see the differences.

08:18.180 --> 08:23.040
But it's important to think that in certain situations, depending on what you're testing, probably

08:23.040 --> 08:27.060
a unit test in edit mode is more appropriate in this situation.

08:27.060 --> 08:31.680
That's definitely the case later when we're talking about moving with input and doing something with

08:31.680 --> 08:37.800
physics, maybe the play mode test is required there, because input and physics are really designed

08:37.800 --> 08:39.270
as play mode experiences.

08:39.270 --> 08:41.700
So it's important to know that distinction.

08:41.700 --> 08:43.080
And I'll bring it up here and there.

08:43.320 --> 08:45.840
So let's look at the my math system test.

08:49.240 --> 08:52.210
And see how that is organized.

08:53.800 --> 08:59.050
So here, notice that the My Math system test has a few different.

09:04.440 --> 09:06.270
Has a few different methods under it.

09:06.420 --> 09:10.560
Each of the names that we see here are the names of the test methods.

09:10.560 --> 09:12.180
So let's start with the first one.

09:12.570 --> 09:18.030
The convention that I like to use is followed here, and we'll go into it in the code I generally put

09:18.030 --> 09:23.520
first, what method are we testing, what are we expecting and then what's the situation.

09:23.520 --> 09:26.490
So here it says the add method is what we're testing.

09:26.490 --> 09:31.140
We expect the result will be 15 when we pass in five and ten.

09:31.380 --> 09:36.840
So a nice shortcut here is that as you're running any tests you can just double click it to run it again.

09:37.890 --> 09:39.600
And then I can right click it.

09:41.550 --> 09:42.420
Sorry, I was in play mode.

09:42.960 --> 09:44.910
Double click it and it runs again.

09:44.940 --> 09:45.390
Great.

09:45.390 --> 09:46.290
Still green.

09:46.290 --> 09:49.650
And I can right click it and choose open source code.

09:50.810 --> 09:54.860
That's an easy way to get right to the right class and right to the right method.

09:54.890 --> 09:57.380
Here again is that method name that we saw.

09:57.410 --> 10:00.920
Again add result is 15 when five and ten.

10:00.950 --> 10:07.130
The reason that that's important is that if you have lots of test classes with lots of test methods,

10:07.130 --> 10:14.660
and I hope that you do in your project in order to reason which in the test runner is which in the code

10:14.660 --> 10:17.670
base here, it's nice to have that consistent naming.

10:17.690 --> 10:22.960
So here what we do, we do the arrange, act and assert methodology.

10:22.970 --> 10:23.780
In the arrange.

10:23.780 --> 10:28.370
What we're going to do first is just create a fresh instance of what we want to test.

10:28.370 --> 10:32.490
That way we know it hasn't been sitting around, doesn't have any old data inside of it.

10:32.510 --> 10:33.850
It's always a good practice.

10:33.860 --> 10:35.540
Then we're going to act upon that.

10:35.540 --> 10:39.200
This is like, what is the one method if you can get away with it?

10:39.200 --> 10:41.750
Maybe two methods that really do the testing.

10:41.750 --> 10:43.220
But one method is ideal.

10:43.250 --> 10:45.740
Here we're adding together five and ten.

10:45.740 --> 10:49.720
And then in the assert we're going to use this assert language.

10:49.730 --> 10:56.720
The assert class has a certain structure to it where you say I assert that something is something.

10:56.720 --> 11:01.730
And you can look at the documentation on that to see some variety of ways that you can format that.

11:01.730 --> 11:07.840
But often I use is equal to or is true or is false.

11:07.850 --> 11:10.730
So those are ones that you'll see quite commonly here.

11:11.060 --> 11:15.980
So when I run that because the code runs correctly it adds five and ten to be 15.

11:16.010 --> 11:16.760
That's it.

11:16.790 --> 11:18.070
We're able to do that.

11:18.080 --> 11:21.710
Now remember the example I was giving in the production code.

11:21.710 --> 11:30.710
What if you wanted to test five and ten and then test six and 11 and then test seven and 12 or whatever

11:30.710 --> 11:31.760
combinations?

11:31.760 --> 11:38.570
The better you get at testing, you'll realize how many tests you really need to provide adequate coverage.

11:38.600 --> 11:44.240
There's a lot of an art and a science around what's the minimum number of tests you can provide that

11:44.240 --> 11:47.800
maximize your impact, and the code coverage that you have.

11:47.810 --> 11:53.090
So one of the things that I wanted to talk about as part of this particular workshop is what are called

11:53.090 --> 11:54.890
parameterized tests.

11:54.890 --> 12:01.520
So instead of just copying this one, pasting it below, and tweaking the values to add together six

12:01.520 --> 12:08.840
and 11 or 0 and negative ten, we can ask unity to run the same exact test, but passing in some different

12:08.840 --> 12:09.590
values.

12:09.590 --> 12:11.810
There's a lot of different options you have here.

12:11.810 --> 12:13.400
I'm just showing one of them.

12:13.400 --> 12:15.890
But let's take a look down here.

12:16.790 --> 12:23.150
We say, and together that we assume the result is correct when these values.

12:23.150 --> 12:28.670
So the method names a little bit more vague because it's parameterized, I don't necessarily know.

12:28.700 --> 12:31.490
Is this going to test five and ten is 15.

12:31.520 --> 12:37.340
Notice here instead of the what I did before which was declaring five and ten.

12:37.370 --> 12:42.950
In the body of the method I use this particular language, I use something called value source.

12:42.950 --> 12:44.300
And then I pass it in.

12:44.300 --> 12:50.180
What unity does is it populates this first passes values in here.

12:50.180 --> 12:51.800
So let's say it's five.

12:51.830 --> 12:54.380
Then it grabs another value source here.

12:54.410 --> 13:01.070
Let's say that one is ten and it assumes that they are five plus ten added together.

13:01.070 --> 13:06.020
So each time it runs, it's going to do the equivalent of the last test that we saw.

13:06.020 --> 13:12.110
But instead of being hard coded to just one set of values, it's going to mix it up and show a variety

13:12.110 --> 13:12.620
of them.

13:12.620 --> 13:15.520
Now again, there's lots of different ways you can format this.

13:15.520 --> 13:19.730
So you want to look at the documentation for parameterized tests in unity.

13:19.730 --> 13:21.980
But let's look at my specific case here.

13:22.010 --> 13:24.410
Those value sources values A and b.

13:24.410 --> 13:27.860
They just refer to a couple arrays that I've got up here.

13:27.860 --> 13:34.040
And what it's going to do is just step through and it's going to test one and one, negative two and

13:34.040 --> 13:36.620
negative two, negative three and negative three and pass them in.

13:36.650 --> 13:43.130
You could organize them any way you want and test different scenarios where you maybe do seven, 11

13:43.130 --> 13:43.730
and 12.

13:43.760 --> 13:45.260
You test anything you want.

13:45.290 --> 13:48.080
Now you don't have to test infinite amounts there.

13:48.080 --> 13:50.510
This is where that art and science comes along.

13:50.510 --> 13:57.020
You might want to test a couple of negative values zero in some scenarios and a couple of positive values.

13:57.050 --> 14:01.880
Maybe what you're doing is not math based and you want to think about it another way, but what you're

14:01.880 --> 14:04.460
looking for what are called corner cases.

14:04.460 --> 14:10.310
So for example, if you were doing a division method and you wanted to test it mathematically, there's

14:10.310 --> 14:12.800
a challenge about dividing by zero.

14:12.800 --> 14:17.030
So you would want to see that you pass in zero and handle that elegantly.

14:17.030 --> 14:22.100
You really need to know the specific domain that your production code lies in, in order to know how

14:22.100 --> 14:22.790
to test it.

14:22.790 --> 14:27.080
But here a couple of each positive and negative and stuff like that.

14:28.230 --> 14:31.010
So let's look at how that looks in the unity editor.

14:31.020 --> 14:32.730
So notice what it does here.

14:32.730 --> 14:38.040
It actually runs 49 tests based on all the combinations that we've got there.

14:38.040 --> 14:41.930
So it shows you when values are and then it passes in.

14:41.940 --> 14:43.490
So that's really nice.

14:43.500 --> 14:50.490
Now as you're looking at this output you might realize oh it's going to be important to me to test 100

14:50.490 --> 14:51.860
and -100.

14:51.870 --> 14:52.410
Great.

14:52.410 --> 14:58.950
Then just go back and add those sample values in if you want to do other things instead of just a hard

14:58.950 --> 14:59.700
coded list.

14:59.700 --> 15:03.600
If you want to select a random values, there's lots of other options you have there.

15:03.600 --> 15:06.240
Again, do some research on parameterized tests.

15:06.420 --> 15:10.950
You can dig into the play mode test as well if you want, but since that's going to be more interesting

15:10.950 --> 15:15.060
in other examples, we'll move on and conclude this one of the workshops.

15:15.060 --> 15:15.900
Thanks.
