WEBVTT

00:00.260 --> 00:03.380
Hello and welcome to Unit Testing for unity.

00:03.410 --> 00:07.340
In this workshop we're looking at the character class in an advanced version.

00:07.340 --> 00:09.290
Let's take a look at this demo in action.

00:09.290 --> 00:11.330
Here we're going to open up our unity.

00:11.360 --> 00:13.310
We're going to open up our sample project.

00:13.310 --> 00:18.830
And we're going to take a look at a scene inside for the character advanced situation here I want to

00:18.830 --> 00:21.620
talk a little bit about code separation.

00:21.650 --> 00:26.420
Earlier in one of the workshops, I talked about the different dependencies that you'd have.

00:26.420 --> 00:28.670
For example, if you're calling a back end server.

00:28.670 --> 00:35.840
And in that situation, we used a substitute library to mock out and not need to call the back end.

00:35.870 --> 00:42.230
It's a similar discussion here where we're looking at what are the dependency involved with a particular

00:42.230 --> 00:48.950
test scenario, and how do we be aware of those different dependencies, and what do we want to do about

00:48.950 --> 00:49.190
it?

00:49.220 --> 00:51.740
Here we're not going to use the substitute library.

00:51.740 --> 00:56.270
We're going to think about separating our monobehaviour from other code and taking a look.

00:56.480 --> 00:58.250
So here we are inside unity.

00:58.580 --> 00:59.750
We've got a production class.

00:59.750 --> 01:00.560
Let's take a look at it.

01:00.560 --> 01:01.160
Running.

01:04.840 --> 01:07.810
Down here, we see that we can move around with our arrow keys.

01:07.810 --> 01:11.350
Just like in the basic example, the end user experience is the same.

01:11.350 --> 01:16.630
And that's something of an interesting example here, that some of the changes that we do for the code

01:16.630 --> 01:21.550
quality and testability of our systems doesn't necessarily impact the end user.

01:21.580 --> 01:22.680
That's a positive.

01:22.690 --> 01:25.570
So let's take a look at the production code here.

01:25.570 --> 01:27.640
We'll open up the character advanced example.

01:27.640 --> 01:29.200
Here's a complete example.

01:29.200 --> 01:35.140
What we're doing inside the wake of this example class is we're creating a primitive for the cube.

01:35.140 --> 01:37.600
We give it a name for organization sake.

01:37.690 --> 01:45.310
Then instead of one line here where we just add a component that has all of our functionality, we do

01:45.340 --> 01:46.480
two steps.

01:46.720 --> 01:52.000
This is reminding me a little bit of the dependency injection we saw in the My Data loader example.

01:52.000 --> 01:55.300
But this is a different use case with different dependencies.

01:55.300 --> 02:00.250
So instead of just one add component line we do the add component.

02:00.250 --> 02:05.590
And then we create our own non monobehaviour character advanced class.

02:05.590 --> 02:07.840
And we pass in the Monobehaviour.

02:07.840 --> 02:12.700
So we're passing in the dependency that the character advance is going to use.

02:12.730 --> 02:19.240
Now character advanced is not a monobehaviour, and thereby we have more flexibility with how we want

02:19.240 --> 02:19.810
to test it.

02:19.840 --> 02:23.110
We could test it at edit mode, for example, more easily.

02:23.260 --> 02:28.330
Again, whenever you're using Monobehaviours that's more appropriate for play mode tests.

02:28.360 --> 02:31.270
It's not a hard rule, but that's one way to think about it.

02:31.270 --> 02:37.960
So here, by separating our monobehaviour from our non monobehaviour, we've got a few more options.

02:37.990 --> 02:43.360
Now we're still here in a play play mode environment because this is the production code.

02:43.360 --> 02:46.270
Let's step in and see how our source code is changed.

02:46.270 --> 02:48.340
So here we are in the character advanced.

02:48.370 --> 02:50.530
You'll see that it looks pretty familiar.

02:50.530 --> 02:56.400
Most of the code in here is going to be just like the previous basic example, a few exceptions.

02:56.410 --> 03:02.980
One is that the character advanced is going to take in a reference in its constructor to the Monobehaviour.

03:03.010 --> 03:08.200
This is because it needs to know some things about the Monobehaviour, particularly around its transform

03:08.200 --> 03:09.040
position.

03:09.130 --> 03:15.700
There's also a situation where we need to use the second line and tell the Monobehaviour a reference

03:15.700 --> 03:18.130
back to us as the character advanced.

03:18.160 --> 03:24.790
This is just so that the Monobehaviour, whenever it calls update can tell us to do the proper move.

03:24.820 --> 03:30.280
There's other ways you could organize this, but for simplicity's sake, we're passing in the monobehaviour

03:30.280 --> 03:31.660
and handling it this way.

03:31.990 --> 03:34.480
Let's see what other changes we see in the code base.

03:35.800 --> 03:38.140
The move type is the same as the basic.

03:38.170 --> 03:40.360
The move by input is the same.

03:41.260 --> 03:45.610
Down here the move by key code is very similar if not identical.

03:46.480 --> 03:52.930
And then down here in the move to and move by, you can notice that we are getting and setting the position

03:52.930 --> 03:55.630
on the transform of the Monobehaviour.

03:55.630 --> 04:02.590
So again we have mostly a non monobehaviour class here doing what it can do without any dependency on

04:02.590 --> 04:08.130
Monobehaviour and only in the most necessary spots does it address the Monobehaviour.

04:08.140 --> 04:14.140
That separation begins to help us think about how could we test just the monobehaviour if we could,

04:14.170 --> 04:17.140
how could we test just the non monobehaviour if we could?

04:17.170 --> 04:22.570
Now, this isn't a perfect example because it's kind of the mid step as we're going along learning about

04:22.570 --> 04:24.370
how we can properly separate these.

04:24.370 --> 04:25.900
But I think it's a good learning.

04:25.900 --> 04:29.800
So look at the source code here for character advanced.

04:29.800 --> 04:33.880
Compare it to character Basic on your own time and see the differences there.

04:34.030 --> 04:36.910
Then let's take a look at the example that we do.

04:36.910 --> 04:37.240
Again.

04:37.270 --> 04:38.830
Here's the example that we saw.

04:38.830 --> 04:40.000
So it's these two lines.

04:40.000 --> 04:41.200
That's really the key.

04:41.230 --> 04:47.290
We're going to add a component of the character advanced Monobehaviour onto our game object.

04:47.290 --> 04:49.580
And then we're going to create a new character advanced.

04:49.580 --> 04:50.740
That's a separate step.

04:50.740 --> 04:54.310
So you could imagine we would be able to test those two things in isolation.

04:54.310 --> 04:56.650
Now they are quite dependent on each other.

04:56.680 --> 04:58.390
There's ways that we could massage that.

04:58.390 --> 05:01.300
So that one does not directly depend on the other.

05:01.300 --> 05:07.660
Or we could do something like we did in the data loader example and use a substitute library so that

05:07.660 --> 05:10.080
we're mocking in the dependency instead.

05:10.090 --> 05:15.730
But again, for simplicity of just learning how to separate a monobehaviour apart, I think we've done

05:15.730 --> 05:16.510
the case here.

05:16.510 --> 05:21.430
You can run those tests with the edit mode and the play mode on your own time and take a look at this.

05:21.640 --> 05:27.760
But for me, I think we're done talking about the differences in separating monobehaviour and non monobehaviour.

05:27.790 --> 05:28.450
Thanks.
