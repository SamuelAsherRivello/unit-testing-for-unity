WEBVTT

00:00.080 --> 00:09.410
Let's take a look at a demo of the mini MVC system and how you can have multiple minis in the same project.

00:09.440 --> 00:11.750
Now, why would you need to do that?

00:14.180 --> 00:15.380
It is a great question.

00:15.380 --> 00:17.760
I needed to have a drink of water just to think about it.

00:17.780 --> 00:27.650
So typically in a project, the reason that you bring on an off the shelf architecture like MVC or specifically

00:27.650 --> 00:35.600
in this case, the mini MVC framework, is that you want to set your project up to be more maintainable

00:35.600 --> 00:38.960
and more scalable as the project grows.

00:39.700 --> 00:46.810
Now, the first thing that you would do is create the mini structure and inside of it the model view

00:46.810 --> 00:48.660
controller and service.

00:48.670 --> 00:53.230
Most of our demo projects have that level of complexity.

00:53.590 --> 01:00.130
If you want to add a bit more complexity into the project because the feature set grows, you could

01:00.130 --> 01:05.350
add another model, another view, another controller, another service, right?

01:05.350 --> 01:12.430
So you could have as many of those concerns as you want, all within the same mini, but you could also

01:12.430 --> 01:18.910
another tool that you have at your disposal is to have multiple minis be in the same project.

01:18.910 --> 01:24.970
So imagine a game where the core game loop, let's say we're playing Pac-Man, taking the input of Pac-Man,

01:24.970 --> 01:31.480
moving around, grabbing the power pellets, the eye of the enemies, all that core game logic could

01:31.480 --> 01:34.810
live in one mini and you complete your whole game that way.

01:34.810 --> 01:38.770
And then you say, Well, now we need to make a meta loop around the entire thing.

01:38.770 --> 01:44.600
We need to have multiple worlds, we need to have some social features, we need to have multiplayer,

01:44.600 --> 01:50.570
we need to have high score tables, whatever you're going to wrap around the core experience, you could

01:50.570 --> 01:56.120
add model view controller for that, or you could create a separate mini that is the meta game and then

01:56.120 --> 02:02.030
you could have the core game mini and the meta mini talk to each other in a predictable way.

02:02.030 --> 02:09.260
So there's lots of different ways that you can scale up your project once you get mini MVC Incorporated

02:09.260 --> 02:10.340
into your project.

02:10.340 --> 02:15.530
So we'll take a look at a demo of multiple minis in one demo project.

02:15.530 --> 02:21.230
So this is part of a course which is the MVC architecture for Unity Course.

02:21.230 --> 02:23.960
MVC stands for Model View and Controller.

02:23.990 --> 02:27.410
The high level content is here even deeper.

02:27.410 --> 02:33.650
Looking at the course content, we can see that we've got different sample projects, so the course

02:33.650 --> 02:40.910
goes over how to create a simple clock, how to create a login, how to have the Rollerball unity demo

02:40.940 --> 02:46.400
where you have a ball moving with physics, collecting different cubes done with physics and scoring

02:46.400 --> 02:47.030
points.

02:47.030 --> 02:48.830
It's a classic unity project.

02:48.830 --> 02:55.100
It's done for you here in mini MVC in the course, and then there's a custom sample project as well.

02:55.100 --> 02:58.340
What we're looking at now is more demos that we've added.

02:58.340 --> 03:03.380
On top of that, there's about ten different ones, but the one we're going to focus on here is multi

03:03.410 --> 03:04.040
minis.

03:04.040 --> 03:06.200
So let's take a look at that inside Unity.

03:06.860 --> 03:08.840
So here we are inside Unity.

03:08.840 --> 03:14.930
If you look at the if you're in the course and you follow the course, you can download it that way.

03:14.930 --> 03:22.820
If you're in the just grabbing the free code off of GitHub, then you'll have the mini MVC here in your

03:22.820 --> 03:28.550
package manager and you just want to go over here to the samples and import the samples and then you'll

03:28.550 --> 03:30.260
have access to all we're about to see.

03:30.260 --> 03:32.000
And that's already done here for me.

03:32.000 --> 03:35.390
And if I look over here in the more folder.

03:37.260 --> 03:40.350
We have we got multiple minis here, right?

03:40.350 --> 03:42.060
So that's the one we've got set up.

03:44.070 --> 03:49.350
So in the multiple minis we've got, let's just run the scene to start with.

03:51.320 --> 03:59.300
So here we have a left mini, which is a view model controller on the left side of the screen and a

03:59.300 --> 04:01.870
right mini, which is a completely separate mini.

04:01.880 --> 04:08.960
So if you follow it along and seen previous videos in the course or previous videos from this topic

04:08.960 --> 04:14.960
on YouTube from me, you'll know that generally in each demo we have exactly one mini.

04:14.960 --> 04:21.140
But for talking about how you could scale up and those options I mentioned just a few minutes ago,

04:21.140 --> 04:25.820
this demo shows two minis here, so notice they look kind of similar.

04:26.210 --> 04:32.240
One is about 50% of the screen real estate on the left and one is about 50% on the right.

04:32.240 --> 04:35.180
And they have quite similar looking layouts and stuff.

04:35.180 --> 04:39.620
That was just to have kind of some some similarities here for for symmetry.

04:39.620 --> 04:45.740
But they don't necessarily need to be logically or semantically similar in that way.

04:45.740 --> 04:46.940
You could have one.

04:46.940 --> 04:51.450
Again, that's just the core logic of the game and one that's the meta around it.

04:51.480 --> 04:57.210
You could have one that is about 10% of the user experience and another one that is 90% of the experience.

04:57.210 --> 04:58.920
You could have even more than two.

04:58.950 --> 05:01.860
You could have three, four, five minis inside of a project.

05:01.890 --> 05:05.340
You could imagine creating a unity package that is a mini.

05:07.260 --> 05:08.460
In distributing them.

05:08.460 --> 05:14.670
And then people who have a mini based project or a non mini based project could bring that package in

05:14.670 --> 05:15.750
and everything could work.

05:15.750 --> 05:20.310
So you can think of minis as their own little world and a lot of flexibility in how you integrate them.

05:20.400 --> 05:22.200
So here what we do.

05:22.850 --> 05:26.150
Is we can click the increment counter button on the left.

05:27.020 --> 05:30.290
And it is updating the counter on the right mini.

05:30.560 --> 05:32.720
Now, there's lots of ways you could structure this.

05:32.750 --> 05:38.600
It's a somewhat arbitrary example here to split this, but for the sake of demo on the left, it takes

05:38.600 --> 05:41.710
input and on the right it renders to the View.

05:41.720 --> 05:43.670
So let's take a look at how this scene is set up.

05:44.860 --> 05:50.560
So here we have the world which just hides the camera and the light, since that's not too interesting

05:50.560 --> 05:51.550
for our talk.

05:51.850 --> 05:59.740
Then we have the left view, which is the portion just shown on the left and the right, which is the

05:59.740 --> 06:01.150
portion just shown on the right.

06:01.180 --> 06:03.760
Each of those are unity canvases.

06:03.760 --> 06:04.690
If you care.

06:04.780 --> 06:10.180
Then down here we have the multi mini example itself.

06:10.180 --> 06:11.740
So this is a monobehaviour.

06:11.740 --> 06:18.550
That is the demo that gets everything started and I just pass in a reference to the left view and a

06:18.550 --> 06:24.760
reference to the right view so that the demo can link them up together the way that it needs to.

06:25.060 --> 06:27.850
So let's start here by looking at the mini example.

06:29.080 --> 06:30.360
You zoom out a little bit.

06:31.910 --> 06:33.380
So zamana behavior.

06:33.920 --> 06:35.600
I take a serialized field.

06:37.520 --> 06:38.900
Of the left and the right.

06:40.620 --> 06:42.180
Then what I do.

06:42.210 --> 06:46.020
Quite fundamental and important to this demo.

06:46.740 --> 06:56.100
Is I create the context outside of the minis and I pass the same context in to the left mini and into

06:56.100 --> 06:57.000
the right mini.

06:57.090 --> 06:58.740
Now, why is that important?

06:58.860 --> 07:05.610
The context, much like the typical word context in life, context is decisive.

07:05.640 --> 07:12.630
Context determines which options and possibilities present themselves as available to you.

07:12.660 --> 07:18.580
So if I pass the same context into the left and to the right, they're able to communicate to each other.

07:18.600 --> 07:24.630
They can, for example, send commands to each other or get a reference to the model for each other.

07:24.660 --> 07:26.790
They're basically living in one world.

07:26.820 --> 07:28.980
If for sake of argument.

07:29.990 --> 07:36.140
I had a context one and a context two and I passed one into the left and two into the right.

07:36.170 --> 07:39.530
Then left and right cannot talk to each other.

07:39.770 --> 07:46.310
That's part of the encapsulation of how object oriented programming work, which is reinforced in how

07:46.340 --> 07:47.330
many works.

07:47.330 --> 07:53.150
But if you want to be able to communicate, then you pass the exact same one reference to both.

07:53.600 --> 07:54.080
Right.

07:54.080 --> 07:59.630
So let's look at the example on the left takes in that left view, takes in the context that we just

07:59.630 --> 08:00.470
discussed.

08:03.770 --> 08:06.800
And it will do the initialization.

08:06.800 --> 08:09.060
So let's see how the initialization works.

08:09.080 --> 08:15.560
So what it does here is let's see, there's different options that I mentioned here in the comments.

08:15.560 --> 08:17.720
You could do different things.

08:17.720 --> 08:21.320
But what I do here is I create the model here inside.

08:21.440 --> 08:29.690
I pass that universal context into the model, then I pass the context into the view, and then I create

08:29.690 --> 08:30.620
the left controller.

08:30.620 --> 08:32.480
So let's take a look at the left controller.

08:32.480 --> 08:35.000
It's going to take a reference to the model and the view.

08:35.030 --> 08:42.500
Remember, model is dumb data storage and view is dumb rendering to the user and taking input from the

08:42.500 --> 08:43.160
user.

08:44.030 --> 08:51.500
And down here, all I'm going to do is say, Hey, left view, any time the user clicks that increment

08:51.500 --> 08:53.390
button, let me hear about it.

08:54.140 --> 08:59.300
Then down here, when I handle that, anytime you've clicked the button and we've heard about it, I

08:59.300 --> 09:00.960
just update the view.

09:00.980 --> 09:01.530
Sorry.

09:01.550 --> 09:02.660
Update the model.

09:02.720 --> 09:05.330
So by adding that value there.

09:06.020 --> 09:08.330
Now let's take a look at the right.

09:11.730 --> 09:13.410
What I say to Ray Mini.

09:13.650 --> 09:15.240
So here I am with this.

09:15.240 --> 09:16.140
Here we back here.

09:16.140 --> 09:20.160
So the left, when we saw takes the click and updates the model.

09:20.400 --> 09:22.050
Now let's look at the right one.

09:22.050 --> 09:26.160
So it's going to store the right view in the context same as before.

09:26.190 --> 09:28.320
Now it's going to do something a little bit different.

09:28.500 --> 09:35.940
Instead of creating its own model, it's going to say, Hey, context, do you already have a model

09:35.940 --> 09:37.560
with this particular name?

09:37.560 --> 09:40.530
And we know we do because the left one just created it.

09:40.530 --> 09:46.770
And here we're going to say, hey, right view, here's your context in case you want to listen to that

09:46.770 --> 09:48.510
universal shared context.

09:48.510 --> 09:50.550
And then we create the right controller.

09:50.670 --> 09:51.810
Let's take a look at that.

09:52.710 --> 09:57.120
Now the right controller here is going to.

09:58.880 --> 10:04.550
Now remember, the left controller said, hey, user did did the user click the button?

10:04.640 --> 10:08.300
This one says, Hey, model, did the model change?

10:08.690 --> 10:13.550
And then down here, if the model changes, it's going to send out a command.

10:14.530 --> 10:23.560
So we've got different examples about how command is useful and how you can talk directly to the model.

10:24.160 --> 10:29.920
So some throughout these demos, as you're looking at them, you'll often see I have different options

10:29.920 --> 10:31.180
that are communicated.

10:33.720 --> 10:37.500
So here in this demo, what we're doing is invoking a command.

10:37.530 --> 10:46.380
Now, in in the series, if you look at commands, you can think of a command is a reusable set of instructions

10:46.380 --> 10:48.870
that sent through the context.

10:48.870 --> 10:54.350
And any concern that wants to can say, Hey, I want to hear any time that command happens.

10:54.360 --> 10:58.140
And in this case, I'm invoking the counter changed command.

10:58.140 --> 11:01.500
And if any of the contexts want to hear about that, they can.

11:02.010 --> 11:03.500
So that's it for this demo.

11:03.510 --> 11:05.550
Let's take a one more look at just running it.

11:06.990 --> 11:10.080
So again, the left side here takes the input.

11:10.080 --> 11:15.240
I'll click the increment button one, two, three and the right side renders the output.

11:15.240 --> 11:19.170
So it's going to show the value of the model on the right.

11:20.230 --> 11:20.950
That's it.
