WEBVTT

00:00.410 --> 00:03.080
Hello and welcome to Artificial Intelligence.

00:03.080 --> 00:07.700
Here we're using artificial intelligence to help us create unit testing code.

00:07.700 --> 00:12.530
Now, incorporating AI into game development can streamline development and testing.

00:12.530 --> 00:17.480
Some of the benefits are included here, and we're going to focus on automated testing.

00:17.780 --> 00:23.060
AI can rapidly identify and fix your bugs, and it can reduce test creation time.

00:23.060 --> 00:28.580
Now, the traditional approach without any AI would be to create your production code.

00:28.580 --> 00:34.040
And then if you're going to embrace unit testing to manually create those tests as you go.

00:34.070 --> 00:40.430
We've seen in the previous video how AI can help us create our production code for some or all of a

00:40.430 --> 00:41.060
game system.

00:41.060 --> 00:47.000
Now let's take a look at how AI can help us automate the process of creating our unit testing.

00:47.000 --> 00:52.160
We have an existing chat GPT chat, open with how we created the production code.

00:52.160 --> 00:58.070
Now it's very important that I continue within this exact same chat when I begin to ask the next questions

00:58.070 --> 00:59.450
about unit testing.

01:00.370 --> 01:06.670
If, for example, I wanted to create a brand new chat here, I would need to reintroduce the context,

01:06.670 --> 01:12.190
perhaps saying, hey, can you create me unit testing for this class and then paste in the class or

01:12.190 --> 01:13.440
classes that are related?

01:13.450 --> 01:16.030
But because we've already got context here, I'll use this.

01:16.030 --> 01:23.680
So from the previous section, the I created us an example here of using a product manager class, adding

01:23.680 --> 01:24.820
some products to it.

01:24.820 --> 01:31.390
You could imagine this being a product being sold in a game store, or an NPC character who has a shop

01:31.390 --> 01:35.590
that perhaps gives you items or puts them in your inventory, something like that.

01:35.590 --> 01:40.870
And above that, in the same chat we have the I create us the product manager itself.

01:40.870 --> 01:44.490
So the product manager has created an I and the example on top of it.

01:44.500 --> 01:46.680
Now let's ask it to give us some tests.

01:46.690 --> 01:51.880
What I'm going to do is paste in an edit mode test that I already have so that it knows the namespace

01:51.880 --> 01:56.200
and naming that I like, and then ask it to fill that with relevant tests.

01:56.200 --> 01:57.700
Let's see how it goes here.

01:57.700 --> 02:02.080
Inside unity I've got an I test and I playmode test.

02:02.110 --> 02:04.660
Let's just do the edit mode test here.

02:04.660 --> 02:05.740
So here it is.

02:05.740 --> 02:09.610
Here we can see it's got one test called my test.

02:09.640 --> 02:11.620
We open up the source code and we see it here.

02:11.620 --> 02:13.480
It's got the namespace that I like.

02:13.480 --> 02:16.090
It's got usings I assume the category.

02:16.090 --> 02:21.640
So rather than asking ChatGPT to create us something from complete scratch, I'm going to give it this

02:21.640 --> 02:22.180
here.

02:24.160 --> 02:26.620
I think I'll get rid of the naming here.

02:27.370 --> 02:29.290
So that I don't suggest that part.

02:29.320 --> 02:32.710
So back here in ChatGPT, I'm going to say great.

02:32.740 --> 02:40.150
Now I want unit testing on top of the product Manager class.

02:40.600 --> 02:49.540
Create a new response with one test class with one or more test methods.

02:52.090 --> 02:54.490
Start with this code.

02:55.490 --> 02:57.050
Let's take a look at the response.

02:57.050 --> 03:02.630
To create unit tests for the Product Manager class, you can use any unit a popular testing framework

03:02.630 --> 03:02.780
for.

03:02.990 --> 03:03.500
Net.

03:03.530 --> 03:05.930
Below is an example of the test class.

03:07.070 --> 03:13.730
We can see that it used the namespace, the comments, the category test name, all things that I gave

03:13.730 --> 03:14.060
it.

03:14.090 --> 03:16.850
Then it does the rest on its own.

03:16.880 --> 03:19.880
Now one thing I notice is that it's creating one.

03:20.900 --> 03:26.270
It's creating one variable here that is going to populate in the setup and maybe tear down later.

03:26.270 --> 03:27.800
Actually, it doesn't do the tear down.

03:28.100 --> 03:33.470
Then here what it does in each of the tests is it uses the arrange, act and assert, which happens

03:33.470 --> 03:35.090
to match my particular preference.

03:35.090 --> 03:41.390
So I like that it was just guessing that based on popularity as a general solution there, if somehow

03:41.390 --> 03:45.140
I had a different way that I wanted to go about this, I could instruct that.

03:45.140 --> 03:46.550
But I like that so far.

03:46.550 --> 03:52.970
So it sets up the test product, it adds the product, and then it makes sure that the get product returns

03:52.970 --> 03:54.410
that particular product.

03:54.410 --> 03:55.760
So that looks good.

03:55.760 --> 03:57.740
Then it tests how to remove a product.

03:57.740 --> 04:01.100
So it goes to create a product and add it.

04:01.100 --> 04:06.170
Then to remove it, then to make sure that it actually worked there.

04:06.170 --> 04:11.540
And that it does not have that product in it like that.

04:11.570 --> 04:13.790
Get products, returns all products.

04:13.790 --> 04:16.130
So it does two and it knows two.

04:16.130 --> 04:21.230
Now, this would be a great step for me to paste this into unity and make sure it works.

04:21.230 --> 04:22.280
I'm going to do that.

04:22.280 --> 04:27.800
And then I'll come back and think, is there another test that it could add, or is there some refactor

04:27.800 --> 04:30.500
to the code that we could do just to play with it a little bit more?

04:30.500 --> 04:31.820
But I like where this is going.

04:31.820 --> 04:33.200
So let's paste this into unity.

04:33.230 --> 04:37.820
Save it inside unity looks like it compiles and inside unity looks like it's running.

04:37.820 --> 04:38.990
Let's run the test.

04:40.910 --> 04:42.200
All the tests pass.

04:42.230 --> 04:43.010
Now.

04:43.730 --> 04:45.590
The test names that it gave us.

04:45.590 --> 04:45.890
Great.

04:45.890 --> 04:51.110
It doesn't happen to match my particular style and I can decide at this point, adopt what gives me

04:51.110 --> 04:52.730
or suggest a difference.

04:52.730 --> 04:58.040
So just to play with the idea here, I'm going to suggest that use a slightly different naming scheme.

04:58.040 --> 05:01.610
But I love the test that gave me and I love that they all pass.

05:01.610 --> 05:03.530
So we're doing really good so far.

05:03.530 --> 05:08.390
Let's go back and just play with the idea of giving some small suggestion and see it iterate one more

05:08.390 --> 05:08.780
time.

05:08.780 --> 05:11.900
So let's tell it what works great.

05:11.900 --> 05:16.960
That works and compiles and all tests pass.

05:16.970 --> 05:25.790
However, I don't like the test method naming, so please change from the format of add product.

05:25.790 --> 05:28.880
Add products to list to a new format like Add product.

05:28.910 --> 05:32.510
Get products contains product when product added.

05:33.080 --> 05:38.930
I generally like to follow something like the method under test the expected result, and then when

05:38.930 --> 05:43.970
this particular thing happens, sometimes the naming gets a little bit long as shown here.

05:43.970 --> 05:45.650
Sometimes it's not the clearest.

05:45.650 --> 05:47.240
It really depends on the context.

05:47.240 --> 05:52.100
But moreover, what I'm showing here is that I like most of what ChatGPT gave me.

05:52.100 --> 05:53.990
But I want to suggest a change.

05:53.990 --> 05:57.200
So let's just play with this as the change and see what result we get.

05:57.230 --> 05:58.520
Let's take a look at the result.

05:58.520 --> 06:01.040
It says certainly renaming looks good.

06:01.070 --> 06:06.110
It mentions that it's inferring method, name, condition, expected result.

06:06.230 --> 06:09.530
I actually think expected result then condition.

06:09.530 --> 06:11.660
But let's take a look at the results here.

06:11.660 --> 06:14.270
So again I admit this is pretty long.

06:14.270 --> 06:18.170
But add product get products contains the product.

06:18.170 --> 06:20.480
When the product is added, great.

06:20.510 --> 06:21.710
Here's an even longer one.

06:21.710 --> 06:23.240
Get product does not.

06:23.270 --> 06:28.100
Now you could argue that this isn't the best naming scheme, which as I'm seeing this long name here,

06:28.100 --> 06:32.690
I'm thinking, hey, maybe it's not a good one, but what we've seen is that we're able to bounce back

06:32.690 --> 06:37.790
and forth and give a little bit of a suggestion and see that ChatGPT works well.

06:37.790 --> 06:41.300
So we'll copy this into the unity and see how it works.

06:41.300 --> 06:42.110
So here we are.

06:42.110 --> 06:42.800
It's in unity.

06:42.800 --> 06:43.520
It's compiled.

06:43.520 --> 06:44.810
And let's run the tests.

06:47.350 --> 06:48.850
And everything looks good there.

06:48.850 --> 06:54.490
So we've seen a fantastic use case of artificial intelligence, not just to make production code as

06:54.490 --> 06:59.200
we did in the earlier lesson, but also to create new unit tests on top of that production code.

06:59.200 --> 07:05.440
Here, at least in our simple demo, we've seen unity compiled the code every single time with no problems,

07:05.440 --> 07:07.350
and all of our tests passed.

07:07.360 --> 07:11.110
If you would find that the code didn't compile, you could tell ChatGPT.

07:11.410 --> 07:16.720
Hey, that was pretty good, but I got this error and you would be helping to educate it and give you

07:16.720 --> 07:17.590
a better answer.

07:17.590 --> 07:19.000
We didn't need to do that here.

07:19.000 --> 07:24.460
Also, if some or all of the tests failed, you could tell unity that I generally don't see that the

07:24.460 --> 07:26.350
tests fail, but it is possible.

07:26.350 --> 07:27.490
So that's it here.

07:27.490 --> 07:31.000
We've seen a fantastic use case for AI in unit testing.

07:31.030 --> 07:31.750
Thanks.
